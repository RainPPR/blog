{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u00b6 \u8fd9\u91cc\u662f RainPPR's Blog \uff01 \u00b6 \u672c\u9879\u76ee\u53d7 CTF Wiki \u3001 OI Wiki \u7684\u542f\u53d1\uff0c\u5728\u7f16\u5199\u8fc7\u7a0b\u4e2d\u53c2\u8003\u4e86\u8bf8\u591a\u8d44\u6599\uff0c\u5728\u6b64\u4e00\u5e76\u81f4\u8c22\u3002 \u53ef\u4ee5\u5728 vscode.dev \u4e0a\u8fdb\u884c\u7f16\u8f91\u3002 \u5495\u5495\u5495\uff0c\u5728\u673a\u623f\u53ef\u4ee5\u7528 https://vscode.dev/github/RainPPR/blog?vscode-lang=zh-cn \u7f16\u8f91\uff08\u4e5f\u8bb8\uff09\u3002 \u55b5\u55b5\u55b5\u3002","title":"\u7b80\u4ecb"},{"location":"#_1","text":"","title":"\u7b80\u4ecb"},{"location":"#rainpprs-blog","text":"\u672c\u9879\u76ee\u53d7 CTF Wiki \u3001 OI Wiki \u7684\u542f\u53d1\uff0c\u5728\u7f16\u5199\u8fc7\u7a0b\u4e2d\u53c2\u8003\u4e86\u8bf8\u591a\u8d44\u6599\uff0c\u5728\u6b64\u4e00\u5e76\u81f4\u8c22\u3002 \u53ef\u4ee5\u5728 vscode.dev \u4e0a\u8fdb\u884c\u7f16\u8f91\u3002 \u5495\u5495\u5495\uff0c\u5728\u673a\u623f\u53ef\u4ee5\u7528 https://vscode.dev/github/RainPPR/blog?vscode-lang=zh-cn \u7f16\u8f91\uff08\u4e5f\u8bb8\uff09\u3002 \u55b5\u55b5\u55b5\u3002","title":"\u8fd9\u91cc\u662f RainPPR's Blog\uff01"},{"location":"basic/prefix/","text":"\u524d\u7f00\u548c\u53ca\u5dee\u5206 \u00b6 \u524d\u7f00\u548c \u00b6 \u4e00\u7ef4\u524d\u7f00\u548c \u00b6 \u5b9a\u4e49 \u00b6 \u4e00\u7ef4\u524d\u7f00\u548c\uff0c\u5c31\u662f\u6570\u7ec4\u524d\u82e5\u5e72\u9879\u7684\u548c\u3002 \u6211\u4eec\u5bf9\u4e8e\u524d\u7f00\u548c\u6570\u7ec4\u7684\u5b9a\u4e49\u975e\u5e38\u5e7f\u6cdb\uff0c \u4f8b\u5982\u5b9a\u4e49 \\(S(x)\\) \u8868\u793a\u6570\u7ec4 \\(A(x)\\) \u7684\u524d\u7f00\u548c\uff0c \u5b9a\u4e49 \\(A(l,r)\\) \u8868\u793a \\(A(l)+A(l+1)+\\dots+A(r)\\) \uff0c \\(S(x)=A(0,x)\\) \uff1b \\(S(x)=A(1,x)\\) \uff1b \\(S(x)=A(1,x-1)\\) \uff1b \\(S(x)=A(0,x-1)\\) \u3002 \u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u4e00\u822c\u7528\u524d\u4e24\u4e2a\u3002 \u5b9e\u73b0 \u00b6 \u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u7528\uff0c \\[ S(x)=\\sum_{i=1}^xA(i) \\] \u8868\u793a\u524d\u7f00\u548c\uff0c\u90a3\u4e48\u6709\u9012\u63a8\u5f0f\uff0c \\[ S(x)=S(x-1)+A(x),S(0)=0 \\] \u8fd9\u662f\u663e\u7136\u7684\u3002 C++ \u8bed\u8a00\u4e2d\u81ea\u5e26\u7684\u524d\u7f00\u548c\u51fd\u6570\u4e3a std::partial_sum \uff0c \u5f62\u5982\uff1a partial_sum(begin, end, dist) \uff0c \u8868\u793a [begin, end) \u7684\u524d\u7f00\u548c\u653e\u5728 dist \u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c \u8fd4\u56de\u7ec8\u6b62\u8fed\u4ee3\u5668\u3002 \u5b9e\u73b0 1 \u5b9e\u73b0 2 \u5b9e\u73b0 3 \u5b9e\u73b0 4 \u6700\u7ecf\u5178\u7684\u65b9\u6cd5\uff0c for (int i = 1; i <= n; ++i) S[i] = S[i - 1] + A[i]; \u8fd9\u79cd\u65b9\u6cd5\u4f1a\u4fdd\u7559\u539f\u6570\u7ec4\u7684\u5185\u5bb9\u3002 \u6211\u4eec\u5728\u539f\u6570\u7ec4\u76f4\u63a5\u8fdb\u884c\u64cd\u4f5c\uff0c for (int i = 1; i <= n; ++i) A[i] += A[i - 1]; \u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4f1a\u4fdd\u7559\u539f\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u7701\u7a7a\u95f4\u3002 \u51b7\u77e5\u8bc6\uff0c for (int i = 1; i < n; ++i) A[i + 1] += A[i]; \u7684\u901f\u5ea6\u8981\u6bd4\u524d\u4e00\u4e2a\u7565\u5feb\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u5bf9\u524d\u4e00\u4e2a\u7684\u4f18\u5316\u662f\u4e0d\u5230\u4f4d\u7684\u3002 \u8fd9\u4e2a\u95ee\u9898\u5728 GCC 12 \u4fee\u590d\uff0cNOI-Linux \u4e2d\u7684 GCC 9 \u662f\u672a\u4fee\u590d\u7684\u7248\u672c 1 \u3002 \u4f7f\u7528 STL \u51fd\u6570\uff0c partial_sum(A + 1, A + n + 1, A + 1); \u8fdb\u884c\u539f\u5730\u7684\u524d\u7f00\u548c\u3002 \u5e94\u7528 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u7ef4\u524d\u7f00\u548c\uff0c\u8fdb\u884c\u4e0d\u5e26\u4fee\u7684 \\(\\mathcal O(1)\\) \u533a\u95f4\u6c42\u548c\u3002 \u5177\u4f53\u7684\uff0c \\[ S(l,r)=S(r)-S(l-1) \\] \u8fd9\u662f\u663e\u7136\u7684\u3002 \u53e6\u5916\uff0c\u4fee\u6539\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(n)\\) \uff0c\u4e00\u822c\u4e0d\u4f1a\u4f7f\u7528\u3002 \u5982\u679c\u8981\u4fee\u6539\uff0c\u4e00\u822c\u4f1a\u914d\u5408\u6982\u7387\u76f8\u5173\uff0c \u5982\u679c\u8fdb\u884c \\(m\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4fee\u6539\u7684\u6982\u7387\u662f \\(1/n\\) \uff0c \u90a3\u4e48\u5c31\u53ef\u4ee5\u8fdb\u884c \\(\\mathcal O(n)\\) \u7684\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u6837\u5747\u644a\u7684\u590d\u6742\u5ea6\u4f9d\u65e7\u662f \\(\\mathcal O(m)\\) \u7684\u3002 \u4e8c\u7ef4\u524d\u7f00\u548c \u00b6 \u5b9a\u4e49 \u00b6 \u6211\u4eec\u76f4\u63a5\u53d6\u6bd4\u8f83\u5e38\u89c1\u7684\u5b9a\u4e49\uff0c \\[ S(x,y)=\\sum_{i\\le x}\\sum_{j\\le y}A(i,j) \\] \u51e0\u4f55\u610f\u4e49\u5c31\u662f\uff0c\u5c06\u4e8c\u7ef4\u5e73\u9762\u5212\u5206\u4e3a\u7f51\u683c\uff0c\u5efa\u7acb\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u3002 \u90a3\u4e48\uff0c\u5176\u524d\u7f00\u548c\u5e73\u9762\u7684\u6bcf\u4e00\u4e2a\u70b9\u8868\u793a\u7684\u5c31\u662f\uff0c \u4ece\u539f\u70b9\uff08\u6b64\u5904\u662f \\((1,1)\\) \uff09\u5230\u8fd9\u4e2a\u70b9\u7684\u77e9\u5f62\u7684\u6743\u503c\u548c\u3002 \u5b9e\u73b0 \u00b6 \u90a3\u4e48\u53ef\u4ee5\u5bb9\u65a5\u89e3\u51b3\uff0c \\[ S(x,y)=A(x,y)+S(x-1,y)+S(x,y-1)-S(x-1,y-1) \\] \u8fd9\u4e48\u505a\u662f\u6700\u76f4\u89c2\u7684\u3002 \u5e94\u7528 \u00b6 \u4e0d\u5e26\u4fee\u5b50\u533a\u95f4\u6c42\u548c\u95ee\u9898\uff0c\u5177\u4f53\u7684\uff0c \\[ S(a,b,c,d)=S(c,d)-S(c,b-1)-S(a-1,d)+S(a-1,b-1) \\] \u540c\u6837\u4fee\u6539\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n^2)\\) \u7684\u91cd\u6784\u3002 \u9ad8\u7ef4\u524d\u7f00\u548c \u00b6 \u5b9a\u4e49 \u00b6 \u4ee3\u6570\u8868\u793a\u4e3a\uff0c \\[ S(x_1,x_2\\dots,x_k)=\\sum_{i_1\\le x_2}\\sum_{i_2\\le x_2}\\dots\\sum_{i_k\\le x_k}A(i_1,i_2,\\dots,i_k) \\] \u4e00\u822c\u53ea\u6709\u4e09\u7ef4\u524d\u7f00\u548c\u662f\u5177\u6709\u76f4\u89c2\u7684\u51e0\u4f55\u610f\u4e49\u7684\uff0c\u4f46\u662f\u6211\u4eec\u4e5f\u4e0d\u53bb\u8ba8\u8bba\u3002 \u5b9e\u73b0 \u00b6 \u5047\u8bbe\u6211\u4eec\u8981\u6c42\u8fb9\u957f\u4e3a \\(n\\) \u7684 \\(k\\) \u7ef4\u8d85\u6b63\u65b9\u4f53\u7684\u524d\u7f00\u548c\uff0c \u90a3\u4e48\uff0c\u5982\u679c\u7ee7\u7eed\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\uff0c\u590d\u6742\u5ea6\u5c06\u662f \\(\\mathcal O(n^k2^k)\\) \u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u9879\u6570\u4e3a \\(2^k\\) \u7684\u3002 \u8fd9\u663e\u7136\u662f\u96be\u4ee5\u63a5\u53d7\u7684\uff08\u5728 \\(3\\) \u7ef4\u4e2d\u5c31\u6709 \\(8\\) \u9879\uff0c\u8fd9\u662f\u5f88\u6050\u6016\u7684\uff09\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7c7b\u4f3c DP \u7684\u6c42\u89e3\u9ad8\u7ef4\u524d\u7f00\u548c\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u4e0b\u9762\u4ec5\u4ee5 \\(3\\) \u7ef4\u4e3a\u4f8b\u3002 \u6211\u4eec\u5148\u679a\u4e3e\u6bcf\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u7ef4\u5ea6\u4e0b\u8fdb\u884c\u524d\u7f00\u548c\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u662f \\(\\mathcal O(n^kk)\\) \u7684\u3002 \u5c3d\u7ba1\u8fd9\u4e2a\u590d\u6742\u5ea6\u4f9d\u7136\u5f88\u5927\uff0c\u4f46\u662f\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5f88\u5c11\u8ba8\u8bba \\(4\\) \u7ef4\u4ee5\u4e0a\u7684\u524d\u7f00\u548c\uff0c\u56e0\u6b64\u8fd8\u662f\u51d1\u5408\u7684\u3002 \u677f\u5b50\u9898\uff1a AtCoder - abc366_d - Cuboid Sum Query \u3002 \u5b9e\u73b0 // \u8bfb\u5165 for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) for (int k = 1; k <= n; ++k) cin >> s[i][j][k]; // \u5c06\u7b2c\u4e00\u7ef4\u524d\u7f00\u548c for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) for (int k = 1; k <= n; ++k) s[i][j][k] += s[i - 1][j][k]; // \u5c06\u7b2c\u4e8c\u7ef4\u524d\u7f00\u548c for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) for (int k = 1; k <= n; ++k) s[i][j][k] += s[i][j - 1][k]; // \u5c06\u7b2c\u4e09\u7ef4\u524d\u7f00\u548c for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) for (int k = 1; k <= n; ++k) s[i][j][k] += s[i][j][k - 1]; \u5e94\u7528 \u00b6 \u9ad8\u7ef4\u5b50\u8d85\u7acb\u65b9\u4f53\u6c42\u548c\uff0c\u6211\u4eec\u53d1\u73b0\u5f0f\u5b50\u4f1a\u5f88\u590d\u6742\uff0c \u4e8e\u662f\u6211\u4eec\u4f9d\u7136\u7c7b\u4f3c DP \u7684\uff0c\u5c06\u6bcf\u4e00\u4e2a\u7ef4\u5ea6\u62c6\u5206\u8003\u8651\u3002 \u5b9e\u73b0 \u4f9d\u65e7\u4ee5\u4e0a\u4e00\u9898\u7684\u4e09\u7ef4\u4e3a\u4f8b\uff0c\u6211\u4eec\u4f7f\u7528 C++ \u7684\u51fd\u6570\u91cd\u8f7d\u7279\u6027\uff0c int query(int x, int y, int z) { return s[x][y][z]; } // \u62c6\u5206\u7b2c\u4e09\u7ef4 int query(int x, int y, int lz, int rz) { return query(x, y, rz) - query(x, y, lz - 1); } // \u62c6\u5206\u7b2c\u4e8c\u7ef4 int query(int x, int ly, int ry, int lz, int rz) { return query(x, ry, lz, rz) - query(x, ly - 1, lz, rz); } // \u62c6\u5206\u7b2c\u4e00\u7ef4 int query(int lx, int rx, int ly, int ry, int lz, int rz) { return query(rx, ly, ry, lz, rz) - query(lx - 1, ly, ry, lz, rz); } \u8fd9\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\u3002 \u5dee\u5206 \u00b6 \u4e00\u7ef4\u5dee\u5206 \u00b6 \u5b9a\u4e49 \u00b6 \u6211\u4eec\u5b9a\u4e49 \\(D\\) \u4e3a \\(A\\) \u7684\u5dee\u5206\uff0c\u5373\uff0c \\[ D(x)=A(x)-A(x-1) \\] \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(A[1,n]\\) \uff0c\u6709\uff0c \\[ D(x)=\\begin{cases} A(x)-A(x-1)&x\\in[2,n]\\\\ A(x)&x=1 \\end{cases} \\] \u6027\u8d28\uff1a \u6570\u7ec4 \\(A\\) \u7684\u524d\u7f00\u548c \\(S\\) \u7684\u5dee\u5206\u662f \\(A\\) \uff1b \u6570\u7ec4 \\(A\\) \u7684\u5dee\u5206 \\(D\\) \u7684\u524d\u7f00\u548c\u662f \\(A\\) \u3002 \u5373\uff0c\u5dee\u5206\u4e0e\u524d\u7f00\u548c\u4e92\u4e3a\u9006\u8fd0\u7b97\u3002 \u6784\u9020\u6027\u7684\u7406\u89e3 \u6211\u4eec\u6784\u9020\u5dee\u5206\u6570\u7ec4\u7684\u8fc7\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u6027\u7684\u6765\u770b\uff1a \u6211\u4eec\u77e5\u9053\u6570\u7ec4 \\(A\\) \uff0c\u6c42\u4e00\u4e2a\u6570\u7ec4 \\(D\\) \u4f7f\u5f97 \\(D\\) \u7684\u524d\u7f00\u548c\u662f \\(A\\) \u3002 \u8003\u8651 \\(A(x)\\) \u7684\u6240\u6709\u8d21\u732e\uff0c\u53d1\u73b0\u6211\u4eec\u8fdb\u884c\u524d\u7f00\u548c\u7684\u65f6\u5019\u5c31\u4f1a\u5bf9\u5b83\u53ca\u5176\u540e\u9762\u6240\u6709\u6570\u9020\u6210\u8d21\u732e\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u4e8e \\(A(x)\\) \uff0c\u8fdb\u884c\u64cd\u4f5c\uff0c \\[ \\begin{aligned} D(x)&\\gets D(x)+A(x)\\\\ D(x+1)&\\gets D(x+1)-A(x) \\end{aligned} \\] \u90a3\u4e48\u8fdb\u884c\u524d\u7f00\u548c\u7684\u65f6\u5019\u5c31\u4f1a\u6d88\u53bb\u591a\u4f59\u7684\u8d21\u732e\u4e86\u3002 \u7136\u540e\u518d\u53cd\u8fc7\u6765\u8003\u8651\u6bcf\u4e00\u4e2a \\(D(x)\\) \u53d7\u5230\u4e86\u4ec0\u4e48\u8d21\u732e\uff0c\u5bb9\u6613\u53d1\u73b0\u5c31\u662f\uff0c \\[ D(x)=A(x)-A(x-1) \\] \u8fd9\u5c31\u662f\u4e00\u79cd\u6784\u9020\u6027\u7684\u7406\u89e3\u3002 C++ \u4e2d\u4e5f\u6709\u5dee\u5206\u7684\u51fd\u6570 std::adjacent_difference \uff0c \u5f62\u5982\uff1a adjacent_difference(begin, end, dist) \uff0c \u8868\u793a [begin, end) \u5bf9\u76f8\u90bb\u4e24\u9879\u7684\u5dee\u503c\uff0c \u653e\u5728 dist + 1 \u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u7ec8\u6b62\u8fed\u4ee3\u5668\u3002 \u5e94\u7528 \u00b6 \u7c7b\u4f3c\u4e0a\u6587\u6784\u9020\u6027\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5dee\u5206\u6570\u7ec4\uff0c\u8fdb\u884c \\(\\mathcal O(1)\\) \u7684\u533a\u95f4\u52a0\uff0c \\(\\mathcal O(n)\\) \u7684\u5355\u70b9\u67e5\u8be2\uff1a \u5bf9 \\([l,r]\\) \u52a0\u4e0a \\(x\\) \uff1a\u4ee4 \\(D(l)\\gets D(l)+x,D(r+1)\\gets D(r+1)-x\\) \uff1b \u67e5\u8be2\uff1a\u5bf9\u6570\u7ec4\u8dd1\u4e00\u904d\u524d\u7f00\u548c\uff0c\u53d1\u73b0\u591a\u4f59\u7684\u8d21\u732e\u90fd\u88ab\u6d88\u9664\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u3002 \u4e8c\u7ef4\u5dee\u5206 \u00b6 \u5b9a\u4e49 \u00b6 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49 \\(D\\) \u4e3a \\(A\\) \u7684\u4e8c\u7ef4\u5dee\u5206\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(D\\) \u7684\u4e8c\u7ef4\u524d\u7f00\u548c\u4e3a \\(A\\) \u3002 \u8003\u8651\u6784\u9020\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u9700\u8981\u4ee4\uff0c \\[ \\begin{aligned} D(x,y)&\\gets D(x,y)+A(x,y)\\\\ D(x+1,y)&\\gets D(x+1,y)-A(x,y)\\\\ D(x,y+1)&\\gets D(x,y+1)-A(x,y)\\\\ D(x+1,y+1)&\\gets D(x+1,y+1)+A(x,y) \\end{aligned} \\] \u8fd9\u6837\u5b50\u5c31\u662f\u6b63\u786e\u7684\u3002 \u5e94\u7528 \u00b6 \u7c7b\u4f3c\u4e00\u7ef4\uff0c\u53ef\u4ee5\u8fdb\u884c \\(\\mathcal O(1)\\) \u7684\u5b50\u77e9\u9635\u52a0\uff0c \\(\\mathcal O(n^2)\\) \u7684\u5355\u70b9\u67e5\u8be2\u3002 \u5177\u4f53\u7565\u3002 \u6811\u4e0a\u95ee\u9898 \u00b6 \u4e00\u822c\u8ba8\u8bba\u70b9\u6743\u548c\u8fb9\u6743\u3002 \u5bf9\u4e8e\u8fb9\u6743\u901a\u5e38\u6bd4\u8f83\u96be\u5904\u7406\uff0c\u4f1a\u4e0b\u65b9\u5230\u70b9\u6743\uff0c\u4e0b\u6587\u6240\u8bf4\u8fb9\u6743\u5747\u4e3a\u4e0b\u653e\u5230\u70b9\u6743\u540e\u7684\u3002 \u6811\u4e0a\u524d\u7f00\u548c \u00b6 \u8bbe \\(S(u)\\) \u8868\u793a\u4ece\u6839\u5230\u8282\u70b9 \\(u\\) \u7ecf\u8fc7\u7684\u6240\u6709\u6743\u503c\u548c\u3002 \u8bbe \\(S(x,y)\\) \u8868\u793a \\(x\\to y\\) \u8def\u5f84\u4e0a\u7684\u6743\u503c\u548c\uff0c \u82e5\u662f\u70b9\u6743\uff0c \\(S(x,y)=S(x)+S(y)-S(\\mathrm{LCA})-S(\\mathrm{fa_{LCA}})\\) \uff1b \u82e5\u662f\u8fb9\u6743\uff0c \\(S(x,y)=S(x)+S(y)-2S(\\mathrm{LCA})\\) \u3002 \u6811\u4e0a\u5dee\u5206 \u00b6 \u6811\u4e0a\u5dee\u5206\u53ef\u4ee5\u7528\u4e8e\u5728\u6811\u4e0a\u5feb\u901f\u4fee\u6539\u7136\u540e\u7edf\u4e00\u67e5\u8be2\u3002 \u4e00\u822c\u6211\u4eec\u4f1a\u5bf9\u4e00\u6761\u94fe\u8fdb\u884c\u64cd\u4f5c\uff0c\u5047\u8bbe\u6211\u4eec\u5bf9 \\(x\\to y\\) \u8def\u5f84\u4e0a\u7684\u6743\u503c\u8fdb\u884c\u4fee\u6539\uff0c \u82e5\u662f\u70b9\u6743\uff0c\u6211\u4eec\u5bf9 \\(x,y\\) \u52a0 \\(1\\) \u500d\uff0c\u5bf9 \\(\\mathrm{LCA}\\) \u51cf \\(1\\) \u500d\uff0c\u5bf9 \\(\\mathrm{fa_{LCA}}\\) \u51cf \\(1\\) \u500d\u5373\u53ef\u3002 \u82e5\u662f\u8fb9\u6743\uff0c\u6211\u4eec\u5bf9 \\(x,y\\) \u52a0 \\(1\\) \u500d\uff0c\u5bf9 \\(\\mathrm{LCA}\\) \u51cf \\(2\\) \u500d\u5373\u53ef\u3002 \u5176\u4ed6\u524d\u7f00 \u00b6 \u524d\u7f00\u79ef \u00b6 \u6211\u4eec\u8bbe\uff0c \\[ P(x)=\\prod_{i=1}^xA(i) \\] \u524d\u7f00\u79ef\u4e00\u822c\u662f\u6ee1\u8db3\u53ef\u5dee\u5206\u6027\u7684\uff0c\u4f46\u662f\u53d6\u6a21\u540e\u5c31\u4e0d\u4e00\u5b9a\u4e86\u3002 \u4f8b\u5982\uff0c\u5728\u67d0\u4e00\u5904\u7684\u524d\u7f00\u79ef\u5173\u4e8e\u6a21\u6570\u4e0d\u5b58\u5728\u4e58\u6cd5\u9006\u5143\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u53ea\u8ba8\u8bba\u6ee1\u8db3\u53ef\u5dee\u5206\u6027\u7684\uff0c\u90a3\u4e48\u6709\uff0c \\[ P(l,r)=\\frac{P(r)}{P(l-1)} \\] \u7279\u6b8a\u7684\uff0c\u6211\u4eec\u5b9a\u4e49 \\(P(0)=1\\) \u3002 \u53ef\u4ee5\u7528\u4e8e\u6c42\u4e00\u6bb5\u533a\u95f4\u7684\u4e58\u79ef\uff0c\u4f46\u662f\u4e0d\u5e38\u7528\uff0c\u56e0\u4e3a\u4e58\u5927\u4e86\u81ea\u7136\u9700\u8981\u53d6\u6a21\u3002 \u524d\u7f00\u6700\u5927\u6700\u5c0f\u503c \u00b6 \u4ee5\u6700\u5927\u503c\u4e3a\u4f8b\u3002 \u6211\u4eec\u8bbe\uff0c \\[ M(x)=\\max_{i=1}^xA(i) \\] \u8fd9\u663e\u7136\u4e0d\u6ee1\u8db3\u53ef\u5dee\u5206\u6027\uff0c\u56e0\u6b64\u4e0d\u80fd\u6c42\u533a\u95f4\u7684\u7ed3\u679c\u3002 \u4f46\u662f\u4f9d\u7136\u5e94\u7528\u5f88\u5e7f\u6cdb\u3002 \u524d\u7f00\u5f02\u6216\u548c \u00b6 \u6211\u4eec\u8bbe\uff0c \\[ R(x)=\\bigoplus_{i=1}^xA(i) \\] \u5176\u4e2d \\(\\oplus\\) \u8fd0\u7b97\u7b26\u8868\u793a\u6309\u4f4d\u5f02\u6216 \\(\\operatorname{xor}\\) \u8fd0\u7b97\u3002 \u6ce8\u610f\u5230\u8fd9\u662f\u6ee1\u8db3\u53ef\u5dee\u5206\u6027\u7684\uff0c\u56e0\u4e3a \\(x\\operatorname{xor}x=0\\) \uff0c\u56e0\u6b64\uff0c \\[ R(l,r)=R(r)\\bigoplus R(l-1) \\] \u8fd9\u4e2a\u4e5f\u5b58\u5728\u5e94\u7528\u3002 \u8fd8\u6709\u4e00\u4e9b\u597d\u73a9\u7684\u8be6\u89c1\u5f02\u6216\u54c8\u5e0c\u7b97\u6cd5\u3002 \u53c2\u8003 2024 \u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587 \u5b8b\u4f73\u5174\u300a\u8bba\u73b0\u4ee3\u786c\u4ef6\u4e0a\u7684\u5e38\u6570\u4f18\u5316\u300b\u3002 \u21a9","title":"\u524d\u7f00\u548c\u53ca\u5dee\u5206"},{"location":"basic/prefix/#_1","text":"","title":"\u524d\u7f00\u548c\u53ca\u5dee\u5206"},{"location":"basic/prefix/#_2","text":"","title":"\u524d\u7f00\u548c"},{"location":"basic/prefix/#_3","text":"","title":"\u4e00\u7ef4\u524d\u7f00\u548c"},{"location":"basic/prefix/#_4","text":"\u4e00\u7ef4\u524d\u7f00\u548c\uff0c\u5c31\u662f\u6570\u7ec4\u524d\u82e5\u5e72\u9879\u7684\u548c\u3002 \u6211\u4eec\u5bf9\u4e8e\u524d\u7f00\u548c\u6570\u7ec4\u7684\u5b9a\u4e49\u975e\u5e38\u5e7f\u6cdb\uff0c \u4f8b\u5982\u5b9a\u4e49 \\(S(x)\\) \u8868\u793a\u6570\u7ec4 \\(A(x)\\) \u7684\u524d\u7f00\u548c\uff0c \u5b9a\u4e49 \\(A(l,r)\\) \u8868\u793a \\(A(l)+A(l+1)+\\dots+A(r)\\) \uff0c \\(S(x)=A(0,x)\\) \uff1b \\(S(x)=A(1,x)\\) \uff1b \\(S(x)=A(1,x-1)\\) \uff1b \\(S(x)=A(0,x-1)\\) \u3002 \u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u4e00\u822c\u7528\u524d\u4e24\u4e2a\u3002","title":"\u5b9a\u4e49"},{"location":"basic/prefix/#_5","text":"\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u7528\uff0c \\[ S(x)=\\sum_{i=1}^xA(i) \\] \u8868\u793a\u524d\u7f00\u548c\uff0c\u90a3\u4e48\u6709\u9012\u63a8\u5f0f\uff0c \\[ S(x)=S(x-1)+A(x),S(0)=0 \\] \u8fd9\u662f\u663e\u7136\u7684\u3002 C++ \u8bed\u8a00\u4e2d\u81ea\u5e26\u7684\u524d\u7f00\u548c\u51fd\u6570\u4e3a std::partial_sum \uff0c \u5f62\u5982\uff1a partial_sum(begin, end, dist) \uff0c \u8868\u793a [begin, end) \u7684\u524d\u7f00\u548c\u653e\u5728 dist \u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c \u8fd4\u56de\u7ec8\u6b62\u8fed\u4ee3\u5668\u3002 \u5b9e\u73b0 1 \u5b9e\u73b0 2 \u5b9e\u73b0 3 \u5b9e\u73b0 4 \u6700\u7ecf\u5178\u7684\u65b9\u6cd5\uff0c for (int i = 1; i <= n; ++i) S[i] = S[i - 1] + A[i]; \u8fd9\u79cd\u65b9\u6cd5\u4f1a\u4fdd\u7559\u539f\u6570\u7ec4\u7684\u5185\u5bb9\u3002 \u6211\u4eec\u5728\u539f\u6570\u7ec4\u76f4\u63a5\u8fdb\u884c\u64cd\u4f5c\uff0c for (int i = 1; i <= n; ++i) A[i] += A[i - 1]; \u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4f1a\u4fdd\u7559\u539f\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u7701\u7a7a\u95f4\u3002 \u51b7\u77e5\u8bc6\uff0c for (int i = 1; i < n; ++i) A[i + 1] += A[i]; \u7684\u901f\u5ea6\u8981\u6bd4\u524d\u4e00\u4e2a\u7565\u5feb\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u5bf9\u524d\u4e00\u4e2a\u7684\u4f18\u5316\u662f\u4e0d\u5230\u4f4d\u7684\u3002 \u8fd9\u4e2a\u95ee\u9898\u5728 GCC 12 \u4fee\u590d\uff0cNOI-Linux \u4e2d\u7684 GCC 9 \u662f\u672a\u4fee\u590d\u7684\u7248\u672c 1 \u3002 \u4f7f\u7528 STL \u51fd\u6570\uff0c partial_sum(A + 1, A + n + 1, A + 1); \u8fdb\u884c\u539f\u5730\u7684\u524d\u7f00\u548c\u3002","title":"\u5b9e\u73b0"},{"location":"basic/prefix/#_6","text":"\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u7ef4\u524d\u7f00\u548c\uff0c\u8fdb\u884c\u4e0d\u5e26\u4fee\u7684 \\(\\mathcal O(1)\\) \u533a\u95f4\u6c42\u548c\u3002 \u5177\u4f53\u7684\uff0c \\[ S(l,r)=S(r)-S(l-1) \\] \u8fd9\u662f\u663e\u7136\u7684\u3002 \u53e6\u5916\uff0c\u4fee\u6539\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(n)\\) \uff0c\u4e00\u822c\u4e0d\u4f1a\u4f7f\u7528\u3002 \u5982\u679c\u8981\u4fee\u6539\uff0c\u4e00\u822c\u4f1a\u914d\u5408\u6982\u7387\u76f8\u5173\uff0c \u5982\u679c\u8fdb\u884c \\(m\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4fee\u6539\u7684\u6982\u7387\u662f \\(1/n\\) \uff0c \u90a3\u4e48\u5c31\u53ef\u4ee5\u8fdb\u884c \\(\\mathcal O(n)\\) \u7684\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u6837\u5747\u644a\u7684\u590d\u6742\u5ea6\u4f9d\u65e7\u662f \\(\\mathcal O(m)\\) \u7684\u3002","title":"\u5e94\u7528"},{"location":"basic/prefix/#_7","text":"","title":"\u4e8c\u7ef4\u524d\u7f00\u548c"},{"location":"basic/prefix/#_8","text":"\u6211\u4eec\u76f4\u63a5\u53d6\u6bd4\u8f83\u5e38\u89c1\u7684\u5b9a\u4e49\uff0c \\[ S(x,y)=\\sum_{i\\le x}\\sum_{j\\le y}A(i,j) \\] \u51e0\u4f55\u610f\u4e49\u5c31\u662f\uff0c\u5c06\u4e8c\u7ef4\u5e73\u9762\u5212\u5206\u4e3a\u7f51\u683c\uff0c\u5efa\u7acb\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u3002 \u90a3\u4e48\uff0c\u5176\u524d\u7f00\u548c\u5e73\u9762\u7684\u6bcf\u4e00\u4e2a\u70b9\u8868\u793a\u7684\u5c31\u662f\uff0c \u4ece\u539f\u70b9\uff08\u6b64\u5904\u662f \\((1,1)\\) \uff09\u5230\u8fd9\u4e2a\u70b9\u7684\u77e9\u5f62\u7684\u6743\u503c\u548c\u3002","title":"\u5b9a\u4e49"},{"location":"basic/prefix/#_9","text":"\u90a3\u4e48\u53ef\u4ee5\u5bb9\u65a5\u89e3\u51b3\uff0c \\[ S(x,y)=A(x,y)+S(x-1,y)+S(x,y-1)-S(x-1,y-1) \\] \u8fd9\u4e48\u505a\u662f\u6700\u76f4\u89c2\u7684\u3002","title":"\u5b9e\u73b0"},{"location":"basic/prefix/#_10","text":"\u4e0d\u5e26\u4fee\u5b50\u533a\u95f4\u6c42\u548c\u95ee\u9898\uff0c\u5177\u4f53\u7684\uff0c \\[ S(a,b,c,d)=S(c,d)-S(c,b-1)-S(a-1,d)+S(a-1,b-1) \\] \u540c\u6837\u4fee\u6539\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n^2)\\) \u7684\u91cd\u6784\u3002","title":"\u5e94\u7528"},{"location":"basic/prefix/#_11","text":"","title":"\u9ad8\u7ef4\u524d\u7f00\u548c"},{"location":"basic/prefix/#_12","text":"\u4ee3\u6570\u8868\u793a\u4e3a\uff0c \\[ S(x_1,x_2\\dots,x_k)=\\sum_{i_1\\le x_2}\\sum_{i_2\\le x_2}\\dots\\sum_{i_k\\le x_k}A(i_1,i_2,\\dots,i_k) \\] \u4e00\u822c\u53ea\u6709\u4e09\u7ef4\u524d\u7f00\u548c\u662f\u5177\u6709\u76f4\u89c2\u7684\u51e0\u4f55\u610f\u4e49\u7684\uff0c\u4f46\u662f\u6211\u4eec\u4e5f\u4e0d\u53bb\u8ba8\u8bba\u3002","title":"\u5b9a\u4e49"},{"location":"basic/prefix/#_13","text":"\u5047\u8bbe\u6211\u4eec\u8981\u6c42\u8fb9\u957f\u4e3a \\(n\\) \u7684 \\(k\\) \u7ef4\u8d85\u6b63\u65b9\u4f53\u7684\u524d\u7f00\u548c\uff0c \u90a3\u4e48\uff0c\u5982\u679c\u7ee7\u7eed\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\uff0c\u590d\u6742\u5ea6\u5c06\u662f \\(\\mathcal O(n^k2^k)\\) \u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u9879\u6570\u4e3a \\(2^k\\) \u7684\u3002 \u8fd9\u663e\u7136\u662f\u96be\u4ee5\u63a5\u53d7\u7684\uff08\u5728 \\(3\\) \u7ef4\u4e2d\u5c31\u6709 \\(8\\) \u9879\uff0c\u8fd9\u662f\u5f88\u6050\u6016\u7684\uff09\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7c7b\u4f3c DP \u7684\u6c42\u89e3\u9ad8\u7ef4\u524d\u7f00\u548c\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u4e0b\u9762\u4ec5\u4ee5 \\(3\\) \u7ef4\u4e3a\u4f8b\u3002 \u6211\u4eec\u5148\u679a\u4e3e\u6bcf\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u7ef4\u5ea6\u4e0b\u8fdb\u884c\u524d\u7f00\u548c\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u662f \\(\\mathcal O(n^kk)\\) \u7684\u3002 \u5c3d\u7ba1\u8fd9\u4e2a\u590d\u6742\u5ea6\u4f9d\u7136\u5f88\u5927\uff0c\u4f46\u662f\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5f88\u5c11\u8ba8\u8bba \\(4\\) \u7ef4\u4ee5\u4e0a\u7684\u524d\u7f00\u548c\uff0c\u56e0\u6b64\u8fd8\u662f\u51d1\u5408\u7684\u3002 \u677f\u5b50\u9898\uff1a AtCoder - abc366_d - Cuboid Sum Query \u3002 \u5b9e\u73b0 // \u8bfb\u5165 for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) for (int k = 1; k <= n; ++k) cin >> s[i][j][k]; // \u5c06\u7b2c\u4e00\u7ef4\u524d\u7f00\u548c for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) for (int k = 1; k <= n; ++k) s[i][j][k] += s[i - 1][j][k]; // \u5c06\u7b2c\u4e8c\u7ef4\u524d\u7f00\u548c for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) for (int k = 1; k <= n; ++k) s[i][j][k] += s[i][j - 1][k]; // \u5c06\u7b2c\u4e09\u7ef4\u524d\u7f00\u548c for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) for (int k = 1; k <= n; ++k) s[i][j][k] += s[i][j][k - 1];","title":"\u5b9e\u73b0"},{"location":"basic/prefix/#_14","text":"\u9ad8\u7ef4\u5b50\u8d85\u7acb\u65b9\u4f53\u6c42\u548c\uff0c\u6211\u4eec\u53d1\u73b0\u5f0f\u5b50\u4f1a\u5f88\u590d\u6742\uff0c \u4e8e\u662f\u6211\u4eec\u4f9d\u7136\u7c7b\u4f3c DP \u7684\uff0c\u5c06\u6bcf\u4e00\u4e2a\u7ef4\u5ea6\u62c6\u5206\u8003\u8651\u3002 \u5b9e\u73b0 \u4f9d\u65e7\u4ee5\u4e0a\u4e00\u9898\u7684\u4e09\u7ef4\u4e3a\u4f8b\uff0c\u6211\u4eec\u4f7f\u7528 C++ \u7684\u51fd\u6570\u91cd\u8f7d\u7279\u6027\uff0c int query(int x, int y, int z) { return s[x][y][z]; } // \u62c6\u5206\u7b2c\u4e09\u7ef4 int query(int x, int y, int lz, int rz) { return query(x, y, rz) - query(x, y, lz - 1); } // \u62c6\u5206\u7b2c\u4e8c\u7ef4 int query(int x, int ly, int ry, int lz, int rz) { return query(x, ry, lz, rz) - query(x, ly - 1, lz, rz); } // \u62c6\u5206\u7b2c\u4e00\u7ef4 int query(int lx, int rx, int ly, int ry, int lz, int rz) { return query(rx, ly, ry, lz, rz) - query(lx - 1, ly, ry, lz, rz); } \u8fd9\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\u3002","title":"\u5e94\u7528"},{"location":"basic/prefix/#_15","text":"","title":"\u5dee\u5206"},{"location":"basic/prefix/#_16","text":"","title":"\u4e00\u7ef4\u5dee\u5206"},{"location":"basic/prefix/#_17","text":"\u6211\u4eec\u5b9a\u4e49 \\(D\\) \u4e3a \\(A\\) \u7684\u5dee\u5206\uff0c\u5373\uff0c \\[ D(x)=A(x)-A(x-1) \\] \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(A[1,n]\\) \uff0c\u6709\uff0c \\[ D(x)=\\begin{cases} A(x)-A(x-1)&x\\in[2,n]\\\\ A(x)&x=1 \\end{cases} \\] \u6027\u8d28\uff1a \u6570\u7ec4 \\(A\\) \u7684\u524d\u7f00\u548c \\(S\\) \u7684\u5dee\u5206\u662f \\(A\\) \uff1b \u6570\u7ec4 \\(A\\) \u7684\u5dee\u5206 \\(D\\) \u7684\u524d\u7f00\u548c\u662f \\(A\\) \u3002 \u5373\uff0c\u5dee\u5206\u4e0e\u524d\u7f00\u548c\u4e92\u4e3a\u9006\u8fd0\u7b97\u3002 \u6784\u9020\u6027\u7684\u7406\u89e3 \u6211\u4eec\u6784\u9020\u5dee\u5206\u6570\u7ec4\u7684\u8fc7\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u6784\u9020\u6027\u7684\u6765\u770b\uff1a \u6211\u4eec\u77e5\u9053\u6570\u7ec4 \\(A\\) \uff0c\u6c42\u4e00\u4e2a\u6570\u7ec4 \\(D\\) \u4f7f\u5f97 \\(D\\) \u7684\u524d\u7f00\u548c\u662f \\(A\\) \u3002 \u8003\u8651 \\(A(x)\\) \u7684\u6240\u6709\u8d21\u732e\uff0c\u53d1\u73b0\u6211\u4eec\u8fdb\u884c\u524d\u7f00\u548c\u7684\u65f6\u5019\u5c31\u4f1a\u5bf9\u5b83\u53ca\u5176\u540e\u9762\u6240\u6709\u6570\u9020\u6210\u8d21\u732e\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u4e8e \\(A(x)\\) \uff0c\u8fdb\u884c\u64cd\u4f5c\uff0c \\[ \\begin{aligned} D(x)&\\gets D(x)+A(x)\\\\ D(x+1)&\\gets D(x+1)-A(x) \\end{aligned} \\] \u90a3\u4e48\u8fdb\u884c\u524d\u7f00\u548c\u7684\u65f6\u5019\u5c31\u4f1a\u6d88\u53bb\u591a\u4f59\u7684\u8d21\u732e\u4e86\u3002 \u7136\u540e\u518d\u53cd\u8fc7\u6765\u8003\u8651\u6bcf\u4e00\u4e2a \\(D(x)\\) \u53d7\u5230\u4e86\u4ec0\u4e48\u8d21\u732e\uff0c\u5bb9\u6613\u53d1\u73b0\u5c31\u662f\uff0c \\[ D(x)=A(x)-A(x-1) \\] \u8fd9\u5c31\u662f\u4e00\u79cd\u6784\u9020\u6027\u7684\u7406\u89e3\u3002 C++ \u4e2d\u4e5f\u6709\u5dee\u5206\u7684\u51fd\u6570 std::adjacent_difference \uff0c \u5f62\u5982\uff1a adjacent_difference(begin, end, dist) \uff0c \u8868\u793a [begin, end) \u5bf9\u76f8\u90bb\u4e24\u9879\u7684\u5dee\u503c\uff0c \u653e\u5728 dist + 1 \u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de\u7ec8\u6b62\u8fed\u4ee3\u5668\u3002","title":"\u5b9a\u4e49"},{"location":"basic/prefix/#_18","text":"\u7c7b\u4f3c\u4e0a\u6587\u6784\u9020\u6027\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5dee\u5206\u6570\u7ec4\uff0c\u8fdb\u884c \\(\\mathcal O(1)\\) \u7684\u533a\u95f4\u52a0\uff0c \\(\\mathcal O(n)\\) \u7684\u5355\u70b9\u67e5\u8be2\uff1a \u5bf9 \\([l,r]\\) \u52a0\u4e0a \\(x\\) \uff1a\u4ee4 \\(D(l)\\gets D(l)+x,D(r+1)\\gets D(r+1)-x\\) \uff1b \u67e5\u8be2\uff1a\u5bf9\u6570\u7ec4\u8dd1\u4e00\u904d\u524d\u7f00\u548c\uff0c\u53d1\u73b0\u591a\u4f59\u7684\u8d21\u732e\u90fd\u88ab\u6d88\u9664\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u3002","title":"\u5e94\u7528"},{"location":"basic/prefix/#_19","text":"","title":"\u4e8c\u7ef4\u5dee\u5206"},{"location":"basic/prefix/#_20","text":"\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49 \\(D\\) \u4e3a \\(A\\) \u7684\u4e8c\u7ef4\u5dee\u5206\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(D\\) \u7684\u4e8c\u7ef4\u524d\u7f00\u548c\u4e3a \\(A\\) \u3002 \u8003\u8651\u6784\u9020\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u9700\u8981\u4ee4\uff0c \\[ \\begin{aligned} D(x,y)&\\gets D(x,y)+A(x,y)\\\\ D(x+1,y)&\\gets D(x+1,y)-A(x,y)\\\\ D(x,y+1)&\\gets D(x,y+1)-A(x,y)\\\\ D(x+1,y+1)&\\gets D(x+1,y+1)+A(x,y) \\end{aligned} \\] \u8fd9\u6837\u5b50\u5c31\u662f\u6b63\u786e\u7684\u3002","title":"\u5b9a\u4e49"},{"location":"basic/prefix/#_21","text":"\u7c7b\u4f3c\u4e00\u7ef4\uff0c\u53ef\u4ee5\u8fdb\u884c \\(\\mathcal O(1)\\) \u7684\u5b50\u77e9\u9635\u52a0\uff0c \\(\\mathcal O(n^2)\\) \u7684\u5355\u70b9\u67e5\u8be2\u3002 \u5177\u4f53\u7565\u3002","title":"\u5e94\u7528"},{"location":"basic/prefix/#_22","text":"\u4e00\u822c\u8ba8\u8bba\u70b9\u6743\u548c\u8fb9\u6743\u3002 \u5bf9\u4e8e\u8fb9\u6743\u901a\u5e38\u6bd4\u8f83\u96be\u5904\u7406\uff0c\u4f1a\u4e0b\u65b9\u5230\u70b9\u6743\uff0c\u4e0b\u6587\u6240\u8bf4\u8fb9\u6743\u5747\u4e3a\u4e0b\u653e\u5230\u70b9\u6743\u540e\u7684\u3002","title":"\u6811\u4e0a\u95ee\u9898"},{"location":"basic/prefix/#_23","text":"\u8bbe \\(S(u)\\) \u8868\u793a\u4ece\u6839\u5230\u8282\u70b9 \\(u\\) \u7ecf\u8fc7\u7684\u6240\u6709\u6743\u503c\u548c\u3002 \u8bbe \\(S(x,y)\\) \u8868\u793a \\(x\\to y\\) \u8def\u5f84\u4e0a\u7684\u6743\u503c\u548c\uff0c \u82e5\u662f\u70b9\u6743\uff0c \\(S(x,y)=S(x)+S(y)-S(\\mathrm{LCA})-S(\\mathrm{fa_{LCA}})\\) \uff1b \u82e5\u662f\u8fb9\u6743\uff0c \\(S(x,y)=S(x)+S(y)-2S(\\mathrm{LCA})\\) \u3002","title":"\u6811\u4e0a\u524d\u7f00\u548c"},{"location":"basic/prefix/#_24","text":"\u6811\u4e0a\u5dee\u5206\u53ef\u4ee5\u7528\u4e8e\u5728\u6811\u4e0a\u5feb\u901f\u4fee\u6539\u7136\u540e\u7edf\u4e00\u67e5\u8be2\u3002 \u4e00\u822c\u6211\u4eec\u4f1a\u5bf9\u4e00\u6761\u94fe\u8fdb\u884c\u64cd\u4f5c\uff0c\u5047\u8bbe\u6211\u4eec\u5bf9 \\(x\\to y\\) \u8def\u5f84\u4e0a\u7684\u6743\u503c\u8fdb\u884c\u4fee\u6539\uff0c \u82e5\u662f\u70b9\u6743\uff0c\u6211\u4eec\u5bf9 \\(x,y\\) \u52a0 \\(1\\) \u500d\uff0c\u5bf9 \\(\\mathrm{LCA}\\) \u51cf \\(1\\) \u500d\uff0c\u5bf9 \\(\\mathrm{fa_{LCA}}\\) \u51cf \\(1\\) \u500d\u5373\u53ef\u3002 \u82e5\u662f\u8fb9\u6743\uff0c\u6211\u4eec\u5bf9 \\(x,y\\) \u52a0 \\(1\\) \u500d\uff0c\u5bf9 \\(\\mathrm{LCA}\\) \u51cf \\(2\\) \u500d\u5373\u53ef\u3002","title":"\u6811\u4e0a\u5dee\u5206"},{"location":"basic/prefix/#_25","text":"","title":"\u5176\u4ed6\u524d\u7f00"},{"location":"basic/prefix/#_26","text":"\u6211\u4eec\u8bbe\uff0c \\[ P(x)=\\prod_{i=1}^xA(i) \\] \u524d\u7f00\u79ef\u4e00\u822c\u662f\u6ee1\u8db3\u53ef\u5dee\u5206\u6027\u7684\uff0c\u4f46\u662f\u53d6\u6a21\u540e\u5c31\u4e0d\u4e00\u5b9a\u4e86\u3002 \u4f8b\u5982\uff0c\u5728\u67d0\u4e00\u5904\u7684\u524d\u7f00\u79ef\u5173\u4e8e\u6a21\u6570\u4e0d\u5b58\u5728\u4e58\u6cd5\u9006\u5143\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u53ea\u8ba8\u8bba\u6ee1\u8db3\u53ef\u5dee\u5206\u6027\u7684\uff0c\u90a3\u4e48\u6709\uff0c \\[ P(l,r)=\\frac{P(r)}{P(l-1)} \\] \u7279\u6b8a\u7684\uff0c\u6211\u4eec\u5b9a\u4e49 \\(P(0)=1\\) \u3002 \u53ef\u4ee5\u7528\u4e8e\u6c42\u4e00\u6bb5\u533a\u95f4\u7684\u4e58\u79ef\uff0c\u4f46\u662f\u4e0d\u5e38\u7528\uff0c\u56e0\u4e3a\u4e58\u5927\u4e86\u81ea\u7136\u9700\u8981\u53d6\u6a21\u3002","title":"\u524d\u7f00\u79ef"},{"location":"basic/prefix/#_27","text":"\u4ee5\u6700\u5927\u503c\u4e3a\u4f8b\u3002 \u6211\u4eec\u8bbe\uff0c \\[ M(x)=\\max_{i=1}^xA(i) \\] \u8fd9\u663e\u7136\u4e0d\u6ee1\u8db3\u53ef\u5dee\u5206\u6027\uff0c\u56e0\u6b64\u4e0d\u80fd\u6c42\u533a\u95f4\u7684\u7ed3\u679c\u3002 \u4f46\u662f\u4f9d\u7136\u5e94\u7528\u5f88\u5e7f\u6cdb\u3002","title":"\u524d\u7f00\u6700\u5927\u6700\u5c0f\u503c"},{"location":"basic/prefix/#_28","text":"\u6211\u4eec\u8bbe\uff0c \\[ R(x)=\\bigoplus_{i=1}^xA(i) \\] \u5176\u4e2d \\(\\oplus\\) \u8fd0\u7b97\u7b26\u8868\u793a\u6309\u4f4d\u5f02\u6216 \\(\\operatorname{xor}\\) \u8fd0\u7b97\u3002 \u6ce8\u610f\u5230\u8fd9\u662f\u6ee1\u8db3\u53ef\u5dee\u5206\u6027\u7684\uff0c\u56e0\u4e3a \\(x\\operatorname{xor}x=0\\) \uff0c\u56e0\u6b64\uff0c \\[ R(l,r)=R(r)\\bigoplus R(l-1) \\] \u8fd9\u4e2a\u4e5f\u5b58\u5728\u5e94\u7528\u3002 \u8fd8\u6709\u4e00\u4e9b\u597d\u73a9\u7684\u8be6\u89c1\u5f02\u6216\u54c8\u5e0c\u7b97\u6cd5\u3002 \u53c2\u8003 2024 \u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587 \u5b8b\u4f73\u5174\u300a\u8bba\u73b0\u4ee3\u786c\u4ef6\u4e0a\u7684\u5e38\u6570\u4f18\u5316\u300b\u3002 \u21a9","title":"\u524d\u7f00\u5f02\u6216\u548c"},{"location":"basic/xor-hashing/","text":"\u5f02\u6216\u54c8\u5e0c\u7b97\u6cd5 \u00b6 \u601d\u60f3 \u00b6 \u6211\u4eec\u5173\u6ce8\u4e00\u4e2a\u533a\u95f4\u5185\u51fa\u73b0\u4e86\u4ec0\u4e48\u6570\u5b57\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u6570\u5b57\u8d4b\u4e00\u4e2a\u968f\u673a\u6743\u503c\uff0c \u7136\u540e\u5bf9\u8fd9\u4e2a\u6743\u503c\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u4f8b\u5982\u524d\u7f00 \\(\\operatorname{xor}\\) \u7b49\u3002 \u5bf9\u4e8e\u4e24\u4e2a\u5e8f\u5217\uff0c\u901a\u8fc7 Hash \u7684\u65b9\u5f0f\u5224\u65ad\u5373\u53ef\u3002 \u540c\u65f6\uff0c\u4e5f\u53ef\u7528\u4e8e\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u6570\u91cf\u7684\u95ee\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Hash \u7684\u65b9\u5f0f\u627e\u5230\u524d\u9762\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u6570\uff0c\u6765\u5339\u914d\u5b50\u5e8f\u5217\u3002 \u4f8b\u9898 \u00b6 \u533a\u95f4\u5224\u65ad \u00b6 AtCoder [ABC250E] Prefix Equality \u00b6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u5e8f\u5217 \\(A,B\\) \uff0c\u8be2\u95ee \\(A\\) \u7684\u524d \\(x\\) \u4e2a\u6570\u548c \\(B\\) \u7684\u524d \\(y\\) \u4e2a\u6570\u53bb\u91cd\u540e\u662f\u5426\u76f8\u540c\u3002 \u505a\u6cd5\uff1a \u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u6570\u8d4b\u4e00\u4e2a\u968f\u673a\u6743\u503c\uff0c \u5c06\u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u8fd9\u4e2a\u6570\u8d4b\u4e3a\u6743\u503c\uff0c\u540e\u9762\u7684\u90fd\u8d4b\u4e3a \\(0\\) \u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u4e24\u4e2a\u524d\u7f00\u5f02\u6216\u548c\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u4f7f\u7528 mt19937_64 \u751f\u6210\u6bd4\u8f83\u5f3a\u7684\u968f\u673a\u6570\uff0c\u51b2\u7a81\u6982\u7387\u8f83\u5c0f\u3002 \u4ee3\u7801 using u64 = uint64_t; mt19937_64 rnd_big(114514); int n; u64 W[N]; u64 A[N], B[N]; unordered_set<int> appA, appB; unordered_map<int, u64> hashing; u64 get_hashing(int x) { return hashing.count(x) ? hashing[x] : hashing[x] = rnd_big(); } void Main() { cin >> n; for (int i = 1; i <= n; ++i) { int x; cin >> x; if (appA.count(x)) A[i] = A[i - 1]; else A[i] = A[i - 1] ^ get_hashing(x), appA.insert(x); } for (int i = 1; i <= n; ++i) { int x; cin >> x; if (appB.count(x)) B[i] = B[i - 1]; else B[i] = B[i - 1] ^ get_hashing(x), appB.insert(x); } int q; cin >> q; while (q--) { int x, y; cin >> x >> y; puts(A[x] == B[y] ? \"Yes\" : \"No\"); } } \u533a\u95f4\u8ba1\u6570 \u00b6 \u53d8\u79cd \u00b6 \u77e9\u9635\u4e58\u79ef \u00b6 \u6765\u6e90\u662f CSP-S 2023 \u6d88\u6d88\u4e50\uff0c\u7528\u5904\u4e0d\u5927\u3002 \u4f46\u662f\u8fd9\u5f15\u51fa\u4e86\u7c7b\u4f3c\u5f02\u6216\u548c\u7684\u4e00\u4e2a\u7279\u6709\u505a\u6cd5\u3002 \u8bbe\u6709\u4e00\u4e2a\u7fa4 \\((G,\\cdot)\\) \uff0c\u5c06\u5143\u7d20\u5206\u4e3a\u5165\u5143\u7d20\u548c\u51fa\u5143\u7d20\uff0c\u4ee4\u5165\u5143\u7d20\u548c\u51fa\u5143\u7d20\u4e92\u4e3a\u9006\u5143\u3002 \u90a3\u4e48\uff0c\u5982\u679c\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \u7684\u67d0\u79cd\u8fd0\u7b97\u7684\u524d\u7f00\u548c\u4e3a\u5355\u4f4d\u5143\u4e86\uff0c \u90a3\u4e48\u610f\u5473\u7740\u8fd9\u4e2a\u533a\u95f4\u7684\u5143\u7d20\u53ef\u4ee5\u4e92\u76f8\u62b5\u6d88\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7f00\u548c\u653e\u5230 map \u91cc\u9762\u8bb0\u5f55\uff0c \u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(S(r)\\) \u5bf9\u5e94\u7684 \\(S(l)=S(r),l<r\\) \u5c31\u53ef\u4ee5\u7edf\u8ba1\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u533a\u95f4\u6570\u91cf\u3002","title":"\u5f02\u6216\u54c8\u5e0c\u7b97\u6cd5"},{"location":"basic/xor-hashing/#_1","text":"","title":"\u5f02\u6216\u54c8\u5e0c\u7b97\u6cd5"},{"location":"basic/xor-hashing/#_2","text":"\u6211\u4eec\u5173\u6ce8\u4e00\u4e2a\u533a\u95f4\u5185\u51fa\u73b0\u4e86\u4ec0\u4e48\u6570\u5b57\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u6570\u5b57\u8d4b\u4e00\u4e2a\u968f\u673a\u6743\u503c\uff0c \u7136\u540e\u5bf9\u8fd9\u4e2a\u6743\u503c\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u4f8b\u5982\u524d\u7f00 \\(\\operatorname{xor}\\) \u7b49\u3002 \u5bf9\u4e8e\u4e24\u4e2a\u5e8f\u5217\uff0c\u901a\u8fc7 Hash \u7684\u65b9\u5f0f\u5224\u65ad\u5373\u53ef\u3002 \u540c\u65f6\uff0c\u4e5f\u53ef\u7528\u4e8e\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u6570\u91cf\u7684\u95ee\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Hash \u7684\u65b9\u5f0f\u627e\u5230\u524d\u9762\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u6570\uff0c\u6765\u5339\u914d\u5b50\u5e8f\u5217\u3002","title":"\u601d\u60f3"},{"location":"basic/xor-hashing/#_3","text":"","title":"\u4f8b\u9898"},{"location":"basic/xor-hashing/#_4","text":"","title":"\u533a\u95f4\u5224\u65ad"},{"location":"basic/xor-hashing/#atcoder-abc250e-prefix-equality","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u5e8f\u5217 \\(A,B\\) \uff0c\u8be2\u95ee \\(A\\) \u7684\u524d \\(x\\) \u4e2a\u6570\u548c \\(B\\) \u7684\u524d \\(y\\) \u4e2a\u6570\u53bb\u91cd\u540e\u662f\u5426\u76f8\u540c\u3002 \u505a\u6cd5\uff1a \u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u6570\u8d4b\u4e00\u4e2a\u968f\u673a\u6743\u503c\uff0c \u5c06\u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u8fd9\u4e2a\u6570\u8d4b\u4e3a\u6743\u503c\uff0c\u540e\u9762\u7684\u90fd\u8d4b\u4e3a \\(0\\) \u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u4e24\u4e2a\u524d\u7f00\u5f02\u6216\u548c\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u4f7f\u7528 mt19937_64 \u751f\u6210\u6bd4\u8f83\u5f3a\u7684\u968f\u673a\u6570\uff0c\u51b2\u7a81\u6982\u7387\u8f83\u5c0f\u3002 \u4ee3\u7801 using u64 = uint64_t; mt19937_64 rnd_big(114514); int n; u64 W[N]; u64 A[N], B[N]; unordered_set<int> appA, appB; unordered_map<int, u64> hashing; u64 get_hashing(int x) { return hashing.count(x) ? hashing[x] : hashing[x] = rnd_big(); } void Main() { cin >> n; for (int i = 1; i <= n; ++i) { int x; cin >> x; if (appA.count(x)) A[i] = A[i - 1]; else A[i] = A[i - 1] ^ get_hashing(x), appA.insert(x); } for (int i = 1; i <= n; ++i) { int x; cin >> x; if (appB.count(x)) B[i] = B[i - 1]; else B[i] = B[i - 1] ^ get_hashing(x), appB.insert(x); } int q; cin >> q; while (q--) { int x, y; cin >> x >> y; puts(A[x] == B[y] ? \"Yes\" : \"No\"); } }","title":"AtCoder [ABC250E] Prefix Equality"},{"location":"basic/xor-hashing/#_5","text":"","title":"\u533a\u95f4\u8ba1\u6570"},{"location":"basic/xor-hashing/#_6","text":"","title":"\u53d8\u79cd"},{"location":"basic/xor-hashing/#_7","text":"\u6765\u6e90\u662f CSP-S 2023 \u6d88\u6d88\u4e50\uff0c\u7528\u5904\u4e0d\u5927\u3002 \u4f46\u662f\u8fd9\u5f15\u51fa\u4e86\u7c7b\u4f3c\u5f02\u6216\u548c\u7684\u4e00\u4e2a\u7279\u6709\u505a\u6cd5\u3002 \u8bbe\u6709\u4e00\u4e2a\u7fa4 \\((G,\\cdot)\\) \uff0c\u5c06\u5143\u7d20\u5206\u4e3a\u5165\u5143\u7d20\u548c\u51fa\u5143\u7d20\uff0c\u4ee4\u5165\u5143\u7d20\u548c\u51fa\u5143\u7d20\u4e92\u4e3a\u9006\u5143\u3002 \u90a3\u4e48\uff0c\u5982\u679c\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \u7684\u67d0\u79cd\u8fd0\u7b97\u7684\u524d\u7f00\u548c\u4e3a\u5355\u4f4d\u5143\u4e86\uff0c \u90a3\u4e48\u610f\u5473\u7740\u8fd9\u4e2a\u533a\u95f4\u7684\u5143\u7d20\u53ef\u4ee5\u4e92\u76f8\u62b5\u6d88\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7f00\u548c\u653e\u5230 map \u91cc\u9762\u8bb0\u5f55\uff0c \u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(S(r)\\) \u5bf9\u5e94\u7684 \\(S(l)=S(r),l<r\\) \u5c31\u53ef\u4ee5\u7edf\u8ba1\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u533a\u95f4\u6570\u91cf\u3002","title":"\u77e9\u9635\u4e58\u79ef"},{"location":"contest/pre/","text":"\u521d\u8d5b\u77e5\u8bc6\u70b9\u6c47\u603b \u00b6 \u8ba1\u7b97\u673a\u57fa\u7840 \u00b6 \u7535\u5b50\u8ba1\u7b97\u673a \u00b6 \u6309\u5e74\u4ee3\u5206\u7c7b \u00b6 \u65f6\u671f \u5f62\u5f0f \\(1946\\sim1958\\) \u7535\u5b50\u7ba1 \\(1959\\sim1964\\) \u6676\u4f53\u7ba1 \\(1965\\sim1970\\) \u96c6\u6210\u7535\u8def \\(1971\\sim\\text{N/A}\\) \uff08\u8d85\uff09\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def \u73b0\u4ee3 \u667a\u80fd\u8ba1\u7b97\u673a\u7cfb\u7edf\uff08\u6839\u636e\u7b2c\u4e94\u7248\u521d\u8d5b\u4e00\u672c\u901a\uff09 \u6469\u5c14\u5b9a\u5f8b\uff1a\u96c6\u6210\u7535\u8def\u4e0a\u53ef\u4ee5\u5bb9\u7eb3\u7684\u6676\u4f53\u7ba1\u6570\u76ee\u5728\u5927\u7ea6\u6bcf\u7ecf\u8fc7 \\(18\\) \u4e2a\u6708\u5230 \\(24\\) \u4e2a\u6708\u4fbf\u4f1a\u589e\u52a0\u4e00\u500d\u3002 \u6309\u6027\u80fd\u5206\u7c7b \u00b6 \u5de8\u578b\u673a \\(>\\) \u5927 / \u4e2d\u578b\u673a \\(>\\) \u5c0f\u578b\u673a \\(>\\) \u5fae\u578b\u673a \\(=\\) \u5de5\u4f5c\u7ad9\u3002 \u5de8\u578b\u673a\uff08\u8d85\u7ea7\u8ba1\u7b97\u673a\uff09\uff1a\u79d1\u5b66\u7814\u7a76\u3002 \u5927 / \u4e2d\u578b\u673a\uff1a\u9876\u5c16\u79d1\u7814\u9886\u57df\u3002 \u5c0f\u578b\u673a\uff1a\u5355\u4f4d\u670d\u52a1\u5668\u3001\u5176\u4ed6\u9886\u57df\u3002 \u5fae\u578b\u673a\uff1a\u4e2a\u4eba\u5de5\u4f5c\uff08\u4e2a\u4eba\u7535\u8111\u5927\u90e8\u5206\u90fd\u662f\u5fae\u578b\u673a\uff09\u3002 \u5de5\u4f5c\u7ad9\uff1a\u8f85\u52a9\u5fae\u578b\u673a\u5de5\u4f5c\u3002 \u8865\uff1a\u5927\u578b\u673a\u548c\u8d85\u7ea7\u8ba1\u7b97\u673a\uff08\u65e7\u79f0\u5de8\u578b\u673a\uff09\u7684\u4e3b\u8981\u533a\u522b: \u5927\u578b\u673a\u4e3b\u8981\u7528\u4e8e\u5546\u4e1a\u9886\u57df\uff0c\u5de8\u578b\u7528\u4e8e\u5c16\u7aef\u79d1\u5b66\u9886\u57df\uff08\u7279\u522b\u662f\u56fd\u9632\u9886\u57df\uff09\u3002 \u5927\u578b\u673a\u957f\u4e8e\u975e\u6570\u503c\u8ba1\u7b97\uff08\u6570\u636e\u5904\u7406\uff09\uff0c\u5de8\u578b\u957f\u4e8e\u6570\u503c\u8ba1\u7b97\uff08\u79d1\u5b66\u8ba1\u7b97\uff09\u3002 \u4e3a\u4e86\u786e\u4fdd\u517c\u5bb9\u6027\uff0c\u5927\u578b\u673a\u7684\u90e8\u5206\u6280\u672f\u8f83\u4e3a\u4fdd\u5b88\u3002 \u5927\u578b\u673a\u4f7f\u7528\u4e13\u7528\u6307\u4ee4\u7cfb\u7edf\u548c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5de8\u578b\u673a\u4f7f\u7528\u901a\u7528\u5904\u7406\u5668\u53ca UNIX \u6216\u7c7b UNIX \u64cd\u4f5c\u7cfb\u7edf\u3002 \u673a\u68b0\u5f0f\u8ba1\u7b97\u673a \u00b6 \u5e15\u65af\u5361\uff08\u6cd5\u56fd\uff09\uff1a\u52a0\u6cd5\u673a\u3002 \u83b1\u5e03\u5c3c\u8328\uff08\u5fb7\u56fd\uff09\uff1a\u6539\u8fdb\u52a0\u6cd5\u673a\u3002 \u5df4\u8d1d\u5947\uff08\u82f1\u56fd\uff09\uff1a\u5206\u6790\u673a\u3002 \u970d\u52d2\u745e\u65af\uff08\u7f8e\u56fd\uff09\uff1a\u7a7f\u5b54\u5361\u7247\u673a\u3002 \u65e9\u671f\u60c5\u51b5 \u00b6 \u827e\u4f26\u00b7\u56fe\u7075\uff08\u82f1\u56fd\uff09\uff1a \u6570\u5b66\u5bb6\uff0c\u903b\u8f91\u5b66\u5bb6\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u4eba\u5de5\u667a\u80fd\u4e4b\u7236\uff0c\u63d0\u51fa\u56fe\u7075\u6d4b\u8bd5\uff08 Can Machine Think? \uff09\u3002 \u534f\u52a9\u519b\u65b9\u7834\u89e3\u5fb7\u56fd\u8457\u540d\u5bc6\u7801\u7cfb\u7edf Enigma\uff0c\u9996\u6b21\u63d0\u51fa\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u7406\u8bba\u3002 \u8ba1\u7b97\u673a\u754c\u7684\u6700\u9ad8\u5956\u9879\u56fe\u7075\u5956\uff08\u7f8e\u56fd\u8ba1\u7b97\u673a\u534f\u4f1a ACM \u8bbe\u7acb\uff09\u4ee5\u4ed6\u547d\u540d\uff0c\u88ab\u79f0\u4e3a\u8ba1\u7b97\u673a\u754c\u7684\u8bfa\u8d1d\u5c14\u5956\u3002 \u51af\u00b7\u8bfa\u4f9d\u66fc\uff08\u7f8e\u56fd\uff09\uff1a \u79d1\u5b66\u5bb6\uff0c\u73b0\u4ee3\u8ba1\u7b97\u673a\u4e4b\u7236\u3002 \u9996\u6b21\u63d0\u51fa\u4e86\u5b58\u50a8\u7a0b\u5e8f\u63a7\u5236\u539f\u7406\uff0c\u79f0\u4e3a\u51af\u00b7\u8bfa\u4f9d\u66fc\u7ed3\u6784\u3002 \u514b\u52b3\u5fb7\u00b7\u9999\u519c\uff08\u7f8e\u56fd\uff09\uff1a \u79d1\u5b66\u5bb6\uff0c\u521b\u9020\u4e86\u4fe1\u606f\u8bba\u3002 \u63d0\u51fa\u4e86\u67d0\u79cd\u4fe1\u606f\u4ece\u4e00\u5904\u4f20\u9001\u5230\u53e6\u4e00\u5904\u6240\u9700\u7684\u5168\u90e8\u8bbe\u5907\u6240\u6784\u6210\u7684\u7cfb\u7edf\u3002 \u963f\u8fbe\u00b7\u6d1b\u8299\u83b1\u65af\uff08\u82f1\u56fd\uff09\uff1a \u6570\u5b66\u5bb6\uff0c\u8457\u540d\u8bd7\u4eba\u62dc\u4f26\u7684\u5973\u513f\u3002 \u8bbe\u8ba1\u4e86\u5df4\u8d1d\u5947\u5206\u6790\u673a\u4e0a\u89e3\u4f2f\u52aa\u5229\u65b9\u7a0b\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5efa\u7acb\u4e86\u5faa\u73af\u548c\u5b50\u7a0b\u5e8f\u7684\u6982\u5ff5\u3002 \u88ab\u79f0\u4e3a\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5458\u3002 \u4e3a\u7eaa\u5ff5 Ada\uff0c\u7f8e\u56fd\u56fd\u9632\u90e8\u8bbe\u8ba1\u7684\u4e00\u6b3e\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u79f0\u4e3a Ada\u3002 \u65e9\u671f\u7535\u5b50\u8ba1\u7b97\u673a\uff1a \u7b2c\u4e00\u53f0\u7535\u5b50\u8ba1\u7b97\u673a\uff1aENIAC\uff081946\uff0c\u7f8e\u56fd\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\uff09\u3002 \u7b2c\u4e00\u53f0\u5177\u6709\u50a8\u5b58\u529f\u80fd\u7684\uff08\u7b2c\u4e00\u53f0\u51af\u673a\uff09\u7535\u5b50\u8ba1\u7b97\u673a\uff1aEDVAC\u3002 \u5747\u7531\u7f8e\u56fd\u9646\u519b\u963f\u4f2f\u4e01\u8bd5\u9a8c\u573a\u7684\u5f39\u9053\u7814\u7a76\u5b9e\u9a8c\u5ba4\u7814\u5236\u3002 \u8bbe\u5907\u7ed3\u6784 \u00b6 CPU\uff1a\u4e2d\u592e\u5904\u7406\u5668\uff0c\u8ba1\u7b97\u673a\u7684\u6838\u5fc3\u90e8\u4ef6\uff0c\u88ab\u79f0\u4e3a\u8ba1\u7b97\u673a\u7684\u5927\u8111\uff0c\u51fa\u73b0\u4e8e 20 \u4e16\u7eaa 70 \u5e74\u4ee3\u3002 Inter 4004\uff1a4 \u4f4d\u3002 Inter 8086\uff1a16 \u4f4d\u3002 Inter 80286\u3002 Inter 80386\uff1a32 \u4f4d\u3002 Inter 80586 = Inter Pentium 1\uff0864 \u4f4d\uff09\u3002 \u73b0\u4ee3\uff1aInter Core\uff0cAMD Ryzen\u3002 \u5185\u5b58\uff1a\u7528\u4e8e\u7535\u8111\u5185\u90e8\u7684\u5b58\u50a8\uff0c\u5b58\u50a8\u5728 RAM \u91cc\u7684\u6570\u636e\u65ad\u7535\u540e\u4f1a\u4e22\u5931\u3002 RAM\uff08Random Access Memory\uff09\uff1a\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff0c\u4e0e CPU \u76f4\u63a5\u4ea4\u4e92\u6570\u636e\uff0c\u53ef\u968f\u65f6\u8bfb\u5199\uff0c\u65ad\u7535\u6570\u636e\u5168\u90e8\u4e22\u5931\u3002 ROM\uff08Read-Only Memory\uff09\uff1a\u53ea\u8bfb\u5b58\u50a8\u5668\uff0c\u53ea\u80fd\u8bfb\u51fa\u65e0\u6cd5\u5199\u5165\u4fe1\u606f\u3002\u4fe1\u606f\u4e00\u65e6\u5199\u5165\u540e\u5c31\u56fa\u5b9a\u4e0b\u6765\uff0c\u65ad\u7535\u6570\u636e\u4e0d\u4f1a\u4e22\u5931\uff0c\u6545\u53c8\u79f0\u4e3a\u56fa\u5b9a\u5b58\u50a8\u5668\u3002 \u5916\u5b58\uff1a\u7528\u4e8e\u5904\u7f6e\u957f\u671f\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u4e00\u822c\u5904\u4e8e\u7535\u8111\u5916\u90e8\uff0c\u65ad\u7535\u540e\u6570\u636e\u4e0d\u4f1a\u4e22\u5931\u3002 \u8f93\u5165\u8bbe\u5907\uff1a\u63a5\u53d7\u5916\u90e8\u547d\u4ee4\u6216\u8005\u9700\u8981\u52a0\u5de5\u7684\u6570\u636e\u3002 \u8f93\u51fa\u8bbe\u5907\uff1a\u5c06\u5904\u7406\u7ed3\u679c\u4ee5\u4eba\u7c7b\u80fd\u591f\u8bc6\u522b / \u611f\u53d7\u7684\u65b9\u5f0f\u5448\u73b0\u51fa\u6765\u7684\u8bbe\u5907\u3002 \u6027\u80fd\u6307\u6807\uff1a \u5b57\u957f\uff1a\u4e00\u6b21\u5904\u7406\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u4f4d\u6570\u3002 \u4e3b\u9891\uff1a\u6bcf\u79d2\u6267\u884c\u7684\u6307\u4ee4\u6761\u6570\uff08\u79f0\u4e3a\u6307\u4ee4\u5468\u671f\uff09\u3002 \u603b\u7ebf\u7ed3\u6784\uff1a \u6570\u636e\u603b\u7ebf DB\uff1a\u4f20\u9001\u6570\u636e\u4fe1\u606f\u3002 \u5730\u5740\u603b\u7ebf AB\uff1a\u4f20\u9001\u5730\u5740\u4fe1\u606f\u3002 \u63a7\u5236\u603b\u7ebf CB\uff1a\u4f20\u9001\u63a7\u5236\u4fe1\u53f7\u3002 \u5b58\u50a8\u5668\u8bbf\u95ee\u901f\u5ea6\uff1a\u5bc4\u5b58\u5668 \\(>\\) \u9ad8\u901f\u7f13\u5b58 \\(>\\) \u5185\u5b58\uff08ROM + RAM\uff09 \\(>\\) \u5916\u5b58\uff0c\u65ad\u7535\u4ec5\u4fdd\u7559 ROM \u548c\u5916\u5b58\u4e2d\u7684\u6570\u636e\u3002 \u6587\u4ef6\u548c\u6570\u636e \u00b6 \u6587\u4ef6\u6269\u5c55\u540d \u00b6 \u56fe\u50cf\u5b58\u50a8\uff1ajpg, png, bmp, gif, webp\u3002 \u97f3\u9891\u5b58\u50a8\uff1amp3, wav\u3002 \u89c6\u9891\u5b58\u50a8\uff1amp4, avi, mpeg\u3002 ASCII \u7801 \u00b6 \\(\\texttt{ASCII}\\) \u7801\uff08 \\(\\texttt{American Standard Code for Information Interchange}\\) \uff09\u662f\u7f8e\u56fd\u56fd\u5bb6\u4ea4\u6362\u6807\u51c6\u4ee3\u5417\u3002 \u7801\u57df \u5b57\u7b26 \u53ef\u89c1\u6027 \\(0 \\sim 31\\) \uff0c \\(127\\) \u63a7\u5236\u5b57\u7b26\u6216\u901a\u4fe1\u4e13\u7528\u5b57\u7b26 \\(\\texttt{False}\\) \\(32\\) \u7a7a\u683c \\(\\texttt{False}\\) \u6216 \\(\\texttt{True}\\) \\(48 \\sim 57\\) \u6570\u5b57\uff08 \\(\\texttt{0} \\sim \\texttt{9}\\) \uff09 \\(\\texttt{True}\\) \\(65 \\sim 90\\) \u5927\u5199\u5b57\u6bcd\uff08 \\(\\texttt{A} \\sim \\texttt{Z}\\) \uff09 \\(\\texttt{True}\\) \\(97 \\sim 122\\) \u5c0f\u5199\u5b57\u6bcd\uff08 \\(\\texttt{a} \\sim \\texttt{z}\\) \uff09 \\(\\texttt{True}\\) \u5176\u4ed6\uff08 \\(33 \\sim 47\\) \uff0c \\(58 \\sim 64\\) \uff0c \\(94 \\sim 96\\) \uff0c \\(126\\) \uff09 \u7279\u6b8a\u5b57\u7b26 \\(\\texttt{True}\\) \u62d3\u5c55\uff08 \\(128 \\sim 255\\) \uff09 \u62d3\u5c55\u7684 \\(\\texttt{ASCII}\\) \u7801 \\(\\texttt{N/A}\\) \u673a\u5668\u6570\u4e0e\u771f\u503c \u00b6 \u6b63\u6570\uff1a\uff3b\u539f\u7801 \\(=\\) \u53cd\u7801 \\(=\\) \u8865\u7801\uff3d\u3002 \u8d1f\u6570\uff1a\uff3b\u53cd\u7801 \\(=\\) \u9664\u7b26\u53f7\u4f4d\u5916\uff0c\u539f\u7801\u7684\u5404\u4f4d\u5168\u90e8\u53d6\u53cd\uff3d\uff3b\u8865\u7801 \\(=\\) \u53cd\u7801 \\(+1\\) \uff3d\u3002 \u8f6f\u4ef6 \u00b6 \u8f6f\u4ef6\u662f\u4e00\u7cfb\u5217\u6309\u7167\u7279\u5b9a\u987a\u5e8f\u7ec4\u7ec7\u7684\u8ba1\u7b97\u673a\u6570\u636e\u548c\u6307\u4ee4\u7684\u96c6\u5408\u3002 \u4e00\u822c\u6765\u8bb2\u8f6f\u4ef6\u88ab\u5212\u5206\u4e3a\u7cfb\u7edf\u8f6f\u4ef6\u3001\u5e94\u7528\u8f6f\u4ef6\u548c\u4ecb\u4e8e\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u4e2d\u95f4\u4ef6\u3002 \u5e94\u7528\u8f6f\u4ef6 \u529e\u516c\u5ba4\u8f6f\u4ef6 \u6587\u672c\u7f16\u8f91\u5668\uff1avim, notepad MS-Office, LibreOffice, WPS Office \u4e92\u8054\u7f51\u8f6f\u4ef6 \u5373\u65f6\u901a\u8baf\uff1aQQ, WeChat \u6d4f\u89c8\u5668\uff1aGoogle Chrome, Microsoft Edge \u4e0b\u8f7d\u5668\uff1aIDM, Motrix \u591a\u5a92\u4f53\u8f6f\u4ef6 \u5a92\u4f53\u64ad\u653e\u5668\uff1aVLC, SMPlayer \u56fe\u50cf\u7f16\u8f91\u5668\uff1amspaint, PaintTool SAI \u8ba1\u7b97\u673a\u6e38\u620f \u5206\u6790\u8f6f\u4ef6 CAS, CAE \u534f\u4f5c\u8f6f\u4ef6 \u5546\u52a1\u8f6f\u4ef6 \u7cfb\u7edf\u8f6f\u4ef6\uff1a\u5904\u7406\u673a\u7ba1\u7406\u3001\u50a8\u5b58\u7ba1\u7406\u3001\u8bbe\u5907\u7ba1\u7406\u3001\u4fe1\u606f\u7ba1\u7406\u3002 \u64cd\u4f5c\u7cfb\u7edf \u684c\u9762\u64cd\u4f5c\u7cfb\u7edf\uff1a Unix \u548c\u7c7b Unix \u7cfb\u7edf\uff1aMac OS X\uff0cLinux \u53d1\u884c\u7248\uff08\u5982 Debian, Ubuntu, Linux Mint, Fedora, Mandrake, Red Hat, Centos\uff09\u3002 Windows \u7cfb\u7edf\uff1aWindows 98 / 2000 / XP / Vista / 7 / 8 / 8.1 / 10 / 11\u3002 \u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\uff1a Unix \u7cfb\u5217\uff1aFreeBSD, OS X Server\u3002 Linux \u7cfb\u5217\uff1aRed Hat Linux, CentOS, Debian, Ubuntu Server\u3002 Windows \u7cfb\u5217\uff1aWindows NT Server, Windows 2003 / 2008 / 2012 Server, Windows Server Technical\u3002 DOS, MS/2, Android, iOS, \u9e3f\u8499 \u8bed\u8a00\u5904\u7406\u7a0b\u5e8f GCC Clang \u6570\u636e\u5e93\u7ba1\u7406 Oracle MySQL SQL Server FoxBase, Visual FoxPro \u56fe\u7247\u4e0e\u89c6\u9891\u5927\u5c0f\u95ee\u9898 \u00b6 \u7f51\u7edc \u00b6 \u5c40\u57df\u7f51\uff1a \\(\\texttt{LAN}\\) \uff08 \\(\\texttt{Local Area Network}\\) \uff09\uff0c \\(\\le 1 \\text{ } \\texttt{km}\\) \uff0c\u7ed3\u6784\u7b80\u5355\u3001\u8303\u56f4\u5c0f\uff0c\u77ed\u8ddd\u79bb\u4f20\u8f93\u6548\u7387\u6781\u9ad8 \u57ce\u57df\u7f51\uff1a \\(\\texttt{MAN}\\) \uff08 \\(\\texttt{Metropolitan Area Network}\\) \uff09\uff0c \\(1 \\sim 10 \\text{ } \\texttt{km}\\) \u5e7f\u57df\u7f51\uff1a \\(\\texttt{WAN}\\) \uff08 \\(\\texttt{Wide Area Network}\\) \uff09\uff0c \\(10 \\sim 1000 \\text{ } \\texttt{km}\\) \u4e07\u7ef4\u7f51\uff1a \\(\\texttt{WWW}\\) \uff08 \\(\\texttt{World Wide Web}\\) \uff09\uff0c\u5168\u7403\u8303\u56f4 Internet \u8d77\u6e90\u4e8e APRANET\u3002 IPv4:32 \u4f4d\uff0c2011 \u5e74\u5206\u914d\u5b8c\u6bd5\u3002 IPv6\uff1a128 \u4f4d\u3002 \u5176\u4ed6\u534f\u8bae\uff1a \u4f20\u8f93\u76f8\u5173 \u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff1a \\(\\texttt{TCP}\\) \uff08 \\(\\texttt{Transmission Control Protocol}\\) \uff09 \u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff1a \\(\\texttt{UDP}\\) \uff08 \\(\\texttt{User Datagram Protocol}\\) \uff09 \u5e94\u7528\u76f8\u5173 \u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff1a \\(\\texttt{HTTP}\\) \uff08 \\(\\texttt{Hyper Text Transfer Prtcl}\\) \uff09 \u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff1a \\(\\texttt{HTTPS}\\) \uff08 \\(\\texttt{ - over Securesocket ayer}\\) \uff09\uff0c\u589e\u52a0\u4e86\u4f20\u8f93\u52a0\u5bc6\u548c\u8eab\u4efd\u8ba4\u8bc1 \u6587\u4ef6\u4f20\u8f93\u534f\u8bae\uff1a \\(\\texttt{FTP}\\) \uff08 \\(\\texttt{File Transfer Protocol}\\) \uff09 \u5bf9\u7b49\u7f51\u7edc\uff1a \\(\\texttt{P2P}\\) \uff08 \\(\\texttt{peer-t(w)o-peer}\\) \uff09 \u90ae\u4ef6\u76f8\u5173 \u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff1a \\(\\texttt{SMTP}\\) \uff08 \\(\\texttt{Simple Mail Transfer Protocol}\\) \uff09 \u90ae\u5c40\u534f\u8bae \uff1a \\(\\texttt{POP}\\) \uff08 \\(\\texttt{Post Office Protocol}\\) \uff09 \u90ae\u5c40\u534f\u8bae\u7b2c\u4e09\u7248 \uff1a \\(\\texttt{POP3}\\) \uff08 \\(\\texttt{Post Office Protocol - Version 3}\\) \uff09 \u4ea4\u4e92\u90ae\u4ef6\u8bbf\u95ee\u534f\u8bae\uff1a \\(\\texttt{IMAP}\\) \uff08 \\(\\texttt{Internet Message Access Protocol}\\) \uff09 \u8bed\u8a00\u7684\u5206\u7c7b \u00b6 \u4f4e\u7ea7\u8bed\u8a00\uff1a \u673a\u5668\u8bed\u8a00 / \u673a\u5668\u7801\uff1a \u6700\u65e9\u7684\u8bed\u8a00\uff0c\u8ba1\u7b97\u673a\u80fd\u8bc6\u522b\u7684\u8bed\u8a00\u3002 \u7531\u4e8c\u8fdb\u5236\u6570\u5b57 0/1 \u7ec4\u6210\uff0c\u901f\u5ea6\u6781\u5feb\uff0c\u4eba\u7c7b\u7f16\u7801\u96be\u5ea6\u9ad8\uff0c\u4e00\u822c\u7531\u8ba1\u7b97\u673a\u81ea\u52a8\u8f6c\u6362\u3002 \u6c47\u7f16\u8bed\u8a00\uff1a \u7528\u7b26\u53f7\u4ee3\u66ff\u4e8c\u8fdb\u5236\u6570\uff0c\u8ba1\u7b97\u673a\u4e0d\u80fd\u76f4\u63a5\u8bc6\u522b\uff0c\u9700\u8981\u7528\u7f16\u8bd1\u5668\u8fdb\u884c\u7f16\u8bd1\u3002 \u65e9\u671f\u8bed\u8a00\uff0c\u96be\u5ea6\u4f9d\u7136\u5f88\u5927\uff0c\u76ee\u524d\u9664\u4e86\u5bf9\u6027\u80fd\u8981\u6c42\u6781\u9ad8\u7684\u9700\u6c42\u4ee5\u5916\u4e0d\u88ab\u4f7f\u7528\u3002 \u9ad8\u7ea7\u8bed\u8a00\uff1a \u73b0\u4ee3\u7684\u7f16\u7a0b\u8bed\u8a00\uff08C++\uff0cJAVA \u7b49\uff09\uff0c\u9700\u8981\u7528\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668\uff0c\u96be\u5ea6\u5c0f\u3002 \u7f16\u8bd1\u65b9\u5f0f\uff1aC / C++, Pascal, Object Pascal (Delphi) \u5148\u5bf9\u6574\u4e2a\u7a0b\u5e8f\u8fdb\u884c\u7f16\u8bd1\uff08\u4f1a\u8fdb\u884c\u591a\u6b21\u5206\u6790\uff09\uff0c\u518d\u6267\u884c\u7a0b\u5e8f\u3002 \u901f\u5ea6\u5feb\uff08\u8fdb\u884c\u591a\u6b21\u7f16\u8bd1\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u4f18\u5316\uff09\u3002 \u89e3\u91ca\u65b9\u5f0f\uff1aASP, Java, C#, PHP, JavaScript, VBScript, Perl, Python, Ruby, MATLAB \u626b\u63cf\u4e00\u884c\u89e3\u91ca\u4e00\u884c\uff0c\u901f\u5ea6\u6162\uff08\u65e0\u6cd5\u8fdb\u884c\u4f18\u5316\uff09\u3002 \u6ce8\uff1a\u67d0\u4e9b\u8bed\u8a00\u53ef\u4ee5\u9884\u5148\u7f16\u8bd1\u6216\u8005\u76f4\u63a5\u4f7f\u7528 C \u8bed\u8a00\u7f16\u5199\u5e93\u6587\u4ef6\u3002 \u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff1a \u7b2c\u4e00\u4e2a\uff1aSimula67\u3002 \u7b2c\u4e8c\u4e2a\uff1aSmalltalk\u3002 Linux \u57fa\u7840\u64cd\u4f5c \u00b6 \u6587\u4ef6\u64cd\u4f5c\uff1a \u5217\u51fa\u6587\u4ef6\uff1a ls \u5217\u51fa\u9690\u85cf\u6587\u4ef6\uff1a ls -a \u5217\u51fa\u6587\u4ef6\u53ca\u5927\u5c0f\uff1a ls -l \u91cd\u547d\u540d\u6587\u4ef6\uff1a mv old.cpp new.cpp \u521b\u5efa\u5907\u4efd\uff1a cp file.cpp file.cpp.bak \u67e5\u770b\u76ee\u5f55\u5730\u5740\uff1a pwd \u5207\u6362\u4e0a\u7ea7\u76ee\u5f55\uff1a cd .. \u5207\u6362\u76ee\u5f55\uff1a cd dirx \u521b\u5efa\u76ee\u5f55\uff1a mkdir dirx \u5220\u9664\u76ee\u5f55\uff1a rm -r dirx \u7a0b\u5e8f\u64cd\u4f5c\uff1a \u8fd0\u884c\u7a0b\u5e8f\uff1a ./test \u8ba1\u65f6\u8fd0\u884c\uff1a time ./test \u91cd\u5b9a\u5411\u8f93\u5165\u8f93\u51fa\uff1a test<in.txt>out.txt \u67e5\u770b\u6240\u6709\u8fdb\u7a0b\uff1a ps \u6740\u6389\u540e\u53f0\u8fdb\u7a0b\uff1a killall test \u7ec8\u6b62\u8fdb\u7a0b\uff1a kill $pid \u5f3a\u5236\u7ec8\u6b62\u8fd0\u884c\uff1a Ctrl-C \u8f93\u5165\u7ed3\u5c3e\uff08EOF\uff09\uff1a Ctrl-Z \u7f16\u8bd1\u6307\u4ee4\uff1a \u751f\u6210\u8c03\u8bd5\u4fe1\u606f\uff1a -g \u751f\u6210\u76ee\u6807\u6587\u4ef6\uff1a -c \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff1a -o \u5305\u542b cmath \u5e93\uff1a -lm \u663e\u793a\u8b66\u544a\uff1a -Wall \u7f3a\u6c27\u3001\u6c27\u6c14\u4f18\u5316\uff1a -O0\uff0c-O2 C++14\uff1a -std=c++14 \u8ba1\u7b97\u673a\u5b89\u5168 \u00b6 \u786c\u4ef6\u5b89\u5168 \u00b6 \u9632\u9707\u3001\u9632\u6c34\u3001\u9632\u5316\u5b66\u8150\u8680\u3002 \u50a8\u5b58\u5b89\u5168 \u00b6 \u8ba1\u7b97\u673a\u75c5\u6bd2\u3001\u975e\u6cd5\u8bbf\u95ee\u3001\u7535\u78c1\u8f90\u5c04\u3001\u786c\u4ef6\u635f\u574f\u3002 \u8ba1\u7b97\u673a\u75c5\u6bd2 \u00b6 \u7e41\u6b96\u6027\u3002 \u7834\u574f\u6027\u3002 \u4f20\u67d3\u6027\u3002 \u6f5c\u4f0f\u6027\u3002 \u9690\u853d\u6027\u3002 \u53ef\u89e6\u53d1\u6027\u3002 \u4fdd\u62a4\u63aa\u65bd \u00b6 \u5b89\u88c5\u6740\u6bd2\u8f6f\u4ef6\u3002 \u5b89\u88c5\u4e2a\u4eba\u9632\u706b\u5899\u3002 \u8bbe\u7f6e\u5bc6\u7801\u3002 \u4e0d\u4e0b\u8f7d\u4e0d\u660e\u7a0b\u5e8f\u3002 \u9632\u8303\u6d41\u6c13\u8f6f\u4ef6\u3002 \u5b9a\u671f\u5907\u4efd\u3002 \u7b97\u6cd5\u57fa\u7840 \u00b6 \u7a0b\u5e8f\u57fa\u672c\u5e38\u8bc6 \u00b6 \u7b97\u6cd5\u7684\u91cd\u8981\u7279\u5f81\uff1a \u6709\u7a77\u6027\u3002 \u786e\u5b9a\u6027\u3002 \u8f93\u5165\u3001\u8f93\u51fa\u3002 \u53ef\u884c\u6027\u3002 \u903b\u8f91\u8868\u8fbe\u5f0f \u00b6 \u903b\u8f91\u8868\u8fbe\u5f0f\uff1a\u7531\u903b\u8f91\u8fd0\u7b97\u7ec4\u5408\u800c\u6210\uff0c\u8fd4\u56de\u503c\u53ea\u6709 \\(\\texttt{True}\\) \u548c \\(\\texttt{False}\\) \uff0c\u5176\u4e2d \\(0\\) \u8868\u793a\u5047\u3001\u975e \\(0\\) \u8868\u793a\u771f\u3002 \u5982\u679c\u903b\u8f91\u8868\u8fbe\u5f0f\u7531\u591a\u4e2a\u7ec4\u5408\uff0c\u9700\u8981\uff3b\u4ece\u53f3\u5f80\u5de6\uff3d\u4f9d\u6b21\u5224\u65ad\uff0c\u6700\u540e\u5f97\u51fa\u7b54\u6848\u3002\u8fd9\u79cd\u6027\u8d28\u88ab\u79f0\u4e3a\uff3b\u53f3\u7ed3\u5408\u6027\uff3d\uff0c\u4f8b\u5982\uff1a <\u8868\u8fbe\u5f0f1>?<\u8868\u8fbe\u5f0f2>:<\u8868\u8fbe\u5f0f3>?<\u8868\u8fbe\u5f0f4>:<\u8868\u8fbe\u5f0f5> \u6267\u884c\u7684\u65f6\u5019\u662f\u4ece\u8868\u8fbe\u5f0f \\(3\\) \u5f00\u59cb\u5224\u65ad\u662f\u5426\u4e3a\u771f\uff0c\u7136\u540e\u4ece\u53f3\u5f80\u5de6\u6267\u884c\u6bcf\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u4f9d\u6b21\u5411\u4e0a\u56de\u6eaf\uff0c\u6700\u540e\u5f97\u51fa\u7b54\u6848\u3002 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u7b26\u53f7\uff1a \\(T(n)\\) \u8868\u793a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c$T(n) = $ \u540e\u8ddf\u4e00\u4e2a\u7b26\u53f7\uff0c\u4f8b\uff1a \\(T(n) = \\mathcal{O}(n^2)\\) \u3002 \u7b26\u53f7 \u82f1\u6587\u540d\u79f0 \u610f\u4e49 \\(\\Theta\\) theta \u7b49\u4e8e \\(\\mathcal{O}\\) big-oh \u5c0f\u4e8e\u7b49\u4e8e \\(\\Omega\\) big-omega \u5927\u4e8e\u7b49\u4e8e\uff08\u4e0d\u5e38\u7528\uff09 \\(o\\) small-oh \u5c0f\u4e8e\uff08\u4e0d\u5e38\u7528\uff09 \\(\\omega\\) small omega \u5927\u4e8e\uff08\u4e0d\u5e38\u7528\uff09 \u8be6\u89c1\uff1a https://oi-wiki.org/basic/complexity/ \u3002 \u57fa\u7840\u7b97\u6cd5 \u00b6 \u4e0b\u9762\u6765\u81ea\u4e00\u672c\u901a\uff0c\u5206\u7c7b\u5e76\u4e0d\u552f\u4e00\u3002 \u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u3002 \u7a77\u4e3e\u7b97\u6cd5\u3002 \u6570\u636e\u6392\u5e8f\u3002 \u9012\u63a8\u7b97\u6cd5\u3002 \u9012\u5f52\u7b97\u6cd5\u3002 \u641c\u7d22\u548c\u56de\u6eaf\u7b97\u6cd5\u3002 \u8d2a\u5fc3\u7b97\u6cd5\u3002 \u5206\u6cbb\u7b97\u6cd5\u3002 \u52a8\u6001\u89c4\u5212\u3002 \u6570\u636e\u7ed3\u6784 \u00b6 \u6808 \u00b6 \u53ea\u80fd\u5728\u67d0\u4e00\u6bb5\u63d2\u5165\u548c\u5220\u9664\u7684\u7279\u6b8a\u7ebf\u6027\u8868\u3002 PUSH POP \u961f\u5217 \u00b6 \u5728\u4e00\u6bb5\u63d2\u5165\uff0c\u53e6\u4e00\u7aef\u5220\u9664\u7684\u7279\u6b8a\u7ebf\u6027\u8868\u3002 PUSH POP \u6392\u5e8f\u7b97\u6cd5 \u00b6 \u57fa\u4e8e\u6bd4\u8f83\uff1a\u901a\u8fc7\u6bd4\u8f83\u5143\u7d20\u6765\u6392\u5e8f\u6570\u5217\uff0c\u5982\u5192\u6ce1\u6392\u5e8f\uff0c\u5feb\u901f\u6392\u5e8f\u7b49\uff1b \u4e0d\u57fa\u4e8e\u6bd4\u8f83\uff1a\u4e0d\u6bd4\u8f83\u5143\u7d20\uff0c\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u57fa\u6570\u6392\u5e8f\u7b49\u3002 \u9009\u62e9\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f \u63d2\u5165\u6392\u5e8f \u5feb\u901f\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u5e73\u5747\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(n \\log n)\\) \u6700\u574f\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n \\log n)\\) \u6700\u597d\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n)\\) \\(\\mathcal{O}(n)\\) \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(n \\log n)\\) \u7a33\u5b9a\u6027 \u4e0d\u7a33\u5b9a \u7a33\u5b9a \u7a33\u5b9a \u4e0d\u7a33\u5b9a \u7a33\u5b9a \u7a7a\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(n)\\) \\(\\mathcal{O}(n)\\) \u5e0c\u5c14\u6392\u5e8f \u5806\u6392\u5e8f \u57fa\u6570\u6392\u5e8f \u5e73\u5747\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^{1.3})\\) \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(d \\times (n + w))\\) \u6700\u574f\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(d \\times (n + w))\\) \u6700\u597d\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(d \\times (n + w))\\) \u7a33\u5b9a\u6027 \u4e0d\u7a33\u5b9a \u4e0d\u7a33\u5b9a \u7a33\u5b9a \u7a7a\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(w)\\) \u56fe\u8bba\u57fa\u7840 \u00b6 \u5b9a\u4e49\uff1a\u56fe\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4 \\(G=(V,E)\\) \u3002 \u5176\u4e2d \\(V\\) \u662f\u975e\u7a7a\u96c6\uff0c\u79f0\u4e3a\u70b9\u96c6\uff0c\u5bf9\u4e8e \\(V\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u79f0\u5176\u4e3a\u9876\u70b9\u6216\u8282\u70b9\uff0c\u7b80\u79f0\u70b9\u3002 \u5176\u4e2d \\(E\\) \u4e3a \\(v\\) \u5404\u7ed3\u70b9\u4e4b\u95f4\u8fb9\u7684\u96c6\u5408\uff0c\u79f0\u4e3a\u8fb9\u96c6\u3002 \u5f53 \\(V,E\\) \u90fd\u662f\u6709\u9650\u96c6\u5408\u65f6\uff0c\u79f0 \\(G\\) \u4e3a\u6709\u9650\u56fe\uff0c\u5426\u5219\u4e3a\u65e0\u9650\u56fe\u3002 \u56fe G \u7684\u70b9\u6570 \\(|V|\\) \u4e5f\u88ab\u79f0\u4f5c\u56fe \\(G\\) \u7684\u9636\u3002 \u5b50\u56fe\uff1a\u5bf9\u4e00\u5f20\u56fe \\(G = (V, E)\\) \uff0c\u82e5\u5b58\u5728\u53e6\u4e00\u5f20\u56fe \\(H = (V', E')\\) \u6ee1\u8db3 \\(V' \\subseteq V\\) \u4e14 \\(E' \\subseteq E\\) \uff0c\u5219\u79f0 \\(H\\) \u662f \\(G\\) \u7684 \u5b50\u56fe\uff0c\u8bb0\u4f5c \\(H \\subseteq G\\) \u3002 \u53cd\u56fe\uff1a\u5bf9\u4e8e\u6709\u5411\u56fe \\(G = (V, E)\\) \uff0c\u5b83\u7684\u53cd\u56fe\u6307\u7684\u662f\u70b9\u96c6\u4e0d\u53d8\uff0c\u6bcf\u6761\u8fb9\u53cd\u5411\u5f97\u5230\u7684\u56fe\uff0c\u5373\uff1a\u82e5 \\(G\\) \u7684\u53cd\u56fe\u4e3a \\(G'=(V, E')\\) \uff0c\u5219 \\(E'=\\{(v, u)|(u, v)\\in E\\}\\) \u3002 \u65e0\u5411\u56fe\u3001\u6709\u5411\u56fe\uff1a \u65e0\u5411\u56fe\uff1a \u82e5 \\(G\\) \u4e3a\u65e0\u5411\u56fe\uff0c\u5219 \\(E\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a\u4e00\u4e2a\u65e0\u5e8f\u4e8c\u5143\u7ec4 \\((u, v)\\) \u3002 \u79f0 \\((u, v)\\) \u4e3a\u65e0\u5411\u8fb9\uff08\u7b80\u79f0\u8fb9\uff09\uff0c\u70b9 \\(u,v\\) \u79f0\u4e3a\u7aef\u70b9\u3002 \u6709\u5411\u56fe\uff1a \u82e5 \\(G\\) \u4e3a\u6709\u5411\u56fe\uff0c\u5219 \\(E\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e3a\u4e00\u4e2a\u6709\u5e8f\u4e8c\u5143\u7ec4 \\((u, v)\\) \uff0c\u6709\u65f6\u4e5f\u5199\u4f5c \\(u \\to v\\) \u3002 \u79f0 \\((u, v)\\) \u4e3a\u6709\u5411\u8fb9\uff08\u7b80\u79f0\u5f27\uff09\uff0c\u5728\u4e0d\u5f15\u8d77\u6df7\u6dc6\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u79f0\u4f5c\u8fb9\u3002 \u70b9 \\(u,v\\) \u79f0\u4e3a\u7aef\u70b9\uff0c\u4e14\u79f0 \\(u\\) \u4e3a \\(v\\) \u7684\u524d\u9a71\u3001 \\(v\\) \u4e3a \\(u\\) \u7684\u540e\u7ee7\u3002 \u82e5 \\(G\\) \u4e3a\u6df7\u5408\u56fe\uff0c\u5219 \\(E\\) \u4e2d\u65e2\u6709\u6709\u5411\u8fb9\uff0c\u53c8\u6709\u65e0\u5411\u8fb9\u3002 \u91cd\u8fb9\u548c\u81ea\u73af\uff1a \u81ea\u73af\uff1a\u5bf9 \\(E\\) \u4e2d\u7684\u8fb9 \\(e = (u, v)\\) \uff0c\u82e5 \\(u = v\\) \uff0c\u5219 \\(e\\) \u88ab\u79f0\u4f5c\u4e00\u4e2a\u81ea\u73af\u3002 \u91cd\u8fb9\uff1a\u82e5 \\(E\\) \u4e2d\u5b58\u5728\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u5143\u7d20\uff08\u8fb9\uff09 \\(e_1, e_2\\) \uff0c\u5219\u5b83\u4eec\u88ab\u79f0\u4f5c\uff08\u4e00\u7ec4\uff09\u91cd\u8fb9\u3002 \u7b80\u5355\u56fe\uff1a\u82e5\u4e00\u4e2a\u56fe\u4e2d\u6ca1\u6709\u81ea\u73af\u548c\u91cd\u8fb9\uff0c\u5b83\u88ab\u79f0\u4e3a\u7b80\u5355\u56fe\uff1b\u53cd\u4e4b\u79f0\u4e3a\u591a\u91cd\u56fe\u3002 \u6839\u636e\u9e3d\u5de2\u539f\u7406\uff1a\u5177\u6709\u81f3\u5c11\u4e24\u4e2a\u9876\u70b9\u7684\u7b80\u5355\u65e0\u5411\u56fe\u4e2d\u4e00\u5b9a\u5b58\u5728\u5ea6\u76f8\u540c\u7684\u7ed3\u70b9\u3002 \u5ea6\u6570\uff1a \u4e0e\u4e00\u4e2a\u9876\u70b9 \\(v\\) \u5173\u8054\u7684\u8fb9\u7684\u6761\u6570\u79f0\u4f5c\u8be5\u9876\u70b9\u7684\u5ea6\uff0c\u8bb0\u4f5c \\(\\deg(v)\\) \uff0c\u81ea\u73af\u4ea7\u751f\u4e24\u6b21\u8d21\u732e\u3002 \u63e1\u624b\u5b9a\u7406\uff08\u56fe\u8bba\u57fa\u672c\u5b9a\u7406\uff09\uff1a\u65e0\u5411\u56fe \\(G = (V, E)\\) \u6709 \\(\\sum_{v\\in V}\\deg(v) = 2|E|\\) \u3002 \u63a8\u8bba\uff1a\u5728\u4efb\u610f\u56fe\u4e2d\uff0c\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u5fc5\u7136\u6709\u5076\u6570\u4e2a\u3002 \u8def\u5f84\uff1a \u9014\u5f84\uff1a \u8fde\u63a5\u4e00\u8fde\u4e32\u9876\u70b9\u7684\u8fb9\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u4e3a\u6709\u9650\u6216\u65e0\u9650\u957f\u5ea6\u3002 \u4e00\u6761\u6709\u9650\u9014\u5f84 \\(w\\) \u662f\u4e00\u4e2a\u8fb9\u7684\u5e8f\u5217 \\(e_1, e_2, \\ldots, e_k\\) \uff0c\u4f7f\u5f97\u5b58\u5728\u4e00\u4e2a\u9876\u70b9\u5e8f\u5217 \\(v_0, v_1, \\ldots, v_k\\) \u6ee1\u8db3 \\(e_i = (v_{i-1}, v_i)\\) \uff0c\u5176\u4e2d \\(i \\in [1, k]\\) \uff0c\u7b80\u5199\u4e3a \\(v_0 \\to v_1 \\to v_2 \\to \\cdots \\to v_k\\) \u3002 \u65e0\u6743\u56fe\u8fb9\u7684\u6570\u91cf \\(k\\) \u88ab\u79f0\u4f5c\u8fd9\u6761\u9014\u5f84\u7684\u957f\u5ea6\uff1b\u5e26\u6743\u56fe\u957f\u5ea6\u901a\u5e38\u6307\u9014\u5f84\u4e0a\u7684\u8fb9\u6743\u4e4b\u548c\uff08\u9898\u76ee\u4e2d\u4e5f\u53ef\u80fd\u53e6\u6709\u5b9a\u4e49\uff09\u3002 \u8ff9\uff1a\u5bf9\u4e8e\u4e00\u6761\u9014\u5f84 \\(w\\) \uff0c\u82e5 \\(e_1, e_2, \\ldots, e_k\\) \u4e24\u4e24\u4e92\u4e0d\u76f8\u540c\uff0c\u5219\u79f0 \\(w\\) \u662f\u4e00\u6761\u8ff9\u3002 \u8def\u5f84\uff08\u53c8\u79f0\u7b80\u5355\u8def\u5f84\uff09\uff1a\u5bf9\u4e8e\u4e00\u6761\u8ff9 \\(w\\) \uff0c\u82e5\u5176\u8fde\u63a5\u7684\u70b9\u7684\u5e8f\u5217\u4e2d\u70b9\u4e24\u4e24\u4e0d\u540c\uff0c\u5219\u79f0 \\(w\\) \u662f\u4e00\u6761\u8def\u5f84\u3002 \u56de\u8def\uff1a\u5bf9\u4e8e\u4e00\u6761\u8ff9 \\(w\\) \uff0c\u82e5 \\(v_0 = v_k\\) \uff0c\u5219\u79f0 \\(w\\) \u662f\u4e00\u6761\u56de\u8def\u3002 \u73af\uff08\u53c8\u79f0\uff0c\u5708\uff0c\u7b80\u5355\u56de\u8def\uff0c\u7b80\u5355\u73af\uff09\uff1a\u5bf9\u4e8e\u4e00\u6761\u56de\u8def \\(w\\) \uff0c\u82e5 \\(v_0 = v_k\\) \u662f\u70b9\u5e8f\u5217\u4e2d\u552f\u4e00\u91cd\u590d\u51fa\u73b0\u7684\u70b9\u5bf9\uff0c\u5219\u79f0 \\(w\\) \u662f\u4e00\u4e2a\u73af\u3002 \u6b27\u62c9\uff08\u56de\uff09\u8def\uff1a \u5b58\u5728\u4e00\u7b14\u753b\uff0c\u79f0\u4e3a\u6b27\u62c9\u8def\uff0c\u56de\u5230\u8d77\u70b9\u4e3a\u6b27\u62c9\u56de\u8def\u3002 \u5b58\u5728\u6b27\u62c9\u8def\u7684\u6761\u4ef6\uff1a\u8054\u901a\u4e14 \\(\\deg\\) \u4e3a\u5947\u6570\u7684\u70b9\u53ea\u6709\u4e24\u4e2a\u3002 \u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u6761\u4ef6\uff1a\u8054\u901a\u4e14 \\(\\deg\\) \u4e3a\u5947\u6570\u7684\u70b9\u6709 \\(0\\) \u4e2a\uff0c \u8fde\u901a\u6027\uff1a \u65e0\u5411\u56fe\uff1a \u5bf9\u4e8e\u4e00\u5f20\u65e0\u5411\u56fe \\(G = (V, E)\\) \uff0c\u5bf9\u4e8e \\(u, v \\in V\\) \uff0c\u82e5\u5b58\u5728\u4e00\u6761\u9014\u5f84\u4f7f\u5f97 \\(v_0 = u, v_k = v\\) \uff0c\u5219\u79f0 \\(u\\) \u548c \\(v\\) \u662f\u8fde\u901a\u7684\u3002 \u8fde\u901a\u56fe\uff1a\u65e0\u5411\u56fe \\(G = (V, E)\\) \uff0c\u6ee1\u8db3\u5176\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u5747\u8fde\u901a\uff08\u8fde\u901a\u6027\uff09\u3002 \u82e5 \\(H\\) \u662f \\(G\\) \u7684\u4e00\u4e2a\u8fde\u901a\u5b50\u56fe\uff0c\u4e14\u4e0d\u5b58\u5728 \\(F\\) \u6ee1\u8db3 \\(H\\subsetneq F \\subseteq G\\) \u4e14 \\(F\\) \u4e3a\u8fde\u901a\u56fe\uff0c\u5219 \\(H\\) \u662f \\(G\\) \u7684\u4e00\u4e2a\u8fde\u901a\u5757\u6216\u8fde\u901a\u5206\u91cf\uff08\u6781\u5927\u8fde\u901a\u5b50\u56fe\uff09\u3002 \u6709\u5411\u56fe\uff1a \u5bf9\u4e8e\u4e00\u5f20\u6709\u5411\u56fe \\(G = (V, E)\\) \uff0c\u5bf9\u4e8e \\(u, v \\in V\\) \uff0c\u82e5\u5b58\u5728\u4e00\u6761\u9014\u5f84\u4f7f\u5f97 \\(v_0 = u, v_k = v\\) \uff0c\u5219\u79f0 \\(u\\) \u53ef\u8fbe \\(v\\) \u3002 \u5f3a\u8fde\u901a\uff1a\u6709\u5411\u56fe\u7684\u8282\u70b9\u4e24\u4e24\u4e92\u76f8\u53ef\u8fbe\u3002 \u5f31\u8fde\u901a\uff1a\u6709\u5411\u56fe\u7684\u8fb9\u66ff\u6362\u4e3a\u65e0\u5411\u8fb9\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u5f20\u8fde\u901a\u56fe\u3002 \u4e0e\u8fde\u901a\u5206\u91cf\u7c7b\u4f3c\uff0c\u4e5f\u6709\u5f31\u8fde\u901a\u5206\u91cf\uff08\u6781\u5927\u5f31\u8fde\u901a\u5b50\u56fe\uff09\u548c\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\uff09\u3002 \u5272\uff1a \u5bf9\u4e8e\u8fde\u901a\u56fe \\(G = (V, E)\\) \uff0c\u82e5 \\(V'\\subseteq V\\) \u4e14 \\(G' = (V\\setminus V', E)\\) \u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u5219 \\(V'\\) \u662f\u56fe \\(G\\) \u7684\u4e00\u4e2a\u70b9\u5272\u96c6\uff0c\u5927\u5c0f\u4e3a\u4e00\u7684\u70b9\u5272\u96c6\u53c8\u88ab\u79f0\u4f5c\u5272\u70b9\u3002 \u5bf9\u4e8e\u8fde\u901a\u56fe \\(G = (V, E)\\) \uff0c\u82e5 \\(E'\\subseteq E\\) \u4e14 \\(G' = (V, E\\setminus E')\\) \u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u5219 \\(E'\\) \u662f\u56fe \\(G\\) \u7684\u4e00\u4e2a\u8fb9\u5272\u96c6\uff0c\u5927\u5c0f\u4e3a\u4e00\u7684\u8fb9\u5272\u96c6\u53c8\u88ab\u79f0\u4f5c\u6865\u3002 \u5b8c\u5168\u56fe\uff1a \u5b8c\u5168\u56fe\uff1a\u65e0\u5411\u7b80\u5355\u56fe G \u6ee1\u8db3\u4efb\u610f\u4e0d\u540c\u4e24\u70b9\u95f4\u5747\u6709\u8fb9\u3002 \u6709\u5411\u5b8c\u5168\u56fe\uff1a\u6709\u5411\u56fe G \u6ee1\u8db3\u4efb\u610f\u4e0d\u540c\u4e24\u70b9\u95f4\u90fd\u6709\u4e24\u6761\u65b9\u5411\u4e0d\u540c\u7684\u8fb9\u3002 \u7ade\u8d5b\u56fe\uff1a\u6709\u5411\u7b80\u5355\u56fe G \u6ee1\u8db3\u4efb\u610f\u4e0d\u540c\u4e24\u70b9\u95f4\u90fd\u6709\u6070\u597d\u4e00\u6761\u5355\u5411\u8fb9\u3002 \u7279\u6b8a\u7684\u96c6\uff1a \u8986\u76d6\u96c6\uff1a \u70b9\u8986\u76d6 \\(V'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(V'\\subseteq V\\) \u4e14 \\(\\forall e\\in E\\) \u6ee1\u8db3 \\(e\\) \u7684\u81f3\u5c11\u4e00\u4e2a\u7aef\u70b9\u5728 \\(V'\\) \u4e2d\u3002 \u8fb9\u8986\u76d6 \\(E'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(E'\\subseteq E\\) \u4e14 \\(\\forall v\\in V\\) \u6ee1\u8db3 \\(v\\) \u4e0e \\(E'\\) \u4e2d\u7684\u81f3\u5c11\u4e00\u6761\u8fb9\u76f8\u90bb\u3002 \u72ec\u7acb\u96c6\uff1a \u72ec\u7acb\u96c6 \\(V'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(V'\\subseteq V\\) \u4e14 \\(V'\\) \u4e2d\u4efb\u610f\u4e24\u70b9\u90fd\u4e0d\u76f8\u90bb\u3002 \u8fb9\u72ec\u7acb\u96c6\uff08\u5339\u914d\uff09 \\(E'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(E'\\subseteq E\\) \u4e14 \\(E'\\) \u4e2d\u4efb\u610f\u4e24\u6761\u4e0d\u540c\u7684\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u7684\u7aef\u70b9\uff0c\u4e14 \\(E'\\) \u4e2d\u4efb\u610f\u4e00\u6761\u8fb9\u90fd\u4e0d\u662f\u81ea\u73af\u3002 \u652f\u914d\u96c6\uff1a \u652f\u914d\u96c6 \\(V'\\) \uff1a\u65e0\u5411\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(V'\\subseteq V\\) \u4e14 \\(\\forall v\\in(V\\setminus V')\\) \u5b58\u5728\u8fb9 \\((u, v)\\in E\\) \u6ee1\u8db3 \\(u\\in V'\\) \u3002 \u8fb9\u652f\u914d\u96c6 \\(E'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(E'\\subseteq E\\) \u4e14 \\(\\forall e\\in(E\\setminus E')\\) \u5b58\u5728 \\(E'\\) \u4e2d\u7684\u8fb9\u4e0e\u5176\u6709\u516c\u5171\u70b9\u3002 \u70b9\u8986\u76d6\u96c6\u5fc5\u4e3a\u652f\u914d\u96c6\uff0c\u4f46\u6781\u5c0f\u70b9\u8986\u76d6\u96c6\u4e0d\u4e00\u5b9a\u662f\u6781\u5c0f\u652f\u914d\u96c6\u3002\u4e00\u4e2a\u70b9\u96c6\u662f\u70b9\u8986\u76d6\u7684\u5145\u8981\u6761\u4ef6\u662f\u5176\u8865\u96c6\u662f\u72ec\u7acb\u96c6\uff0c\u56e0\u6b64\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u8865\u96c6\u662f\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6700\u5927\u5339\u914d\u4e5f\u53ef\u4ee5\u7531\u6700\u5c0f\u8fb9\u8986\u76d6\u6c42\u5f97\uff1a\u5bf9\u4e8e\u6700\u5c0f\u8fb9\u8986\u76d6\u4e2d\u6bcf\u5bf9\u6709\u516c\u5171\u70b9\u7684\u8fb9\u5220\u53bb\u5176\u4e2d\u4e00\u6761\u3002\u4e00\u5f20\u56fe\u7684\u6700\u5c0f\u8fb9\u8986\u76d6\u7684\u5927\u5c0f\u52a0\u4e0a\u6700\u5927\u5339\u914d\u7684\u5927\u5c0f\u7b49\u4e8e\u56fe\u7684\u70b9\u6570 \u6811\u7684\u5b9a\u4e49\uff1a \u6709 \\(n\\) \u4e2a\u7ed3\u70b9\uff0c \\(n-1\\) \u6761\u8fb9\u7684\u8fde\u901a\u65e0\u5411\u56fe\u3002 \u65e0\u5411\u65e0\u73af\u7684\u8fde\u901a\u56fe\u3002 \u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u7b80\u5355\u8def\u5f84\u7684\u65e0\u5411\u56fe\u3002 \u4efb\u4f55\u8fb9\u5747\u4e3a\u6865\u7684\u8fde\u901a\u56fe\u3002 \u6ca1\u6709\u5708\uff0c\u4e14\u5728\u4efb\u610f\u4e0d\u540c\u4e24\u70b9\u95f4\u6dfb\u52a0\u4e00\u6761\u8fb9\u4e4b\u540e\u6240\u5f97\u56fe\u542b\u552f\u4e00\u7684\u4e00\u4e2a\u5708\u7684\u56fe\u3002 \u6811\u7684\u6027\u8d28\uff1a \u5bf9\u4e8e\u65e0\u6839\u6811\u548c\u6709\u6839\u6811\uff1a \u68ee\u6797\uff1a\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\uff08\u8fde\u901a\u5757\uff09\u90fd\u662f\u6811\u7684\u56fe\uff0c\u4e00\u68f5\u6811\u4e5f\u662f\u68ee\u6797\u3002 \u751f\u6210\u6811\uff1a\u4e00\u4e2a\u8fde\u901a\u65e0\u5411\u56fe\u7684\u751f\u6210\u5b50\u56fe\uff0c\u540c\u65f6\u8981\u6c42\u662f\u6811\u3002\u4e5f\u5373\u5728\u56fe\u7684\u8fb9\u96c6\u4e2d\u9009\u62e9 \\(n - 1\\) \u6761\uff0c\u5c06\u6240\u6709\u9876\u70b9\u8fde\u901a\u3002 \u53f6\u7ed3\u70b9\uff1a \u65e0\u6839\u6811\uff1a\u5ea6\u6570\u4e0d\u8d85\u8fc7 1 \u7684\u7ed3\u70b9\u3002 \u6709\u6839\u6811\uff1a\u6ca1\u6709\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\u3002 \u5bf9\u4e8e\u6709\u6839\u6811\uff1a \u7236\u4eb2\uff1a\u5bf9\u4e8e\u9664\u6839\u4ee5\u5916\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5b9a\u4e49\u4e3a\u4ece\u8be5\u7ed3\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\uff0c\u6839\u7ed3\u70b9\u6ca1\u6709\u7236\u7ed3\u70b9\u3002 \u7956\u5148\uff1a\u4e00\u4e2a\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u9664\u4e86\u5b83\u672c\u8eab\u5916\u7684\u7ed3\u70b9\uff0c\u6839\u7ed3\u70b9\u7684\u7956\u5148\u96c6\u5408\u4e3a\u7a7a\u3002 \u5b50\u7ed3\u70b9\uff1a\u5982\u679c \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\uff0c\u90a3\u4e48 \\(v\\) \u662f \\(u\\) \u7684\u5b50\u7ed3\u70b9\u3002\u5b50\u7ed3\u70b9\u7684\u987a\u5e8f\u4e00\u822c\u4e0d\u52a0\u4ee5\u533a\u5206\uff0c\u4e8c\u53c9\u6811\u662f\u4e00\u4e2a\u4f8b\u5916\u3002 \u7ed3\u70b9\u7684\u6df1\u5ea6\uff1a\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u6570\u3002 \u6811\u7684\u9ad8\u5ea6\uff1a\u6240\u6709\u7ed3\u70b9\u7684\u6df1\u5ea6\u7684\u6700\u5927\u503c\u3002 \u5144\u5f1f\uff1a\u540c\u4e00\u4e2a\u7236\u4eb2\u7684\u591a\u4e2a\u5b50\u7ed3\u70b9\u4e92\u4e3a\u5144\u5f1f\u3002 \u540e\u4ee3\uff1a\u5b50\u7ed3\u70b9\u548c\u5b50\u7ed3\u70b9\u7684\u540e\u4ee3\u3002\u5982\u679c u \u662f v \u7684\u7956\u5148\uff0c\u90a3\u4e48 v \u662f u \u7684\u540e\u4ee3\u3002 \u5b50\u6811\uff1a\u5220\u6389\u4e0e\u7236\u4eb2\u76f8\u8fde\u7684\u8fb9\u540e\uff0c\u8be5\u7ed3\u70b9\u6240\u5728\u7684\u5b50\u56fe\u3002 \u6811\u7684\u904d\u5386\uff1a \u5148\u5e8f\u904d\u5386\uff1a\u6839\uff0c\u5de6\uff0c\u53f3\u3002 \u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\uff0c\u6839\uff0c\u53f3\u3002 \u540e\u5e8f\u904d\u5386\uff1a\u5de6\uff0c\u53f3\uff0c\u6839\u3002 \u5c42\u6b21\u904d\u5386\uff1a\u6811\u4e0a BFS\u3002 \u8868\u8fbe\u5f0f\u6811\uff1a\u4e8c\u53c9\u6811\uff0c\u5148\u5e8f\u5bf9\u5e94\u524d\u7f00\uff08\u6ce2\u5170\u5f0f\uff09\uff0c\u4e2d\u5e8f\u5bf9\u5e94\u4e2d\u7f00\uff0c\u540e\u5e8f\u5bf9\u5e94\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u9006\u6ce2\u5170\u5f0f\uff09\u3002 \u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff1a \u7b2c \\(i\\) \u5c42\u6700\u591a \\(2^{i-1}\\) \u4e2a\u8282\u70b9\u3002 \u6df1\u5ea6\u4e3a \\(k\\) \u6700\u591a\u6709 \\(2^k-1\\) \u4e2a\u8282\u70b9\u3002 \\(n_0=n_2+1\\) \u3002 \u6709 \\(n\\) \u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6df1\u5ea6\u4e3a \\(\\lfloor\\log_2n\\rfloor+1\\) \u3002 \u7279\u6b8a\u7684\u56fe\uff1a \u5982\u679c\u4e00\u5f20\u65e0\u5411\u8fde\u901a\u56fe\u5305\u542b\u6070\u597d\u4e00\u4e2a\u73af\uff0c\u5219\u79f0\u5b83\u662f\u4e00\u68f5\u57fa\u73af\u6811\u3002 \u5982\u679c\u4e00\u5f20\u6709\u5411\u5f31\u8fde\u901a\u56fe\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u90fd\u4e3a \\(1\\) \uff0c\u5219\u79f0\u5b83\u662f\u4e00\u68f5\u57fa\u73af\u5916\u5411\u6811\u3002 \u5982\u679c\u4e00\u5f20\u6709\u5411\u5f31\u8fde\u901a\u56fe\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u90fd\u4e3a \\(1\\) \uff0c\u5219\u79f0\u5b83\u662f\u4e00\u68f5\u57fa\u73af\u5185\u5411\u6811\u3002 \u591a\u68f5\u6811\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u68ee\u6797\uff0c\u591a\u68f5\u57fa\u73af\u6811\u53ef\u4ee5\u7ec4\u6210\u57fa\u73af\u68ee\u6797\uff0c\u591a\u68f5\u57fa\u73af\u5916\u5411\u6811\u53ef\u4ee5\u7ec4\u6210\u57fa\u73af\u5916\u5411\u6811\u68ee\u6797\uff0c\u591a\u68f5\u57fa\u73af\u5185\u5411\u6811\u53ef\u4ee5\u7ec4\u6210\u57fa\u73af\u5185\u5411\u68ee\u6797\u3002 \u5982\u679c\u4e00\u5f20\u65e0\u5411\u8fde\u901a\u56fe\u7684\u6bcf\u6761\u8fb9\u6700\u591a\u5728\u4e00\u4e2a\u73af\u5185\uff0c\u5219\u79f0\u5b83\u662f\u4e00\u68f5\u4ed9\u4eba\u638c\uff0c\u591a\u68f5\u4ed9\u4eba\u638c\u53ef\u4ee5\u7ec4\u6210\u6c99\u6f20\u3002 \u4e8c\u5206\u56fe\uff1a \u4e8c\u5206\u56fe\uff1a\u4e00\u5f20\u56fe\u7684\u70b9\u96c6\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u6bcf\u4e00\u90e8\u5206\u7684\u5185\u90e8\u90fd\u6ca1\u6709\u8fde\u8fb9\u3002 \u5b8c\u5168\u4e8c\u5206\u56fe\uff1a\u4e8c\u5206\u56fe\u4e2d\u4efb\u4f55\u4e24\u4e2a\u4e0d\u5728\u540c\u4e00\u90e8\u5206\u7684\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\u3002 \u6570\u5b66\u95ee\u9898 \u00b6 \u8be6\u89c1\uff1a https://www.luogu.com.cn/blog/334586/csp-pre-knowledge \u6392\u5217\u7ec4\u5408 \u00b6 \u6392\u5217 \\(A(n, m)\\) \uff0c\u65e7\u65f6\u5199\u4f5c \\(P(n, m)\\) \uff1a \\(\\displaystyle A(n, m) = \\frac{n!}{(n - m)!}\\) \u7ec4\u5408 \\(C(n, m)\\) \uff0c\u4e5f\u5199\u4f5c \\(\\displaystyle \\binom{n}{m}\\) \uff1a \\(\\displaystyle C(n, m) = \\frac{A(n, m)}{A(m, m)} = \\frac{n!}{m!(n - m)!}\\) \u9519\u6392\u5217\u95ee\u9898\uff1a \\(D_1 = 0\\) \uff0c \\(D_2 = 1\\) \uff0c \\(D_n = (n - 1)(D_{n - 1} + D_{n - 2})\\) Lucas \u5b9a\u7406\uff1a \\(\\displaystyle \\binom{n}{m} = \\binom{n \\bmod p}{m \\bmod p}\\binom{n / p}{m / p}\\) \uff0c\u5176\u4e2d \\(p\\) \u4e3a\u8d28\u6570 Catalan \u6570\uff1a \\(\\displaystyle C(n) = \\binom{2n}{n} - \\binom{2n}{n - 1} = \\frac{1}{n + 1} \\binom{2n}{n}\\) \u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \\(\\displaystyle (x + y)^k = \\sum_{i = 0}^{k} C(n, i) x^i y^{k - i}\\) \u6982\u7387\u4e0e\u7edf\u8ba1 \u00b6 \u72ec\u7acb\u4e8b\u4ef6\uff08\u5373\u4e24\u4e8b\u4ef6\u7684\u7ed3\u679c\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\uff09\uff1a \\(P(A \\cap B) = P(A) \\times P(B)\\) \u53e4\u5178\u516c\u5f0f\uff1a \\(P(A) = \\dfrac{|A|}{S}\\) \u8d1d\u53f6\u65af\u516c\u5f0f\uff1a \\(P(A \\mid B) = \\dfrac{P(A \\cap B)}{P(B)}\\) \u6570\u5b66\u671f\u671b\uff1a \\(\\displaystyle E(x) = \\sum_{i = 1}^\\infty x_i p_i\\) \u7ebf\u6027\u4ee3\u6570 \u00b6 \u77e9\u9635\uff1a \u77e9\u9635\u4e58\u6cd5 \\(O(nmr)\\) \uff1a \u8bbe \\(A = (a_{ij})_{n \\times m}\\) \uff0c \\(B = (b_{ij})_{m \\times r}\\) \uff0c \u8bbe \\(C = A \\times B = (c_{ij})_{n \\times r}\\) \uff0c \u5219 \\(\\displaystyle c_{ij} = \\sum_{k = 1}^{m} a_{ik}b_{kj}\\) \u65b9\u683c\u8def\u5f84 \u00b6 \u9898\u76ee\uff1a\u6709 \\(n \\times m\\) \u7684\u65b9\u683c\uff0c\u4ece \\((1, 1)\\) \u51fa\u53d1\uff0c\u53ea\u80fd\u5411\u53f3\u3001\u4e0b\u8d70\uff0c\u6c42\u8d70\u5230 \\((n, m)\\) \u7684\u65b9\u6848\u6570\u3002 \u9012\u63a8\u6cd5 \u6bcf\u4e2a\u683c\u5b50\u53ef\u4ee5\u4ece\u4e0a\u9762\u548c\u53f3\u9762\u8f6c\u79fb\u8fc7\u6765\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684 DP \u95ee\u9898\uff1a \\(f(i, j) = f(i - 1, j - 1) + f(i - 1, j)\\) . \u7ec4\u5408\u6570\u5b66\u6cd5 \\(C(n + m - 2, n - 1)\\) \u6216 \\(C(n + m - 2, m - 1)\\) . \u8bc1\u660e\uff1a\u4e00\u5171\u8981\u8d70 \\(n + m - 2\\) \u6b65\uff0c\u5176\u4e2d \\(n - 1\\) \u4e2a\u4e0b\uff0c \\(m - 1\\) \u4e2a\u53f3\uff0c\u968f\u65f6\u90fd\u80fd\u5411\u53f3\u8d70\uff0c\u8bc1\u6bd5\u3002 \u6269\u5c55 \u4ece \\((a, b)\\) \u8d70\u5230 \\((c, d)\\) \uff0c\u8def\u5f84\u6570\u4e3a \\(C(c - a + d - b, c - a)\\) \u6216 \\(C(c - a + d - b, d - b)\\) . \u5176\u4ed6 \u00b6 \u5bf9\u6570\u6052\u7b49\u5f0f\uff1a \\(\\log_kn = \\dfrac{\\log_xn}{\\log_xk}\\) \u6574\u6570\u6ea2\u51fa\uff1a signed \u6ea2\u51fa\u662f Undefined Behavior\uff08UB\uff09\uff0c\u662f\u5426\u53d6\u4f1a\u6a21\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\uff1b unsigned \u6ea2\u51fa\u662f Define Behavior\uff08DB\uff09\uff0c\u5728\u6ea2\u51fa\u65f6\u81ea\u52a8\u53d6\u6a21\u3002 \u6a21\u7b49\u5f0f\uff1a \u5bf9\u4e8e \\(m \\bmod n = p\\) \uff1a \u82e5 \\(m > n\\) \uff0c\u5219 \\(0 \\le p <n\\) \uff1b \u82e5 \\(m = n\\) \uff0c\u5219 \\(p = 0\\) \uff1b \u82e5 \\(m < n\\) \uff0c\u5219 \\(p = m\\) \uff1b \u6240\u4ee5 \\(p \\le \\min(m, n)\\) \u62ff\u5206\u6280\u5de7 \u00b6 \u4ee5\u4e0b\u5927\u591a\u6765\u81ea\u5b66\u800c\u601d https://mp.weixin.qq.com/s/fk9B6pTA_33aZbHp8fcw9A \u3002 \u666e\u901a\u5355\u9009\u9898\u5c31\u662f\u4e00\u4e2a\u9898\u9762\u4e00\u9053\u9898\u56db\u4e2a\u9009\u9879\uff0c\u4e3b\u8981\u662f\u4ece\u4e94\u4e2a\u65b9\u9762\u6765\u8003\u5bdf\uff0c\u5206\u522b\u662f\uff1a\u8ba1\u7b97\u673a\u57fa\u7840\u5e38\u8bc6\u3001C++ \u8bed\u6cd5\u3001\u57fa\u672c\u7b97\u6cd5\u7406\u8bba\u3001\u6570\u636e\u7ed3\u6784\u3001\u6570\u5b66\u57fa\u7840\u3002\u672c\u6587\u4e3b\u8981\u8be6\u8ff0\u4e00\u4e0b\u8fd9\u4e9b\u9898\u9002\u7528\u7684\u62ff\u5206\u6280\u5de7\uff0c\u5305\u62ec\uff1a\u6392\u9664\u6cd5\u3001\u7279\u6b8a\u503c\u4ee3\u5165\u6cd5\u3001\u6781\u503c\u6cd5\u7b49\uff0c\u9664\u6b64\u4e4b\u5916\u5728\u4e00\u4e9b\u4ee3\u7801\u9898\u4e2d\u4e5f\u53ef\u4ee5\u7528\u6a21\u62df\u6cd5\uff0c\u6a21\u62df\u6cd5\u4f1a\u5728\u4e0b\u6587\u8be6\u8ff0\u3002 \u957f\u7bc7\u4ee3\u7801\u9898\u5c31\u662f\u7ed9\u4e00\u6bb5\u4ee3\u7801\uff0c\u7136\u540e\u9700\u8981\u56de\u7b54\u82e5\u5e72\u9053\u4e0e\u4e4b\u76f8\u5173\u7684\u5ba2\u89c2\u9898\uff0c\u7ed9\u51fa\u7684\u4ee3\u7801\u53ef\u4ee5\u662f\u5b8c\u597d\u7684\uff08\u9605\u8bfb\u7a0b\u5e8f\u9898\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u6b8b\u7f3a\u7684\uff08\u5b8c\u5584\u7a0b\u5e8f\u9898\uff09\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u9898\uff0c\u6211\u4eec\u80fd\u7528\u7684\u6280\u5de7\u6709\uff1a\u6a21\u62df\u6cd5\u3001\u6a21\u4eff\u76f8\u4f3c\u4ee3\u7801\u6cd5\u3001\u76f8\u5173\u53d8\u91cf\u6cd5\u3001\u7ecf\u5178\u7b97\u6cd5\u5b9e\u73b0\u3001\u53c2\u8003\u6587\u5b57\u63d0\u793a\u3001\u7279\u6b8a\u6570\u636e\u5e26\u5165\u6cd5\u3001\u6392\u9664\u6cd5\u3001\u53cd\u4f8b\u6cd5\u7b49\u3002 \u6392\u9664\u6cd5 \u00b6 \u8fd9\u9053\u9898\u5f53\u5e74\u5f88\u591a\u540c\u5b66\u4e0d\u6562\u80af\u5b9a A \u662f\u5bf9\u7684\uff0c\u4f46\u662f\u5462\uff0c\u7531\u4e8e BCD \u9519\u5f97\u79bb\u8c31\uff0c\u6240\u4ee5\u5c31\u7b97\u4f60\u518d\u4e0d\u786e\u5b9a A \u662f\u4e0d\u662f\u5bf9\u7684\uff0c\u7531\u4e8e\u5176\u4ed6\u9009\u9879\u90fd\u88ab\u6392\u9664\u4e86\uff0c\u4e5f\u5c31\u53ea\u597d\u9009 A \u4e86\u3002 \u6781\u503c\u6cd5 \u00b6 \u672c\u9898\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u89c4\u5f8b\u9898\uff0c\u7406\u8bba\u4e0a\u5bf9\u4e8e\u4efb\u4f55\u7b26\u5408\u6761\u4ef6\u7684\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u90fd\u80fd\u6210\u7acb\uff0c\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u4ee3\u5165\u4e00\u4e9b\u6781\u4e3a\u7279\u6b8a\u7684\u6570\uff0c\u4ece\u800c\u80fd\u76f4\u63a5\u7b80\u5316\u6574\u4e2a\u9898\u76ee\u7684\u96be\u5ea6\u7b49\u7ea7\uff0c\u6bd4\u5982\u4ee3\u5165 \\(n = 1\\) \uff0c\u5219\u6570\u7ec4\u88ab\u7b80\u5316\u4e3a \\(1 \\times 1\\) \u7684\u6570\u7ec4\uff0c\u53ea\u6709 \\(1\\) \u4e2a\u5143\u7d20\uff1aa[0][0]\u3002 \u6b64\u65f6\uff0c\u8fd9\u4e2a\u5143\u7d20\u7684\u524d\u9762\u6ca1\u6709\u4efb\u4f55\u5143\u7d20\uff0c\u5373\uff0c\u6709 \\(0\\) \u4e2a\u5143\u7d20\u3002\u7136\u540e\u628a \\(i = 0\\) \u548c \\(j = 0\\) \u4ee3\u5165\u56db\u4e2a\u9009\u9879\uff0c\u80fd\u591f\u5feb\u901f\u5f97\u5230 A \u4e3a \\(-1\\) \u3001D \u4e3a \\(1\\) \u90fd\u662f\u4e0d\u7b26\u5408\u9898\u610f\u7684\u9009\u9879\uff0c\u5747\u53ef\u4ee5\u5feb\u901f\u6392\u9664\u3002\u81f3\u4e8e B \u548c C \u9009\u9879\uff0c\u6211\u4eec\u53ea\u9700\u8981\u518d\u4ee3\u5165\u4e00\u4e2a\u7a0d\u590d\u6742\u7684\u77e9\u9635\uff08\u5982 \\(3 \\times 4\\) \uff09\u7684\u5c31\u80fd\u8f7b\u677e\u89e3\u51b3\u95ee\u9898~ \u5728\u4e0a\u8ff0\u5b9e\u64cd\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u7279\u6b8a\u6781\u503c\uff0c\u5c06\u9898\u76ee\u5316\u7b80\u4e3a\u4e86\u4e00\u4e2a\u6781\u4e3a\u7b80\u5355\u7684\u60c5\u51b5\uff08\u4ece\u4e8c\u7ef4\u53d8\u6210\u4e86\u4e00\u7ef4\uff09\uff0c\u4ece\u800c\u5feb\u901f\u6392\u9664\u6389\u4e00\u534a\u7684\u9009\u9879\uff0c\u5c06\u968f\u673a\u9009\u62e9\u7684\u6b63\u786e\u7387\u4ece \\(25\\%\\) \u4e00\u4e0b\u5c31\u63d0\u9ad8\u5230\u4e86 \\(50\\%\\) \uff0c\u8fd9\u9053\u9898\u7684\u539f\u610f\u672c\u6765\u662f\u60f3\u8003\u5bdf\u6211\u4eec\u5bf9\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u7684\u7406\u89e3\u6df1\u5ea6\uff0c\u4f46\u662f\u5982\u679c\u4f60\u5bf9\u4e8c\u7ef4\u6570\u7ec4\u7684\u4e86\u89e3\u4e0d\u6df1\uff0c\u901a\u8fc7\u8fd9\u79cd\u6781\u503c\u7b80\u5316\u548c\u6392\u9664\u7684\u529e\u6cd5\uff0c\u4e5f\u80fd\u6781\u5927\u63d0\u9ad8\u5f97\u5206\u6982\u7387\u3002 \u4ee3\u5165\u6cd5 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4ee3\u5165\u4e00\u4e9b\u7279\u6b8a\u7684\u6570\u636e\uff0c\u6765\u731c\u6d4b\u4ec0\u4e48\u6837\u7684\u6570\u7ec4\u5408\u5e76\u65f6\uff0c\u6bd4\u8f83\u6b21\u6570\u6700\u591a\uff0c\u5e76\u7b97\u51fa\u6700\u591a\u7684\u6bd4\u8f83\u6b21\u6570\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u662f a \u6570\u7ec4 \\([1, 2, 3]\\) \u548c b \u6570\u7ec4 \\([4, 5, 6]\\) \u4e24\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u53d1\u73b0\u9996\u5148 \\(1\\) \u3001 \\(2\\) \u3001 \\(3\\) \u5206\u522b\u9700\u8981\u548c \\(4\\) \u6bd4\u8f83\u4e00\u6b21\u540e\u653e\u5165\u7ed3\u679c\u6570\u7ec4\uff0c\u7136\u540e\u7531\u4e8e a \u6570\u7ec4\u5df2\u7ecf\u6ca1\u6709\u4e86\u53ef\u6bd4\u8f83\u5143\u7d20\u4e86\uff0cb \u6570\u7ec4\u5c31\u76f4\u63a5\u6309\u987a\u5e8f\u653e\u5165\u7ed3\u679c\u6570\u7ec4\u5373\u53ef\uff0c\u6240\u4ee5\u6bd4\u8f83\u6b21\u6570\u53ea\u9700\u8981 \\(3\\) \u6b21\uff0c\u5373 n \u6b21\u5373\u53ef\u3002 \u8fd9\u6837\u663e\u7136\u592a\u987a\u5229\u4e86\uff0c\u800c\u9898\u76ee\u95ee\u7684\u662f\u81f3\u591a\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8fd0\u6c14\u4e0d\u592a\u597d\u7684\u6570\u7ec4\uff0c\u5982 a \u4e3a \\([1, 3, 5]\\) \uff0cb \u4e3a \\([2, 4, 6]\\) \uff0c\u8fd9\u6837 \\(1\\) \u9700\u8981\u548c \\(2\\) \u6bd4\u8f83\uff0c\u7136\u540e\u653e\u5165\u7ed3\u679c\u6570\u7ec4\uff0c \\(2\\) \u9700\u8981\u548c \\(3\\) \u6bd4\u8f83\u3001 \\(3\\) \u9700\u8981\u548c \\(4\\) \u6bd4\u8f83\u7b49\u7b49\u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u5408\u5e76\u8fd9\u4e24\u4e2a\u6570\u7ec4\u9700\u8981\u6bd4\u8f83 \\(5\\) \u6b21\uff0c\u54b1\u4eec\u53ef\u4ee5\u968f\u610f\u589e\u5927\u6570\u7ec4\u957f\u5ea6\u627e\u89c4\u5f8b\uff0c\u53ef\u77e5\u9700\u8981\u6bd4\u8f83 \\(2n \u2013 1\\) \u6b21\u3002\u800c\u4e14\u7531\u4e8e\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5916\uff0c\u6bcf\u4e2a\u5143\u7d20\u8fdb\u6570\u7ec4\u524d\u90fd\u8981\u6bd4\u8f83\u4e00\u6b21\uff0c\u6bd4\u8f83\u5f97\u5f88\u5145\u5206\uff0c\u6ca1\u6709\u5176\u4ed6\u60c5\u51b5\u80fd\u6bd4\u8fd9\u79cd\u60c5\u51b5\u6bd4\u7684\u6b21\u6570\u66f4\u591a\u4e86\uff0c\u6545\u800c\u5f97\u5230\u672c\u9898\u7b54\u6848\u9009 D\u3002\u8fd9\u6837\u4ee3\u5165\u5177\u4f53\u4f8b\u5b50\u80af\u5b9a\u6bd4\u540c\u5b66\u4eec\u5728\u7406\u8bba\u5c42\u9762\u63a8\u8981\u5feb\uff0c\u8981\u76f4\u89c2\uff0c\u66f4\u4e0d\u5bb9\u6613\u9519\uff0c\u5bf9\u5427\uff1f \u6a21\u62df\u6cd5 \u00b6 \u82e5\u53d8\u91cf\u4e2a\u6570\u8fc7\u591a\uff0c\u6216\u7a0b\u5e8f\u53d8\u5316\u8fc7\u4e8e\u590d\u6742\uff0c\u968f\u624b\u5199\u7684\u8fc7\u7a0b\u4e2d\u5bb9\u6613\u7a0d\u4e0d\u7559\u795e\u5c31\u51fa\u9519\u65f6\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u8bbe\u8ba1\u8868\u683c\u6765\u5c55\u793a\u6240\u6709\u6570\u636e\u3002\u6a21\u62df\u65f6\uff0c\u9047\u5230\u5e38\u89c1\u7684\u53d8\u91cf\u540d\u548c\u7b97\u6cd5\u7ed3\u6784\u65f6\uff0c\u53ef\u4ee5\u5927\u80c6\u5730\u6839\u636e\u53d8\u91cf\u540d\u3001\u7b97\u6cd5\u7ed3\u6784\u731c\u6d4b\u5176\u4f5c\u7528\uff0c\u518d\u6839\u636e\u6a21\u62df\u7684\u7ed3\u679c\u5c0f\u5fc3\u9a8c\u8bc1\uff0c\u8fd9\u6837\u80fd\u591f\u63d0\u9ad8\u505a\u5bf9\u7684\u6982\u7387\uff0c\u5e76\u4e14\u6781\u5927\u51cf\u5c11\u6211\u4eec\u6a21\u62df\u65f6\u7684\u5de5\u4f5c\u91cf~ \u5e38\u89c1\u7684\u53d8\u91cf\u540d\u5982\u4e0b\uff1a \u5bf9\u4e8e\u5e38\u89c1\u7684\u7b97\u6cd5\u7ed3\u6784\uff0c\u5927\u5bb6\u53ef\u4ee5\u91cd\u70b9\u5173\u6ce8\u4e00\u4e9b\u7b97\u6cd5\u7684\u5178\u578b\u7ed3\u6784\uff1a\u4e8c\u5206\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u8fde\u7eed\u5b57\u7b26\u5224\u65ad\uff08\u5b57\u7b26\u8f6c\u6570\u5b57\uff09\u3001\u94fe\u8868\u3001\u5206\u6cbb\u3001\u4e8c\u53c9\u6811\u7b49\u3002\u6b64\u5904\u9650\u4e8e\u7bc7\u5e45\u5c31\u4e0d\u8be6\u7ec6\u5217\u51fa\u6bcf\u79cd\u7ed3\u6784\u4e86\uff0c\u8bf7\u5927\u5bb6\u4e00\u5b9a\u8981\u5bf9\u7167\u4ee3\u7801\uff0c\u4ed4\u7ec6\u603b\u7ed3\u3002 \u867d\u7136\u6a21\u62df\u6cd5\u975e\u5e38\u6709\u7528\uff0c\u4f46\u662f\u6bd4\u8f83\u4f9d\u8d56\u5404\u4f4d\u540c\u5b66\u624e\u5b9e\u7684\u4ee3\u7801\u80fd\u529b\uff0c\u5bf9\u4e8e\u975e\u5e38\u590d\u6742\u7684\u9898\uff0c\u4ee3\u7801\u80fd\u529b\u5f31\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u6a21\u62df\u5f97\u975e\u5e38\u5403\u529b\uff0c\u8fd8\u5bb9\u6613\u51fa\u9519\uff0c\u6240\u4ee5\u4e0b\u8ff0\u6280\u5de7\u5176\u5b9e\u624d\u662f\u54b1\u4eec\u201c\u9a97\u5206\u201d\u7684\u4e3b\u529b\uff01 \u6a21\u4eff\u76f8\u4f3c\u4ee3\u7801\u6cd5 \u00b6 \u5728\u6211\u4eec\u7f16\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u4f1a\u51fa\u73b0\u76f8\u4f3c\u5ea6\u5f88\u9ad8\u7684\u4ee3\u7801\uff0c\u5b83\u4eec\u901a\u5e38\u662f\u5bf9\u4e0d\u540c\u7684\u5bf9\u8c61\u505a\u76f8\u540c\u6216\u8005\u76f8\u4f3c\u7684\u5904\u7406\u3002\u8fd9\u79cd\u73b0\u8c61\u5e38\u5e38\u51fa\u73b0\u5728\u679a\u4e3e\u3001\u5206\u6cbb\u6216\u8005\u6811\u7ed3\u6784\u76f8\u5173\u7684\u7a0b\u5e8f\u4e0a\u3002\u5f53\u6211\u4eec\u9700\u8981\u8865\u5168\u8bed\u53e5\u65f6\uff0c\u53c2\u8003\u4e0e\u5b83\u76f8\u4f3c\u7684\u6bb5\u843d\u5f80\u5f80\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u5f88\u591a\u63d0\u793a\u548c\u542f\u53d1\u3002 \u65b9\u6cd5\u4e3e\u4f8b\uff1a \u901a\u8fc7\u9898\u76ee\u53ef\u77e5\uff0c\u672c\u9898\u4ee3\u7801\u8003\u5bdf\u7684\u662f\u4e8c\u53c9\u6811\u7ed3\u6784\u3002\u5728\u4ee3\u7801\u91cc\uff0c\u4f60\u80fd\u53d1\u73b0\u76f8\u4f3c\u7684\u5730\u65b9\u4e0d\uff1f16\u884c\u548c17\u884c\u7684\u4ee3\u7801\u662f\u6bd4\u8f83\u76f8\u4f3c\u7684\u5427\uff1f\u4ece \\(17\\) \u884c\u7684 a[root].rch \u6765\u770b\uff0c\u6211\u4eec\u4e0d\u96be\u731c\u51fa\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u8981\u904d\u5386\u5b83\u7684\u53f3\u5b50\u6811\uff0c\u90a3\u4e48 \\(16\\) \u884c\u5e94\u8be5\u662f\u8981\u904d\u5386\u4ec0\u4e48\u5462\uff1f\u81ea\u7136\u662f\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u6807\u53f7\u4e3a \u2461 \u8fd9\u4e2a\u7a7a\u7684\u7b54\u6848\u547c\u4e4b\u6b32\u51fa\uff1a\u81ea\u7136\u662f a[root].lch \u3002 \u901a\u8fc7 \\(16\\) \u884c\u53ef\u77e5\uff0c\u5de6\u5b50\u6811\u7684\u8303\u56f4\u662f lower_bound \u5230 cur \uff0c\u90a3\u4e48 \u2462\u2463 \u7a7a\u53f3\u5b50\u6811\u7684\u8303\u56f4\u662f\u5565\u5462\uff1f\u80af\u5b9a\u4ece cur \u5de6\u53f3\u5f00\u59cb\uff0c\u5230 upper_bound \u3002\u4e3a\u5565\u662f upper_bound \u5462\uff1f\u56e0\u4e3a\u4e00\u67e5\u5b57\u5178\u5c31\u77e5\u9053\uff0c lower_bound \u662f\u4e0b\u754c\uff08\u4e0b\u9650/\u6700\u5c0f\u503c\uff09\uff0c\u6240\u4ee5\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8bcd\uff0c\u4e60\u60ef\u4e0a\u4e00\u822c\u79f0\u4e3a upper_bound \uff08\u4e0a\u754c\uff09\u3002\u7ecf\u8fc7\u6b64\u756a\u4e25\u8c28\u800c\u5927\u80c6\u7684\u731c\u6d4b\u540e\uff0c\u4e0b\u9762\u7684\u51e0\u9898\u4f60\u4f1a\u9009\u4e86\u4e48\uff1f \u5f53\u7136\uff0c\u4f60\u8981\u662f\u89c9\u5f97\u7528\u6280\u5de7\u7684\u731c\u6d4b\u8fc7\u4e8e\u5927\u80c6\u4e86\uff0c\u4e0d\u653e\u5fc3\u7684\u8bdd\uff0c\u5728\u65f6\u95f4\u5bcc\u88d5\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u518d\u7528\u6a21\u62df\u6cd5\u4ee3\u5165\u5177\u4f53\u6570\u503c\u5c0f\u5fc3\u9a8c\u8bc1\u4e00\u4e0b\u3002 \u7ecf\u5178\u7b97\u6cd5\u5b9e\u73b0 \u00b6 \u5f88\u591a\u9898\u76ee\uff0c\u7279\u522b\u662f\u5b8c\u5584\u7a0b\u5e8f\u9898\u7684\u9898\u76ee\u90fd\u4f1a\u6d89\u53ca\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u5177\u4f53\u7684\u7b97\u6cd5\uff0c\u800c\u5f88\u591a\u7b97\u6cd5\u662f\u6709\u660e\u663e\u7684\u7ecf\u5178\u4ee3\u7801\u7279\u8272\u7684\u3002\u56e0\u6b64\uff0c\u54b1\u4eec\u53ef\u4ee5\u5229\u7528\u7b97\u6cd5\u672c\u8eab\u7ea6\u5b9a\u4fd7\u6210\u7684\u5199\u6cd5\u5c31\u80fd\u5feb\u901f\u89e3\u9898\uff01 \u65b9\u6cd5\u4e3e\u4f8b\uff1a \u672c\u9898\u7684 \\(1\\) \u3001 \\(2\\) \u7a7a\u4e00\u770b\u5c31\u662f\u5728\u6c42\u6240\u6709\u7684\u7ea6\u6570\uff0c\u7ed3\u5408\u9898\u76ee\u8981\u6c42\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt n)\\) \uff0c\u6211\u4eec\u6839\u636e\u8fc7\u5f80\u6c42\u89e3\u56e0\u6570\u4e2a\u6570\u7b49\u7684\u6a21\u677f\u53ef\u77e5\uff0c \\(1\\) \u7a7a\u4e3a i * i \uff08\u56e0\u4e3a\u7ea6\u6570\u662f\u6210\u53cc\u6210\u5bf9\u7684\uff0c\u627e\u5230 \\(\\sqrt n\\) \u5c31\u884c\u4e86\uff09\uff0c \\(2\\) \u7a7a\u4e3a n / i \uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u5b8c\u5168\u5e73\u65b9\u6570\u6709\u4e00\u4e2a\u65e0\u6cd5\u6210\u5bf9\u7684\u7ea6\u6570\u60c5\u51b5\uff08\u5982\uff0c \\(36\\) \u7684\u7ea6\u6570 \\(6\\) \u6ca1\u6709\u4e0e\u4e4b\u914d\u5bf9\u7684\u4e0d\u540c\u7684\u7ea6\u6570\u4e86\uff09\u3002 \u672c\u9898\u7684 \\(3\\) \u3001 \\(4\\) \u7a7a\u6839\u636e\u51fd\u6570\u540d\u548c\u9898\u76ee\u63cf\u8ff0\u53ef\u77e5\uff0c\u5176\u4f5c\u7528\u662f\u6c42\u6700\u5927\u516c\u7ea6\u6570\u7684\u51fd\u6570\uff0c\u7ed3\u5408\u9898\u76ee\u8981\u6c42\u590d\u6742\u5ea6\u4e3a \\(O(\\log \\max(a, b))\\) \uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u662f\u8003\u8f97\u8f6c\u76f8\u9664\u6cd5\u7684\u9012\u5f52\u7248\u672c\uff0c\u6240\u4ee5 \\(3\\) \u4e3a return a \u3001 \\(4\\) \u4e3a a % b \u3002 \u53cd\u4f8b\u6cd5 \u00b6 \u6b64\u65b9\u6cd5\u901a\u5e38\u7528\u5728\u5224\u65ad\u9898\u91cc\uff0c\u6839\u636e\u9898\u76ee\u7ed9\u7684\u6761\u4ef6\uff0c\u53ea\u8981\u80fd\u4e3e\u51fa\u4e00\u4e2a\u53cd\u4f8b\uff0c\u90a3\u4e48\u9898\u76ee\u6240\u63cf\u8ff0\u7684\u5185\u5bb9\u5c31\u4f1a\u4e0d\u6210\u7acb\u3002 \u65b9\u6cd5\u4e3e\u4f8b\uff1a \u6bd4\u5982\uff0c\u9898\u76ee\u8bf4\uff1a\u6570\u7ec4 a[i] \u5fc5\u987b\u5168\u4e3a\u6b63\u6574\u6570\uff0c\u5426\u5219\u7a0b\u5e8f\u5c06\u9009\u5165\u6b7b\u5faa\u73af\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06 \\(0\\) \u6216\u8005\u8d1f\u6574\u6570\u4ee3\u5165 a \u6570\u7ec4\uff0c\u770b\u770b\u4f1a\u4e0d\u4f1a\u6b7b\u5faa\u73af\uff0c\u53ea\u8981\u80fd\u627e\u5230\u4e00\u4e2a\u53cd\u4f8b\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u63cf\u8ff0\u7684\u60c5\u51b5\u5c31\u4e0d\u6210\u7acb\u3002\u5f53\u7136\uff0c\u7531\u4e8e\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u53cd\u4f8b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ee3\u5165\u5c3d\u53ef\u80fd\u7b80\u5355\u7684\u6570\uff0c\u6bd4\u5982 \\(0\\) \u6216 \\(-1\\) \uff0c\u8fd9\u6837\u5c31\u80fd\u5feb\u901f\u7b97\u51fa\u7b54\u6848\u3002","title":"\u521d\u8d5b\u77e5\u8bc6\u70b9\u6c47\u603b"},{"location":"contest/pre/#_1","text":"","title":"\u521d\u8d5b\u77e5\u8bc6\u70b9\u6c47\u603b"},{"location":"contest/pre/#_2","text":"","title":"\u8ba1\u7b97\u673a\u57fa\u7840"},{"location":"contest/pre/#_3","text":"","title":"\u7535\u5b50\u8ba1\u7b97\u673a"},{"location":"contest/pre/#_4","text":"\u65f6\u671f \u5f62\u5f0f \\(1946\\sim1958\\) \u7535\u5b50\u7ba1 \\(1959\\sim1964\\) \u6676\u4f53\u7ba1 \\(1965\\sim1970\\) \u96c6\u6210\u7535\u8def \\(1971\\sim\\text{N/A}\\) \uff08\u8d85\uff09\u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def \u73b0\u4ee3 \u667a\u80fd\u8ba1\u7b97\u673a\u7cfb\u7edf\uff08\u6839\u636e\u7b2c\u4e94\u7248\u521d\u8d5b\u4e00\u672c\u901a\uff09 \u6469\u5c14\u5b9a\u5f8b\uff1a\u96c6\u6210\u7535\u8def\u4e0a\u53ef\u4ee5\u5bb9\u7eb3\u7684\u6676\u4f53\u7ba1\u6570\u76ee\u5728\u5927\u7ea6\u6bcf\u7ecf\u8fc7 \\(18\\) \u4e2a\u6708\u5230 \\(24\\) \u4e2a\u6708\u4fbf\u4f1a\u589e\u52a0\u4e00\u500d\u3002","title":"\u6309\u5e74\u4ee3\u5206\u7c7b"},{"location":"contest/pre/#_5","text":"\u5de8\u578b\u673a \\(>\\) \u5927 / \u4e2d\u578b\u673a \\(>\\) \u5c0f\u578b\u673a \\(>\\) \u5fae\u578b\u673a \\(=\\) \u5de5\u4f5c\u7ad9\u3002 \u5de8\u578b\u673a\uff08\u8d85\u7ea7\u8ba1\u7b97\u673a\uff09\uff1a\u79d1\u5b66\u7814\u7a76\u3002 \u5927 / \u4e2d\u578b\u673a\uff1a\u9876\u5c16\u79d1\u7814\u9886\u57df\u3002 \u5c0f\u578b\u673a\uff1a\u5355\u4f4d\u670d\u52a1\u5668\u3001\u5176\u4ed6\u9886\u57df\u3002 \u5fae\u578b\u673a\uff1a\u4e2a\u4eba\u5de5\u4f5c\uff08\u4e2a\u4eba\u7535\u8111\u5927\u90e8\u5206\u90fd\u662f\u5fae\u578b\u673a\uff09\u3002 \u5de5\u4f5c\u7ad9\uff1a\u8f85\u52a9\u5fae\u578b\u673a\u5de5\u4f5c\u3002 \u8865\uff1a\u5927\u578b\u673a\u548c\u8d85\u7ea7\u8ba1\u7b97\u673a\uff08\u65e7\u79f0\u5de8\u578b\u673a\uff09\u7684\u4e3b\u8981\u533a\u522b: \u5927\u578b\u673a\u4e3b\u8981\u7528\u4e8e\u5546\u4e1a\u9886\u57df\uff0c\u5de8\u578b\u7528\u4e8e\u5c16\u7aef\u79d1\u5b66\u9886\u57df\uff08\u7279\u522b\u662f\u56fd\u9632\u9886\u57df\uff09\u3002 \u5927\u578b\u673a\u957f\u4e8e\u975e\u6570\u503c\u8ba1\u7b97\uff08\u6570\u636e\u5904\u7406\uff09\uff0c\u5de8\u578b\u957f\u4e8e\u6570\u503c\u8ba1\u7b97\uff08\u79d1\u5b66\u8ba1\u7b97\uff09\u3002 \u4e3a\u4e86\u786e\u4fdd\u517c\u5bb9\u6027\uff0c\u5927\u578b\u673a\u7684\u90e8\u5206\u6280\u672f\u8f83\u4e3a\u4fdd\u5b88\u3002 \u5927\u578b\u673a\u4f7f\u7528\u4e13\u7528\u6307\u4ee4\u7cfb\u7edf\u548c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5de8\u578b\u673a\u4f7f\u7528\u901a\u7528\u5904\u7406\u5668\u53ca UNIX \u6216\u7c7b UNIX \u64cd\u4f5c\u7cfb\u7edf\u3002","title":"\u6309\u6027\u80fd\u5206\u7c7b"},{"location":"contest/pre/#_6","text":"\u5e15\u65af\u5361\uff08\u6cd5\u56fd\uff09\uff1a\u52a0\u6cd5\u673a\u3002 \u83b1\u5e03\u5c3c\u8328\uff08\u5fb7\u56fd\uff09\uff1a\u6539\u8fdb\u52a0\u6cd5\u673a\u3002 \u5df4\u8d1d\u5947\uff08\u82f1\u56fd\uff09\uff1a\u5206\u6790\u673a\u3002 \u970d\u52d2\u745e\u65af\uff08\u7f8e\u56fd\uff09\uff1a\u7a7f\u5b54\u5361\u7247\u673a\u3002","title":"\u673a\u68b0\u5f0f\u8ba1\u7b97\u673a"},{"location":"contest/pre/#_7","text":"\u827e\u4f26\u00b7\u56fe\u7075\uff08\u82f1\u56fd\uff09\uff1a \u6570\u5b66\u5bb6\uff0c\u903b\u8f91\u5b66\u5bb6\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u4eba\u5de5\u667a\u80fd\u4e4b\u7236\uff0c\u63d0\u51fa\u56fe\u7075\u6d4b\u8bd5\uff08 Can Machine Think? \uff09\u3002 \u534f\u52a9\u519b\u65b9\u7834\u89e3\u5fb7\u56fd\u8457\u540d\u5bc6\u7801\u7cfb\u7edf Enigma\uff0c\u9996\u6b21\u63d0\u51fa\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u7406\u8bba\u3002 \u8ba1\u7b97\u673a\u754c\u7684\u6700\u9ad8\u5956\u9879\u56fe\u7075\u5956\uff08\u7f8e\u56fd\u8ba1\u7b97\u673a\u534f\u4f1a ACM \u8bbe\u7acb\uff09\u4ee5\u4ed6\u547d\u540d\uff0c\u88ab\u79f0\u4e3a\u8ba1\u7b97\u673a\u754c\u7684\u8bfa\u8d1d\u5c14\u5956\u3002 \u51af\u00b7\u8bfa\u4f9d\u66fc\uff08\u7f8e\u56fd\uff09\uff1a \u79d1\u5b66\u5bb6\uff0c\u73b0\u4ee3\u8ba1\u7b97\u673a\u4e4b\u7236\u3002 \u9996\u6b21\u63d0\u51fa\u4e86\u5b58\u50a8\u7a0b\u5e8f\u63a7\u5236\u539f\u7406\uff0c\u79f0\u4e3a\u51af\u00b7\u8bfa\u4f9d\u66fc\u7ed3\u6784\u3002 \u514b\u52b3\u5fb7\u00b7\u9999\u519c\uff08\u7f8e\u56fd\uff09\uff1a \u79d1\u5b66\u5bb6\uff0c\u521b\u9020\u4e86\u4fe1\u606f\u8bba\u3002 \u63d0\u51fa\u4e86\u67d0\u79cd\u4fe1\u606f\u4ece\u4e00\u5904\u4f20\u9001\u5230\u53e6\u4e00\u5904\u6240\u9700\u7684\u5168\u90e8\u8bbe\u5907\u6240\u6784\u6210\u7684\u7cfb\u7edf\u3002 \u963f\u8fbe\u00b7\u6d1b\u8299\u83b1\u65af\uff08\u82f1\u56fd\uff09\uff1a \u6570\u5b66\u5bb6\uff0c\u8457\u540d\u8bd7\u4eba\u62dc\u4f26\u7684\u5973\u513f\u3002 \u8bbe\u8ba1\u4e86\u5df4\u8d1d\u5947\u5206\u6790\u673a\u4e0a\u89e3\u4f2f\u52aa\u5229\u65b9\u7a0b\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5efa\u7acb\u4e86\u5faa\u73af\u548c\u5b50\u7a0b\u5e8f\u7684\u6982\u5ff5\u3002 \u88ab\u79f0\u4e3a\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5458\u3002 \u4e3a\u7eaa\u5ff5 Ada\uff0c\u7f8e\u56fd\u56fd\u9632\u90e8\u8bbe\u8ba1\u7684\u4e00\u6b3e\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u79f0\u4e3a Ada\u3002 \u65e9\u671f\u7535\u5b50\u8ba1\u7b97\u673a\uff1a \u7b2c\u4e00\u53f0\u7535\u5b50\u8ba1\u7b97\u673a\uff1aENIAC\uff081946\uff0c\u7f8e\u56fd\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\uff09\u3002 \u7b2c\u4e00\u53f0\u5177\u6709\u50a8\u5b58\u529f\u80fd\u7684\uff08\u7b2c\u4e00\u53f0\u51af\u673a\uff09\u7535\u5b50\u8ba1\u7b97\u673a\uff1aEDVAC\u3002 \u5747\u7531\u7f8e\u56fd\u9646\u519b\u963f\u4f2f\u4e01\u8bd5\u9a8c\u573a\u7684\u5f39\u9053\u7814\u7a76\u5b9e\u9a8c\u5ba4\u7814\u5236\u3002","title":"\u65e9\u671f\u60c5\u51b5"},{"location":"contest/pre/#_8","text":"CPU\uff1a\u4e2d\u592e\u5904\u7406\u5668\uff0c\u8ba1\u7b97\u673a\u7684\u6838\u5fc3\u90e8\u4ef6\uff0c\u88ab\u79f0\u4e3a\u8ba1\u7b97\u673a\u7684\u5927\u8111\uff0c\u51fa\u73b0\u4e8e 20 \u4e16\u7eaa 70 \u5e74\u4ee3\u3002 Inter 4004\uff1a4 \u4f4d\u3002 Inter 8086\uff1a16 \u4f4d\u3002 Inter 80286\u3002 Inter 80386\uff1a32 \u4f4d\u3002 Inter 80586 = Inter Pentium 1\uff0864 \u4f4d\uff09\u3002 \u73b0\u4ee3\uff1aInter Core\uff0cAMD Ryzen\u3002 \u5185\u5b58\uff1a\u7528\u4e8e\u7535\u8111\u5185\u90e8\u7684\u5b58\u50a8\uff0c\u5b58\u50a8\u5728 RAM \u91cc\u7684\u6570\u636e\u65ad\u7535\u540e\u4f1a\u4e22\u5931\u3002 RAM\uff08Random Access Memory\uff09\uff1a\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff0c\u4e0e CPU \u76f4\u63a5\u4ea4\u4e92\u6570\u636e\uff0c\u53ef\u968f\u65f6\u8bfb\u5199\uff0c\u65ad\u7535\u6570\u636e\u5168\u90e8\u4e22\u5931\u3002 ROM\uff08Read-Only Memory\uff09\uff1a\u53ea\u8bfb\u5b58\u50a8\u5668\uff0c\u53ea\u80fd\u8bfb\u51fa\u65e0\u6cd5\u5199\u5165\u4fe1\u606f\u3002\u4fe1\u606f\u4e00\u65e6\u5199\u5165\u540e\u5c31\u56fa\u5b9a\u4e0b\u6765\uff0c\u65ad\u7535\u6570\u636e\u4e0d\u4f1a\u4e22\u5931\uff0c\u6545\u53c8\u79f0\u4e3a\u56fa\u5b9a\u5b58\u50a8\u5668\u3002 \u5916\u5b58\uff1a\u7528\u4e8e\u5904\u7f6e\u957f\u671f\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u4e00\u822c\u5904\u4e8e\u7535\u8111\u5916\u90e8\uff0c\u65ad\u7535\u540e\u6570\u636e\u4e0d\u4f1a\u4e22\u5931\u3002 \u8f93\u5165\u8bbe\u5907\uff1a\u63a5\u53d7\u5916\u90e8\u547d\u4ee4\u6216\u8005\u9700\u8981\u52a0\u5de5\u7684\u6570\u636e\u3002 \u8f93\u51fa\u8bbe\u5907\uff1a\u5c06\u5904\u7406\u7ed3\u679c\u4ee5\u4eba\u7c7b\u80fd\u591f\u8bc6\u522b / \u611f\u53d7\u7684\u65b9\u5f0f\u5448\u73b0\u51fa\u6765\u7684\u8bbe\u5907\u3002 \u6027\u80fd\u6307\u6807\uff1a \u5b57\u957f\uff1a\u4e00\u6b21\u5904\u7406\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u4f4d\u6570\u3002 \u4e3b\u9891\uff1a\u6bcf\u79d2\u6267\u884c\u7684\u6307\u4ee4\u6761\u6570\uff08\u79f0\u4e3a\u6307\u4ee4\u5468\u671f\uff09\u3002 \u603b\u7ebf\u7ed3\u6784\uff1a \u6570\u636e\u603b\u7ebf DB\uff1a\u4f20\u9001\u6570\u636e\u4fe1\u606f\u3002 \u5730\u5740\u603b\u7ebf AB\uff1a\u4f20\u9001\u5730\u5740\u4fe1\u606f\u3002 \u63a7\u5236\u603b\u7ebf CB\uff1a\u4f20\u9001\u63a7\u5236\u4fe1\u53f7\u3002 \u5b58\u50a8\u5668\u8bbf\u95ee\u901f\u5ea6\uff1a\u5bc4\u5b58\u5668 \\(>\\) \u9ad8\u901f\u7f13\u5b58 \\(>\\) \u5185\u5b58\uff08ROM + RAM\uff09 \\(>\\) \u5916\u5b58\uff0c\u65ad\u7535\u4ec5\u4fdd\u7559 ROM \u548c\u5916\u5b58\u4e2d\u7684\u6570\u636e\u3002","title":"\u8bbe\u5907\u7ed3\u6784"},{"location":"contest/pre/#_9","text":"","title":"\u6587\u4ef6\u548c\u6570\u636e"},{"location":"contest/pre/#_10","text":"\u56fe\u50cf\u5b58\u50a8\uff1ajpg, png, bmp, gif, webp\u3002 \u97f3\u9891\u5b58\u50a8\uff1amp3, wav\u3002 \u89c6\u9891\u5b58\u50a8\uff1amp4, avi, mpeg\u3002","title":"\u6587\u4ef6\u6269\u5c55\u540d"},{"location":"contest/pre/#ascii","text":"\\(\\texttt{ASCII}\\) \u7801\uff08 \\(\\texttt{American Standard Code for Information Interchange}\\) \uff09\u662f\u7f8e\u56fd\u56fd\u5bb6\u4ea4\u6362\u6807\u51c6\u4ee3\u5417\u3002 \u7801\u57df \u5b57\u7b26 \u53ef\u89c1\u6027 \\(0 \\sim 31\\) \uff0c \\(127\\) \u63a7\u5236\u5b57\u7b26\u6216\u901a\u4fe1\u4e13\u7528\u5b57\u7b26 \\(\\texttt{False}\\) \\(32\\) \u7a7a\u683c \\(\\texttt{False}\\) \u6216 \\(\\texttt{True}\\) \\(48 \\sim 57\\) \u6570\u5b57\uff08 \\(\\texttt{0} \\sim \\texttt{9}\\) \uff09 \\(\\texttt{True}\\) \\(65 \\sim 90\\) \u5927\u5199\u5b57\u6bcd\uff08 \\(\\texttt{A} \\sim \\texttt{Z}\\) \uff09 \\(\\texttt{True}\\) \\(97 \\sim 122\\) \u5c0f\u5199\u5b57\u6bcd\uff08 \\(\\texttt{a} \\sim \\texttt{z}\\) \uff09 \\(\\texttt{True}\\) \u5176\u4ed6\uff08 \\(33 \\sim 47\\) \uff0c \\(58 \\sim 64\\) \uff0c \\(94 \\sim 96\\) \uff0c \\(126\\) \uff09 \u7279\u6b8a\u5b57\u7b26 \\(\\texttt{True}\\) \u62d3\u5c55\uff08 \\(128 \\sim 255\\) \uff09 \u62d3\u5c55\u7684 \\(\\texttt{ASCII}\\) \u7801 \\(\\texttt{N/A}\\)","title":"ASCII \u7801"},{"location":"contest/pre/#_11","text":"\u6b63\u6570\uff1a\uff3b\u539f\u7801 \\(=\\) \u53cd\u7801 \\(=\\) \u8865\u7801\uff3d\u3002 \u8d1f\u6570\uff1a\uff3b\u53cd\u7801 \\(=\\) \u9664\u7b26\u53f7\u4f4d\u5916\uff0c\u539f\u7801\u7684\u5404\u4f4d\u5168\u90e8\u53d6\u53cd\uff3d\uff3b\u8865\u7801 \\(=\\) \u53cd\u7801 \\(+1\\) \uff3d\u3002","title":"\u673a\u5668\u6570\u4e0e\u771f\u503c"},{"location":"contest/pre/#_12","text":"\u8f6f\u4ef6\u662f\u4e00\u7cfb\u5217\u6309\u7167\u7279\u5b9a\u987a\u5e8f\u7ec4\u7ec7\u7684\u8ba1\u7b97\u673a\u6570\u636e\u548c\u6307\u4ee4\u7684\u96c6\u5408\u3002 \u4e00\u822c\u6765\u8bb2\u8f6f\u4ef6\u88ab\u5212\u5206\u4e3a\u7cfb\u7edf\u8f6f\u4ef6\u3001\u5e94\u7528\u8f6f\u4ef6\u548c\u4ecb\u4e8e\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u4e2d\u95f4\u4ef6\u3002 \u5e94\u7528\u8f6f\u4ef6 \u529e\u516c\u5ba4\u8f6f\u4ef6 \u6587\u672c\u7f16\u8f91\u5668\uff1avim, notepad MS-Office, LibreOffice, WPS Office \u4e92\u8054\u7f51\u8f6f\u4ef6 \u5373\u65f6\u901a\u8baf\uff1aQQ, WeChat \u6d4f\u89c8\u5668\uff1aGoogle Chrome, Microsoft Edge \u4e0b\u8f7d\u5668\uff1aIDM, Motrix \u591a\u5a92\u4f53\u8f6f\u4ef6 \u5a92\u4f53\u64ad\u653e\u5668\uff1aVLC, SMPlayer \u56fe\u50cf\u7f16\u8f91\u5668\uff1amspaint, PaintTool SAI \u8ba1\u7b97\u673a\u6e38\u620f \u5206\u6790\u8f6f\u4ef6 CAS, CAE \u534f\u4f5c\u8f6f\u4ef6 \u5546\u52a1\u8f6f\u4ef6 \u7cfb\u7edf\u8f6f\u4ef6\uff1a\u5904\u7406\u673a\u7ba1\u7406\u3001\u50a8\u5b58\u7ba1\u7406\u3001\u8bbe\u5907\u7ba1\u7406\u3001\u4fe1\u606f\u7ba1\u7406\u3002 \u64cd\u4f5c\u7cfb\u7edf \u684c\u9762\u64cd\u4f5c\u7cfb\u7edf\uff1a Unix \u548c\u7c7b Unix \u7cfb\u7edf\uff1aMac OS X\uff0cLinux \u53d1\u884c\u7248\uff08\u5982 Debian, Ubuntu, Linux Mint, Fedora, Mandrake, Red Hat, Centos\uff09\u3002 Windows \u7cfb\u7edf\uff1aWindows 98 / 2000 / XP / Vista / 7 / 8 / 8.1 / 10 / 11\u3002 \u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\uff1a Unix \u7cfb\u5217\uff1aFreeBSD, OS X Server\u3002 Linux \u7cfb\u5217\uff1aRed Hat Linux, CentOS, Debian, Ubuntu Server\u3002 Windows \u7cfb\u5217\uff1aWindows NT Server, Windows 2003 / 2008 / 2012 Server, Windows Server Technical\u3002 DOS, MS/2, Android, iOS, \u9e3f\u8499 \u8bed\u8a00\u5904\u7406\u7a0b\u5e8f GCC Clang \u6570\u636e\u5e93\u7ba1\u7406 Oracle MySQL SQL Server FoxBase, Visual FoxPro","title":"\u8f6f\u4ef6"},{"location":"contest/pre/#_13","text":"","title":"\u56fe\u7247\u4e0e\u89c6\u9891\u5927\u5c0f\u95ee\u9898"},{"location":"contest/pre/#_14","text":"\u5c40\u57df\u7f51\uff1a \\(\\texttt{LAN}\\) \uff08 \\(\\texttt{Local Area Network}\\) \uff09\uff0c \\(\\le 1 \\text{ } \\texttt{km}\\) \uff0c\u7ed3\u6784\u7b80\u5355\u3001\u8303\u56f4\u5c0f\uff0c\u77ed\u8ddd\u79bb\u4f20\u8f93\u6548\u7387\u6781\u9ad8 \u57ce\u57df\u7f51\uff1a \\(\\texttt{MAN}\\) \uff08 \\(\\texttt{Metropolitan Area Network}\\) \uff09\uff0c \\(1 \\sim 10 \\text{ } \\texttt{km}\\) \u5e7f\u57df\u7f51\uff1a \\(\\texttt{WAN}\\) \uff08 \\(\\texttt{Wide Area Network}\\) \uff09\uff0c \\(10 \\sim 1000 \\text{ } \\texttt{km}\\) \u4e07\u7ef4\u7f51\uff1a \\(\\texttt{WWW}\\) \uff08 \\(\\texttt{World Wide Web}\\) \uff09\uff0c\u5168\u7403\u8303\u56f4 Internet \u8d77\u6e90\u4e8e APRANET\u3002 IPv4:32 \u4f4d\uff0c2011 \u5e74\u5206\u914d\u5b8c\u6bd5\u3002 IPv6\uff1a128 \u4f4d\u3002 \u5176\u4ed6\u534f\u8bae\uff1a \u4f20\u8f93\u76f8\u5173 \u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff1a \\(\\texttt{TCP}\\) \uff08 \\(\\texttt{Transmission Control Protocol}\\) \uff09 \u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff1a \\(\\texttt{UDP}\\) \uff08 \\(\\texttt{User Datagram Protocol}\\) \uff09 \u5e94\u7528\u76f8\u5173 \u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff1a \\(\\texttt{HTTP}\\) \uff08 \\(\\texttt{Hyper Text Transfer Prtcl}\\) \uff09 \u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff1a \\(\\texttt{HTTPS}\\) \uff08 \\(\\texttt{ - over Securesocket ayer}\\) \uff09\uff0c\u589e\u52a0\u4e86\u4f20\u8f93\u52a0\u5bc6\u548c\u8eab\u4efd\u8ba4\u8bc1 \u6587\u4ef6\u4f20\u8f93\u534f\u8bae\uff1a \\(\\texttt{FTP}\\) \uff08 \\(\\texttt{File Transfer Protocol}\\) \uff09 \u5bf9\u7b49\u7f51\u7edc\uff1a \\(\\texttt{P2P}\\) \uff08 \\(\\texttt{peer-t(w)o-peer}\\) \uff09 \u90ae\u4ef6\u76f8\u5173 \u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff1a \\(\\texttt{SMTP}\\) \uff08 \\(\\texttt{Simple Mail Transfer Protocol}\\) \uff09 \u90ae\u5c40\u534f\u8bae \uff1a \\(\\texttt{POP}\\) \uff08 \\(\\texttt{Post Office Protocol}\\) \uff09 \u90ae\u5c40\u534f\u8bae\u7b2c\u4e09\u7248 \uff1a \\(\\texttt{POP3}\\) \uff08 \\(\\texttt{Post Office Protocol - Version 3}\\) \uff09 \u4ea4\u4e92\u90ae\u4ef6\u8bbf\u95ee\u534f\u8bae\uff1a \\(\\texttt{IMAP}\\) \uff08 \\(\\texttt{Internet Message Access Protocol}\\) \uff09","title":"\u7f51\u7edc"},{"location":"contest/pre/#_15","text":"\u4f4e\u7ea7\u8bed\u8a00\uff1a \u673a\u5668\u8bed\u8a00 / \u673a\u5668\u7801\uff1a \u6700\u65e9\u7684\u8bed\u8a00\uff0c\u8ba1\u7b97\u673a\u80fd\u8bc6\u522b\u7684\u8bed\u8a00\u3002 \u7531\u4e8c\u8fdb\u5236\u6570\u5b57 0/1 \u7ec4\u6210\uff0c\u901f\u5ea6\u6781\u5feb\uff0c\u4eba\u7c7b\u7f16\u7801\u96be\u5ea6\u9ad8\uff0c\u4e00\u822c\u7531\u8ba1\u7b97\u673a\u81ea\u52a8\u8f6c\u6362\u3002 \u6c47\u7f16\u8bed\u8a00\uff1a \u7528\u7b26\u53f7\u4ee3\u66ff\u4e8c\u8fdb\u5236\u6570\uff0c\u8ba1\u7b97\u673a\u4e0d\u80fd\u76f4\u63a5\u8bc6\u522b\uff0c\u9700\u8981\u7528\u7f16\u8bd1\u5668\u8fdb\u884c\u7f16\u8bd1\u3002 \u65e9\u671f\u8bed\u8a00\uff0c\u96be\u5ea6\u4f9d\u7136\u5f88\u5927\uff0c\u76ee\u524d\u9664\u4e86\u5bf9\u6027\u80fd\u8981\u6c42\u6781\u9ad8\u7684\u9700\u6c42\u4ee5\u5916\u4e0d\u88ab\u4f7f\u7528\u3002 \u9ad8\u7ea7\u8bed\u8a00\uff1a \u73b0\u4ee3\u7684\u7f16\u7a0b\u8bed\u8a00\uff08C++\uff0cJAVA \u7b49\uff09\uff0c\u9700\u8981\u7528\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u5668\uff0c\u96be\u5ea6\u5c0f\u3002 \u7f16\u8bd1\u65b9\u5f0f\uff1aC / C++, Pascal, Object Pascal (Delphi) \u5148\u5bf9\u6574\u4e2a\u7a0b\u5e8f\u8fdb\u884c\u7f16\u8bd1\uff08\u4f1a\u8fdb\u884c\u591a\u6b21\u5206\u6790\uff09\uff0c\u518d\u6267\u884c\u7a0b\u5e8f\u3002 \u901f\u5ea6\u5feb\uff08\u8fdb\u884c\u591a\u6b21\u7f16\u8bd1\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u4f18\u5316\uff09\u3002 \u89e3\u91ca\u65b9\u5f0f\uff1aASP, Java, C#, PHP, JavaScript, VBScript, Perl, Python, Ruby, MATLAB \u626b\u63cf\u4e00\u884c\u89e3\u91ca\u4e00\u884c\uff0c\u901f\u5ea6\u6162\uff08\u65e0\u6cd5\u8fdb\u884c\u4f18\u5316\uff09\u3002 \u6ce8\uff1a\u67d0\u4e9b\u8bed\u8a00\u53ef\u4ee5\u9884\u5148\u7f16\u8bd1\u6216\u8005\u76f4\u63a5\u4f7f\u7528 C \u8bed\u8a00\u7f16\u5199\u5e93\u6587\u4ef6\u3002 \u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff1a \u7b2c\u4e00\u4e2a\uff1aSimula67\u3002 \u7b2c\u4e8c\u4e2a\uff1aSmalltalk\u3002","title":"\u8bed\u8a00\u7684\u5206\u7c7b"},{"location":"contest/pre/#linux","text":"\u6587\u4ef6\u64cd\u4f5c\uff1a \u5217\u51fa\u6587\u4ef6\uff1a ls \u5217\u51fa\u9690\u85cf\u6587\u4ef6\uff1a ls -a \u5217\u51fa\u6587\u4ef6\u53ca\u5927\u5c0f\uff1a ls -l \u91cd\u547d\u540d\u6587\u4ef6\uff1a mv old.cpp new.cpp \u521b\u5efa\u5907\u4efd\uff1a cp file.cpp file.cpp.bak \u67e5\u770b\u76ee\u5f55\u5730\u5740\uff1a pwd \u5207\u6362\u4e0a\u7ea7\u76ee\u5f55\uff1a cd .. \u5207\u6362\u76ee\u5f55\uff1a cd dirx \u521b\u5efa\u76ee\u5f55\uff1a mkdir dirx \u5220\u9664\u76ee\u5f55\uff1a rm -r dirx \u7a0b\u5e8f\u64cd\u4f5c\uff1a \u8fd0\u884c\u7a0b\u5e8f\uff1a ./test \u8ba1\u65f6\u8fd0\u884c\uff1a time ./test \u91cd\u5b9a\u5411\u8f93\u5165\u8f93\u51fa\uff1a test<in.txt>out.txt \u67e5\u770b\u6240\u6709\u8fdb\u7a0b\uff1a ps \u6740\u6389\u540e\u53f0\u8fdb\u7a0b\uff1a killall test \u7ec8\u6b62\u8fdb\u7a0b\uff1a kill $pid \u5f3a\u5236\u7ec8\u6b62\u8fd0\u884c\uff1a Ctrl-C \u8f93\u5165\u7ed3\u5c3e\uff08EOF\uff09\uff1a Ctrl-Z \u7f16\u8bd1\u6307\u4ee4\uff1a \u751f\u6210\u8c03\u8bd5\u4fe1\u606f\uff1a -g \u751f\u6210\u76ee\u6807\u6587\u4ef6\uff1a -c \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff1a -o \u5305\u542b cmath \u5e93\uff1a -lm \u663e\u793a\u8b66\u544a\uff1a -Wall \u7f3a\u6c27\u3001\u6c27\u6c14\u4f18\u5316\uff1a -O0\uff0c-O2 C++14\uff1a -std=c++14","title":"Linux \u57fa\u7840\u64cd\u4f5c"},{"location":"contest/pre/#_16","text":"","title":"\u8ba1\u7b97\u673a\u5b89\u5168"},{"location":"contest/pre/#_17","text":"\u9632\u9707\u3001\u9632\u6c34\u3001\u9632\u5316\u5b66\u8150\u8680\u3002","title":"\u786c\u4ef6\u5b89\u5168"},{"location":"contest/pre/#_18","text":"\u8ba1\u7b97\u673a\u75c5\u6bd2\u3001\u975e\u6cd5\u8bbf\u95ee\u3001\u7535\u78c1\u8f90\u5c04\u3001\u786c\u4ef6\u635f\u574f\u3002","title":"\u50a8\u5b58\u5b89\u5168"},{"location":"contest/pre/#_19","text":"\u7e41\u6b96\u6027\u3002 \u7834\u574f\u6027\u3002 \u4f20\u67d3\u6027\u3002 \u6f5c\u4f0f\u6027\u3002 \u9690\u853d\u6027\u3002 \u53ef\u89e6\u53d1\u6027\u3002","title":"\u8ba1\u7b97\u673a\u75c5\u6bd2"},{"location":"contest/pre/#_20","text":"\u5b89\u88c5\u6740\u6bd2\u8f6f\u4ef6\u3002 \u5b89\u88c5\u4e2a\u4eba\u9632\u706b\u5899\u3002 \u8bbe\u7f6e\u5bc6\u7801\u3002 \u4e0d\u4e0b\u8f7d\u4e0d\u660e\u7a0b\u5e8f\u3002 \u9632\u8303\u6d41\u6c13\u8f6f\u4ef6\u3002 \u5b9a\u671f\u5907\u4efd\u3002","title":"\u4fdd\u62a4\u63aa\u65bd"},{"location":"contest/pre/#_21","text":"","title":"\u7b97\u6cd5\u57fa\u7840"},{"location":"contest/pre/#_22","text":"\u7b97\u6cd5\u7684\u91cd\u8981\u7279\u5f81\uff1a \u6709\u7a77\u6027\u3002 \u786e\u5b9a\u6027\u3002 \u8f93\u5165\u3001\u8f93\u51fa\u3002 \u53ef\u884c\u6027\u3002","title":"\u7a0b\u5e8f\u57fa\u672c\u5e38\u8bc6"},{"location":"contest/pre/#_23","text":"\u903b\u8f91\u8868\u8fbe\u5f0f\uff1a\u7531\u903b\u8f91\u8fd0\u7b97\u7ec4\u5408\u800c\u6210\uff0c\u8fd4\u56de\u503c\u53ea\u6709 \\(\\texttt{True}\\) \u548c \\(\\texttt{False}\\) \uff0c\u5176\u4e2d \\(0\\) \u8868\u793a\u5047\u3001\u975e \\(0\\) \u8868\u793a\u771f\u3002 \u5982\u679c\u903b\u8f91\u8868\u8fbe\u5f0f\u7531\u591a\u4e2a\u7ec4\u5408\uff0c\u9700\u8981\uff3b\u4ece\u53f3\u5f80\u5de6\uff3d\u4f9d\u6b21\u5224\u65ad\uff0c\u6700\u540e\u5f97\u51fa\u7b54\u6848\u3002\u8fd9\u79cd\u6027\u8d28\u88ab\u79f0\u4e3a\uff3b\u53f3\u7ed3\u5408\u6027\uff3d\uff0c\u4f8b\u5982\uff1a <\u8868\u8fbe\u5f0f1>?<\u8868\u8fbe\u5f0f2>:<\u8868\u8fbe\u5f0f3>?<\u8868\u8fbe\u5f0f4>:<\u8868\u8fbe\u5f0f5> \u6267\u884c\u7684\u65f6\u5019\u662f\u4ece\u8868\u8fbe\u5f0f \\(3\\) \u5f00\u59cb\u5224\u65ad\u662f\u5426\u4e3a\u771f\uff0c\u7136\u540e\u4ece\u53f3\u5f80\u5de6\u6267\u884c\u6bcf\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u4f9d\u6b21\u5411\u4e0a\u56de\u6eaf\uff0c\u6700\u540e\u5f97\u51fa\u7b54\u6848\u3002","title":"\u903b\u8f91\u8868\u8fbe\u5f0f"},{"location":"contest/pre/#_24","text":"\u7b26\u53f7\uff1a \\(T(n)\\) \u8868\u793a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c$T(n) = $ \u540e\u8ddf\u4e00\u4e2a\u7b26\u53f7\uff0c\u4f8b\uff1a \\(T(n) = \\mathcal{O}(n^2)\\) \u3002 \u7b26\u53f7 \u82f1\u6587\u540d\u79f0 \u610f\u4e49 \\(\\Theta\\) theta \u7b49\u4e8e \\(\\mathcal{O}\\) big-oh \u5c0f\u4e8e\u7b49\u4e8e \\(\\Omega\\) big-omega \u5927\u4e8e\u7b49\u4e8e\uff08\u4e0d\u5e38\u7528\uff09 \\(o\\) small-oh \u5c0f\u4e8e\uff08\u4e0d\u5e38\u7528\uff09 \\(\\omega\\) small omega \u5927\u4e8e\uff08\u4e0d\u5e38\u7528\uff09 \u8be6\u89c1\uff1a https://oi-wiki.org/basic/complexity/ \u3002","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"contest/pre/#_25","text":"\u4e0b\u9762\u6765\u81ea\u4e00\u672c\u901a\uff0c\u5206\u7c7b\u5e76\u4e0d\u552f\u4e00\u3002 \u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u3002 \u7a77\u4e3e\u7b97\u6cd5\u3002 \u6570\u636e\u6392\u5e8f\u3002 \u9012\u63a8\u7b97\u6cd5\u3002 \u9012\u5f52\u7b97\u6cd5\u3002 \u641c\u7d22\u548c\u56de\u6eaf\u7b97\u6cd5\u3002 \u8d2a\u5fc3\u7b97\u6cd5\u3002 \u5206\u6cbb\u7b97\u6cd5\u3002 \u52a8\u6001\u89c4\u5212\u3002","title":"\u57fa\u7840\u7b97\u6cd5"},{"location":"contest/pre/#_26","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"contest/pre/#_27","text":"\u53ea\u80fd\u5728\u67d0\u4e00\u6bb5\u63d2\u5165\u548c\u5220\u9664\u7684\u7279\u6b8a\u7ebf\u6027\u8868\u3002 PUSH POP","title":"\u6808"},{"location":"contest/pre/#_28","text":"\u5728\u4e00\u6bb5\u63d2\u5165\uff0c\u53e6\u4e00\u7aef\u5220\u9664\u7684\u7279\u6b8a\u7ebf\u6027\u8868\u3002 PUSH POP","title":"\u961f\u5217"},{"location":"contest/pre/#_29","text":"\u57fa\u4e8e\u6bd4\u8f83\uff1a\u901a\u8fc7\u6bd4\u8f83\u5143\u7d20\u6765\u6392\u5e8f\u6570\u5217\uff0c\u5982\u5192\u6ce1\u6392\u5e8f\uff0c\u5feb\u901f\u6392\u5e8f\u7b49\uff1b \u4e0d\u57fa\u4e8e\u6bd4\u8f83\uff1a\u4e0d\u6bd4\u8f83\u5143\u7d20\uff0c\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u57fa\u6570\u6392\u5e8f\u7b49\u3002 \u9009\u62e9\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f \u63d2\u5165\u6392\u5e8f \u5feb\u901f\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u5e73\u5747\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(n \\log n)\\) \u6700\u574f\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n \\log n)\\) \u6700\u597d\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(n)\\) \\(\\mathcal{O}(n)\\) \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(n \\log n)\\) \u7a33\u5b9a\u6027 \u4e0d\u7a33\u5b9a \u7a33\u5b9a \u7a33\u5b9a \u4e0d\u7a33\u5b9a \u7a33\u5b9a \u7a7a\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(n)\\) \\(\\mathcal{O}(n)\\) \u5e0c\u5c14\u6392\u5e8f \u5806\u6392\u5e8f \u57fa\u6570\u6392\u5e8f \u5e73\u5747\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^{1.3})\\) \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(d \\times (n + w))\\) \u6700\u574f\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(d \\times (n + w))\\) \u6700\u597d\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\log n)\\) \\(\\mathcal{O}(d \\times (n + w))\\) \u7a33\u5b9a\u6027 \u4e0d\u7a33\u5b9a \u4e0d\u7a33\u5b9a \u7a33\u5b9a \u7a7a\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(w)\\)","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"contest/pre/#_30","text":"\u5b9a\u4e49\uff1a\u56fe\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4 \\(G=(V,E)\\) \u3002 \u5176\u4e2d \\(V\\) \u662f\u975e\u7a7a\u96c6\uff0c\u79f0\u4e3a\u70b9\u96c6\uff0c\u5bf9\u4e8e \\(V\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u79f0\u5176\u4e3a\u9876\u70b9\u6216\u8282\u70b9\uff0c\u7b80\u79f0\u70b9\u3002 \u5176\u4e2d \\(E\\) \u4e3a \\(v\\) \u5404\u7ed3\u70b9\u4e4b\u95f4\u8fb9\u7684\u96c6\u5408\uff0c\u79f0\u4e3a\u8fb9\u96c6\u3002 \u5f53 \\(V,E\\) \u90fd\u662f\u6709\u9650\u96c6\u5408\u65f6\uff0c\u79f0 \\(G\\) \u4e3a\u6709\u9650\u56fe\uff0c\u5426\u5219\u4e3a\u65e0\u9650\u56fe\u3002 \u56fe G \u7684\u70b9\u6570 \\(|V|\\) \u4e5f\u88ab\u79f0\u4f5c\u56fe \\(G\\) \u7684\u9636\u3002 \u5b50\u56fe\uff1a\u5bf9\u4e00\u5f20\u56fe \\(G = (V, E)\\) \uff0c\u82e5\u5b58\u5728\u53e6\u4e00\u5f20\u56fe \\(H = (V', E')\\) \u6ee1\u8db3 \\(V' \\subseteq V\\) \u4e14 \\(E' \\subseteq E\\) \uff0c\u5219\u79f0 \\(H\\) \u662f \\(G\\) \u7684 \u5b50\u56fe\uff0c\u8bb0\u4f5c \\(H \\subseteq G\\) \u3002 \u53cd\u56fe\uff1a\u5bf9\u4e8e\u6709\u5411\u56fe \\(G = (V, E)\\) \uff0c\u5b83\u7684\u53cd\u56fe\u6307\u7684\u662f\u70b9\u96c6\u4e0d\u53d8\uff0c\u6bcf\u6761\u8fb9\u53cd\u5411\u5f97\u5230\u7684\u56fe\uff0c\u5373\uff1a\u82e5 \\(G\\) \u7684\u53cd\u56fe\u4e3a \\(G'=(V, E')\\) \uff0c\u5219 \\(E'=\\{(v, u)|(u, v)\\in E\\}\\) \u3002 \u65e0\u5411\u56fe\u3001\u6709\u5411\u56fe\uff1a \u65e0\u5411\u56fe\uff1a \u82e5 \\(G\\) \u4e3a\u65e0\u5411\u56fe\uff0c\u5219 \\(E\\) \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a\u4e00\u4e2a\u65e0\u5e8f\u4e8c\u5143\u7ec4 \\((u, v)\\) \u3002 \u79f0 \\((u, v)\\) \u4e3a\u65e0\u5411\u8fb9\uff08\u7b80\u79f0\u8fb9\uff09\uff0c\u70b9 \\(u,v\\) \u79f0\u4e3a\u7aef\u70b9\u3002 \u6709\u5411\u56fe\uff1a \u82e5 \\(G\\) \u4e3a\u6709\u5411\u56fe\uff0c\u5219 \\(E\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e3a\u4e00\u4e2a\u6709\u5e8f\u4e8c\u5143\u7ec4 \\((u, v)\\) \uff0c\u6709\u65f6\u4e5f\u5199\u4f5c \\(u \\to v\\) \u3002 \u79f0 \\((u, v)\\) \u4e3a\u6709\u5411\u8fb9\uff08\u7b80\u79f0\u5f27\uff09\uff0c\u5728\u4e0d\u5f15\u8d77\u6df7\u6dc6\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u79f0\u4f5c\u8fb9\u3002 \u70b9 \\(u,v\\) \u79f0\u4e3a\u7aef\u70b9\uff0c\u4e14\u79f0 \\(u\\) \u4e3a \\(v\\) \u7684\u524d\u9a71\u3001 \\(v\\) \u4e3a \\(u\\) \u7684\u540e\u7ee7\u3002 \u82e5 \\(G\\) \u4e3a\u6df7\u5408\u56fe\uff0c\u5219 \\(E\\) \u4e2d\u65e2\u6709\u6709\u5411\u8fb9\uff0c\u53c8\u6709\u65e0\u5411\u8fb9\u3002 \u91cd\u8fb9\u548c\u81ea\u73af\uff1a \u81ea\u73af\uff1a\u5bf9 \\(E\\) \u4e2d\u7684\u8fb9 \\(e = (u, v)\\) \uff0c\u82e5 \\(u = v\\) \uff0c\u5219 \\(e\\) \u88ab\u79f0\u4f5c\u4e00\u4e2a\u81ea\u73af\u3002 \u91cd\u8fb9\uff1a\u82e5 \\(E\\) \u4e2d\u5b58\u5728\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u5143\u7d20\uff08\u8fb9\uff09 \\(e_1, e_2\\) \uff0c\u5219\u5b83\u4eec\u88ab\u79f0\u4f5c\uff08\u4e00\u7ec4\uff09\u91cd\u8fb9\u3002 \u7b80\u5355\u56fe\uff1a\u82e5\u4e00\u4e2a\u56fe\u4e2d\u6ca1\u6709\u81ea\u73af\u548c\u91cd\u8fb9\uff0c\u5b83\u88ab\u79f0\u4e3a\u7b80\u5355\u56fe\uff1b\u53cd\u4e4b\u79f0\u4e3a\u591a\u91cd\u56fe\u3002 \u6839\u636e\u9e3d\u5de2\u539f\u7406\uff1a\u5177\u6709\u81f3\u5c11\u4e24\u4e2a\u9876\u70b9\u7684\u7b80\u5355\u65e0\u5411\u56fe\u4e2d\u4e00\u5b9a\u5b58\u5728\u5ea6\u76f8\u540c\u7684\u7ed3\u70b9\u3002 \u5ea6\u6570\uff1a \u4e0e\u4e00\u4e2a\u9876\u70b9 \\(v\\) \u5173\u8054\u7684\u8fb9\u7684\u6761\u6570\u79f0\u4f5c\u8be5\u9876\u70b9\u7684\u5ea6\uff0c\u8bb0\u4f5c \\(\\deg(v)\\) \uff0c\u81ea\u73af\u4ea7\u751f\u4e24\u6b21\u8d21\u732e\u3002 \u63e1\u624b\u5b9a\u7406\uff08\u56fe\u8bba\u57fa\u672c\u5b9a\u7406\uff09\uff1a\u65e0\u5411\u56fe \\(G = (V, E)\\) \u6709 \\(\\sum_{v\\in V}\\deg(v) = 2|E|\\) \u3002 \u63a8\u8bba\uff1a\u5728\u4efb\u610f\u56fe\u4e2d\uff0c\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u5fc5\u7136\u6709\u5076\u6570\u4e2a\u3002 \u8def\u5f84\uff1a \u9014\u5f84\uff1a \u8fde\u63a5\u4e00\u8fde\u4e32\u9876\u70b9\u7684\u8fb9\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u4e3a\u6709\u9650\u6216\u65e0\u9650\u957f\u5ea6\u3002 \u4e00\u6761\u6709\u9650\u9014\u5f84 \\(w\\) \u662f\u4e00\u4e2a\u8fb9\u7684\u5e8f\u5217 \\(e_1, e_2, \\ldots, e_k\\) \uff0c\u4f7f\u5f97\u5b58\u5728\u4e00\u4e2a\u9876\u70b9\u5e8f\u5217 \\(v_0, v_1, \\ldots, v_k\\) \u6ee1\u8db3 \\(e_i = (v_{i-1}, v_i)\\) \uff0c\u5176\u4e2d \\(i \\in [1, k]\\) \uff0c\u7b80\u5199\u4e3a \\(v_0 \\to v_1 \\to v_2 \\to \\cdots \\to v_k\\) \u3002 \u65e0\u6743\u56fe\u8fb9\u7684\u6570\u91cf \\(k\\) \u88ab\u79f0\u4f5c\u8fd9\u6761\u9014\u5f84\u7684\u957f\u5ea6\uff1b\u5e26\u6743\u56fe\u957f\u5ea6\u901a\u5e38\u6307\u9014\u5f84\u4e0a\u7684\u8fb9\u6743\u4e4b\u548c\uff08\u9898\u76ee\u4e2d\u4e5f\u53ef\u80fd\u53e6\u6709\u5b9a\u4e49\uff09\u3002 \u8ff9\uff1a\u5bf9\u4e8e\u4e00\u6761\u9014\u5f84 \\(w\\) \uff0c\u82e5 \\(e_1, e_2, \\ldots, e_k\\) \u4e24\u4e24\u4e92\u4e0d\u76f8\u540c\uff0c\u5219\u79f0 \\(w\\) \u662f\u4e00\u6761\u8ff9\u3002 \u8def\u5f84\uff08\u53c8\u79f0\u7b80\u5355\u8def\u5f84\uff09\uff1a\u5bf9\u4e8e\u4e00\u6761\u8ff9 \\(w\\) \uff0c\u82e5\u5176\u8fde\u63a5\u7684\u70b9\u7684\u5e8f\u5217\u4e2d\u70b9\u4e24\u4e24\u4e0d\u540c\uff0c\u5219\u79f0 \\(w\\) \u662f\u4e00\u6761\u8def\u5f84\u3002 \u56de\u8def\uff1a\u5bf9\u4e8e\u4e00\u6761\u8ff9 \\(w\\) \uff0c\u82e5 \\(v_0 = v_k\\) \uff0c\u5219\u79f0 \\(w\\) \u662f\u4e00\u6761\u56de\u8def\u3002 \u73af\uff08\u53c8\u79f0\uff0c\u5708\uff0c\u7b80\u5355\u56de\u8def\uff0c\u7b80\u5355\u73af\uff09\uff1a\u5bf9\u4e8e\u4e00\u6761\u56de\u8def \\(w\\) \uff0c\u82e5 \\(v_0 = v_k\\) \u662f\u70b9\u5e8f\u5217\u4e2d\u552f\u4e00\u91cd\u590d\u51fa\u73b0\u7684\u70b9\u5bf9\uff0c\u5219\u79f0 \\(w\\) \u662f\u4e00\u4e2a\u73af\u3002 \u6b27\u62c9\uff08\u56de\uff09\u8def\uff1a \u5b58\u5728\u4e00\u7b14\u753b\uff0c\u79f0\u4e3a\u6b27\u62c9\u8def\uff0c\u56de\u5230\u8d77\u70b9\u4e3a\u6b27\u62c9\u56de\u8def\u3002 \u5b58\u5728\u6b27\u62c9\u8def\u7684\u6761\u4ef6\uff1a\u8054\u901a\u4e14 \\(\\deg\\) \u4e3a\u5947\u6570\u7684\u70b9\u53ea\u6709\u4e24\u4e2a\u3002 \u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u6761\u4ef6\uff1a\u8054\u901a\u4e14 \\(\\deg\\) \u4e3a\u5947\u6570\u7684\u70b9\u6709 \\(0\\) \u4e2a\uff0c \u8fde\u901a\u6027\uff1a \u65e0\u5411\u56fe\uff1a \u5bf9\u4e8e\u4e00\u5f20\u65e0\u5411\u56fe \\(G = (V, E)\\) \uff0c\u5bf9\u4e8e \\(u, v \\in V\\) \uff0c\u82e5\u5b58\u5728\u4e00\u6761\u9014\u5f84\u4f7f\u5f97 \\(v_0 = u, v_k = v\\) \uff0c\u5219\u79f0 \\(u\\) \u548c \\(v\\) \u662f\u8fde\u901a\u7684\u3002 \u8fde\u901a\u56fe\uff1a\u65e0\u5411\u56fe \\(G = (V, E)\\) \uff0c\u6ee1\u8db3\u5176\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u5747\u8fde\u901a\uff08\u8fde\u901a\u6027\uff09\u3002 \u82e5 \\(H\\) \u662f \\(G\\) \u7684\u4e00\u4e2a\u8fde\u901a\u5b50\u56fe\uff0c\u4e14\u4e0d\u5b58\u5728 \\(F\\) \u6ee1\u8db3 \\(H\\subsetneq F \\subseteq G\\) \u4e14 \\(F\\) \u4e3a\u8fde\u901a\u56fe\uff0c\u5219 \\(H\\) \u662f \\(G\\) \u7684\u4e00\u4e2a\u8fde\u901a\u5757\u6216\u8fde\u901a\u5206\u91cf\uff08\u6781\u5927\u8fde\u901a\u5b50\u56fe\uff09\u3002 \u6709\u5411\u56fe\uff1a \u5bf9\u4e8e\u4e00\u5f20\u6709\u5411\u56fe \\(G = (V, E)\\) \uff0c\u5bf9\u4e8e \\(u, v \\in V\\) \uff0c\u82e5\u5b58\u5728\u4e00\u6761\u9014\u5f84\u4f7f\u5f97 \\(v_0 = u, v_k = v\\) \uff0c\u5219\u79f0 \\(u\\) \u53ef\u8fbe \\(v\\) \u3002 \u5f3a\u8fde\u901a\uff1a\u6709\u5411\u56fe\u7684\u8282\u70b9\u4e24\u4e24\u4e92\u76f8\u53ef\u8fbe\u3002 \u5f31\u8fde\u901a\uff1a\u6709\u5411\u56fe\u7684\u8fb9\u66ff\u6362\u4e3a\u65e0\u5411\u8fb9\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u5f20\u8fde\u901a\u56fe\u3002 \u4e0e\u8fde\u901a\u5206\u91cf\u7c7b\u4f3c\uff0c\u4e5f\u6709\u5f31\u8fde\u901a\u5206\u91cf\uff08\u6781\u5927\u5f31\u8fde\u901a\u5b50\u56fe\uff09\u548c\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\uff09\u3002 \u5272\uff1a \u5bf9\u4e8e\u8fde\u901a\u56fe \\(G = (V, E)\\) \uff0c\u82e5 \\(V'\\subseteq V\\) \u4e14 \\(G' = (V\\setminus V', E)\\) \u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u5219 \\(V'\\) \u662f\u56fe \\(G\\) \u7684\u4e00\u4e2a\u70b9\u5272\u96c6\uff0c\u5927\u5c0f\u4e3a\u4e00\u7684\u70b9\u5272\u96c6\u53c8\u88ab\u79f0\u4f5c\u5272\u70b9\u3002 \u5bf9\u4e8e\u8fde\u901a\u56fe \\(G = (V, E)\\) \uff0c\u82e5 \\(E'\\subseteq E\\) \u4e14 \\(G' = (V, E\\setminus E')\\) \u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u5219 \\(E'\\) \u662f\u56fe \\(G\\) \u7684\u4e00\u4e2a\u8fb9\u5272\u96c6\uff0c\u5927\u5c0f\u4e3a\u4e00\u7684\u8fb9\u5272\u96c6\u53c8\u88ab\u79f0\u4f5c\u6865\u3002 \u5b8c\u5168\u56fe\uff1a \u5b8c\u5168\u56fe\uff1a\u65e0\u5411\u7b80\u5355\u56fe G \u6ee1\u8db3\u4efb\u610f\u4e0d\u540c\u4e24\u70b9\u95f4\u5747\u6709\u8fb9\u3002 \u6709\u5411\u5b8c\u5168\u56fe\uff1a\u6709\u5411\u56fe G \u6ee1\u8db3\u4efb\u610f\u4e0d\u540c\u4e24\u70b9\u95f4\u90fd\u6709\u4e24\u6761\u65b9\u5411\u4e0d\u540c\u7684\u8fb9\u3002 \u7ade\u8d5b\u56fe\uff1a\u6709\u5411\u7b80\u5355\u56fe G \u6ee1\u8db3\u4efb\u610f\u4e0d\u540c\u4e24\u70b9\u95f4\u90fd\u6709\u6070\u597d\u4e00\u6761\u5355\u5411\u8fb9\u3002 \u7279\u6b8a\u7684\u96c6\uff1a \u8986\u76d6\u96c6\uff1a \u70b9\u8986\u76d6 \\(V'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(V'\\subseteq V\\) \u4e14 \\(\\forall e\\in E\\) \u6ee1\u8db3 \\(e\\) \u7684\u81f3\u5c11\u4e00\u4e2a\u7aef\u70b9\u5728 \\(V'\\) \u4e2d\u3002 \u8fb9\u8986\u76d6 \\(E'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(E'\\subseteq E\\) \u4e14 \\(\\forall v\\in V\\) \u6ee1\u8db3 \\(v\\) \u4e0e \\(E'\\) \u4e2d\u7684\u81f3\u5c11\u4e00\u6761\u8fb9\u76f8\u90bb\u3002 \u72ec\u7acb\u96c6\uff1a \u72ec\u7acb\u96c6 \\(V'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(V'\\subseteq V\\) \u4e14 \\(V'\\) \u4e2d\u4efb\u610f\u4e24\u70b9\u90fd\u4e0d\u76f8\u90bb\u3002 \u8fb9\u72ec\u7acb\u96c6\uff08\u5339\u914d\uff09 \\(E'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(E'\\subseteq E\\) \u4e14 \\(E'\\) \u4e2d\u4efb\u610f\u4e24\u6761\u4e0d\u540c\u7684\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u7684\u7aef\u70b9\uff0c\u4e14 \\(E'\\) \u4e2d\u4efb\u610f\u4e00\u6761\u8fb9\u90fd\u4e0d\u662f\u81ea\u73af\u3002 \u652f\u914d\u96c6\uff1a \u652f\u914d\u96c6 \\(V'\\) \uff1a\u65e0\u5411\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(V'\\subseteq V\\) \u4e14 \\(\\forall v\\in(V\\setminus V')\\) \u5b58\u5728\u8fb9 \\((u, v)\\in E\\) \u6ee1\u8db3 \\(u\\in V'\\) \u3002 \u8fb9\u652f\u914d\u96c6 \\(E'\\) \uff1a\u56fe \\(G=(V, E)\\) \uff0c\u82e5 \\(E'\\subseteq E\\) \u4e14 \\(\\forall e\\in(E\\setminus E')\\) \u5b58\u5728 \\(E'\\) \u4e2d\u7684\u8fb9\u4e0e\u5176\u6709\u516c\u5171\u70b9\u3002 \u70b9\u8986\u76d6\u96c6\u5fc5\u4e3a\u652f\u914d\u96c6\uff0c\u4f46\u6781\u5c0f\u70b9\u8986\u76d6\u96c6\u4e0d\u4e00\u5b9a\u662f\u6781\u5c0f\u652f\u914d\u96c6\u3002\u4e00\u4e2a\u70b9\u96c6\u662f\u70b9\u8986\u76d6\u7684\u5145\u8981\u6761\u4ef6\u662f\u5176\u8865\u96c6\u662f\u72ec\u7acb\u96c6\uff0c\u56e0\u6b64\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u8865\u96c6\u662f\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6700\u5927\u5339\u914d\u4e5f\u53ef\u4ee5\u7531\u6700\u5c0f\u8fb9\u8986\u76d6\u6c42\u5f97\uff1a\u5bf9\u4e8e\u6700\u5c0f\u8fb9\u8986\u76d6\u4e2d\u6bcf\u5bf9\u6709\u516c\u5171\u70b9\u7684\u8fb9\u5220\u53bb\u5176\u4e2d\u4e00\u6761\u3002\u4e00\u5f20\u56fe\u7684\u6700\u5c0f\u8fb9\u8986\u76d6\u7684\u5927\u5c0f\u52a0\u4e0a\u6700\u5927\u5339\u914d\u7684\u5927\u5c0f\u7b49\u4e8e\u56fe\u7684\u70b9\u6570 \u6811\u7684\u5b9a\u4e49\uff1a \u6709 \\(n\\) \u4e2a\u7ed3\u70b9\uff0c \\(n-1\\) \u6761\u8fb9\u7684\u8fde\u901a\u65e0\u5411\u56fe\u3002 \u65e0\u5411\u65e0\u73af\u7684\u8fde\u901a\u56fe\u3002 \u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u7b80\u5355\u8def\u5f84\u7684\u65e0\u5411\u56fe\u3002 \u4efb\u4f55\u8fb9\u5747\u4e3a\u6865\u7684\u8fde\u901a\u56fe\u3002 \u6ca1\u6709\u5708\uff0c\u4e14\u5728\u4efb\u610f\u4e0d\u540c\u4e24\u70b9\u95f4\u6dfb\u52a0\u4e00\u6761\u8fb9\u4e4b\u540e\u6240\u5f97\u56fe\u542b\u552f\u4e00\u7684\u4e00\u4e2a\u5708\u7684\u56fe\u3002 \u6811\u7684\u6027\u8d28\uff1a \u5bf9\u4e8e\u65e0\u6839\u6811\u548c\u6709\u6839\u6811\uff1a \u68ee\u6797\uff1a\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\uff08\u8fde\u901a\u5757\uff09\u90fd\u662f\u6811\u7684\u56fe\uff0c\u4e00\u68f5\u6811\u4e5f\u662f\u68ee\u6797\u3002 \u751f\u6210\u6811\uff1a\u4e00\u4e2a\u8fde\u901a\u65e0\u5411\u56fe\u7684\u751f\u6210\u5b50\u56fe\uff0c\u540c\u65f6\u8981\u6c42\u662f\u6811\u3002\u4e5f\u5373\u5728\u56fe\u7684\u8fb9\u96c6\u4e2d\u9009\u62e9 \\(n - 1\\) \u6761\uff0c\u5c06\u6240\u6709\u9876\u70b9\u8fde\u901a\u3002 \u53f6\u7ed3\u70b9\uff1a \u65e0\u6839\u6811\uff1a\u5ea6\u6570\u4e0d\u8d85\u8fc7 1 \u7684\u7ed3\u70b9\u3002 \u6709\u6839\u6811\uff1a\u6ca1\u6709\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\u3002 \u5bf9\u4e8e\u6709\u6839\u6811\uff1a \u7236\u4eb2\uff1a\u5bf9\u4e8e\u9664\u6839\u4ee5\u5916\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5b9a\u4e49\u4e3a\u4ece\u8be5\u7ed3\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\uff0c\u6839\u7ed3\u70b9\u6ca1\u6709\u7236\u7ed3\u70b9\u3002 \u7956\u5148\uff1a\u4e00\u4e2a\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u9664\u4e86\u5b83\u672c\u8eab\u5916\u7684\u7ed3\u70b9\uff0c\u6839\u7ed3\u70b9\u7684\u7956\u5148\u96c6\u5408\u4e3a\u7a7a\u3002 \u5b50\u7ed3\u70b9\uff1a\u5982\u679c \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\uff0c\u90a3\u4e48 \\(v\\) \u662f \\(u\\) \u7684\u5b50\u7ed3\u70b9\u3002\u5b50\u7ed3\u70b9\u7684\u987a\u5e8f\u4e00\u822c\u4e0d\u52a0\u4ee5\u533a\u5206\uff0c\u4e8c\u53c9\u6811\u662f\u4e00\u4e2a\u4f8b\u5916\u3002 \u7ed3\u70b9\u7684\u6df1\u5ea6\uff1a\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u6570\u3002 \u6811\u7684\u9ad8\u5ea6\uff1a\u6240\u6709\u7ed3\u70b9\u7684\u6df1\u5ea6\u7684\u6700\u5927\u503c\u3002 \u5144\u5f1f\uff1a\u540c\u4e00\u4e2a\u7236\u4eb2\u7684\u591a\u4e2a\u5b50\u7ed3\u70b9\u4e92\u4e3a\u5144\u5f1f\u3002 \u540e\u4ee3\uff1a\u5b50\u7ed3\u70b9\u548c\u5b50\u7ed3\u70b9\u7684\u540e\u4ee3\u3002\u5982\u679c u \u662f v \u7684\u7956\u5148\uff0c\u90a3\u4e48 v \u662f u \u7684\u540e\u4ee3\u3002 \u5b50\u6811\uff1a\u5220\u6389\u4e0e\u7236\u4eb2\u76f8\u8fde\u7684\u8fb9\u540e\uff0c\u8be5\u7ed3\u70b9\u6240\u5728\u7684\u5b50\u56fe\u3002 \u6811\u7684\u904d\u5386\uff1a \u5148\u5e8f\u904d\u5386\uff1a\u6839\uff0c\u5de6\uff0c\u53f3\u3002 \u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\uff0c\u6839\uff0c\u53f3\u3002 \u540e\u5e8f\u904d\u5386\uff1a\u5de6\uff0c\u53f3\uff0c\u6839\u3002 \u5c42\u6b21\u904d\u5386\uff1a\u6811\u4e0a BFS\u3002 \u8868\u8fbe\u5f0f\u6811\uff1a\u4e8c\u53c9\u6811\uff0c\u5148\u5e8f\u5bf9\u5e94\u524d\u7f00\uff08\u6ce2\u5170\u5f0f\uff09\uff0c\u4e2d\u5e8f\u5bf9\u5e94\u4e2d\u7f00\uff0c\u540e\u5e8f\u5bf9\u5e94\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u9006\u6ce2\u5170\u5f0f\uff09\u3002 \u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff1a \u7b2c \\(i\\) \u5c42\u6700\u591a \\(2^{i-1}\\) \u4e2a\u8282\u70b9\u3002 \u6df1\u5ea6\u4e3a \\(k\\) \u6700\u591a\u6709 \\(2^k-1\\) \u4e2a\u8282\u70b9\u3002 \\(n_0=n_2+1\\) \u3002 \u6709 \\(n\\) \u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6df1\u5ea6\u4e3a \\(\\lfloor\\log_2n\\rfloor+1\\) \u3002 \u7279\u6b8a\u7684\u56fe\uff1a \u5982\u679c\u4e00\u5f20\u65e0\u5411\u8fde\u901a\u56fe\u5305\u542b\u6070\u597d\u4e00\u4e2a\u73af\uff0c\u5219\u79f0\u5b83\u662f\u4e00\u68f5\u57fa\u73af\u6811\u3002 \u5982\u679c\u4e00\u5f20\u6709\u5411\u5f31\u8fde\u901a\u56fe\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u90fd\u4e3a \\(1\\) \uff0c\u5219\u79f0\u5b83\u662f\u4e00\u68f5\u57fa\u73af\u5916\u5411\u6811\u3002 \u5982\u679c\u4e00\u5f20\u6709\u5411\u5f31\u8fde\u901a\u56fe\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u90fd\u4e3a \\(1\\) \uff0c\u5219\u79f0\u5b83\u662f\u4e00\u68f5\u57fa\u73af\u5185\u5411\u6811\u3002 \u591a\u68f5\u6811\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u68ee\u6797\uff0c\u591a\u68f5\u57fa\u73af\u6811\u53ef\u4ee5\u7ec4\u6210\u57fa\u73af\u68ee\u6797\uff0c\u591a\u68f5\u57fa\u73af\u5916\u5411\u6811\u53ef\u4ee5\u7ec4\u6210\u57fa\u73af\u5916\u5411\u6811\u68ee\u6797\uff0c\u591a\u68f5\u57fa\u73af\u5185\u5411\u6811\u53ef\u4ee5\u7ec4\u6210\u57fa\u73af\u5185\u5411\u68ee\u6797\u3002 \u5982\u679c\u4e00\u5f20\u65e0\u5411\u8fde\u901a\u56fe\u7684\u6bcf\u6761\u8fb9\u6700\u591a\u5728\u4e00\u4e2a\u73af\u5185\uff0c\u5219\u79f0\u5b83\u662f\u4e00\u68f5\u4ed9\u4eba\u638c\uff0c\u591a\u68f5\u4ed9\u4eba\u638c\u53ef\u4ee5\u7ec4\u6210\u6c99\u6f20\u3002 \u4e8c\u5206\u56fe\uff1a \u4e8c\u5206\u56fe\uff1a\u4e00\u5f20\u56fe\u7684\u70b9\u96c6\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u6bcf\u4e00\u90e8\u5206\u7684\u5185\u90e8\u90fd\u6ca1\u6709\u8fde\u8fb9\u3002 \u5b8c\u5168\u4e8c\u5206\u56fe\uff1a\u4e8c\u5206\u56fe\u4e2d\u4efb\u4f55\u4e24\u4e2a\u4e0d\u5728\u540c\u4e00\u90e8\u5206\u7684\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\u3002","title":"\u56fe\u8bba\u57fa\u7840"},{"location":"contest/pre/#_31","text":"\u8be6\u89c1\uff1a https://www.luogu.com.cn/blog/334586/csp-pre-knowledge","title":"\u6570\u5b66\u95ee\u9898"},{"location":"contest/pre/#_32","text":"\u6392\u5217 \\(A(n, m)\\) \uff0c\u65e7\u65f6\u5199\u4f5c \\(P(n, m)\\) \uff1a \\(\\displaystyle A(n, m) = \\frac{n!}{(n - m)!}\\) \u7ec4\u5408 \\(C(n, m)\\) \uff0c\u4e5f\u5199\u4f5c \\(\\displaystyle \\binom{n}{m}\\) \uff1a \\(\\displaystyle C(n, m) = \\frac{A(n, m)}{A(m, m)} = \\frac{n!}{m!(n - m)!}\\) \u9519\u6392\u5217\u95ee\u9898\uff1a \\(D_1 = 0\\) \uff0c \\(D_2 = 1\\) \uff0c \\(D_n = (n - 1)(D_{n - 1} + D_{n - 2})\\) Lucas \u5b9a\u7406\uff1a \\(\\displaystyle \\binom{n}{m} = \\binom{n \\bmod p}{m \\bmod p}\\binom{n / p}{m / p}\\) \uff0c\u5176\u4e2d \\(p\\) \u4e3a\u8d28\u6570 Catalan \u6570\uff1a \\(\\displaystyle C(n) = \\binom{2n}{n} - \\binom{2n}{n - 1} = \\frac{1}{n + 1} \\binom{2n}{n}\\) \u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \\(\\displaystyle (x + y)^k = \\sum_{i = 0}^{k} C(n, i) x^i y^{k - i}\\)","title":"\u6392\u5217\u7ec4\u5408"},{"location":"contest/pre/#_33","text":"\u72ec\u7acb\u4e8b\u4ef6\uff08\u5373\u4e24\u4e8b\u4ef6\u7684\u7ed3\u679c\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\uff09\uff1a \\(P(A \\cap B) = P(A) \\times P(B)\\) \u53e4\u5178\u516c\u5f0f\uff1a \\(P(A) = \\dfrac{|A|}{S}\\) \u8d1d\u53f6\u65af\u516c\u5f0f\uff1a \\(P(A \\mid B) = \\dfrac{P(A \\cap B)}{P(B)}\\) \u6570\u5b66\u671f\u671b\uff1a \\(\\displaystyle E(x) = \\sum_{i = 1}^\\infty x_i p_i\\)","title":"\u6982\u7387\u4e0e\u7edf\u8ba1"},{"location":"contest/pre/#_34","text":"\u77e9\u9635\uff1a \u77e9\u9635\u4e58\u6cd5 \\(O(nmr)\\) \uff1a \u8bbe \\(A = (a_{ij})_{n \\times m}\\) \uff0c \\(B = (b_{ij})_{m \\times r}\\) \uff0c \u8bbe \\(C = A \\times B = (c_{ij})_{n \\times r}\\) \uff0c \u5219 \\(\\displaystyle c_{ij} = \\sum_{k = 1}^{m} a_{ik}b_{kj}\\)","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"contest/pre/#_35","text":"\u9898\u76ee\uff1a\u6709 \\(n \\times m\\) \u7684\u65b9\u683c\uff0c\u4ece \\((1, 1)\\) \u51fa\u53d1\uff0c\u53ea\u80fd\u5411\u53f3\u3001\u4e0b\u8d70\uff0c\u6c42\u8d70\u5230 \\((n, m)\\) \u7684\u65b9\u6848\u6570\u3002 \u9012\u63a8\u6cd5 \u6bcf\u4e2a\u683c\u5b50\u53ef\u4ee5\u4ece\u4e0a\u9762\u548c\u53f3\u9762\u8f6c\u79fb\u8fc7\u6765\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684 DP \u95ee\u9898\uff1a \\(f(i, j) = f(i - 1, j - 1) + f(i - 1, j)\\) . \u7ec4\u5408\u6570\u5b66\u6cd5 \\(C(n + m - 2, n - 1)\\) \u6216 \\(C(n + m - 2, m - 1)\\) . \u8bc1\u660e\uff1a\u4e00\u5171\u8981\u8d70 \\(n + m - 2\\) \u6b65\uff0c\u5176\u4e2d \\(n - 1\\) \u4e2a\u4e0b\uff0c \\(m - 1\\) \u4e2a\u53f3\uff0c\u968f\u65f6\u90fd\u80fd\u5411\u53f3\u8d70\uff0c\u8bc1\u6bd5\u3002 \u6269\u5c55 \u4ece \\((a, b)\\) \u8d70\u5230 \\((c, d)\\) \uff0c\u8def\u5f84\u6570\u4e3a \\(C(c - a + d - b, c - a)\\) \u6216 \\(C(c - a + d - b, d - b)\\) .","title":"\u65b9\u683c\u8def\u5f84"},{"location":"contest/pre/#_36","text":"\u5bf9\u6570\u6052\u7b49\u5f0f\uff1a \\(\\log_kn = \\dfrac{\\log_xn}{\\log_xk}\\) \u6574\u6570\u6ea2\u51fa\uff1a signed \u6ea2\u51fa\u662f Undefined Behavior\uff08UB\uff09\uff0c\u662f\u5426\u53d6\u4f1a\u6a21\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\uff1b unsigned \u6ea2\u51fa\u662f Define Behavior\uff08DB\uff09\uff0c\u5728\u6ea2\u51fa\u65f6\u81ea\u52a8\u53d6\u6a21\u3002 \u6a21\u7b49\u5f0f\uff1a \u5bf9\u4e8e \\(m \\bmod n = p\\) \uff1a \u82e5 \\(m > n\\) \uff0c\u5219 \\(0 \\le p <n\\) \uff1b \u82e5 \\(m = n\\) \uff0c\u5219 \\(p = 0\\) \uff1b \u82e5 \\(m < n\\) \uff0c\u5219 \\(p = m\\) \uff1b \u6240\u4ee5 \\(p \\le \\min(m, n)\\)","title":"\u5176\u4ed6"},{"location":"contest/pre/#_37","text":"\u4ee5\u4e0b\u5927\u591a\u6765\u81ea\u5b66\u800c\u601d https://mp.weixin.qq.com/s/fk9B6pTA_33aZbHp8fcw9A \u3002 \u666e\u901a\u5355\u9009\u9898\u5c31\u662f\u4e00\u4e2a\u9898\u9762\u4e00\u9053\u9898\u56db\u4e2a\u9009\u9879\uff0c\u4e3b\u8981\u662f\u4ece\u4e94\u4e2a\u65b9\u9762\u6765\u8003\u5bdf\uff0c\u5206\u522b\u662f\uff1a\u8ba1\u7b97\u673a\u57fa\u7840\u5e38\u8bc6\u3001C++ \u8bed\u6cd5\u3001\u57fa\u672c\u7b97\u6cd5\u7406\u8bba\u3001\u6570\u636e\u7ed3\u6784\u3001\u6570\u5b66\u57fa\u7840\u3002\u672c\u6587\u4e3b\u8981\u8be6\u8ff0\u4e00\u4e0b\u8fd9\u4e9b\u9898\u9002\u7528\u7684\u62ff\u5206\u6280\u5de7\uff0c\u5305\u62ec\uff1a\u6392\u9664\u6cd5\u3001\u7279\u6b8a\u503c\u4ee3\u5165\u6cd5\u3001\u6781\u503c\u6cd5\u7b49\uff0c\u9664\u6b64\u4e4b\u5916\u5728\u4e00\u4e9b\u4ee3\u7801\u9898\u4e2d\u4e5f\u53ef\u4ee5\u7528\u6a21\u62df\u6cd5\uff0c\u6a21\u62df\u6cd5\u4f1a\u5728\u4e0b\u6587\u8be6\u8ff0\u3002 \u957f\u7bc7\u4ee3\u7801\u9898\u5c31\u662f\u7ed9\u4e00\u6bb5\u4ee3\u7801\uff0c\u7136\u540e\u9700\u8981\u56de\u7b54\u82e5\u5e72\u9053\u4e0e\u4e4b\u76f8\u5173\u7684\u5ba2\u89c2\u9898\uff0c\u7ed9\u51fa\u7684\u4ee3\u7801\u53ef\u4ee5\u662f\u5b8c\u597d\u7684\uff08\u9605\u8bfb\u7a0b\u5e8f\u9898\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u6b8b\u7f3a\u7684\uff08\u5b8c\u5584\u7a0b\u5e8f\u9898\uff09\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u9898\uff0c\u6211\u4eec\u80fd\u7528\u7684\u6280\u5de7\u6709\uff1a\u6a21\u62df\u6cd5\u3001\u6a21\u4eff\u76f8\u4f3c\u4ee3\u7801\u6cd5\u3001\u76f8\u5173\u53d8\u91cf\u6cd5\u3001\u7ecf\u5178\u7b97\u6cd5\u5b9e\u73b0\u3001\u53c2\u8003\u6587\u5b57\u63d0\u793a\u3001\u7279\u6b8a\u6570\u636e\u5e26\u5165\u6cd5\u3001\u6392\u9664\u6cd5\u3001\u53cd\u4f8b\u6cd5\u7b49\u3002","title":"\u62ff\u5206\u6280\u5de7"},{"location":"contest/pre/#_38","text":"\u8fd9\u9053\u9898\u5f53\u5e74\u5f88\u591a\u540c\u5b66\u4e0d\u6562\u80af\u5b9a A \u662f\u5bf9\u7684\uff0c\u4f46\u662f\u5462\uff0c\u7531\u4e8e BCD \u9519\u5f97\u79bb\u8c31\uff0c\u6240\u4ee5\u5c31\u7b97\u4f60\u518d\u4e0d\u786e\u5b9a A \u662f\u4e0d\u662f\u5bf9\u7684\uff0c\u7531\u4e8e\u5176\u4ed6\u9009\u9879\u90fd\u88ab\u6392\u9664\u4e86\uff0c\u4e5f\u5c31\u53ea\u597d\u9009 A \u4e86\u3002","title":"\u6392\u9664\u6cd5"},{"location":"contest/pre/#_39","text":"\u672c\u9898\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u89c4\u5f8b\u9898\uff0c\u7406\u8bba\u4e0a\u5bf9\u4e8e\u4efb\u4f55\u7b26\u5408\u6761\u4ef6\u7684\u6570\uff0c\u8fd9\u4e2a\u89c4\u5f8b\u90fd\u80fd\u6210\u7acb\uff0c\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u4ee3\u5165\u4e00\u4e9b\u6781\u4e3a\u7279\u6b8a\u7684\u6570\uff0c\u4ece\u800c\u80fd\u76f4\u63a5\u7b80\u5316\u6574\u4e2a\u9898\u76ee\u7684\u96be\u5ea6\u7b49\u7ea7\uff0c\u6bd4\u5982\u4ee3\u5165 \\(n = 1\\) \uff0c\u5219\u6570\u7ec4\u88ab\u7b80\u5316\u4e3a \\(1 \\times 1\\) \u7684\u6570\u7ec4\uff0c\u53ea\u6709 \\(1\\) \u4e2a\u5143\u7d20\uff1aa[0][0]\u3002 \u6b64\u65f6\uff0c\u8fd9\u4e2a\u5143\u7d20\u7684\u524d\u9762\u6ca1\u6709\u4efb\u4f55\u5143\u7d20\uff0c\u5373\uff0c\u6709 \\(0\\) \u4e2a\u5143\u7d20\u3002\u7136\u540e\u628a \\(i = 0\\) \u548c \\(j = 0\\) \u4ee3\u5165\u56db\u4e2a\u9009\u9879\uff0c\u80fd\u591f\u5feb\u901f\u5f97\u5230 A \u4e3a \\(-1\\) \u3001D \u4e3a \\(1\\) \u90fd\u662f\u4e0d\u7b26\u5408\u9898\u610f\u7684\u9009\u9879\uff0c\u5747\u53ef\u4ee5\u5feb\u901f\u6392\u9664\u3002\u81f3\u4e8e B \u548c C \u9009\u9879\uff0c\u6211\u4eec\u53ea\u9700\u8981\u518d\u4ee3\u5165\u4e00\u4e2a\u7a0d\u590d\u6742\u7684\u77e9\u9635\uff08\u5982 \\(3 \\times 4\\) \uff09\u7684\u5c31\u80fd\u8f7b\u677e\u89e3\u51b3\u95ee\u9898~ \u5728\u4e0a\u8ff0\u5b9e\u64cd\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u7279\u6b8a\u6781\u503c\uff0c\u5c06\u9898\u76ee\u5316\u7b80\u4e3a\u4e86\u4e00\u4e2a\u6781\u4e3a\u7b80\u5355\u7684\u60c5\u51b5\uff08\u4ece\u4e8c\u7ef4\u53d8\u6210\u4e86\u4e00\u7ef4\uff09\uff0c\u4ece\u800c\u5feb\u901f\u6392\u9664\u6389\u4e00\u534a\u7684\u9009\u9879\uff0c\u5c06\u968f\u673a\u9009\u62e9\u7684\u6b63\u786e\u7387\u4ece \\(25\\%\\) \u4e00\u4e0b\u5c31\u63d0\u9ad8\u5230\u4e86 \\(50\\%\\) \uff0c\u8fd9\u9053\u9898\u7684\u539f\u610f\u672c\u6765\u662f\u60f3\u8003\u5bdf\u6211\u4eec\u5bf9\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u7684\u7406\u89e3\u6df1\u5ea6\uff0c\u4f46\u662f\u5982\u679c\u4f60\u5bf9\u4e8c\u7ef4\u6570\u7ec4\u7684\u4e86\u89e3\u4e0d\u6df1\uff0c\u901a\u8fc7\u8fd9\u79cd\u6781\u503c\u7b80\u5316\u548c\u6392\u9664\u7684\u529e\u6cd5\uff0c\u4e5f\u80fd\u6781\u5927\u63d0\u9ad8\u5f97\u5206\u6982\u7387\u3002","title":"\u6781\u503c\u6cd5"},{"location":"contest/pre/#_40","text":"\u6211\u4eec\u53ef\u4ee5\u4ee3\u5165\u4e00\u4e9b\u7279\u6b8a\u7684\u6570\u636e\uff0c\u6765\u731c\u6d4b\u4ec0\u4e48\u6837\u7684\u6570\u7ec4\u5408\u5e76\u65f6\uff0c\u6bd4\u8f83\u6b21\u6570\u6700\u591a\uff0c\u5e76\u7b97\u51fa\u6700\u591a\u7684\u6bd4\u8f83\u6b21\u6570\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u662f a \u6570\u7ec4 \\([1, 2, 3]\\) \u548c b \u6570\u7ec4 \\([4, 5, 6]\\) \u4e24\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u53d1\u73b0\u9996\u5148 \\(1\\) \u3001 \\(2\\) \u3001 \\(3\\) \u5206\u522b\u9700\u8981\u548c \\(4\\) \u6bd4\u8f83\u4e00\u6b21\u540e\u653e\u5165\u7ed3\u679c\u6570\u7ec4\uff0c\u7136\u540e\u7531\u4e8e a \u6570\u7ec4\u5df2\u7ecf\u6ca1\u6709\u4e86\u53ef\u6bd4\u8f83\u5143\u7d20\u4e86\uff0cb \u6570\u7ec4\u5c31\u76f4\u63a5\u6309\u987a\u5e8f\u653e\u5165\u7ed3\u679c\u6570\u7ec4\u5373\u53ef\uff0c\u6240\u4ee5\u6bd4\u8f83\u6b21\u6570\u53ea\u9700\u8981 \\(3\\) \u6b21\uff0c\u5373 n \u6b21\u5373\u53ef\u3002 \u8fd9\u6837\u663e\u7136\u592a\u987a\u5229\u4e86\uff0c\u800c\u9898\u76ee\u95ee\u7684\u662f\u81f3\u591a\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8fd0\u6c14\u4e0d\u592a\u597d\u7684\u6570\u7ec4\uff0c\u5982 a \u4e3a \\([1, 3, 5]\\) \uff0cb \u4e3a \\([2, 4, 6]\\) \uff0c\u8fd9\u6837 \\(1\\) \u9700\u8981\u548c \\(2\\) \u6bd4\u8f83\uff0c\u7136\u540e\u653e\u5165\u7ed3\u679c\u6570\u7ec4\uff0c \\(2\\) \u9700\u8981\u548c \\(3\\) \u6bd4\u8f83\u3001 \\(3\\) \u9700\u8981\u548c \\(4\\) \u6bd4\u8f83\u7b49\u7b49\u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u5408\u5e76\u8fd9\u4e24\u4e2a\u6570\u7ec4\u9700\u8981\u6bd4\u8f83 \\(5\\) \u6b21\uff0c\u54b1\u4eec\u53ef\u4ee5\u968f\u610f\u589e\u5927\u6570\u7ec4\u957f\u5ea6\u627e\u89c4\u5f8b\uff0c\u53ef\u77e5\u9700\u8981\u6bd4\u8f83 \\(2n \u2013 1\\) \u6b21\u3002\u800c\u4e14\u7531\u4e8e\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5916\uff0c\u6bcf\u4e2a\u5143\u7d20\u8fdb\u6570\u7ec4\u524d\u90fd\u8981\u6bd4\u8f83\u4e00\u6b21\uff0c\u6bd4\u8f83\u5f97\u5f88\u5145\u5206\uff0c\u6ca1\u6709\u5176\u4ed6\u60c5\u51b5\u80fd\u6bd4\u8fd9\u79cd\u60c5\u51b5\u6bd4\u7684\u6b21\u6570\u66f4\u591a\u4e86\uff0c\u6545\u800c\u5f97\u5230\u672c\u9898\u7b54\u6848\u9009 D\u3002\u8fd9\u6837\u4ee3\u5165\u5177\u4f53\u4f8b\u5b50\u80af\u5b9a\u6bd4\u540c\u5b66\u4eec\u5728\u7406\u8bba\u5c42\u9762\u63a8\u8981\u5feb\uff0c\u8981\u76f4\u89c2\uff0c\u66f4\u4e0d\u5bb9\u6613\u9519\uff0c\u5bf9\u5427\uff1f","title":"\u4ee3\u5165\u6cd5"},{"location":"contest/pre/#_41","text":"\u82e5\u53d8\u91cf\u4e2a\u6570\u8fc7\u591a\uff0c\u6216\u7a0b\u5e8f\u53d8\u5316\u8fc7\u4e8e\u590d\u6742\uff0c\u968f\u624b\u5199\u7684\u8fc7\u7a0b\u4e2d\u5bb9\u6613\u7a0d\u4e0d\u7559\u795e\u5c31\u51fa\u9519\u65f6\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u8bbe\u8ba1\u8868\u683c\u6765\u5c55\u793a\u6240\u6709\u6570\u636e\u3002\u6a21\u62df\u65f6\uff0c\u9047\u5230\u5e38\u89c1\u7684\u53d8\u91cf\u540d\u548c\u7b97\u6cd5\u7ed3\u6784\u65f6\uff0c\u53ef\u4ee5\u5927\u80c6\u5730\u6839\u636e\u53d8\u91cf\u540d\u3001\u7b97\u6cd5\u7ed3\u6784\u731c\u6d4b\u5176\u4f5c\u7528\uff0c\u518d\u6839\u636e\u6a21\u62df\u7684\u7ed3\u679c\u5c0f\u5fc3\u9a8c\u8bc1\uff0c\u8fd9\u6837\u80fd\u591f\u63d0\u9ad8\u505a\u5bf9\u7684\u6982\u7387\uff0c\u5e76\u4e14\u6781\u5927\u51cf\u5c11\u6211\u4eec\u6a21\u62df\u65f6\u7684\u5de5\u4f5c\u91cf~ \u5e38\u89c1\u7684\u53d8\u91cf\u540d\u5982\u4e0b\uff1a \u5bf9\u4e8e\u5e38\u89c1\u7684\u7b97\u6cd5\u7ed3\u6784\uff0c\u5927\u5bb6\u53ef\u4ee5\u91cd\u70b9\u5173\u6ce8\u4e00\u4e9b\u7b97\u6cd5\u7684\u5178\u578b\u7ed3\u6784\uff1a\u4e8c\u5206\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u8fde\u7eed\u5b57\u7b26\u5224\u65ad\uff08\u5b57\u7b26\u8f6c\u6570\u5b57\uff09\u3001\u94fe\u8868\u3001\u5206\u6cbb\u3001\u4e8c\u53c9\u6811\u7b49\u3002\u6b64\u5904\u9650\u4e8e\u7bc7\u5e45\u5c31\u4e0d\u8be6\u7ec6\u5217\u51fa\u6bcf\u79cd\u7ed3\u6784\u4e86\uff0c\u8bf7\u5927\u5bb6\u4e00\u5b9a\u8981\u5bf9\u7167\u4ee3\u7801\uff0c\u4ed4\u7ec6\u603b\u7ed3\u3002 \u867d\u7136\u6a21\u62df\u6cd5\u975e\u5e38\u6709\u7528\uff0c\u4f46\u662f\u6bd4\u8f83\u4f9d\u8d56\u5404\u4f4d\u540c\u5b66\u624e\u5b9e\u7684\u4ee3\u7801\u80fd\u529b\uff0c\u5bf9\u4e8e\u975e\u5e38\u590d\u6742\u7684\u9898\uff0c\u4ee3\u7801\u80fd\u529b\u5f31\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u6a21\u62df\u5f97\u975e\u5e38\u5403\u529b\uff0c\u8fd8\u5bb9\u6613\u51fa\u9519\uff0c\u6240\u4ee5\u4e0b\u8ff0\u6280\u5de7\u5176\u5b9e\u624d\u662f\u54b1\u4eec\u201c\u9a97\u5206\u201d\u7684\u4e3b\u529b\uff01","title":"\u6a21\u62df\u6cd5"},{"location":"contest/pre/#_42","text":"\u5728\u6211\u4eec\u7f16\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u4f1a\u51fa\u73b0\u76f8\u4f3c\u5ea6\u5f88\u9ad8\u7684\u4ee3\u7801\uff0c\u5b83\u4eec\u901a\u5e38\u662f\u5bf9\u4e0d\u540c\u7684\u5bf9\u8c61\u505a\u76f8\u540c\u6216\u8005\u76f8\u4f3c\u7684\u5904\u7406\u3002\u8fd9\u79cd\u73b0\u8c61\u5e38\u5e38\u51fa\u73b0\u5728\u679a\u4e3e\u3001\u5206\u6cbb\u6216\u8005\u6811\u7ed3\u6784\u76f8\u5173\u7684\u7a0b\u5e8f\u4e0a\u3002\u5f53\u6211\u4eec\u9700\u8981\u8865\u5168\u8bed\u53e5\u65f6\uff0c\u53c2\u8003\u4e0e\u5b83\u76f8\u4f3c\u7684\u6bb5\u843d\u5f80\u5f80\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u5f88\u591a\u63d0\u793a\u548c\u542f\u53d1\u3002 \u65b9\u6cd5\u4e3e\u4f8b\uff1a \u901a\u8fc7\u9898\u76ee\u53ef\u77e5\uff0c\u672c\u9898\u4ee3\u7801\u8003\u5bdf\u7684\u662f\u4e8c\u53c9\u6811\u7ed3\u6784\u3002\u5728\u4ee3\u7801\u91cc\uff0c\u4f60\u80fd\u53d1\u73b0\u76f8\u4f3c\u7684\u5730\u65b9\u4e0d\uff1f16\u884c\u548c17\u884c\u7684\u4ee3\u7801\u662f\u6bd4\u8f83\u76f8\u4f3c\u7684\u5427\uff1f\u4ece \\(17\\) \u884c\u7684 a[root].rch \u6765\u770b\uff0c\u6211\u4eec\u4e0d\u96be\u731c\u51fa\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u8981\u904d\u5386\u5b83\u7684\u53f3\u5b50\u6811\uff0c\u90a3\u4e48 \\(16\\) \u884c\u5e94\u8be5\u662f\u8981\u904d\u5386\u4ec0\u4e48\u5462\uff1f\u81ea\u7136\u662f\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u6807\u53f7\u4e3a \u2461 \u8fd9\u4e2a\u7a7a\u7684\u7b54\u6848\u547c\u4e4b\u6b32\u51fa\uff1a\u81ea\u7136\u662f a[root].lch \u3002 \u901a\u8fc7 \\(16\\) \u884c\u53ef\u77e5\uff0c\u5de6\u5b50\u6811\u7684\u8303\u56f4\u662f lower_bound \u5230 cur \uff0c\u90a3\u4e48 \u2462\u2463 \u7a7a\u53f3\u5b50\u6811\u7684\u8303\u56f4\u662f\u5565\u5462\uff1f\u80af\u5b9a\u4ece cur \u5de6\u53f3\u5f00\u59cb\uff0c\u5230 upper_bound \u3002\u4e3a\u5565\u662f upper_bound \u5462\uff1f\u56e0\u4e3a\u4e00\u67e5\u5b57\u5178\u5c31\u77e5\u9053\uff0c lower_bound \u662f\u4e0b\u754c\uff08\u4e0b\u9650/\u6700\u5c0f\u503c\uff09\uff0c\u6240\u4ee5\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8bcd\uff0c\u4e60\u60ef\u4e0a\u4e00\u822c\u79f0\u4e3a upper_bound \uff08\u4e0a\u754c\uff09\u3002\u7ecf\u8fc7\u6b64\u756a\u4e25\u8c28\u800c\u5927\u80c6\u7684\u731c\u6d4b\u540e\uff0c\u4e0b\u9762\u7684\u51e0\u9898\u4f60\u4f1a\u9009\u4e86\u4e48\uff1f \u5f53\u7136\uff0c\u4f60\u8981\u662f\u89c9\u5f97\u7528\u6280\u5de7\u7684\u731c\u6d4b\u8fc7\u4e8e\u5927\u80c6\u4e86\uff0c\u4e0d\u653e\u5fc3\u7684\u8bdd\uff0c\u5728\u65f6\u95f4\u5bcc\u88d5\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u518d\u7528\u6a21\u62df\u6cd5\u4ee3\u5165\u5177\u4f53\u6570\u503c\u5c0f\u5fc3\u9a8c\u8bc1\u4e00\u4e0b\u3002","title":"\u6a21\u4eff\u76f8\u4f3c\u4ee3\u7801\u6cd5"},{"location":"contest/pre/#_43","text":"\u5f88\u591a\u9898\u76ee\uff0c\u7279\u522b\u662f\u5b8c\u5584\u7a0b\u5e8f\u9898\u7684\u9898\u76ee\u90fd\u4f1a\u6d89\u53ca\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u5177\u4f53\u7684\u7b97\u6cd5\uff0c\u800c\u5f88\u591a\u7b97\u6cd5\u662f\u6709\u660e\u663e\u7684\u7ecf\u5178\u4ee3\u7801\u7279\u8272\u7684\u3002\u56e0\u6b64\uff0c\u54b1\u4eec\u53ef\u4ee5\u5229\u7528\u7b97\u6cd5\u672c\u8eab\u7ea6\u5b9a\u4fd7\u6210\u7684\u5199\u6cd5\u5c31\u80fd\u5feb\u901f\u89e3\u9898\uff01 \u65b9\u6cd5\u4e3e\u4f8b\uff1a \u672c\u9898\u7684 \\(1\\) \u3001 \\(2\\) \u7a7a\u4e00\u770b\u5c31\u662f\u5728\u6c42\u6240\u6709\u7684\u7ea6\u6570\uff0c\u7ed3\u5408\u9898\u76ee\u8981\u6c42\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt n)\\) \uff0c\u6211\u4eec\u6839\u636e\u8fc7\u5f80\u6c42\u89e3\u56e0\u6570\u4e2a\u6570\u7b49\u7684\u6a21\u677f\u53ef\u77e5\uff0c \\(1\\) \u7a7a\u4e3a i * i \uff08\u56e0\u4e3a\u7ea6\u6570\u662f\u6210\u53cc\u6210\u5bf9\u7684\uff0c\u627e\u5230 \\(\\sqrt n\\) \u5c31\u884c\u4e86\uff09\uff0c \\(2\\) \u7a7a\u4e3a n / i \uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u5b8c\u5168\u5e73\u65b9\u6570\u6709\u4e00\u4e2a\u65e0\u6cd5\u6210\u5bf9\u7684\u7ea6\u6570\u60c5\u51b5\uff08\u5982\uff0c \\(36\\) \u7684\u7ea6\u6570 \\(6\\) \u6ca1\u6709\u4e0e\u4e4b\u914d\u5bf9\u7684\u4e0d\u540c\u7684\u7ea6\u6570\u4e86\uff09\u3002 \u672c\u9898\u7684 \\(3\\) \u3001 \\(4\\) \u7a7a\u6839\u636e\u51fd\u6570\u540d\u548c\u9898\u76ee\u63cf\u8ff0\u53ef\u77e5\uff0c\u5176\u4f5c\u7528\u662f\u6c42\u6700\u5927\u516c\u7ea6\u6570\u7684\u51fd\u6570\uff0c\u7ed3\u5408\u9898\u76ee\u8981\u6c42\u590d\u6742\u5ea6\u4e3a \\(O(\\log \\max(a, b))\\) \uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u662f\u8003\u8f97\u8f6c\u76f8\u9664\u6cd5\u7684\u9012\u5f52\u7248\u672c\uff0c\u6240\u4ee5 \\(3\\) \u4e3a return a \u3001 \\(4\\) \u4e3a a % b \u3002","title":"\u7ecf\u5178\u7b97\u6cd5\u5b9e\u73b0"},{"location":"contest/pre/#_44","text":"\u6b64\u65b9\u6cd5\u901a\u5e38\u7528\u5728\u5224\u65ad\u9898\u91cc\uff0c\u6839\u636e\u9898\u76ee\u7ed9\u7684\u6761\u4ef6\uff0c\u53ea\u8981\u80fd\u4e3e\u51fa\u4e00\u4e2a\u53cd\u4f8b\uff0c\u90a3\u4e48\u9898\u76ee\u6240\u63cf\u8ff0\u7684\u5185\u5bb9\u5c31\u4f1a\u4e0d\u6210\u7acb\u3002 \u65b9\u6cd5\u4e3e\u4f8b\uff1a \u6bd4\u5982\uff0c\u9898\u76ee\u8bf4\uff1a\u6570\u7ec4 a[i] \u5fc5\u987b\u5168\u4e3a\u6b63\u6574\u6570\uff0c\u5426\u5219\u7a0b\u5e8f\u5c06\u9009\u5165\u6b7b\u5faa\u73af\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06 \\(0\\) \u6216\u8005\u8d1f\u6574\u6570\u4ee3\u5165 a \u6570\u7ec4\uff0c\u770b\u770b\u4f1a\u4e0d\u4f1a\u6b7b\u5faa\u73af\uff0c\u53ea\u8981\u80fd\u627e\u5230\u4e00\u4e2a\u53cd\u4f8b\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u63cf\u8ff0\u7684\u60c5\u51b5\u5c31\u4e0d\u6210\u7acb\u3002\u5f53\u7136\uff0c\u7531\u4e8e\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u53cd\u4f8b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ee3\u5165\u5c3d\u53ef\u80fd\u7b80\u5355\u7684\u6570\uff0c\u6bd4\u5982 \\(0\\) \u6216 \\(-1\\) \uff0c\u8fd9\u6837\u5c31\u80fd\u5feb\u901f\u7b97\u51fa\u7b54\u6848\u3002","title":"\u53cd\u4f8b\u6cd5"},{"location":"dp/basic/","text":"\u52a8\u6001\u89c4\u5212\u57fa\u7840 \u00b6 \u52a8\u6001\u89c4\u5212\uff08Dynamic Programming\uff0cDP\uff09\u662f\u8fd0\u7b79\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u662f\u6c42\u89e3\u51b3\u7b56\u8fc7\u7a0b\u6700\u4f18\u5316\u7684\u8fc7\u7a0b\u3002 \u6982\u5ff5\u548c\u601d\u8def \u00b6 \u6982\u5ff5 \u00b6 \u628a\u6240\u6c42\u89e3\u95ee\u9898\u7684\u8fc7\u7a0b\u6070\u5f53\u5730\u5206\u6210\u82e5\u5e72\u4e2a\u76f8\u4e92\u8054\u7cfb\u7684 \u9636\u6bb5 \uff0c\u4ee5\u4fbf\u4e8e\u6c42\u89e3\u3002 \u6211\u4eec\u5728\u95ee\u9898\uff08\u4e00\u4e2a\u9636\u6bb5\uff09\u4e2d\u7528\u7b80\u5355\u7684\u4fe1\u606f\u63cf\u8ff0\u4e00\u4e2a\u5c40\u90e8\u7684\u5b50\u95ee\u9898\uff0c\u79f0\u4e3a \u72b6\u6001 \u3002 \u6216\u8005\u8bf4\uff0c\u72b6\u6001\u8868\u793a\u6bcf\u4e2a\u9636\u6bb5\u5f00\u59cb\u9762\u4e34\u7684\u81ea\u7136\u72b6\u51b5\u6216\u5ba2\u89c2\u6761\u4ef6\u3002 \u95ee\u9898\u7684\u9650\u5236\u5177\u6709\u4e00\u5b9a\u7684\u5c40\u90e8\u6027\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u8f6c\u79fb\u5c06\u5b50\u95ee\u9898\u8fde\u63a5\u8d77\u6765\u3002 \u901a\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u8fdb\u800c\u5f97\u5230\u539f\u95ee\u9898\u7684\u7b54\u6848\uff0c\u79f0\u4e3a \u8f6c\u79fb \uff08 \u7b56\u7565 \u3001 \u51b3\u7b56 \uff09\u3002 \u6211\u4eec\u79f0\uff0c\u6bcf\u4e2a\u9636\u6bb5\u7684\u51b3\u7b56\u7ec4\u6210\u7684\u5e8f\u5217\u79f0\u4e3a \u7b56\u7565 \uff0c\u5373\u6c42\u89e3\u95ee\u9898\u7684 \u7b56\u7565 \u3002 \u5176\u4e2d\u6ee1\u8db3\u67d0\u4e9b\u9650\u5236\u7684\u79f0\u4e3a \u5141\u8bb8\u7b56\u7565\u96c6\u5408 \uff0c\u8fbe\u5230\u6700\u4f18\u6548\u679c\u7684\u7b56\u7565\u79f0\u4e3a \u6700\u4f18\u7b56\u7565 \u3002 \u52a8\u6001\u89c4\u5212\u5c31\u662f\u8fd9\u79cd\uff0c\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684 \u5b50\u95ee\u9898 \u7684\u8fc7\u7a0b\u3002 \u8fc7\u7a0b \u00b6 \u52a8\u6001\u89c4\u5212\u6240\u5904\u7406\u7684\u95ee\u9898\u662f\u4e00\u4e2a \u591a\u9636\u6bb5\u51b3\u7b56\u95ee\u9898 \u3002 \u4e00\u822c\u7531 \u8fb9\u754c\u72b6\u6001 \u5f00\u59cb\uff0c\u901a\u8fc7\u5bf9\u4e2d\u95f4\u9636\u6bb5\u51b3\u7b56\u7684\u9009\u62e9\uff0c\u8fbe\u5230\u7ed3\u675f\u72b6\u6001\u3002 \u52a8\u6001\u89c4\u5212\u7684\u5173\u952e\u5c31\u5728\u4e8e\uff0c\u627e\u5230 \u5408\u9002\u7684\u72b6\u6001 \uff0c\u901a\u8fc7 \u5408\u9002\u7684\u8f6c\u79fb \u5f97\u5230\u6240\u6709\u5b50\u95ee\u9898\u7684\u7ed3\u679c\u3002 \u72b6\u6001\u8bbe\u8ba1\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a\u5728\u5b50\u95ee\u9898\u4e2d\uff0c\u5f53\u524d\u8bb0\u5f55\u7684\u72b6\u6001\u662f\u4e0d\u662f\u8db3\u591f\u5904\u7406\u95ee\u9898\u7684\u9650\u5236\uff1f \u8f6c\u79fb\u8bbe\u8ba1\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a\u662f\u5426\u4e0d\u91cd\u4e0d\u6f0f\uff08\u8ba1\u6570\uff09\uff1f\u662f\u5426\u627e\u5230\u4e86\u6700\u4f18\u89e3\uff08\u6700\u4f18\u5316\uff09\uff1f \u9650\u5236 \u00b6 \u6700\u4f18\u5316\u539f\u7406 \uff1a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u6240\u5305\u62ec\u7684\u5b50\u95ee\u9898\u7684\u89e3\u4e5f\u662f\u6700\u4f18\u7684\u3002\u95ee\u9898\u5177\u6709 \u6700\u4f18\u5b50\u7ed3\u6784 \uff0c\u5373\u6ee1\u8db3 \u6700\u4f18\u5316\u539f\u7406 \u3002\u5373\u4e0d\u7ba1\u8fc7\u53bb\u7684\u8fc7\u7a0b\u5982\u4f55\uff0c\u53ea\u4ece\u5f53\u524d\u7684\u72b6\u6001\u548c\u7cfb\u7edf\u7684\u6700\u4f18\u5316\u8981\u6c42\u51fa\u53d1\uff0c\u4f5c\u51fa\u4e0b\u4e00\u6b65\u7684\u6700\u4f18\u51b3\u7b56\u3002 \u65e0\u540e\u6548\u6027 \uff1a\u67d0\u9636\u6bb5\u72b6\u6001\u4e00\u65e6\u786e\u5b9a\uff0c\u5c31\u4e0d\u53d7\u8fd9\u4e2a\u72b6\u6001\u4ee5\u540e\u51b3\u7b56\u7684\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u67d0\u72b6\u6001\u4ee5\u540e\u7684\u8fc7\u7a0b\u4e0d\u4f1a\u5f71\u54cd\u66fe\u7ecf\u7684\u72b6\u6001\uff0c\u4ec5\u4ec5\u4e0e\u5f53\u524d\u72b6\u6001\u6709\u5173\u3002\u4e00\u4e2a\u95ee\u9898\u5982\u679c\u6ee1\u8db3\u65e0\u540e\u6548\u6027\uff0c\u90a3\u4e48\u5927\u6982\u7387\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\uff0c\u6211\u4eec\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u6c42\u89e3\uff0c\u6700\u7ec8\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002 \u6742\u8c08 \u00b6 \u5f80\u5f80\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u72b6\u6001\u7684\u7ef4\u6570\uff0c\u8bb0\u5f55\u66f4\u591a\u7684\u5173\u952e\u4fe1\u606f\u6765\u6ee1\u8db3\u65e0\u540e\u6548\u6027\u4e0e\u6700\u4f18\u5b50\u7ed3\u6784\u3002 \u4f46\u7ef4\u6570\u7684\u589e\u52a0\u4f1a\u5bfc\u81f4\u91cd\u53e0\u5b50\u95ee\u9898\u51cf\u5c11\u800c\u5f71\u54cd\u65f6\u95f4\u6548\u7387\uff0c\u4e00\u822c\u6765\u8bf4\uff0c \u590d\u6742\u5ea6 \\(=\\) \u72b6\u6001\u6570 \\(\\times\\) \u51b3\u7b56\u6570\u76ee \\(\\times\\) \u8f6c\u79fb\u4ee3\u4ef7\u3002 \u590d\u6742\u5ea6 \\(=\\) \u5b9e\u9645\u72b6\u6001\u6570 \\(+\\) \u603b\u8f6c\u79fb\u8d39\u7528\u3002 \u5173\u4e8e\u95eb\u6c0f DP \u5206\u6790\u6cd5 \u4ee5\u4e0b\u662f\u4e2a\u4eba\u89c1\u89e3\u3002 \u95eb\u6c0f DP \u5206\u6790\u6cd5\u8ba4\u4e3a\uff0c\u52a8\u6001\u89c4\u5212\u7684\u672c\u8d28\u5c31\u662f\u72b6\u6001\u8868\u793a\u548c\u72b6\u6001\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u72b6\u6001\u8868\u793a\uff0c\u6211\u4eec\u4ee4\u4e00\u4e2a \\(f(\\dots)\\) \u8868\u793a\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u7684\u6240\u6709\u5143\u7d20\u7684\u96c6\u5408\u7684\u67d0\u79cd\u5c5e\u6027\u3002 \u4f8b\u5982\uff1a\u6211\u4eec\u4ee4 \\(f(i,j)\\) \u8868\u793a \\([l,r]\\) \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff08\u96c6\u5408\uff09\u7684\u6700\u5c0f\u503c\uff08\u5c5e\u6027\uff09\u3002 \u5bf9\u4e8e\u72b6\u6001\u8ba1\u7b97\uff0c\u6211\u4eec\u5c06\u96c6\u5408\u5206\u4e3a\u82e5\u5e72\u4e2a\u5b50\u96c6\uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u4ec5\u51fa\u73b0\u4e00\u6b21\uff08\u4e0d\u91cd\u4e0d\u6f0f\uff09\u3002 \u6211\u4eec\u5728\u80fd\u6c42\u51fa\u7b54\u6848\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u7ef4\u5ea6\u8d8a\u5c0f\u8d8a\u597d\uff0c\u4e00\u822c\u53ef\u4ee5\u53ea\u8003\u8651\u4e0a\u4e00\u6b65\u7684\u5206\u7c7b\u3002 \u90a3\u4e48\uff0c\u52a8\u6001\u89c4\u5212\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u72b6\u6001\u6570\u91cf\u4e58\u4ee5\u8f6c\u79fb\u590d\u6742\u5ea6\u3002 \u5206\u7c7b \u00b6 \u6309\u7167\u72b6\u6001\u5206\u7c7b \u00b6 \u5e8f\u5217 DP \u7ebf\u6027 DP \u533a\u95f4 DP \u72b6\u538b DP \u5b50\u96c6 DP \u8f6e\u5ed3\u7ebf DP \u63d2\u5934 DP \u6811\u5f62 DP DAG DP \u6362\u6839 DP \u6811\u5f62\u80cc\u5305 \u6309\u7167\u76ee\u7684\u5206\u7c7b \u00b6 \u80cc\u5305 DP \u6570\u5b66\u76f8\u5173 \u6570\u4f4d DP \u8ba1\u6570 DP \u6982\u7387 DP \u671f\u671b DP \u4e00\u4e9b\u4f18\u5316\u65b9\u6cd5 \u00b6 \u72b6\u6001\u8bbe\u8ba1\u4f18\u5316 \u6570\u636e\u7ed3\u6784\u4f18\u5316 bitset \u4f18\u5316 \u5355\u8c03\u6570\u636e\u7ed3\u6784\u4f18\u5316 \u7ebf\u6bb5\u6811\u4f18\u5316 \u5e73\u8861\u6811\u4f18\u5316 \u52a8\u6001 DP wqs \u4e8c\u5206 \u77e9\u9635\u4e58\u6cd5\u4f18\u5316 \u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u3001\u51b3\u7b56\u5355\u8c03\u6027\u3001\u659c\u7387\u4f18\u5316 DFS\u3001\u8d2a\u5fc3\u3001DP \u00b6 \u5173\u7cfb \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u4ece\u8d2a\u5fc3\uff0c\u5230 DP\uff0c\u5230\u641c\u7d22\uff0c\u662f\u5224\u65ad\u67d0\u79cd\u6761\u4ef6\u8d8a\u6765\u8d8a\u96be\u3002 \u56e0\u6b64\uff0c\u8d2a\u5fc3\u89e3\u51b3\u7684\u95ee\u9898\u53ef\u4ee5 DP \u89e3\u51b3\uff0cDP \u89e3\u51b3\u7684\u95ee\u9898\u53ef\u4ee5\u641c\u7d22\u89e3\u51b3\u3002 \u8bb0\u5fc6\u5316\u641c\u7d22 \u00b6 \u52a8\u6001\u89c4\u5212\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u7c7b\u4f3c\u66b4\u529b\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5bf9\u4e8e\u5927\u91cf\u91cd\u53e0\u7684\u5b50\u95ee\u9898\uff0c\u52a8\u6001\u89c4\u5212\u4f1a\u590d\u7528\u72b6\u6001\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u5728\u66b4\u529b\u641c\u7d22\u7684\u65f6\u5019\u52a0\u4e0a\u590d\u7528\u72b6\u6001\uff0c\u5373\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 \u8bb0\u5fc6\u5316\u641c\u7d22\u4e00\u822c\u53ef\u4ee5\u4f18\u5316\u5230\u548c\u52a8\u6001\u89c4\u5212\u4e00\u6837\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u7531\u4e8e\u9012\u5f52\u672c\u8eab\u5e38\u719f\u8f83\u5927\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5982\u679c\u5f88\u591a\u72b6\u6001\u662f\u65e0\u7528\u7684\u3001\u4e0d\u4f1a\u88ab\u8f6c\u79fb\u5230\uff0c\u90a3\u4e48\u8bb0\u5fc6\u5316\u641c\u7d22\u4e5f\u4f1a\u66f4\u5feb\u3002 \u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u5b9e\u73b0\u52a8\u6001\u89c4\u5212\u601d\u8def\u66f4\u52a0\u6e05\u6670\uff0c\u4f8b\u5982\u6570\u4f4d DP \u7684\u65f6\u5019\u5c31\u4f1a\u5927\u91cf\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 \u8bb0\u5fc6\u5316 \u00b6 \u4f7f\u7528 mem \u6570\u7ec4\u8868\u793a\u8bb0\u5fc6\u5316\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u4e00\u822c\u521d\u59cb\u5316\u4e3a \\(-1\\) \u8868\u793a\u672a\u88ab\u641c\u7d22\u5230\u3002 function dfs(...) if mem[...] != -1: return mem[...] ans = ... return mem[...] = ans \u6709\u65f6\u4e00\u4e9b\u72b6\u6001\u4e0d\u4f1a\u88ab\u91cd\u590d\u5229\u7528\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u72b6\u6001\u4e0d\u8bb0\u5f55\uff0c function dfs(valid, ...) if valid and mem[...] != -1: return mem[...] ans = ... if valid: mem[...] = ans return ans \u6211\u4eec\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u5199\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 \u65b9\u6cd5\u4e00 \u00b6 \u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1b \u6839\u636e\u8f6c\u79fb\u65b9\u7a0b\u5199\u51fa DFS \u51fd\u6570\uff1b \u6dfb\u52a0\u8bb0\u5fc6\u5316\u3002 \u65b9\u6cd5\u4e8c \u00b6 \u5199\u51fa\u66b4\u641c DFS \u7a0b\u5e8f\uff1b \u4fee\u6539\u4e3a\u4f20\u5165\u6240\u6709\u72b6\u6001\uff0c\u4e0e\u5916\u90e8\u53d8\u91cf\u65e0\u5173\u7684\u9012\u5f52\uff1b \u6dfb\u52a0\u8bb0\u5fc6\u5316\u3002","title":"\u52a8\u6001\u89c4\u5212\u57fa\u7840"},{"location":"dp/basic/#_1","text":"\u52a8\u6001\u89c4\u5212\uff08Dynamic Programming\uff0cDP\uff09\u662f\u8fd0\u7b79\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u662f\u6c42\u89e3\u51b3\u7b56\u8fc7\u7a0b\u6700\u4f18\u5316\u7684\u8fc7\u7a0b\u3002","title":"\u52a8\u6001\u89c4\u5212\u57fa\u7840"},{"location":"dp/basic/#_2","text":"","title":"\u6982\u5ff5\u548c\u601d\u8def"},{"location":"dp/basic/#_3","text":"\u628a\u6240\u6c42\u89e3\u95ee\u9898\u7684\u8fc7\u7a0b\u6070\u5f53\u5730\u5206\u6210\u82e5\u5e72\u4e2a\u76f8\u4e92\u8054\u7cfb\u7684 \u9636\u6bb5 \uff0c\u4ee5\u4fbf\u4e8e\u6c42\u89e3\u3002 \u6211\u4eec\u5728\u95ee\u9898\uff08\u4e00\u4e2a\u9636\u6bb5\uff09\u4e2d\u7528\u7b80\u5355\u7684\u4fe1\u606f\u63cf\u8ff0\u4e00\u4e2a\u5c40\u90e8\u7684\u5b50\u95ee\u9898\uff0c\u79f0\u4e3a \u72b6\u6001 \u3002 \u6216\u8005\u8bf4\uff0c\u72b6\u6001\u8868\u793a\u6bcf\u4e2a\u9636\u6bb5\u5f00\u59cb\u9762\u4e34\u7684\u81ea\u7136\u72b6\u51b5\u6216\u5ba2\u89c2\u6761\u4ef6\u3002 \u95ee\u9898\u7684\u9650\u5236\u5177\u6709\u4e00\u5b9a\u7684\u5c40\u90e8\u6027\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u8f6c\u79fb\u5c06\u5b50\u95ee\u9898\u8fde\u63a5\u8d77\u6765\u3002 \u901a\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u8fdb\u800c\u5f97\u5230\u539f\u95ee\u9898\u7684\u7b54\u6848\uff0c\u79f0\u4e3a \u8f6c\u79fb \uff08 \u7b56\u7565 \u3001 \u51b3\u7b56 \uff09\u3002 \u6211\u4eec\u79f0\uff0c\u6bcf\u4e2a\u9636\u6bb5\u7684\u51b3\u7b56\u7ec4\u6210\u7684\u5e8f\u5217\u79f0\u4e3a \u7b56\u7565 \uff0c\u5373\u6c42\u89e3\u95ee\u9898\u7684 \u7b56\u7565 \u3002 \u5176\u4e2d\u6ee1\u8db3\u67d0\u4e9b\u9650\u5236\u7684\u79f0\u4e3a \u5141\u8bb8\u7b56\u7565\u96c6\u5408 \uff0c\u8fbe\u5230\u6700\u4f18\u6548\u679c\u7684\u7b56\u7565\u79f0\u4e3a \u6700\u4f18\u7b56\u7565 \u3002 \u52a8\u6001\u89c4\u5212\u5c31\u662f\u8fd9\u79cd\uff0c\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684 \u5b50\u95ee\u9898 \u7684\u8fc7\u7a0b\u3002","title":"\u6982\u5ff5"},{"location":"dp/basic/#_4","text":"\u52a8\u6001\u89c4\u5212\u6240\u5904\u7406\u7684\u95ee\u9898\u662f\u4e00\u4e2a \u591a\u9636\u6bb5\u51b3\u7b56\u95ee\u9898 \u3002 \u4e00\u822c\u7531 \u8fb9\u754c\u72b6\u6001 \u5f00\u59cb\uff0c\u901a\u8fc7\u5bf9\u4e2d\u95f4\u9636\u6bb5\u51b3\u7b56\u7684\u9009\u62e9\uff0c\u8fbe\u5230\u7ed3\u675f\u72b6\u6001\u3002 \u52a8\u6001\u89c4\u5212\u7684\u5173\u952e\u5c31\u5728\u4e8e\uff0c\u627e\u5230 \u5408\u9002\u7684\u72b6\u6001 \uff0c\u901a\u8fc7 \u5408\u9002\u7684\u8f6c\u79fb \u5f97\u5230\u6240\u6709\u5b50\u95ee\u9898\u7684\u7ed3\u679c\u3002 \u72b6\u6001\u8bbe\u8ba1\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a\u5728\u5b50\u95ee\u9898\u4e2d\uff0c\u5f53\u524d\u8bb0\u5f55\u7684\u72b6\u6001\u662f\u4e0d\u662f\u8db3\u591f\u5904\u7406\u95ee\u9898\u7684\u9650\u5236\uff1f \u8f6c\u79fb\u8bbe\u8ba1\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a\u662f\u5426\u4e0d\u91cd\u4e0d\u6f0f\uff08\u8ba1\u6570\uff09\uff1f\u662f\u5426\u627e\u5230\u4e86\u6700\u4f18\u89e3\uff08\u6700\u4f18\u5316\uff09\uff1f","title":"\u8fc7\u7a0b"},{"location":"dp/basic/#_5","text":"\u6700\u4f18\u5316\u539f\u7406 \uff1a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u6240\u5305\u62ec\u7684\u5b50\u95ee\u9898\u7684\u89e3\u4e5f\u662f\u6700\u4f18\u7684\u3002\u95ee\u9898\u5177\u6709 \u6700\u4f18\u5b50\u7ed3\u6784 \uff0c\u5373\u6ee1\u8db3 \u6700\u4f18\u5316\u539f\u7406 \u3002\u5373\u4e0d\u7ba1\u8fc7\u53bb\u7684\u8fc7\u7a0b\u5982\u4f55\uff0c\u53ea\u4ece\u5f53\u524d\u7684\u72b6\u6001\u548c\u7cfb\u7edf\u7684\u6700\u4f18\u5316\u8981\u6c42\u51fa\u53d1\uff0c\u4f5c\u51fa\u4e0b\u4e00\u6b65\u7684\u6700\u4f18\u51b3\u7b56\u3002 \u65e0\u540e\u6548\u6027 \uff1a\u67d0\u9636\u6bb5\u72b6\u6001\u4e00\u65e6\u786e\u5b9a\uff0c\u5c31\u4e0d\u53d7\u8fd9\u4e2a\u72b6\u6001\u4ee5\u540e\u51b3\u7b56\u7684\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u67d0\u72b6\u6001\u4ee5\u540e\u7684\u8fc7\u7a0b\u4e0d\u4f1a\u5f71\u54cd\u66fe\u7ecf\u7684\u72b6\u6001\uff0c\u4ec5\u4ec5\u4e0e\u5f53\u524d\u72b6\u6001\u6709\u5173\u3002\u4e00\u4e2a\u95ee\u9898\u5982\u679c\u6ee1\u8db3\u65e0\u540e\u6548\u6027\uff0c\u90a3\u4e48\u5927\u6982\u7387\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\uff0c\u6211\u4eec\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u6c42\u89e3\uff0c\u6700\u7ec8\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002","title":"\u9650\u5236"},{"location":"dp/basic/#_6","text":"\u5f80\u5f80\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u72b6\u6001\u7684\u7ef4\u6570\uff0c\u8bb0\u5f55\u66f4\u591a\u7684\u5173\u952e\u4fe1\u606f\u6765\u6ee1\u8db3\u65e0\u540e\u6548\u6027\u4e0e\u6700\u4f18\u5b50\u7ed3\u6784\u3002 \u4f46\u7ef4\u6570\u7684\u589e\u52a0\u4f1a\u5bfc\u81f4\u91cd\u53e0\u5b50\u95ee\u9898\u51cf\u5c11\u800c\u5f71\u54cd\u65f6\u95f4\u6548\u7387\uff0c\u4e00\u822c\u6765\u8bf4\uff0c \u590d\u6742\u5ea6 \\(=\\) \u72b6\u6001\u6570 \\(\\times\\) \u51b3\u7b56\u6570\u76ee \\(\\times\\) \u8f6c\u79fb\u4ee3\u4ef7\u3002 \u590d\u6742\u5ea6 \\(=\\) \u5b9e\u9645\u72b6\u6001\u6570 \\(+\\) \u603b\u8f6c\u79fb\u8d39\u7528\u3002 \u5173\u4e8e\u95eb\u6c0f DP \u5206\u6790\u6cd5 \u4ee5\u4e0b\u662f\u4e2a\u4eba\u89c1\u89e3\u3002 \u95eb\u6c0f DP \u5206\u6790\u6cd5\u8ba4\u4e3a\uff0c\u52a8\u6001\u89c4\u5212\u7684\u672c\u8d28\u5c31\u662f\u72b6\u6001\u8868\u793a\u548c\u72b6\u6001\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u72b6\u6001\u8868\u793a\uff0c\u6211\u4eec\u4ee4\u4e00\u4e2a \\(f(\\dots)\\) \u8868\u793a\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u7684\u6240\u6709\u5143\u7d20\u7684\u96c6\u5408\u7684\u67d0\u79cd\u5c5e\u6027\u3002 \u4f8b\u5982\uff1a\u6211\u4eec\u4ee4 \\(f(i,j)\\) \u8868\u793a \\([l,r]\\) \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff08\u96c6\u5408\uff09\u7684\u6700\u5c0f\u503c\uff08\u5c5e\u6027\uff09\u3002 \u5bf9\u4e8e\u72b6\u6001\u8ba1\u7b97\uff0c\u6211\u4eec\u5c06\u96c6\u5408\u5206\u4e3a\u82e5\u5e72\u4e2a\u5b50\u96c6\uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u4ec5\u51fa\u73b0\u4e00\u6b21\uff08\u4e0d\u91cd\u4e0d\u6f0f\uff09\u3002 \u6211\u4eec\u5728\u80fd\u6c42\u51fa\u7b54\u6848\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u7ef4\u5ea6\u8d8a\u5c0f\u8d8a\u597d\uff0c\u4e00\u822c\u53ef\u4ee5\u53ea\u8003\u8651\u4e0a\u4e00\u6b65\u7684\u5206\u7c7b\u3002 \u90a3\u4e48\uff0c\u52a8\u6001\u89c4\u5212\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u72b6\u6001\u6570\u91cf\u4e58\u4ee5\u8f6c\u79fb\u590d\u6742\u5ea6\u3002","title":"\u6742\u8c08"},{"location":"dp/basic/#_7","text":"","title":"\u5206\u7c7b"},{"location":"dp/basic/#_8","text":"\u5e8f\u5217 DP \u7ebf\u6027 DP \u533a\u95f4 DP \u72b6\u538b DP \u5b50\u96c6 DP \u8f6e\u5ed3\u7ebf DP \u63d2\u5934 DP \u6811\u5f62 DP DAG DP \u6362\u6839 DP \u6811\u5f62\u80cc\u5305","title":"\u6309\u7167\u72b6\u6001\u5206\u7c7b"},{"location":"dp/basic/#_9","text":"\u80cc\u5305 DP \u6570\u5b66\u76f8\u5173 \u6570\u4f4d DP \u8ba1\u6570 DP \u6982\u7387 DP \u671f\u671b DP","title":"\u6309\u7167\u76ee\u7684\u5206\u7c7b"},{"location":"dp/basic/#_10","text":"\u72b6\u6001\u8bbe\u8ba1\u4f18\u5316 \u6570\u636e\u7ed3\u6784\u4f18\u5316 bitset \u4f18\u5316 \u5355\u8c03\u6570\u636e\u7ed3\u6784\u4f18\u5316 \u7ebf\u6bb5\u6811\u4f18\u5316 \u5e73\u8861\u6811\u4f18\u5316 \u52a8\u6001 DP wqs \u4e8c\u5206 \u77e9\u9635\u4e58\u6cd5\u4f18\u5316 \u56db\u8fb9\u5f62\u4e0d\u7b49\u5f0f\u3001\u51b3\u7b56\u5355\u8c03\u6027\u3001\u659c\u7387\u4f18\u5316","title":"\u4e00\u4e9b\u4f18\u5316\u65b9\u6cd5"},{"location":"dp/basic/#dfsdp","text":"","title":"DFS\u3001\u8d2a\u5fc3\u3001DP"},{"location":"dp/basic/#_11","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u4ece\u8d2a\u5fc3\uff0c\u5230 DP\uff0c\u5230\u641c\u7d22\uff0c\u662f\u5224\u65ad\u67d0\u79cd\u6761\u4ef6\u8d8a\u6765\u8d8a\u96be\u3002 \u56e0\u6b64\uff0c\u8d2a\u5fc3\u89e3\u51b3\u7684\u95ee\u9898\u53ef\u4ee5 DP \u89e3\u51b3\uff0cDP \u89e3\u51b3\u7684\u95ee\u9898\u53ef\u4ee5\u641c\u7d22\u89e3\u51b3\u3002","title":"\u5173\u7cfb"},{"location":"dp/basic/#_12","text":"\u52a8\u6001\u89c4\u5212\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u7c7b\u4f3c\u66b4\u529b\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5bf9\u4e8e\u5927\u91cf\u91cd\u53e0\u7684\u5b50\u95ee\u9898\uff0c\u52a8\u6001\u89c4\u5212\u4f1a\u590d\u7528\u72b6\u6001\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u5728\u66b4\u529b\u641c\u7d22\u7684\u65f6\u5019\u52a0\u4e0a\u590d\u7528\u72b6\u6001\uff0c\u5373\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 \u8bb0\u5fc6\u5316\u641c\u7d22\u4e00\u822c\u53ef\u4ee5\u4f18\u5316\u5230\u548c\u52a8\u6001\u89c4\u5212\u4e00\u6837\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u7531\u4e8e\u9012\u5f52\u672c\u8eab\u5e38\u719f\u8f83\u5927\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5982\u679c\u5f88\u591a\u72b6\u6001\u662f\u65e0\u7528\u7684\u3001\u4e0d\u4f1a\u88ab\u8f6c\u79fb\u5230\uff0c\u90a3\u4e48\u8bb0\u5fc6\u5316\u641c\u7d22\u4e5f\u4f1a\u66f4\u5feb\u3002 \u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u5b9e\u73b0\u52a8\u6001\u89c4\u5212\u601d\u8def\u66f4\u52a0\u6e05\u6670\uff0c\u4f8b\u5982\u6570\u4f4d DP \u7684\u65f6\u5019\u5c31\u4f1a\u5927\u91cf\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u3002","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"dp/basic/#_13","text":"\u4f7f\u7528 mem \u6570\u7ec4\u8868\u793a\u8bb0\u5fc6\u5316\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u4e00\u822c\u521d\u59cb\u5316\u4e3a \\(-1\\) \u8868\u793a\u672a\u88ab\u641c\u7d22\u5230\u3002 function dfs(...) if mem[...] != -1: return mem[...] ans = ... return mem[...] = ans \u6709\u65f6\u4e00\u4e9b\u72b6\u6001\u4e0d\u4f1a\u88ab\u91cd\u590d\u5229\u7528\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u72b6\u6001\u4e0d\u8bb0\u5f55\uff0c function dfs(valid, ...) if valid and mem[...] != -1: return mem[...] ans = ... if valid: mem[...] = ans return ans \u6211\u4eec\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u5199\u8bb0\u5fc6\u5316\u641c\u7d22\u3002","title":"\u8bb0\u5fc6\u5316"},{"location":"dp/basic/#_14","text":"\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1b \u6839\u636e\u8f6c\u79fb\u65b9\u7a0b\u5199\u51fa DFS \u51fd\u6570\uff1b \u6dfb\u52a0\u8bb0\u5fc6\u5316\u3002","title":"\u65b9\u6cd5\u4e00"},{"location":"dp/basic/#_15","text":"\u5199\u51fa\u66b4\u641c DFS \u7a0b\u5e8f\uff1b \u4fee\u6539\u4e3a\u4f20\u5165\u6240\u6709\u72b6\u6001\uff0c\u4e0e\u5916\u90e8\u53d8\u91cf\u65e0\u5173\u7684\u9012\u5f52\uff1b \u6dfb\u52a0\u8bb0\u5fc6\u5316\u3002","title":"\u65b9\u6cd5\u4e8c"},{"location":"dp/interval/","text":"\u533a\u95f4 DP \u00b6 \u6982\u5ff5 \u00b6 \u4f8b\u9898 \u00b6","title":"\u533a\u95f4 DP"},{"location":"dp/interval/#dp","text":"","title":"\u533a\u95f4 DP"},{"location":"dp/interval/#_1","text":"","title":"\u6982\u5ff5"},{"location":"dp/interval/#_2","text":"","title":"\u4f8b\u9898"},{"location":"dp/sequence/","text":"\u7ebf\u6027 DP \u00b6 \u6982\u5ff5 \u00b6 \u5e8f\u5217 DP \u53ef\u4ee5\u8bf4\u65f6\u6700\u5e38\u89c1\u7684 DP \u6a21\u578b\u3002 \u53ef\u4ee5\u5c06\u5728\u5e8f\u5217\u4e0a DP \u7684\uff0c\u90fd\u79f0\u4e3a\u5e8f\u5217 DP\uff0c\u4f8b\u5982\u7ebf\u6027 DP \u548c\u533a\u95f4 DP\u3002 \u7ebf\u6027 DP \u6709\u5f88\u591a\u7ef4\u5ea6\uff0c\u5927\u90e8\u5206\u90fd\u662f\u4e00\u7ef4\u7684\u3002 \u5373\u7528 \\(f(i,\\dots)\\) \u8868\u793a\u8003\u8651\u5e8f\u5217\u7684 \\(i\\) \u4e2a\u5143\u7d20\uff0c\u6ee1\u8db3 \\(\\dots\\) \u9650\u5236\u7684\u7b54\u6848\u3002 \u4e5f\u6709\u4e8c\u7ef4\u7684\uff0c\u7528 \\(f(i,j,\\dots)\\) \u8868\u793a\u4e24\u4e2a\u5e8f\u5217\u524d \\(i,j\\) \u4e2a\u5143\u7d20\u7684\u7b54\u6848\u3002 \u5e8f\u5217\u6a21\u578b \u00b6 \u7ecf\u5178\u4f8b\u9898 \u00b6 B3637 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u00b6 \u8bbe \\(f(i)\\) \u8868\u793a\u4ee5 \\(A(i)\\) \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 LIS \u957f\u5ea6\uff0c\u8003\u8651\u8f6c\u79fb\u3002 \\[ f(i)=\\max_{j<i}\\{[f(j)+1][A_j<A_i]\\} \\] \u5373\u627e\u5230\u4e0a\u4e00\u4e2a\u5143\u7d20\uff0c\u63a5\u5728\u8fd9\u4e2a\u4ee5\u540e\u7684\u6700\u5927\u7684\u957f\u5ea6\u3002 \u76f4\u63a5\u8f6c\u79fb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N^2)\\) \u7684\uff0c \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int Ans = 0; for (int i = 1; i <= n; ++i) { F[i] = 1; for (int j = 1; j < i; ++j) if (A[j] < A[i]) F[i] = max(F[i], F[j] + 1); Ans = max(Ans, F[i]); } \u8003\u8651\u4f18\u5316\u3002 \u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5bf9\u503c\u57df\u5efa\u7acb\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u6837\u5f88\u590d\u6742\u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u6570\u5b57\u4f1a\u5bfc\u81f4\u7b54\u6848\u589e\u52a0\uff0c\u4e00\u5b9a\u662f\u5b83\u5927\u4e8e\u4e86\u524d\u9762\u7684\u67d0\u4e00\u4e2a\u6570\u3002 \u5426\u5219\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7684\u8d21\u732e\u5c31\u662f\u5bf9\u4e8e\u540e\u9762\u6bd4\u5b83\u5927\u7684\u6570\u53ef\u4ee5\u52a0\u4e0a\u8fd9\u4e00\u4e2a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4\uff0c \u5982\u679c\u8fd9\u4e2a\u6570\u5927\u4e8e\u524d\u9762\u6240\u6709\u7684\uff0c\u90a3\u4e48\u52a0\u5165\u6570\u5217\u672b\u5c3e\u3002 \u5426\u5219\u7528\u8fd9\u4e2a\u6570\u66ff\u6362\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u7b2c\u4e00\u4e2a\uff0c\u8868\u793a\u540e\u9762\u53ef\u4ee5\u7528\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 memset(F, 0x3f, sizeof F); for (int i = 1; i <= n; ++i) *lower_bound(F + 1, F + n + 1, A[i]) = A[i]; int Ans = 0; while (F[Ans + 1] != 0x3f3f3f3f) ++Ans; \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N\\log N)\\) \u7684\u3002 P1439 \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u00b6 \u8bbe \\(f(i,j)\\) \u8868\u793a \\(A[1,i]\\) \u548c \\(B[1,j]\\) \u7684 LCS\u3002 \u6709\uff0c \\[ f(i,j)=\\begin{cases} f(i-1,j-1)+1&A_i=B_j\\\\ \\max\\{f(i,j-1),f(i-1,j)\\}&A_i\\neq B_j \\end{cases} \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(N^2)\\) \u7684\uff0c\u53ef\u4ee5\u4f18\u5316\u5230 \\(1/\\omega\\) \u4f46\u662f\u4e0d\u5b58\u5728\u66f4\u4f18\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (a[i] == b[j]) f[i][j] = f[i - 1][j - 1] + 1; else f[i][j] = max(f[i - 1][j], f[i][j - 1]); \u4e09\u4e32 LCS\uff1a\u8bbe \\(F(i,j,k)\\) \u8868\u793a \\(A[1,i],B[1,j],C[1,k]\\) \u7684 LCS\uff0c\u8f6c\u79fb\u5206\u8ba8\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int F[N][N][N]; int Main(string A, string B, string C) { for (int i = 1; i <= A.size(); ++i) { char a = A[i - 1]; for (int j = 1; j <= B.size(); ++j) { int b = B[j - 1]; for (int k = 1; k <= C.size(); ++k) { char c = C[k - 1]; F[i][j][k] = max({F[i][j][k - 1], F[i][j - 1][k], F[i - 1][j][k]}); if (a == b && b == c) F[i][j][k] = max(F[i][j][k], F[i - 1][j - 1][k - 1] + 1); } } } return F[A.size()][B.size()][C.size()]; } \u5982\u679c \\(A,B\\) \u662f\u6392\u5217\uff0c\u90a3\u4e48\u5b58\u5728\u66f4\u4f18\u7684\u505a\u6cd5\u3002 \u6211\u4eec\u4ee4 \\(C\\) \u4e3a \\(A_i\\) \u5728 \\(B\\) \u4e2d\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u90a3\u4e48 LCS \u4e00\u5b9a\u662f \\(C\\) \u7684 LIS\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5 \\(\\mathcal O(N\\log N)\\) \u505a\u4e86\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 for (int i = 1; i <= n; ++i) P[B[i]] = i; memset(F, 0x3f, sizeof F); for (int i = 1; i <= n; ++i) *upper_bound(F + 1, F + n + 1, P[A[i]][i]) = P[A[i]][i]; int Ans = 0; while (F[Ans + 1] != 0x3f3f3f3f) ++Ans; P2758 \u7f16\u8f91\u8ddd\u79bb \u00b6 \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5220\u9664\u3001\u63d2\u5165\u3001\u4fee\u6539\u4e00\u4e2a\u5b57\u7b26\uff0c \u5b9a\u4e49\u5b57\u7b26\u4e32 \\(A,B\\) \u7684\u7f16\u8f91\u8ddd\u79bb\u4e3a\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4f7f \\(A\\) \u53d8\u6210 \\(B\\) \u5b57\u7b26\u4e32\u3002 \u8bbe \\(f(i,j)\\) \u8868\u793a \\(A[1,i]\\) \u548c \\(B[1,j]\\) \u7684\u7f16\u8f91\u8ddd\u79bb\uff0c\u90a3\u4e48\u6709\u8f6c\u79fb\u65b9\u7a0b\uff0c \\[ f(i,j)=\\min\\{f(i-1,j)+1,f(i,j-1)+1,f(i-1,j-1)+[A_i\\neq B_j]\\} \\] \u76f4\u63a5\u8f6c\u79fb\u5c31\u662f \\(\\mathcal O(N^3)\\) \u7684\u3002 P1115 \u6700\u5927\u5b50\u6bb5\u548c \u00b6 \u8bbe \\(F(x)\\) \u8868\u793a\u4ee5 \\(x\\) \u7ed3\u5c3e\u7684\u6700\u5927\u5b57\u6bb5\u548c\uff0c\u8bbe \\(S(x)\\) \u8868\u793a\u539f\u6570\u7ec4\u7684\u524d\u7f00\u548c\u3002 \u601d\u8def\u4e00\uff1a \\[ F(x)=\\max_{y<x}\\{S(x)-S(y)\\}=S(x)-\\min_{y<x}S(y) \\] \u6ce8\u610f\u5230\u7ef4\u62a4\u524d\u7f00\u6700\u5c0f\u503c\u5373\u53ef\u3002 \u601d\u8def\u4e8c\uff1a \\[ F(x)=\\max\\{A(x),F(x)-1+A(x)\\}=A(x)+\\max\\{F(x-1),0\\} \\] \u4e00\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u52a0\u5165\u524d\u9762\u7684\u6216\u8005\u81ea\u5df1\u5355\u72ec\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int F[N]; int MSS(int *A, int n, function<int(int, int)> cmp) { for (int i = 1; i <= n; ++i) F[i] = cmp(F[i - 1], 0ll) + A[i]; int Ans = F[1]; for (int i = 2; i <= n; ++i) Ans = cmp(Ans, F[i]); return Ans; } \u5176\u4ed6\u4f8b\u9898 \u00b6 51Nod-1050 \u73af\u72b6\u6700\u5927\u5b50\u6bb5\u548c \u00b6 \u5bb9\u6613\u53d1\u73b0\uff0c\u73af\u5f62\u53ea\u662f\u5728\u5e8f\u5217\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u4e00\u79cd\u60c5\u51b5\uff1a\u8de8\u8fc7\u67d0\u4e2a\u7aef\u70b9\u5230\u4e86\u53e6\u4e00\u8fb9\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u6700\u5927\u5b57\u6bb5\u548c\u8f6c\u5316\u4e3a\uff0c\u5e8f\u5217\u7684\u603b\u548c\u51cf\u53bb\u4e00\u4e2a\u6700\u5c0f\u5b57\u6bb5\u548c\uff08\u4f5c\u4e3a\u4e0d\u9009\u7684\u4e00\u6bb5\uff09\u3002 \u6ce8\u610f\u5230\u8fd9\u6837\u6709\u53ef\u80fd\u5c06\u6574\u4e2a\u5e8f\u5217\u5220\u53bb\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u7528 \\([1,n),(1,n]\\) \u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 // \u4e0a\u6587\u7684 MSS \u51fd\u6570 int n, Sum, A[N]; void Main() { cin >> n, Sum = 0; if (n == 1) { int x; cin >> x; cout << x << endl; return; } for (int i = 1; i <= n; ++i) cin >> A[i], Sum += A[i]; auto Max = [] (int a, int b) { return max(a, b); }; auto Min = [] (int a, int b) { return min(a, b); }; int Ans = MSS(A, n, Max); Ans = max(Ans, Sum - MSS(A, n - 1, Min)); Ans = max(Ans, Sum - MSS(A + 1, n - 1, Min)); cout << Ans << endl; } \u540c\u65f6\u4e5f\u53ef\u4ee5\u65ad\u73af\u6210\u94fe\uff0c\u8f6c\u5316\u4e3a\u957f\u5ea6\u9650\u5236\u7684\u6700\u5927\u5b57\u6bb5\u548c\u95ee\u9898\u3002 P2642 \u6700\u5927\u53cc\u5b50\u6bb5\u548c \u00b6 \u6ce8\u610f\u5230\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u5206\u5272\u70b9\uff0c\u5c06\u4e24\u4e2a\u6bb5\u5206\u5f00\uff0c\u56e0\u6b64\u8003\u8651\u679a\u4e3e\u8fd9\u4e2a\u4f4d\u7f6e\u3002 \u6211\u4eec\u9884\u5904\u7406\u51fa\u6765\uff0c\u4e00\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u3001\u4e4b\u540e\u5206\u522b\u7684\u6700\u5927\u5b57\u6bb5\u548c\uff0c\u52a0\u8d77\u6765\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, A[N]; void init_MSS(int *F) { F[0] = -1e9; for (int i = 1; i <= n; ++i) F[i] = max(F[i - 1], 0ll) + A[i]; for (int i = 1; i <= n; ++i) F[i] = max(F[i - 1], F[i]); } void init_rMSS(int *F) { F[n + 1] = -1e9; for (int i = n; i >= 1; --i) F[i] = max(F[i + 1], 0ll) + A[i]; for (int i = n; i >= 1; --i) F[i] = max(F[i + 1], F[i]); } int F[N], G[N]; void Main() { cin >> n; copy_n(istream_iterator<int>(cin), n, A + 1); init_MSS(F), init_rMSS(G); int Ans = -1e9; for (int i = 2; i < n; ++i) Ans = max(Ans, F[i - 1] + G[i + 1]); cout << Ans << endl; } \u6ce8\u610f\u6b64\u65f6\u8fd9\u9053\u9898\u8981\u6c42\u5e8f\u5217\u4e24\u8fb9\u975e\u7a7a\u3002 P1121 \u73af\u72b6\u6700\u5927\u53cc\u5b50\u6bb5\u548c \u00b6 \u5bb9\u6613\u63a8\u5e7f\uff0c\u6211\u4eec\u8dd1\u4e00\u6b21\u6700\u5927\u53cc\u5b57\u6bb5\u548c\uff0c\u4e24\u6b21\u6700\u5c0f\u53cc\u5b57\u6bb5\u548c\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 template<int emp> int calc(int n, int *A, function<int(int, int)> cmp) { static int F[N], G[N]; F[0] = G[n + 1] = emp; int Ans = emp; for (int i = 1; i <= n; ++i) F[i] = cmp(F[i - 1], 0) + A[i]; for (int i = 1; i <= n; ++i) F[i] = cmp(F[i], F[i - 1]); for (int i = n; i >= 1; --i) G[i] = cmp(G[i + 1], 0) + A[i]; for (int i = n; i >= 1; --i) G[i] = cmp(G[i], G[i + 1]); for (int i = 2; i < n; ++i) Ans = cmp(Ans, F[i - 1] + G[i + 1]); return Ans; } int n, Sum, A[N]; void Main() { cin >> n, Sum = 0; for (int i = 1; i <= n; ++i) cin >> A[i], Sum += A[i]; auto Max = [] (int a, int b) { return max(a, b); }; auto Min = [] (int a, int b) { return min(a, b); }; int Ans = calc < (int) -1e9 > (n, A, Max); Ans = max(Ans, Sum - calc < 0 > (n - 1, A, Min)); Ans = max(Ans, Sum - calc < 0 > (n - 1, A + 1, Min)); cout << Ans << endl; } \u9700\u8981\u6ce8\u610f\u6bcf\u4e2a\u9898\u53ef\u80fd\u4f1a\u662f\u5426\u53ef\u4ee5\u76f8\u90bb\u3001\u662f\u5426\u53ef\u4ee5\u4e3a\u7a7a\u505a\u51fa\u8981\u6c42\uff0c\u4e0d\u8fc7\u5f88\u597d\u6539\u3002 CSES-1644 \u6709\u957f\u5ea6\u9650\u5236 \u00b6 \u6211\u4eec\u8981\u6c42\u957f\u5ea6\u5728\u533a\u95f4 \\([L,R]\\) \u5185\u7684\u6700\u5927\u5b57\u6bb5\u548c\u3002 \u5177\u4f53\u5185\u5bb9\u89c1\u5355\u8c03\u961f\u5217\u4f18\u5316 DP \u6587\u7ae0\u3002 P1020 [NOIP1999 \u63d0\u9ad8\u7ec4] \u5bfc\u5f39\u62e6\u622a \u00b6 \u7b2c\u4e00\u4e2a\u663e\u7136\u5c31\u662f\u6700\u957f\u4e0d\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u4ee4 \\(x\\gets-x\\) \u8dd1 LIS \u5373\u53ef\u3002 \u7b2c\u4e8c\u4e2a\u4e5f\u662f\u7ecf\u5178\u4e1c\u897f\uff1a\u72c4\u5c14\u6c83\u65af\uff08Dilworth\uff09\u5b9a\u7406\uff0c\u5176\u6307\u51fa\uff1a \u6709\u9650\u504f\u5e8f\u96c6\u5408\u4e2d\uff0c\u5305\u542b\u5143\u7d20\u6700\u591a\u53cd\u94fe\u7684\u5143\u7d20\u6570\u7b49\u4e8e\u5305\u542b\u94fe\u6570\u6700\u5c11\u7684\u94fe\u5206\u89e3\u7684\u94fe\u6570\u3002 \u8fd9\u4e2a\u91cf\u88ab\u5b9a\u4e49\u4e3a\u8be5\u504f\u5e8f\u96c6\u7684\u5bbd\u5ea6\uff1b\u800c\u5728\u6b64\u9898\u4e2d\uff1a \u5c06\u4e00\u4e2a\u5e8f\u5217\u5256\u6210\u82e5\u5e72\u4e2a\u5355\u8c03\u4e0d\u5347\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u4e2a\u6570\u7b49\u4e8e\u8be5\u5e8f\u5217\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u8dd1\u4e24\u6b21 LIS \u89e3\u51b3\u5373\u53ef\u3002 P1091 [NOIP2004 \u63d0\u9ad8\u7ec4] \u5408\u5531\u961f\u5f62 \u00b6 \u6211\u4eec\u53d1\u73b0\u5c31\u662f\u6b63\u53cd\u4e24\u6b21 LIS \u5373\u53ef\u3002 \u4f46\u662f\u8fd9\u9053\u9898\u8981\u8bb0\u5f55\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684 LIS\uff0c\u4e5f\u76f4\u63a5\u8bb0\u5f55\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void Main() { cin >> n; for (int i = 1; i <= n; ++i) cin >> A[i]; memset(F, 0x3f, sizeof F); memset(G, 0x3f, sizeof G); for (int i = 1; i <= n; ++i) { int j = lower_bound(F + 1, F + n + 1, A[i]) - F; P[i] = j, F[j] = A[i]; } for (int i = n; i >= 1; --i) { int j = lower_bound(G + 1, G + n + 1, A[i]) - G; Q[i] = j, G[j] = A[i]; } int ans = 0; for (int i = 1; i <= n; ++i) ans = max(ans, P[i] + Q[i] - 1); cout << n - ans << endl; } P8020 [ONTAK2015] Badania naukowe \u00b6 \u6709\u610f\u601d\u7684\u9898\uff0c\u5b8c\u6574\u7248\u770b\u6211\u9898\u89e3\uff1a https://www.luogu.com.cn/article/6n2rn1mf \u3002 \u6211\u4eec\u4f7f\u7528 \\(P(i)\\) \u8868\u793a\u4ece \\(A_i\\) \u5f00\u59cb\u5339\u914d \\(C\\) \uff0c\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4e0b\u6807 \\(j\\) \u3002 \u540c\u7406\uff0c\u4f7f\u7528 \\(Q(i)\\) \u8868\u793a\u4ece \\(B_i\\) \u5f00\u59cb\u5339\u914d \\(C\\) \uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4e0b\u6807 \\(j\\) \u3002 \u8bbe \\(F(i,j)\\) \u8868\u793a \\(A[1,i]\\) \u548c \\(B[1,j]\\) \u7684 LCS\uff08\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff09\u3002 \u8bbe \\(G(i,j)\\) \u8868\u793a \\(A[i,n]\\) \u548c \\(B[j,m]\\) \u7684 LCS\uff08\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff09\u3002 \u90a3\u4e48\uff0c\u7b54\u6848\u53ef\u4ee5\u8868\u793a\u4e3a\uff0c \\[ \\max_{i,j}\\{ F(i-1,j-1)+G(P(i)+1,Q(j)+1)+\\lvert C\\rvert, \\text{if $\\langle i,j\\rangle$ is valid.} \\} \\] \u4e5f\u5c31\u662f\u524d\u9762\u7684\u548c\u540e\u9762\u7684 LCS \u53ef\u4ee5\u76f4\u63a5\u8ba1\u5165\u7b54\u6848\uff0c\u518d\u52a0\u4e0a\u5b50\u4e32 \\(C\\) \u7684\u957f\u5ea6\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 3e3 + 10; void init_matching(int n, int *A, int k, int *C, int *P) { for (int i = 1; i + k - 1 <= n; ++i) { int p = i, q = 1; while (p <= n && q <= k) { q += (A[p] == C[q]); ++p; } P[i] = (q > k) ? p - 1 : 0; } } int n, A[N], P[N]; int m, B[N], Q[N]; int k, C[N]; int F[N][N], G[N][N]; void init_LCS() { for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (A[i] == B[j]) F[i][j] = F[i - 1][j - 1] + 1; else F[i][j] = max(F[i][j - 1], F[i - 1][j]); } void init_rLCS() { for (int i = n; i >= 1; --i) for (int j = m; j >= 1; --j) if (A[i] == B[j]) G[i][j] = G[i + 1][j + 1] + 1; else G[i][j] = max(G[i][j + 1], G[i + 1][j]); } int get_ans() { int Ans = -1; for (int i = 1; i + k - 1 <= n; ++i) for (int j = 1; j + k - 1 <= m; ++j) if (P[i] && Q[j]) Ans = max(Ans, F[i - 1][j - 1] + G[P[i] + 1][Q[j] + 1] + k); return Ans; } void Main() { cin >> n; copy_n(istream_iterator<int>(cin), n, A + 1); cin >> m; copy_n(istream_iterator<int>(cin), m, B + 1); cin >> k; copy_n(istream_iterator<int>(cin), k, C + 1); init_matching(n, A, k, C, P); init_matching(m, B, k, C, Q); init_LCS(), init_rLCS(); cout << get_ans() << endl; } \u8def\u5f84\u6a21\u578b \u00b6 \u4e00\u7ef4\u6a21\u578b \u00b6 P1541 [NOIP2010 \u63d0\u9ad8\u7ec4] \u4e4c\u9f9f\u68cb \u00b6 \u770b\u9898\u89e3\u533a\u7b2c\u4e00\u7bc7\u7684\u601d\u8def\uff0c\u662f\u5f88\u7b80\u5355\u7684\uff0c\u4f46\u662f\u6211\u4eec\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u53ef\u4ee5\u66f4\u7b80\u5355\u7684\u505a\u3002 \u8bbe\uff0c \\[ F(x,a_1,a_2,a_3,a_4) \\] \u8868\u793a\u8d70\u5230 \\(x\\) \u4f4d\u7f6e\uff0c\u5269\u4f59 \\(a_k\\) \u5f20\u8d70 \\(k\\) \u7684\u5361\u7247\uff08 \\(1\\le k\\le4\\) \uff09\u7684\u6700\u5927\u5f97\u5206\u3002 \u9996\u5148\u8fd9\u4e48\u505a\u7a7a\u95f4\u90fd\u4e0d\u591f\uff0c\u4f46\u662f\u6211\u4eec\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\uff01 \u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u786e\u5b9a\u7684\u72b6\u6001 \\((a_1,a_2,a_3,a_4)\\) \u4e00\u5b9a\u5bf9\u5e94\u7740\u4e00\u4e2a\u552f\u4e00\u7684 \\(x\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\u7b2c\u4e00\u7ef4\u5ea6\u5176\u5b9e\u5728 \\(k^4\\) \u7684\u7a7a\u95f4\u4e2d\u53ea\u6709\u4e00\u4e2a\u662f\u6709\u6548\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u4ee4\u6570\u7ec4\u8868\u793a\u8fd9\u4e2a\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, m; int A[400], mem[40][40][40][40]; int dfs(int x, int a, int b, int c, int d) { if (a < 0 || b < 0 || c < 0 || d < 0) return -1e9; if (x > n) return -1e9; if (x == n) return A[n]; if (mem[a][b][c][d] != -1) return mem[a][b][c][d]; return mem[a][b][c][d] = max({ mem[a][b][c][d], dfs(x + 1, a - 1, b, c, d), dfs(x + 2, a, b - 1, c, d), dfs(x + 3, a, b, c - 1, d), dfs(x + 4, a, b, c, d - 1) }) + A[x]; } void Main() { cin >> n >> m; for (int i = 1; i <= n; ++i) cin >> A[i]; int C[5] = {0}; for (int i = 1; i <= m; ++i) { int x; cin >> x; ++C[x]; } memset(mem, -1, sizeof mem); cout << dfs(1, C[1], C[2], C[3], C[4]) << endl; } P2285 [HNOI2004] \u6253\u9f39\u9f20 \u00b6 \u7b80\u5355\u9898\uff0c\u8bbe \\(F(i)\\) \u8868\u793a\u8fbe\u5230\u7b2c \\(i\\) \u4e2a\uff0c\u94a6\u5b9a \\(i\\) \u5fc5\u987b\u6253\u7684\u6700\u5927\u4e2a\u6570\u3002 \u6ce8\u610f\u5230\u6211\u4eec\u4e00\u5b9a\u662f\u4ece\u4e00\u4e2a\u79fb\u5230\u53e6\u4e00\u4e2a\uff0c\u6253\u5b8c\u518d\u7ee7\u7eed\u79fb\u52a8\uff0c\u56e0\u6b64\u8fd9\u4e48\u8bbe\u8ba1\u662f\u6b63\u786e\u7684\u3002 \u8003\u8651\u8f6c\u79fb\uff0c \\[ F(i)=\\max\\{F(j)+1,\\operatorname{if}j\\to i\\text{ is valid.}\\} \\] \u76f4\u63a5\u505a\u662f \\(\\mathcal O(N^2)\\) \u7684\uff0c\u4f46\u662f\u4f3c\u4e4e\u53ef\u4ee5\u8fc7\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, m; struct node { int t, x, y; } a[N]; int F[N]; int dis(int i, int j) { return abs(a[i].x - a[j].x) + abs(a[i].y - a[j].y); } bool check(int j, int i) { return dis(i, j) <= abs(a[i].t - a[j].t); } void Main() { cin >> n >> m; for (int i = 1; i <= m; ++i) cin >> a[i].t >> a[i].x >> a[i].y; for (int i = 1; i <= m; ++i) { F[i] = 1; for (int j = 1; j < i; ++j) if (check(j, i)) F[i] = max(F[i], F[j] + 1); } int ans = F[1]; for (int i = 2; i <= m; ++i) ans = max(ans, F[i]); cout << ans << endl; } P4933 \u5927\u5e08 \u00b6 \u597d\u9898\u3002 \u8bbe \\(F(i,v)\\) \u8868\u793a\u4ee5 \\(i\\) \u7ed3\u5c3e\u957f\u5ea6\u81f3\u5c11\u4e3a \\(2\\) \u7684\u516c\u5dee\u4e3a \\(v\\) \u7684\u7b49\u5dee\u6570\u5217\u4e2a\u6570\u3002 \u90a3\u4e48\uff0c\u867d\u7136 \\(v\\) \u6700\u5927\u53ef\u80fd\u662f \\(2\\times10^4\\) \u7ea7\u522b\u7684\uff0c\u4f46\u662f\u6700\u591a\u53ea\u6709 \\(\\mathcal O(N)\\) \u4e2a\u662f\u6709\u6548\u7684\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a \\(i\\) \u679a\u4e3e\u524d\u4e00\u4e2a \\(j\\) \uff0c\u8fdb\u884c\u8f6c\u79fb\uff1a \\[ F(i,v)=\\sum_{j<i}(F(j,v)+1),\\text{if $A_i-A_j=v$}. \\] \u90a3\u4e48\uff0c\u7b54\u6848\u5c31\u662f\uff0c \\[ \\text{Ans}=n+\\sum_{i=1}^n\\sum_vF(i,v) \\] \u8fd9\u4e48\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n^2)\\) \u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 std::unordered_map \u8fbe\u5230\u8fd9\u4e2a\u590d\u6742\u5ea6\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, A[N]; ll S[N]; unordered_map<int, ll> F[N]; void Main() { cin >> n; copy_n(istream_iterator<int>(cin), n, A + 1); for (int i = 1; i <= n; ++i) for (int j = 1; j < i; ++j) F[i][A[i] - A[j]] = (F[i][A[i] - A[j]] + F[j][A[i] - A[j]] + 1) % MOD; ll ans = n; for (int i = 1; i <= n; ++i) for (auto t : F[i]) ans = (ans + t.second) % MOD; cout << ans << endl; } P2340 [USACO03FALL] Cow Exhibition G \u00b6 \u8003\u8651\u7ecf\u5178\u72b6\u6001\u8bbe\u8ba1\uff0c\u8bbe \\(F(i,x)\\) \u8868\u793a\u524d \\(i\\) \u5934\u725b\uff0c\u667a\u5546\u4e3a \\(x\\) \u65f6\u7684\u6700\u5927\u60c5\u5546\u3002 \u8f6c\u79fb\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\uff0c\u53ef\u4ee5\u4f7f\u7528 unordered_map \u66f4\u65b9\u4fbf\u7684\u5b9e\u73b0\uff0c\u90a3\u4e48\u5c31\u662f\uff0c \u8bbe \\(F(i)\\) \u8868\u793a\u524d \\(i\\) \u5934\u725b\u7684\u51b3\u7b56\u96c6\u5408\uff0c\u4e00\u4e2a\u4e8c\u5143\u7ec4\u7b2c\u4e00\u7ef4\u4e3a\u667a\u5546\uff0c\u7b2c\u4e8c\u7ef4\u4e3a\u5bf9\u4e8e\u7684\u6700\u5927\u60c5\u5546\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, A[N], B[N]; unordered_map<int, int> F[N]; void update(int i, int x, int y) { if (F[i].count(x)) F[i][x] = max(F[i][x], y); else F[i][x] = y; } void Main() { cin >> n; for (int i = 1; i <= n; ++i) cin >> A[i] >> B[i]; update(1, 0, 0); for (int i = 1; i <= n; ++i) { for (auto t : F[i]) { update(i + 1, t.first + A[i], t.second + B[i]); update(i + 1, t.first, t.second); } } int Ans = -1e9; for (auto t : F[n + 1]) if (t.first >= 0 && t.second >= 0) Ans = max(Ans, t.first + t.second); cout << Ans << endl; } P4310 \u7edd\u4e16\u597d\u9898 \u00b6 \u6ce8\u610f\u5230\u53ea\u9700\u8981\u76f8\u90bb\u4e0e\u4e0d\u4e3a\u96f6\uff0c\u90a3\u4e48\u5bb9\u6613\u60f3\u5230\uff0c \u8bbe \\(F(i)\\) \u8868\u793a\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u6700\u5927\u957f\u5ea6\uff0c\u8f6c\u79fb\uff0c \\[ F(i)=\\max\\{F(j)+1,\\text{if $(A_i$ bitand $B_j)\\neq0$}\\} \\] \u8d85\u65f6\u4e86\uff0c\u6211\u4eec\u8003\u8651\u62c6\u4f4d\uff0c\u6ce8\u610f\u5230\u4e00\u4e2a\u6570\u4f1a\u8054\u901a\u6240\u6709\u5176\u4e2d \\(1\\) \u7684\u4f4d\u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u628a\u8fd9\u4e2a\u6570\u7684\u6240\u6709\u4f4d\u7edf\u4e00\u8003\u8651\u5373\u53ef\uff0c\u5373\u7528\u8fd9\u4e2a\u6570\u66f4\u65b0\u6240\u6709\u7684\u8054\u901a\u7684\u4f4d\u7684\u7b54\u6848\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, A[N], F[40]; void Main() { int n; cin >> n; int ans = 1; for (int i = 1; i <= n; ++i) { int x; cin >> x; for (int k = 0; k < 40; ++k) if ((x >> k) & 1) ans = max(ans, ++F[k]); for (int k = 0; k < 40; ++k) if ((x >> k) & 1) F[k] = max(F[k], ans); } cout << ans << endl; } P1854 \u82b1\u5e97\u6a71\u7a97\u5e03\u7f6e \u00b6 \u9898\u9762\u590d\u6742\u5b9e\u9645\u7b80\u5355\u3002 \u8bbe \\(F(i,j)\\) \u8868\u793a\u524d \\(i\\) \u652f\u82b1\u63d2\u5728\u524d \\(j\\) \u4e2a\u82b1\u74f6\u4e2d\uff0c\u5176\u4e2d\u94a6\u5b9a\u7b2c \\(i\\) \u652f\u82b1\u653e\u5728 \\(j\\) \u82b1\u74f6\u4e2d\u7684\u6700\u5927\u5f97\u5206\u3002 \u8003\u8651\u8f6c\u79fb\uff0c\u679a\u4e3e\u7b2c \\(i-1\\) \u652f\u82b1\u63d2\u5728\u54ea\u91cc\u5373\u53ef\uff0c \\[ F(i,j)=A(i,j)+\\max_{k<j}\\{F(i-1,k\\} \\] \u590d\u6742\u5ea6\u662f \\(\\mathcal O(N^3)\\) \u7684\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002 \u6ce8\u610f\u5230\u8981\u8bb0\u5f55\u65b9\u6848\uff0c\u90a3\u4e48\u8bbe \\(G(i,j)\\) \u8868\u793a \\(F(i,j)\\) \u662f\u4ece\u54ea\u4e2a \\(k\\) \u8f6c\u79fb\u6765\u7684\uff0c\u76f4\u63a5\u5012\u5e8f\u8bb0\u5f55\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, m; int A[N][N]; int F[N][N], G[N][N]; void Main() { cin >> n >> m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) cin >> A[i][j]; memset(F, -0x3f, sizeof F); F[0][0] = 0; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) for (int k = 0; k < j; ++k) if (F[i - 1][k] + A[i][j] > F[i][j]) F[i][j] = F[i - 1][k] + A[i][j], G[i][j] = k; int Ans = -1e9, Pos = 0; for (int i = 1; i <= m; ++i) if (F[n][i] > Ans) Ans = F[n][i], Pos = i; cout << Ans << endl; vector<int> Res; for (int i = n; i >= 1; --i) { Res.push_back(Pos); Pos = G[i][Pos]; } for (auto it = Res.rbegin(); it != Res.rend(); ++it) cout << *it << \" \"; cout << endl; } \u4e8c\u7ef4\u6a21\u578b \u00b6 P1216 [IOI1994] \u6570\u5b57\u4e09\u89d2\u5f62 \u00b6 \u8bbe \\(F(i,j)\\) \u8868\u793a\u8d70\u5230\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u6700\u5927\u4ef7\u503c\u3002 \\[ F(i,j)=A(i,j)+\\max\\{F(i-1,j),F(i-1,j-1)\\} \\] \u8868\u793a\u4ece\u4e0a\u4e00\u884c\u7684\u8fd9\u4e00\u4e2a\u3001\u4e0a\u4e00\u4e2a\u8f6c\u79fb\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 dp[0][0] = 0; for (int i = 1; i <= n; ++i) for (int j = 1; j <= i; ++j) dp[i][j] = a[i][j] + max(dp[i - 1][j], dp[i - 1][j - 1]); int ans = -1; for (int i = 1; i <= n; ++i) ans = max(ans, dp[n][i]); P1002 [NOIP2002 \u666e\u53ca\u7ec4] \u8fc7\u6cb3\u5352 \u00b6 \u7ecf\u5178\u7684\u5730\u56fe\u4e0a DP \u7684\u95ee\u9898\u3002 \u8bbe \\(F(x,y)\\) \u8868\u793a\u5230 \\((x,y)\\) \u7684\u65b9\u6848\u6570\uff0c\u90a3\u4e48\u663e\u7136\uff0c \\[ F(x,y)=\\begin{cases} 0&\\text{if $x,y$ is not valid}\\\\ 1&\\text{if $x=1$ or $y=1$}\\\\ F(x-1,y)+F(x,y-1)&\\text{otherwise.} \\end{cases} \\] \u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N^2)\\) \u7684\uff0c\u6ce8\u610f\u5f00 long long \u3002 P1004 [NOIP2000 \u63d0\u9ad8\u7ec4] \u65b9\u683c\u53d6\u6570 \u00b6 \u7ecf\u5178\u53cc\u8fdb\u7a0b DP \u601d\u8def\uff0c\u9996\u5148\u5bb9\u6613\u60f3\u5230\u56db\u65b9 DP \u7684\u601d\u8def\u3002 \u8bbe \\(F(x_1,y_1,x_2,y_2)\\) \u8868\u793a\u7b2c\u4e00\u3001\u4e8c\u4e2a\u8fdb\u7a0b\u5206\u522b\u8d70\u5230\u7684\u4f4d\u7f6e\uff0c\u6700\u5927\u5f97\u5206\u3002 \u6bcf\u6b21\u8f6c\u79fb\u4e00\u8d77\u8d70\u4e00\u4e2a\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; int A[11][11]; int F[11][11][11][11]; int w(int x1, int y1, int x2, int y2) { if (x1 == x2 and y1 == y2) return A[x1][y1]; return A[x1][y1] + A[x2][y2]; } void Main() { cin >> n; int x, y, t; while (cin >> x >> y >> t) A[x][y] = t; for (int x1 = 1; x1 <= n; ++x1) for (int y1 = 1; y1 <= n; ++y1) for (int x2 = 1; x2 <= n; ++x2) for (int y2 = 1; y2 <= n; ++y2) F[x1][y1][x2][y2] = max({ F[x1 - 1][y1][x2][y2 - 1], F[x1 - 1][y1][x2 - 1][y2], F[x1][y1 - 1][x2][y2 - 1], F[x1][y1 - 1][x2 - 1][y2] }) + w(x1, y1, x2, y2); cout << F[n][n][n][n] << endl; } \u8fd8\u53ef\u4ee5\u4f18\u5316\u5230\u4e09\u65b9\u3002 \u8bbe \\(F(k,x_1,x_2)\\) \u8868\u793a\u5404\u81ea\u8d70\u4e86 \\(k\\) \u6b65\uff0c\u5206\u522b\u5230\u4e86\u4e24\u4e2a\u884c\u6570\u7684\u6700\u5927\u5f97\u5206\u3002 \u8f6c\u79fb\u4e5f\u662f\u76f4\u63a5\u4e00\u8d77\u8d70\u4e00\u6b65\u5373\u53ef\uff0c\u4ee3\u7801\u7565\u3002 P1006 [NOIP2008 \u63d0\u9ad8\u7ec4] \u4f20\u7eb8\u6761 \u00b6 \u548c\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u4f46\u662f\u8981\u6c42\u8def\u5f84\u4e0d\u4ea4\u3002 \u6211\u4eec\u4ee4 \\(F(i,j,k,l)\\) \u8868\u793a\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e\uff0c\u5e76\u94a6\u5b9a \\((i,j)\\) \u9760\u5de6\u4e0b\u3001 \\((k,l)\\) \u9760\u53f3\u4e0a\u3002 \u90a3\u4e48\u8def\u5f84\u4e0d\u4ea4\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f\u59cb\u7ec8 \\(l>j\\) \uff0c\u8fd9\u662f\u663e\u7136\u7684\u3002 \u90a3\u4e48\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, m; int A[N][N]; int F[N][N][N][N]; void Main() { cin >> n >> m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) cin >> A[i][j]; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) for (int k = 1; k <= n; ++k) for (int l = j + 1; l <= m; ++l) F[i][j][k][l] = max({ F[i - 1][j][k][l - 1], F[i - 1][j][k - 1][l], F[i][j - 1][k][l - 1], F[i][j - 1][k - 1][l] }) + A[i][j] + A[k][l]; cout << F[n][m - 1][n - 1][m] << endl; } \u5206\u7ec4\u6a21\u578b \u00b6 \u5408\u5e76\u6a21\u578b \u00b6 P3147 [USACO16OPEN] 262144 P \u00b6 \u8bbe \\(F(i,x)\\) \u8868\u793a\u5de6\u7aef\u70b9\u4e3a \\(x\\) \uff0c\u6700\u8fd1\u53ef\u80fd\u5728\u54ea\u91cc\u5408\u5e76\u51fa\u6765 \\(i\\) \u3002 \u8f6c\u79fb\u663e\u7136\uff0c \\[ F(i,x)=F(i-1,F(i-1,x)+1) \\] \u8003\u8651\u521d\u59cb\u72b6\u6001\uff0c \\[ F(A_i,i)=i \\] \u6ce8\u610f\u5230\u5408\u5e76\u51fa\u6765\u7684\u6570\u5b57\u4e00\u5b9a\u662f\u9012\u589e\u7684\uff0c\u90a3\u4e48\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void Main() { cin >> n; for (int i = 1; i <= n; ++i) { int x; cin >> x; F[x][i] = i; } int ans = 0; for (int i = 2; i < 60; ++i) for (int x = 1; x <= n; ++x) { if (!F[i][x] && F[i - 1][x]) F[i][x] = F[i - 1][F[i - 1][x] + 1]; if (F[i][x]) ans = i; } cout << ans << endl; } \u5206\u5272\u6a21\u578b \u00b6 P1868 \u9965\u997f\u7684\u5976\u725b \u00b6 \u8fd9\u4e2a\u4e5f\u662f\u7ecf\u5178\u8f6c\u79fb\u601d\u60f3\u7684\u5e94\u7528\uff1a \u6bcf\u6b21\u53ea\u8003\u8651\u6700\u540e\u4e00\u6b21\u9009\u7684\uff08\u7c7b\u4f3c P9871 [NOIP2023] \u5929\u5929\u7231\u6253\u5361\u7684\u65b9\u6cd5\uff09\uff01 \u8bbe \\(F(x)\\) \u8868\u793a \\([1,x]\\) \u7684\u7b54\u6848\uff0c\u5982\u4f55\u8f6c\u79fb\uff1f \u6211\u4eec\u94a6\u5b9a\u9009\u62e9\u533a\u95f4 \\([L,R]\\) \u5176\u4e2d \\(R=x\\) \uff0c\u90a3\u4e48\uff0c \\[ F(x)=F(L-1)+(R-L+1) \\] \u4f46\u662f\u8fd9\u6837\u4f1a\u4ece\u8f6c\u79fb\u7684\u95f4\u9699\u4e2d\u6f0f\u6389\u7b54\u6848\uff0c\u600e\u4e48\u529e\uff1f \u8003\u8651\u6bcf\u4e00\u65f6\u523b\u5bf9 \\(F(x)\\) \u505a\u524d\u7f00\u6700\u5927\u503c\uff0c\u5373\u628a\u524d\u9762\u7684\u7b54\u6848\u52a0\u5230\u8fd9\u4e0a\u9762\u5373\u53ef\u3002 \u5373\uff0c \\[ F(x)=\\max_{j<L}F(j)+(R-L+1) \\] \u66b4\u529b\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N+V)\\) \u7684\uff0c\u5176\u4e2d \\(V=\\max R\\) \u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; vector<int> g[N]; int F[N]; void Main() { cin >> n; int mx = 0; for (int i = 1; i <= n; ++i) { int x, y; cin >> x >> y; ++x, ++y; g[y].push_back(x); mx = max(mx, y); } int Ans = 0; for (int i = 1; i <= mx; ++i) { F[i] = F[i - 1]; for (int j : g[i]) F[i] = max(F[i], F[j - 1] + i - j + 1); Ans = max(Ans, F[i]); } cout << Ans << endl; } \u8003\u8651\u5982\u679c\u6211\u4eec\u628a \\(R_i\\) \u653e\u5927\u5230 \\(10^9\\) \u6216\u8005\u66f4\u5927\u600e\u4e48\u505a\uff1f \u8fd8\u662f\u7c7b\u4f3c\uff0c\u5929\u5929\u7231\u6253\u5361\u5361\uff0c\u4e0d\u8fc7\u662f\u7b80\u5316\u7248\u3002 \u6ce8\u610f\u5230\u771f\u6b63\u6709\u7528\u7684\u72b6\u6001\u53ea\u6709 \\(F(L_i-1),F(R_i)\\) \u8fd9\u5927\u7ea6 \\(2N\\) \u4e2a\u3002 \u90a3\u4e48\u6211\u4eec\u7c7b\u4f3c\u79bb\u6563\u5316\u7684\uff0c\u5c06\u6240\u6709\u7684\u7684\u8fd9\u4e9b\u6709\u7528\u7684\u503c\u5904\u7406\uff0c\u5176\u4ed6\u7684\u76f4\u63a5\u590d\u5236\u524d\u9762\u7684\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; int L[N], R[N]; vector<int> g[2 * N]; int F[2 * N]; void Main() { cin >> n; int mx = 0; vector<int> S{-1}; for (int i = 1; i <= n; ++i) { cin >> L[i] >> R[i]; ++L[i], ++R[i]; S.push_back(L[i] - 1); S.push_back(R[i]); } sort(S.begin(), S.end()); S.erase(unique(S.begin(), S.end()), S.end()); #define get_id(x) (lower_bound(S.begin(), S.end(), x) - S.begin()) for (int i = 1; i <= n; ++i) g[get_id(R[i])].push_back(get_id(L[i] - 1)); int Ans = 0; for (int i = 1; i < S.size(); ++i) { F[i] = F[i - 1]; for (int j : g[i]) F[i] = max(F[i], F[j] + S[i] - S[j]); Ans = max(Ans, F[i]); } cout << Ans << endl; } P1874 \u5feb\u901f\u6c42\u548c \u00b6 \u6709\u4e00\u4e9b\u6709\u610f\u601d\u7684\u6280\u5de7\u3002 \u9996\u5148\u6211\u4eec\u8bbe \\(S(i,j)\\) \u8868\u793a \\([i,j]\\) \u7684\u6570\u4f4d\u7ec4\u6210\u7684\u6570\u5b57\u3002 \u8003\u8651\u8fd9\u4e2a\u4e1c\u897f\u5982\u4f55\u8ba1\u7b97\uff0c\u9996\u5148\u6ce8\u610f\u5230\u6211\u4eec\u8981\u7ec4\u6210\u7684\u6570\u6700\u5927\u662f \\(10^5\\) \uff0c\u90a3\u4e48\u8d85\u8fc7\u7684\u90fd\u6ca1\u610f\u4e49\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651\u53d6\u6a21\uff08\uff1f\uff09\u3002 \u5177\u4f53\u7684\uff0c\u6211\u4eec\u4ee4 \\(S(i,j)\\) \u8868\u793a \\([i,j]\\) \u7684\u6570\u5b57\u6a21\u4e00\u4e2a\u5927\u6570 \\(P\\) \uff08\u6bd4 \\(10^5\\) \u5927\u5373\u53ef\uff09\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7c7b\u4f3c\u5b57\u7b26\u4e32\u54c8\u5e0c\u7684\uff0c\u6c42\u51fa \\(S(i)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u6570\u7801\u7684\u6570\u5b57\uff0c\u7136\u540e\uff0c \\[ S(i,j)=S(j)-S(i-1)\\times P^{j-i+1} \\] \u5373\u53ef\uff0c\u8fd9\u662f\u5f88\u6709\u610f\u601d\u7684\u3002 \u7136\u540e\u8003\u8651\u6c42\u89e3\u7b54\u6848\uff0c\u8bbe \\(F(i,j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u6570\u4f4d\uff0c\u7ec4\u6210 \\(j\\) \u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u90a3\u4e48\u8f6c\u79fb\u53ea\u9700\u8981\u679a\u4e3e\u8fd9\u4e2a\u52a0\u53f7\u7684\u4f4d\u7f6e\u5373\u53ef\uff0c \\[ F(i,j)=\\min_{k<i}\\{F(k,j-S(k+1,i))+1\\} \\] \u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\uff0c\u6ce8\u610f\u5230\u8fd8\u662f \\(S(k+1,i)>j\\) \u4e4b\u540e\u5c31\u6ca1\u610f\u4e49\u4e86\u3002 \u56e0\u6b64\u53cd\u7740\u679a\u4e3e\u8d85\u8fc7\u5c31 break \u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int MOD = 1e9 + 7; int n, tar; string str; int R[50], S[50]; void init() { R[0] = 1, S[0] = 0; for (int i = 1; i <= n; ++i) { R[i] = R[i - 1] * 10ll % MOD; S[i] = (S[i - 1] * 10ll % MOD + str[i - 1] - '0') % MOD; } } int get(int l, int r) { return (S[r] - 1ll * S[l - 1] * R[r - l + 1] % MOD + MOD) % MOD; } int F[50][(int)1e5 + 10]; void Main() { cin >> str >> tar; n = str.size(), init(); memset(F, 0x3f, sizeof F); F[0][0] = -1; for (int i = 1; i <= n; ++i) for (int j = 1; j <= tar; ++j) { for (int k = i - 1; k >= 0; --k) { int t = get(k + 1, i); if (t > j) break; F[i][j] = min(F[i][j], F[k][j - t] + 1); } } int Ans = F[n][tar]; if (Ans + 1 >= 0x3f3f3f3f) Ans = -1; cout << Ans << endl; } \u5176\u4ed6\u4f8b\u9898 \u00b6 \u7b80\u5355\u9898 \u00b6 P1095 [NOIP2007 \u666e\u53ca\u7ec4] \u5b88\u671b\u8005\u7684\u9003\u79bb \u00b6 \u6ce8\u610f\u5230\uff0c\u5982\u679c\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u9b54\u6cd5\u3001\u7b49\u7740\u6062\u590d\u7684\u8bdd\uff0c\u5e73\u5747\u7684\u6bcf\u79d2\u79fb\u52a8\u662f\u4e0d\u4f18\u4e8e\u76f4\u63a5\u8d70\u7684\u3002 \u56e0\u6b64\uff0c\u7b54\u6848\u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u4e3a\uff0c\u82b1\u5149\u9b54\u6cd5\uff0c\u7136\u540e\u7b49\u4e00\u5b9a\u65f6\u95f4\u540e\u4e00\u76f4\u8d70\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void Main() { cin >> M >> S >> T; for (int i = 1; i <= T; ++i) { if (M >= 10) F[i] = F[i - 1] + 60, M -= 10; else F[i] = F[i - 1], M += 4; } for (int i = 1; i <= T; ++i) { if (F[i] < F[i - 1] + 17) F[i] = F[i - 1] + 17; if (F[i] >= S) { cout << \"Yes\" << endl; cout << i << endl; return; } } cout << \"No\" << endl; cout << F[T] << endl; } \u4e0b\u9762\u7684 F[i] < F[i - 1] + 17 \u4e00\u5b9a\u4f1a\u4ece\u67d0\u4e00\u4e2a\u70b9\u5f00\u59cb\u4e00\u76f4\u6267\u884c\uff0c\u56e0\u6b64\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\u3002 P1650 \u7530\u5fcc\u8d5b\u9a6c \u00b6 \u6ce8\u610f\u5230\u7530\u5fcc\u51fa\u9a6c\uff0c\u4e00\u5b9a\u662f\u6700\u5f3a\u7684\u51e0\u4e2a\u52a0\u4e0a\u6700\u5f31\u7684\u51e0\u4e2a\u3002 \u5176\u4e2d\u5f3a\u7684\u7528\u4e8e\u83b7\u80dc\u5f97\u5206\uff0c\u5f31\u7684\u7528\u4e8e\u6478\u9c7c\u6df7\u8f6e\u6570\u8ba9\u5f3a\u7684\u5f97\u5206\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651 DP\uff0c\u4ee4 \\(F(i,j)\\) \u8868\u793a\uff1a \u8fdb\u884c\u4e86 \\(i\\) \u8f6e\uff0c\u7530\u5fcc\u4ece\u5f3a\u7684\u51fa\u4e86 \\(j\\) \u4e2a\u7684\u6700\u5927\u5206\u6570\u3002 \u8003\u8651\u7b2c \\(i\\) \u4e2a\u7530\u5fcc\u51fa\u4ec0\u4e48\uff0c\u8ba8\u8bba\u5373\u53ef\uff0c\u8f6c\u79fb\uff1a \\[ F(i,j)=\\max\\{F(i-1,j)+w(i,n-(i-j)+1),F(i-1,j-1)+w(i,j)\\} \\] \u5176\u4e2d \\(w(i,j)\\) \u8868\u793a\u9f50\u738b\u7684\u7b2c \\(i\\) \u5339\u9a6c\u5bf9\u7530\u5fcc\u7684\u7b2c \\(j\\) \u5339\u9a6c\u7684\u5f97\u5206\u3002 \u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal O(N^2)\\) \u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void Main() { cin >> n; for (int i = 1; i <= n; ++i) cin >> A[i]; for (int i = 1; i <= n; ++i) cin >> B[i]; sort(A + 1, A + n + 1); sort(B + 1, B + n + 1); for (int i = 1; i <= n; ++i) { F[i][0] = F[i - 1][0] + G(i, n - i + 1); F[i][i] = F[i - 1][i - 1] + G(i, i); for (int j = 1; j < i; ++j) F[i][j] = max(F[i - 1][j] + G(i, n - (i - j) + 1), F[i - 1][j - 1] + G(i, j)); } int Ans = -1e9; for (int i = 0; i <= n; ++i) Ans = max(Ans, F[n][i]); cout << Ans << endl; } P1435 [IOI2000] \u56de\u6587\u5b57\u4e32 \u00b6 \u8fd9\u9898\u4e5f\u6709\u533a\u95f4 DP \u505a\u6cd5\u3002 \u6ce8\u610f\u5230\u7b54\u6848\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u51cf\u53bb\u6700\u957f\u56de\u6587\u5b50\u4e32\u3002 \u8003\u8651\u5982\u4f55\u6c42\u6700\u957f\u56de\u6587\u5b50\u4e32\uff0c\u5bb9\u6613\u60f3\u5230\u662f\u5c06\u5b57\u7b26\u4e32\u9006\u5e8f\u540e\u6c42 LCS \u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int F[1010][1010]; // LCS: a.size() == b.size() int Main(string a, string b) { int n = a.size(); memset(F, 0, sizeof F); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) if (a[i - 1] == b[j - 1]) F[i][j] = F[i - 1][j - 1] + 1; else F[i][j] = max(F[i][j - 1], F[i - 1][j]); return F[n][n]; } int Main(string a) { string b(a); reverse(begin(b), end(b)); return a.size() - Main(a, b); } void Main() { string str; cin >> str; cout << Main(str) << endl; } \u4e2d\u6863\u9898 \u00b6 CF1446B Catching Cheaters \u00b6 \u6ce8\u610f\u5230\u7c7b\u4f3c\u4e8e\u53cc\u5e8f\u5217\u6a21\u578b\uff0c\u6211\u4eec\u8bb0 \\(F(i,j)\\) \u8868\u793a \\(A[1\\dots i]\\) \u548c \\(B[1\\dots j]\\) \u7684\u6700\u5927\u4ef7\u503c\uff0c\u94a6\u5b9a \\(A(i)\\) \u548c \\(B(j)\\) \u5fc5\u987b\u9009\u62e9\u3002\u5bb9\u6613\u5199\u51fa\uff1a \\[ F(i,j)= \\begin{cases} F(i-1,j-1)+2&\\text{if $A_i=B_j$}\\\\ \\max\\{0,F(i-1,j)-1,F(i,j-1)-1\\}&\\text{otherwise.} \\end{cases} \\] \u76f4\u63a5\u5b9e\u73b0\u5373\u53ef\u3002 P3558 [POI2013] BAJ-Bytecomputer \u00b6 \u9996\u5148\u6ce8\u610f\u5230\u53ea\u9700\u8981\u5355\u8c03\u4e0d\u964d\uff0c\u56e0\u6b64\u8ba9\u5e8f\u5217\u51fa\u73b0 \\(-2,2\\) \u7b49\u4e00\u5b9a\u4e0d\u4f18\u3002 \u56e0\u6b64\u8003\u8651\u8bbe \\(F(i,-1/0/1)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5b57\u7b26\uff0c \u8ba9\u7b2c \\(i\\) \u4e2a\u53d8\u4e3a \\(-1/0/1\\) \u4e14\u524d\u9762\u5355\u8c03\u4e0d\u964d\u7684\u6700\u5c0f\u6b21\u6570\u3002 \u8f6c\u79fb\uff0c\u82e5 \\(A_i=-1\\) \uff0c \\[ \\begin{aligned} F(i,-1)&=F(i-1,-1)\\\\ F(i,0)&=\\inf\\\\ F(i,1)&=F(i-1,1)+2 \\end{aligned} \\] \u82e5 \\(A_i=0\\) \uff0c \\[ \\begin{aligned} F(i,-1)&=F(i-1,-1)+1\\\\ F(i,0)&=\\min\\{F(i-1,0),F(i-1,-1)\\}\\\\ F(i,1)&=F(i-1,1)+1 \\end{aligned} \\] \u82e5 \\(A_i=1\\) \uff0c \\[ \\begin{aligned} F(i,-1)&=F(i-1,-1)+2\\\\ F(i,0)&=F(i-1,-1)+1\\\\ F(i,1)&=\\min\\{F(i-1,-1),F(i-1,0),F(i-1,1)\\} \\end{aligned} \\] \u8fd9\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u6ce8\u610f\u7279\u5224 \\(i=1\\) \u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; struct node { int a[3]; int &operator [](int x) { return a[x + 1]; } } F[N]; void Main() { cin >> n; F[1][-1] = 1e9; F[1][0] = 1e9; F[1][1] = 1e9; int x; cin >> x; F[1][x] = 0; for (int i = 2; i <= n; ++i) { cin >> x; if (x == -1) { F[i][-1] = F[i - 1][-1]; F[i][0] = 1e9; F[i][1] = F[i - 1][1] + 2; } if (x == 0) { F[i][-1] = F[i - 1][-1] + 1; F[i][0] = min(F[i - 1][0], F[i - 1][-1]); F[i][1] = F[i - 1][1] + 1; } if (x == 1) { F[i][-1] = F[i - 1][-1] + 2; F[i][0] = F[i - 1][-1] + 1; F[i][1] = min({F[i - 1][-1], F[i - 1][0], F[i - 1][1]}); } } int ans = min({F[n][-1], F[n][0], F[n][1]}); if (ans >= 1e9) { puts(\"BRAK\"); return; } cout << ans << endl; }","title":"\u7ebf\u6027 DP"},{"location":"dp/sequence/#dp","text":"","title":"\u7ebf\u6027 DP"},{"location":"dp/sequence/#_1","text":"\u5e8f\u5217 DP \u53ef\u4ee5\u8bf4\u65f6\u6700\u5e38\u89c1\u7684 DP \u6a21\u578b\u3002 \u53ef\u4ee5\u5c06\u5728\u5e8f\u5217\u4e0a DP \u7684\uff0c\u90fd\u79f0\u4e3a\u5e8f\u5217 DP\uff0c\u4f8b\u5982\u7ebf\u6027 DP \u548c\u533a\u95f4 DP\u3002 \u7ebf\u6027 DP \u6709\u5f88\u591a\u7ef4\u5ea6\uff0c\u5927\u90e8\u5206\u90fd\u662f\u4e00\u7ef4\u7684\u3002 \u5373\u7528 \\(f(i,\\dots)\\) \u8868\u793a\u8003\u8651\u5e8f\u5217\u7684 \\(i\\) \u4e2a\u5143\u7d20\uff0c\u6ee1\u8db3 \\(\\dots\\) \u9650\u5236\u7684\u7b54\u6848\u3002 \u4e5f\u6709\u4e8c\u7ef4\u7684\uff0c\u7528 \\(f(i,j,\\dots)\\) \u8868\u793a\u4e24\u4e2a\u5e8f\u5217\u524d \\(i,j\\) \u4e2a\u5143\u7d20\u7684\u7b54\u6848\u3002","title":"\u6982\u5ff5"},{"location":"dp/sequence/#_2","text":"","title":"\u5e8f\u5217\u6a21\u578b"},{"location":"dp/sequence/#_3","text":"","title":"\u7ecf\u5178\u4f8b\u9898"},{"location":"dp/sequence/#b3637","text":"\u8bbe \\(f(i)\\) \u8868\u793a\u4ee5 \\(A(i)\\) \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 LIS \u957f\u5ea6\uff0c\u8003\u8651\u8f6c\u79fb\u3002 \\[ f(i)=\\max_{j<i}\\{[f(j)+1][A_j<A_i]\\} \\] \u5373\u627e\u5230\u4e0a\u4e00\u4e2a\u5143\u7d20\uff0c\u63a5\u5728\u8fd9\u4e2a\u4ee5\u540e\u7684\u6700\u5927\u7684\u957f\u5ea6\u3002 \u76f4\u63a5\u8f6c\u79fb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N^2)\\) \u7684\uff0c \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int Ans = 0; for (int i = 1; i <= n; ++i) { F[i] = 1; for (int j = 1; j < i; ++j) if (A[j] < A[i]) F[i] = max(F[i], F[j] + 1); Ans = max(Ans, F[i]); } \u8003\u8651\u4f18\u5316\u3002 \u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5bf9\u503c\u57df\u5efa\u7acb\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u6837\u5f88\u590d\u6742\u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u6570\u5b57\u4f1a\u5bfc\u81f4\u7b54\u6848\u589e\u52a0\uff0c\u4e00\u5b9a\u662f\u5b83\u5927\u4e8e\u4e86\u524d\u9762\u7684\u67d0\u4e00\u4e2a\u6570\u3002 \u5426\u5219\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7684\u8d21\u732e\u5c31\u662f\u5bf9\u4e8e\u540e\u9762\u6bd4\u5b83\u5927\u7684\u6570\u53ef\u4ee5\u52a0\u4e0a\u8fd9\u4e00\u4e2a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4\uff0c \u5982\u679c\u8fd9\u4e2a\u6570\u5927\u4e8e\u524d\u9762\u6240\u6709\u7684\uff0c\u90a3\u4e48\u52a0\u5165\u6570\u5217\u672b\u5c3e\u3002 \u5426\u5219\u7528\u8fd9\u4e2a\u6570\u66ff\u6362\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u7b2c\u4e00\u4e2a\uff0c\u8868\u793a\u540e\u9762\u53ef\u4ee5\u7528\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 memset(F, 0x3f, sizeof F); for (int i = 1; i <= n; ++i) *lower_bound(F + 1, F + n + 1, A[i]) = A[i]; int Ans = 0; while (F[Ans + 1] != 0x3f3f3f3f) ++Ans; \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N\\log N)\\) \u7684\u3002","title":"B3637 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"},{"location":"dp/sequence/#p1439","text":"\u8bbe \\(f(i,j)\\) \u8868\u793a \\(A[1,i]\\) \u548c \\(B[1,j]\\) \u7684 LCS\u3002 \u6709\uff0c \\[ f(i,j)=\\begin{cases} f(i-1,j-1)+1&A_i=B_j\\\\ \\max\\{f(i,j-1),f(i-1,j)\\}&A_i\\neq B_j \\end{cases} \\] \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(N^2)\\) \u7684\uff0c\u53ef\u4ee5\u4f18\u5316\u5230 \\(1/\\omega\\) \u4f46\u662f\u4e0d\u5b58\u5728\u66f4\u4f18\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (a[i] == b[j]) f[i][j] = f[i - 1][j - 1] + 1; else f[i][j] = max(f[i - 1][j], f[i][j - 1]); \u4e09\u4e32 LCS\uff1a\u8bbe \\(F(i,j,k)\\) \u8868\u793a \\(A[1,i],B[1,j],C[1,k]\\) \u7684 LCS\uff0c\u8f6c\u79fb\u5206\u8ba8\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int F[N][N][N]; int Main(string A, string B, string C) { for (int i = 1; i <= A.size(); ++i) { char a = A[i - 1]; for (int j = 1; j <= B.size(); ++j) { int b = B[j - 1]; for (int k = 1; k <= C.size(); ++k) { char c = C[k - 1]; F[i][j][k] = max({F[i][j][k - 1], F[i][j - 1][k], F[i - 1][j][k]}); if (a == b && b == c) F[i][j][k] = max(F[i][j][k], F[i - 1][j - 1][k - 1] + 1); } } } return F[A.size()][B.size()][C.size()]; } \u5982\u679c \\(A,B\\) \u662f\u6392\u5217\uff0c\u90a3\u4e48\u5b58\u5728\u66f4\u4f18\u7684\u505a\u6cd5\u3002 \u6211\u4eec\u4ee4 \\(C\\) \u4e3a \\(A_i\\) \u5728 \\(B\\) \u4e2d\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u90a3\u4e48 LCS \u4e00\u5b9a\u662f \\(C\\) \u7684 LIS\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5 \\(\\mathcal O(N\\log N)\\) \u505a\u4e86\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 for (int i = 1; i <= n; ++i) P[B[i]] = i; memset(F, 0x3f, sizeof F); for (int i = 1; i <= n; ++i) *upper_bound(F + 1, F + n + 1, P[A[i]][i]) = P[A[i]][i]; int Ans = 0; while (F[Ans + 1] != 0x3f3f3f3f) ++Ans;","title":"P1439 \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217"},{"location":"dp/sequence/#p2758","text":"\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5220\u9664\u3001\u63d2\u5165\u3001\u4fee\u6539\u4e00\u4e2a\u5b57\u7b26\uff0c \u5b9a\u4e49\u5b57\u7b26\u4e32 \\(A,B\\) \u7684\u7f16\u8f91\u8ddd\u79bb\u4e3a\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4f7f \\(A\\) \u53d8\u6210 \\(B\\) \u5b57\u7b26\u4e32\u3002 \u8bbe \\(f(i,j)\\) \u8868\u793a \\(A[1,i]\\) \u548c \\(B[1,j]\\) \u7684\u7f16\u8f91\u8ddd\u79bb\uff0c\u90a3\u4e48\u6709\u8f6c\u79fb\u65b9\u7a0b\uff0c \\[ f(i,j)=\\min\\{f(i-1,j)+1,f(i,j-1)+1,f(i-1,j-1)+[A_i\\neq B_j]\\} \\] \u76f4\u63a5\u8f6c\u79fb\u5c31\u662f \\(\\mathcal O(N^3)\\) \u7684\u3002","title":"P2758 \u7f16\u8f91\u8ddd\u79bb"},{"location":"dp/sequence/#p1115","text":"\u8bbe \\(F(x)\\) \u8868\u793a\u4ee5 \\(x\\) \u7ed3\u5c3e\u7684\u6700\u5927\u5b57\u6bb5\u548c\uff0c\u8bbe \\(S(x)\\) \u8868\u793a\u539f\u6570\u7ec4\u7684\u524d\u7f00\u548c\u3002 \u601d\u8def\u4e00\uff1a \\[ F(x)=\\max_{y<x}\\{S(x)-S(y)\\}=S(x)-\\min_{y<x}S(y) \\] \u6ce8\u610f\u5230\u7ef4\u62a4\u524d\u7f00\u6700\u5c0f\u503c\u5373\u53ef\u3002 \u601d\u8def\u4e8c\uff1a \\[ F(x)=\\max\\{A(x),F(x)-1+A(x)\\}=A(x)+\\max\\{F(x-1),0\\} \\] \u4e00\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u52a0\u5165\u524d\u9762\u7684\u6216\u8005\u81ea\u5df1\u5355\u72ec\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int F[N]; int MSS(int *A, int n, function<int(int, int)> cmp) { for (int i = 1; i <= n; ++i) F[i] = cmp(F[i - 1], 0ll) + A[i]; int Ans = F[1]; for (int i = 2; i <= n; ++i) Ans = cmp(Ans, F[i]); return Ans; }","title":"P1115 \u6700\u5927\u5b50\u6bb5\u548c"},{"location":"dp/sequence/#_4","text":"","title":"\u5176\u4ed6\u4f8b\u9898"},{"location":"dp/sequence/#51nod-1050","text":"\u5bb9\u6613\u53d1\u73b0\uff0c\u73af\u5f62\u53ea\u662f\u5728\u5e8f\u5217\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u4e00\u79cd\u60c5\u51b5\uff1a\u8de8\u8fc7\u67d0\u4e2a\u7aef\u70b9\u5230\u4e86\u53e6\u4e00\u8fb9\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u6700\u5927\u5b57\u6bb5\u548c\u8f6c\u5316\u4e3a\uff0c\u5e8f\u5217\u7684\u603b\u548c\u51cf\u53bb\u4e00\u4e2a\u6700\u5c0f\u5b57\u6bb5\u548c\uff08\u4f5c\u4e3a\u4e0d\u9009\u7684\u4e00\u6bb5\uff09\u3002 \u6ce8\u610f\u5230\u8fd9\u6837\u6709\u53ef\u80fd\u5c06\u6574\u4e2a\u5e8f\u5217\u5220\u53bb\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u7528 \\([1,n),(1,n]\\) \u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 // \u4e0a\u6587\u7684 MSS \u51fd\u6570 int n, Sum, A[N]; void Main() { cin >> n, Sum = 0; if (n == 1) { int x; cin >> x; cout << x << endl; return; } for (int i = 1; i <= n; ++i) cin >> A[i], Sum += A[i]; auto Max = [] (int a, int b) { return max(a, b); }; auto Min = [] (int a, int b) { return min(a, b); }; int Ans = MSS(A, n, Max); Ans = max(Ans, Sum - MSS(A, n - 1, Min)); Ans = max(Ans, Sum - MSS(A + 1, n - 1, Min)); cout << Ans << endl; } \u540c\u65f6\u4e5f\u53ef\u4ee5\u65ad\u73af\u6210\u94fe\uff0c\u8f6c\u5316\u4e3a\u957f\u5ea6\u9650\u5236\u7684\u6700\u5927\u5b57\u6bb5\u548c\u95ee\u9898\u3002","title":"51Nod-1050 \u73af\u72b6\u6700\u5927\u5b50\u6bb5\u548c"},{"location":"dp/sequence/#p2642","text":"\u6ce8\u610f\u5230\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u5206\u5272\u70b9\uff0c\u5c06\u4e24\u4e2a\u6bb5\u5206\u5f00\uff0c\u56e0\u6b64\u8003\u8651\u679a\u4e3e\u8fd9\u4e2a\u4f4d\u7f6e\u3002 \u6211\u4eec\u9884\u5904\u7406\u51fa\u6765\uff0c\u4e00\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u3001\u4e4b\u540e\u5206\u522b\u7684\u6700\u5927\u5b57\u6bb5\u548c\uff0c\u52a0\u8d77\u6765\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, A[N]; void init_MSS(int *F) { F[0] = -1e9; for (int i = 1; i <= n; ++i) F[i] = max(F[i - 1], 0ll) + A[i]; for (int i = 1; i <= n; ++i) F[i] = max(F[i - 1], F[i]); } void init_rMSS(int *F) { F[n + 1] = -1e9; for (int i = n; i >= 1; --i) F[i] = max(F[i + 1], 0ll) + A[i]; for (int i = n; i >= 1; --i) F[i] = max(F[i + 1], F[i]); } int F[N], G[N]; void Main() { cin >> n; copy_n(istream_iterator<int>(cin), n, A + 1); init_MSS(F), init_rMSS(G); int Ans = -1e9; for (int i = 2; i < n; ++i) Ans = max(Ans, F[i - 1] + G[i + 1]); cout << Ans << endl; } \u6ce8\u610f\u6b64\u65f6\u8fd9\u9053\u9898\u8981\u6c42\u5e8f\u5217\u4e24\u8fb9\u975e\u7a7a\u3002","title":"P2642 \u6700\u5927\u53cc\u5b50\u6bb5\u548c"},{"location":"dp/sequence/#p1121","text":"\u5bb9\u6613\u63a8\u5e7f\uff0c\u6211\u4eec\u8dd1\u4e00\u6b21\u6700\u5927\u53cc\u5b57\u6bb5\u548c\uff0c\u4e24\u6b21\u6700\u5c0f\u53cc\u5b57\u6bb5\u548c\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 template<int emp> int calc(int n, int *A, function<int(int, int)> cmp) { static int F[N], G[N]; F[0] = G[n + 1] = emp; int Ans = emp; for (int i = 1; i <= n; ++i) F[i] = cmp(F[i - 1], 0) + A[i]; for (int i = 1; i <= n; ++i) F[i] = cmp(F[i], F[i - 1]); for (int i = n; i >= 1; --i) G[i] = cmp(G[i + 1], 0) + A[i]; for (int i = n; i >= 1; --i) G[i] = cmp(G[i], G[i + 1]); for (int i = 2; i < n; ++i) Ans = cmp(Ans, F[i - 1] + G[i + 1]); return Ans; } int n, Sum, A[N]; void Main() { cin >> n, Sum = 0; for (int i = 1; i <= n; ++i) cin >> A[i], Sum += A[i]; auto Max = [] (int a, int b) { return max(a, b); }; auto Min = [] (int a, int b) { return min(a, b); }; int Ans = calc < (int) -1e9 > (n, A, Max); Ans = max(Ans, Sum - calc < 0 > (n - 1, A, Min)); Ans = max(Ans, Sum - calc < 0 > (n - 1, A + 1, Min)); cout << Ans << endl; } \u9700\u8981\u6ce8\u610f\u6bcf\u4e2a\u9898\u53ef\u80fd\u4f1a\u662f\u5426\u53ef\u4ee5\u76f8\u90bb\u3001\u662f\u5426\u53ef\u4ee5\u4e3a\u7a7a\u505a\u51fa\u8981\u6c42\uff0c\u4e0d\u8fc7\u5f88\u597d\u6539\u3002","title":"P1121 \u73af\u72b6\u6700\u5927\u53cc\u5b50\u6bb5\u548c"},{"location":"dp/sequence/#cses-1644","text":"\u6211\u4eec\u8981\u6c42\u957f\u5ea6\u5728\u533a\u95f4 \\([L,R]\\) \u5185\u7684\u6700\u5927\u5b57\u6bb5\u548c\u3002 \u5177\u4f53\u5185\u5bb9\u89c1\u5355\u8c03\u961f\u5217\u4f18\u5316 DP \u6587\u7ae0\u3002","title":"CSES-1644 \u6709\u957f\u5ea6\u9650\u5236"},{"location":"dp/sequence/#p1020-noip1999","text":"\u7b2c\u4e00\u4e2a\u663e\u7136\u5c31\u662f\u6700\u957f\u4e0d\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u4ee4 \\(x\\gets-x\\) \u8dd1 LIS \u5373\u53ef\u3002 \u7b2c\u4e8c\u4e2a\u4e5f\u662f\u7ecf\u5178\u4e1c\u897f\uff1a\u72c4\u5c14\u6c83\u65af\uff08Dilworth\uff09\u5b9a\u7406\uff0c\u5176\u6307\u51fa\uff1a \u6709\u9650\u504f\u5e8f\u96c6\u5408\u4e2d\uff0c\u5305\u542b\u5143\u7d20\u6700\u591a\u53cd\u94fe\u7684\u5143\u7d20\u6570\u7b49\u4e8e\u5305\u542b\u94fe\u6570\u6700\u5c11\u7684\u94fe\u5206\u89e3\u7684\u94fe\u6570\u3002 \u8fd9\u4e2a\u91cf\u88ab\u5b9a\u4e49\u4e3a\u8be5\u504f\u5e8f\u96c6\u7684\u5bbd\u5ea6\uff1b\u800c\u5728\u6b64\u9898\u4e2d\uff1a \u5c06\u4e00\u4e2a\u5e8f\u5217\u5256\u6210\u82e5\u5e72\u4e2a\u5355\u8c03\u4e0d\u5347\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u4e2a\u6570\u7b49\u4e8e\u8be5\u5e8f\u5217\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u8dd1\u4e24\u6b21 LIS \u89e3\u51b3\u5373\u53ef\u3002","title":"P1020 [NOIP1999 \u63d0\u9ad8\u7ec4] \u5bfc\u5f39\u62e6\u622a"},{"location":"dp/sequence/#p1091-noip2004","text":"\u6211\u4eec\u53d1\u73b0\u5c31\u662f\u6b63\u53cd\u4e24\u6b21 LIS \u5373\u53ef\u3002 \u4f46\u662f\u8fd9\u9053\u9898\u8981\u8bb0\u5f55\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684 LIS\uff0c\u4e5f\u76f4\u63a5\u8bb0\u5f55\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void Main() { cin >> n; for (int i = 1; i <= n; ++i) cin >> A[i]; memset(F, 0x3f, sizeof F); memset(G, 0x3f, sizeof G); for (int i = 1; i <= n; ++i) { int j = lower_bound(F + 1, F + n + 1, A[i]) - F; P[i] = j, F[j] = A[i]; } for (int i = n; i >= 1; --i) { int j = lower_bound(G + 1, G + n + 1, A[i]) - G; Q[i] = j, G[j] = A[i]; } int ans = 0; for (int i = 1; i <= n; ++i) ans = max(ans, P[i] + Q[i] - 1); cout << n - ans << endl; }","title":"P1091 [NOIP2004 \u63d0\u9ad8\u7ec4] \u5408\u5531\u961f\u5f62"},{"location":"dp/sequence/#p8020-ontak2015-badania-naukowe","text":"\u6709\u610f\u601d\u7684\u9898\uff0c\u5b8c\u6574\u7248\u770b\u6211\u9898\u89e3\uff1a https://www.luogu.com.cn/article/6n2rn1mf \u3002 \u6211\u4eec\u4f7f\u7528 \\(P(i)\\) \u8868\u793a\u4ece \\(A_i\\) \u5f00\u59cb\u5339\u914d \\(C\\) \uff0c\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4e0b\u6807 \\(j\\) \u3002 \u540c\u7406\uff0c\u4f7f\u7528 \\(Q(i)\\) \u8868\u793a\u4ece \\(B_i\\) \u5f00\u59cb\u5339\u914d \\(C\\) \uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4e0b\u6807 \\(j\\) \u3002 \u8bbe \\(F(i,j)\\) \u8868\u793a \\(A[1,i]\\) \u548c \\(B[1,j]\\) \u7684 LCS\uff08\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff09\u3002 \u8bbe \\(G(i,j)\\) \u8868\u793a \\(A[i,n]\\) \u548c \\(B[j,m]\\) \u7684 LCS\uff08\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff09\u3002 \u90a3\u4e48\uff0c\u7b54\u6848\u53ef\u4ee5\u8868\u793a\u4e3a\uff0c \\[ \\max_{i,j}\\{ F(i-1,j-1)+G(P(i)+1,Q(j)+1)+\\lvert C\\rvert, \\text{if $\\langle i,j\\rangle$ is valid.} \\} \\] \u4e5f\u5c31\u662f\u524d\u9762\u7684\u548c\u540e\u9762\u7684 LCS \u53ef\u4ee5\u76f4\u63a5\u8ba1\u5165\u7b54\u6848\uff0c\u518d\u52a0\u4e0a\u5b50\u4e32 \\(C\\) \u7684\u957f\u5ea6\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 3e3 + 10; void init_matching(int n, int *A, int k, int *C, int *P) { for (int i = 1; i + k - 1 <= n; ++i) { int p = i, q = 1; while (p <= n && q <= k) { q += (A[p] == C[q]); ++p; } P[i] = (q > k) ? p - 1 : 0; } } int n, A[N], P[N]; int m, B[N], Q[N]; int k, C[N]; int F[N][N], G[N][N]; void init_LCS() { for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (A[i] == B[j]) F[i][j] = F[i - 1][j - 1] + 1; else F[i][j] = max(F[i][j - 1], F[i - 1][j]); } void init_rLCS() { for (int i = n; i >= 1; --i) for (int j = m; j >= 1; --j) if (A[i] == B[j]) G[i][j] = G[i + 1][j + 1] + 1; else G[i][j] = max(G[i][j + 1], G[i + 1][j]); } int get_ans() { int Ans = -1; for (int i = 1; i + k - 1 <= n; ++i) for (int j = 1; j + k - 1 <= m; ++j) if (P[i] && Q[j]) Ans = max(Ans, F[i - 1][j - 1] + G[P[i] + 1][Q[j] + 1] + k); return Ans; } void Main() { cin >> n; copy_n(istream_iterator<int>(cin), n, A + 1); cin >> m; copy_n(istream_iterator<int>(cin), m, B + 1); cin >> k; copy_n(istream_iterator<int>(cin), k, C + 1); init_matching(n, A, k, C, P); init_matching(m, B, k, C, Q); init_LCS(), init_rLCS(); cout << get_ans() << endl; }","title":"P8020 [ONTAK2015] Badania naukowe"},{"location":"dp/sequence/#_5","text":"","title":"\u8def\u5f84\u6a21\u578b"},{"location":"dp/sequence/#_6","text":"","title":"\u4e00\u7ef4\u6a21\u578b"},{"location":"dp/sequence/#p1541-noip2010","text":"\u770b\u9898\u89e3\u533a\u7b2c\u4e00\u7bc7\u7684\u601d\u8def\uff0c\u662f\u5f88\u7b80\u5355\u7684\uff0c\u4f46\u662f\u6211\u4eec\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u53ef\u4ee5\u66f4\u7b80\u5355\u7684\u505a\u3002 \u8bbe\uff0c \\[ F(x,a_1,a_2,a_3,a_4) \\] \u8868\u793a\u8d70\u5230 \\(x\\) \u4f4d\u7f6e\uff0c\u5269\u4f59 \\(a_k\\) \u5f20\u8d70 \\(k\\) \u7684\u5361\u7247\uff08 \\(1\\le k\\le4\\) \uff09\u7684\u6700\u5927\u5f97\u5206\u3002 \u9996\u5148\u8fd9\u4e48\u505a\u7a7a\u95f4\u90fd\u4e0d\u591f\uff0c\u4f46\u662f\u6211\u4eec\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\uff01 \u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u786e\u5b9a\u7684\u72b6\u6001 \\((a_1,a_2,a_3,a_4)\\) \u4e00\u5b9a\u5bf9\u5e94\u7740\u4e00\u4e2a\u552f\u4e00\u7684 \\(x\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\u7b2c\u4e00\u7ef4\u5ea6\u5176\u5b9e\u5728 \\(k^4\\) \u7684\u7a7a\u95f4\u4e2d\u53ea\u6709\u4e00\u4e2a\u662f\u6709\u6548\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u4ee4\u6570\u7ec4\u8868\u793a\u8fd9\u4e2a\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, m; int A[400], mem[40][40][40][40]; int dfs(int x, int a, int b, int c, int d) { if (a < 0 || b < 0 || c < 0 || d < 0) return -1e9; if (x > n) return -1e9; if (x == n) return A[n]; if (mem[a][b][c][d] != -1) return mem[a][b][c][d]; return mem[a][b][c][d] = max({ mem[a][b][c][d], dfs(x + 1, a - 1, b, c, d), dfs(x + 2, a, b - 1, c, d), dfs(x + 3, a, b, c - 1, d), dfs(x + 4, a, b, c, d - 1) }) + A[x]; } void Main() { cin >> n >> m; for (int i = 1; i <= n; ++i) cin >> A[i]; int C[5] = {0}; for (int i = 1; i <= m; ++i) { int x; cin >> x; ++C[x]; } memset(mem, -1, sizeof mem); cout << dfs(1, C[1], C[2], C[3], C[4]) << endl; }","title":"P1541 [NOIP2010 \u63d0\u9ad8\u7ec4] \u4e4c\u9f9f\u68cb"},{"location":"dp/sequence/#p2285-hnoi2004","text":"\u7b80\u5355\u9898\uff0c\u8bbe \\(F(i)\\) \u8868\u793a\u8fbe\u5230\u7b2c \\(i\\) \u4e2a\uff0c\u94a6\u5b9a \\(i\\) \u5fc5\u987b\u6253\u7684\u6700\u5927\u4e2a\u6570\u3002 \u6ce8\u610f\u5230\u6211\u4eec\u4e00\u5b9a\u662f\u4ece\u4e00\u4e2a\u79fb\u5230\u53e6\u4e00\u4e2a\uff0c\u6253\u5b8c\u518d\u7ee7\u7eed\u79fb\u52a8\uff0c\u56e0\u6b64\u8fd9\u4e48\u8bbe\u8ba1\u662f\u6b63\u786e\u7684\u3002 \u8003\u8651\u8f6c\u79fb\uff0c \\[ F(i)=\\max\\{F(j)+1,\\operatorname{if}j\\to i\\text{ is valid.}\\} \\] \u76f4\u63a5\u505a\u662f \\(\\mathcal O(N^2)\\) \u7684\uff0c\u4f46\u662f\u4f3c\u4e4e\u53ef\u4ee5\u8fc7\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, m; struct node { int t, x, y; } a[N]; int F[N]; int dis(int i, int j) { return abs(a[i].x - a[j].x) + abs(a[i].y - a[j].y); } bool check(int j, int i) { return dis(i, j) <= abs(a[i].t - a[j].t); } void Main() { cin >> n >> m; for (int i = 1; i <= m; ++i) cin >> a[i].t >> a[i].x >> a[i].y; for (int i = 1; i <= m; ++i) { F[i] = 1; for (int j = 1; j < i; ++j) if (check(j, i)) F[i] = max(F[i], F[j] + 1); } int ans = F[1]; for (int i = 2; i <= m; ++i) ans = max(ans, F[i]); cout << ans << endl; }","title":"P2285 [HNOI2004] \u6253\u9f39\u9f20"},{"location":"dp/sequence/#p4933","text":"\u597d\u9898\u3002 \u8bbe \\(F(i,v)\\) \u8868\u793a\u4ee5 \\(i\\) \u7ed3\u5c3e\u957f\u5ea6\u81f3\u5c11\u4e3a \\(2\\) \u7684\u516c\u5dee\u4e3a \\(v\\) \u7684\u7b49\u5dee\u6570\u5217\u4e2a\u6570\u3002 \u90a3\u4e48\uff0c\u867d\u7136 \\(v\\) \u6700\u5927\u53ef\u80fd\u662f \\(2\\times10^4\\) \u7ea7\u522b\u7684\uff0c\u4f46\u662f\u6700\u591a\u53ea\u6709 \\(\\mathcal O(N)\\) \u4e2a\u662f\u6709\u6548\u7684\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a \\(i\\) \u679a\u4e3e\u524d\u4e00\u4e2a \\(j\\) \uff0c\u8fdb\u884c\u8f6c\u79fb\uff1a \\[ F(i,v)=\\sum_{j<i}(F(j,v)+1),\\text{if $A_i-A_j=v$}. \\] \u90a3\u4e48\uff0c\u7b54\u6848\u5c31\u662f\uff0c \\[ \\text{Ans}=n+\\sum_{i=1}^n\\sum_vF(i,v) \\] \u8fd9\u4e48\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n^2)\\) \u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 std::unordered_map \u8fbe\u5230\u8fd9\u4e2a\u590d\u6742\u5ea6\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, A[N]; ll S[N]; unordered_map<int, ll> F[N]; void Main() { cin >> n; copy_n(istream_iterator<int>(cin), n, A + 1); for (int i = 1; i <= n; ++i) for (int j = 1; j < i; ++j) F[i][A[i] - A[j]] = (F[i][A[i] - A[j]] + F[j][A[i] - A[j]] + 1) % MOD; ll ans = n; for (int i = 1; i <= n; ++i) for (auto t : F[i]) ans = (ans + t.second) % MOD; cout << ans << endl; }","title":"P4933 \u5927\u5e08"},{"location":"dp/sequence/#p2340-usaco03fall-cow-exhibition-g","text":"\u8003\u8651\u7ecf\u5178\u72b6\u6001\u8bbe\u8ba1\uff0c\u8bbe \\(F(i,x)\\) \u8868\u793a\u524d \\(i\\) \u5934\u725b\uff0c\u667a\u5546\u4e3a \\(x\\) \u65f6\u7684\u6700\u5927\u60c5\u5546\u3002 \u8f6c\u79fb\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\uff0c\u53ef\u4ee5\u4f7f\u7528 unordered_map \u66f4\u65b9\u4fbf\u7684\u5b9e\u73b0\uff0c\u90a3\u4e48\u5c31\u662f\uff0c \u8bbe \\(F(i)\\) \u8868\u793a\u524d \\(i\\) \u5934\u725b\u7684\u51b3\u7b56\u96c6\u5408\uff0c\u4e00\u4e2a\u4e8c\u5143\u7ec4\u7b2c\u4e00\u7ef4\u4e3a\u667a\u5546\uff0c\u7b2c\u4e8c\u7ef4\u4e3a\u5bf9\u4e8e\u7684\u6700\u5927\u60c5\u5546\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, A[N], B[N]; unordered_map<int, int> F[N]; void update(int i, int x, int y) { if (F[i].count(x)) F[i][x] = max(F[i][x], y); else F[i][x] = y; } void Main() { cin >> n; for (int i = 1; i <= n; ++i) cin >> A[i] >> B[i]; update(1, 0, 0); for (int i = 1; i <= n; ++i) { for (auto t : F[i]) { update(i + 1, t.first + A[i], t.second + B[i]); update(i + 1, t.first, t.second); } } int Ans = -1e9; for (auto t : F[n + 1]) if (t.first >= 0 && t.second >= 0) Ans = max(Ans, t.first + t.second); cout << Ans << endl; }","title":"P2340 [USACO03FALL] Cow Exhibition G"},{"location":"dp/sequence/#p4310","text":"\u6ce8\u610f\u5230\u53ea\u9700\u8981\u76f8\u90bb\u4e0e\u4e0d\u4e3a\u96f6\uff0c\u90a3\u4e48\u5bb9\u6613\u60f3\u5230\uff0c \u8bbe \\(F(i)\\) \u8868\u793a\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u6700\u5927\u957f\u5ea6\uff0c\u8f6c\u79fb\uff0c \\[ F(i)=\\max\\{F(j)+1,\\text{if $(A_i$ bitand $B_j)\\neq0$}\\} \\] \u8d85\u65f6\u4e86\uff0c\u6211\u4eec\u8003\u8651\u62c6\u4f4d\uff0c\u6ce8\u610f\u5230\u4e00\u4e2a\u6570\u4f1a\u8054\u901a\u6240\u6709\u5176\u4e2d \\(1\\) \u7684\u4f4d\u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u628a\u8fd9\u4e2a\u6570\u7684\u6240\u6709\u4f4d\u7edf\u4e00\u8003\u8651\u5373\u53ef\uff0c\u5373\u7528\u8fd9\u4e2a\u6570\u66f4\u65b0\u6240\u6709\u7684\u8054\u901a\u7684\u4f4d\u7684\u7b54\u6848\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, A[N], F[40]; void Main() { int n; cin >> n; int ans = 1; for (int i = 1; i <= n; ++i) { int x; cin >> x; for (int k = 0; k < 40; ++k) if ((x >> k) & 1) ans = max(ans, ++F[k]); for (int k = 0; k < 40; ++k) if ((x >> k) & 1) F[k] = max(F[k], ans); } cout << ans << endl; }","title":"P4310 \u7edd\u4e16\u597d\u9898"},{"location":"dp/sequence/#p1854","text":"\u9898\u9762\u590d\u6742\u5b9e\u9645\u7b80\u5355\u3002 \u8bbe \\(F(i,j)\\) \u8868\u793a\u524d \\(i\\) \u652f\u82b1\u63d2\u5728\u524d \\(j\\) \u4e2a\u82b1\u74f6\u4e2d\uff0c\u5176\u4e2d\u94a6\u5b9a\u7b2c \\(i\\) \u652f\u82b1\u653e\u5728 \\(j\\) \u82b1\u74f6\u4e2d\u7684\u6700\u5927\u5f97\u5206\u3002 \u8003\u8651\u8f6c\u79fb\uff0c\u679a\u4e3e\u7b2c \\(i-1\\) \u652f\u82b1\u63d2\u5728\u54ea\u91cc\u5373\u53ef\uff0c \\[ F(i,j)=A(i,j)+\\max_{k<j}\\{F(i-1,k\\} \\] \u590d\u6742\u5ea6\u662f \\(\\mathcal O(N^3)\\) \u7684\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002 \u6ce8\u610f\u5230\u8981\u8bb0\u5f55\u65b9\u6848\uff0c\u90a3\u4e48\u8bbe \\(G(i,j)\\) \u8868\u793a \\(F(i,j)\\) \u662f\u4ece\u54ea\u4e2a \\(k\\) \u8f6c\u79fb\u6765\u7684\uff0c\u76f4\u63a5\u5012\u5e8f\u8bb0\u5f55\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, m; int A[N][N]; int F[N][N], G[N][N]; void Main() { cin >> n >> m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) cin >> A[i][j]; memset(F, -0x3f, sizeof F); F[0][0] = 0; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) for (int k = 0; k < j; ++k) if (F[i - 1][k] + A[i][j] > F[i][j]) F[i][j] = F[i - 1][k] + A[i][j], G[i][j] = k; int Ans = -1e9, Pos = 0; for (int i = 1; i <= m; ++i) if (F[n][i] > Ans) Ans = F[n][i], Pos = i; cout << Ans << endl; vector<int> Res; for (int i = n; i >= 1; --i) { Res.push_back(Pos); Pos = G[i][Pos]; } for (auto it = Res.rbegin(); it != Res.rend(); ++it) cout << *it << \" \"; cout << endl; }","title":"P1854 \u82b1\u5e97\u6a71\u7a97\u5e03\u7f6e"},{"location":"dp/sequence/#_7","text":"","title":"\u4e8c\u7ef4\u6a21\u578b"},{"location":"dp/sequence/#p1216-ioi1994","text":"\u8bbe \\(F(i,j)\\) \u8868\u793a\u8d70\u5230\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u6700\u5927\u4ef7\u503c\u3002 \\[ F(i,j)=A(i,j)+\\max\\{F(i-1,j),F(i-1,j-1)\\} \\] \u8868\u793a\u4ece\u4e0a\u4e00\u884c\u7684\u8fd9\u4e00\u4e2a\u3001\u4e0a\u4e00\u4e2a\u8f6c\u79fb\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 dp[0][0] = 0; for (int i = 1; i <= n; ++i) for (int j = 1; j <= i; ++j) dp[i][j] = a[i][j] + max(dp[i - 1][j], dp[i - 1][j - 1]); int ans = -1; for (int i = 1; i <= n; ++i) ans = max(ans, dp[n][i]);","title":"P1216 [IOI1994] \u6570\u5b57\u4e09\u89d2\u5f62"},{"location":"dp/sequence/#p1002-noip2002","text":"\u7ecf\u5178\u7684\u5730\u56fe\u4e0a DP \u7684\u95ee\u9898\u3002 \u8bbe \\(F(x,y)\\) \u8868\u793a\u5230 \\((x,y)\\) \u7684\u65b9\u6848\u6570\uff0c\u90a3\u4e48\u663e\u7136\uff0c \\[ F(x,y)=\\begin{cases} 0&\\text{if $x,y$ is not valid}\\\\ 1&\\text{if $x=1$ or $y=1$}\\\\ F(x-1,y)+F(x,y-1)&\\text{otherwise.} \\end{cases} \\] \u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N^2)\\) \u7684\uff0c\u6ce8\u610f\u5f00 long long \u3002","title":"P1002 [NOIP2002 \u666e\u53ca\u7ec4] \u8fc7\u6cb3\u5352"},{"location":"dp/sequence/#p1004-noip2000","text":"\u7ecf\u5178\u53cc\u8fdb\u7a0b DP \u601d\u8def\uff0c\u9996\u5148\u5bb9\u6613\u60f3\u5230\u56db\u65b9 DP \u7684\u601d\u8def\u3002 \u8bbe \\(F(x_1,y_1,x_2,y_2)\\) \u8868\u793a\u7b2c\u4e00\u3001\u4e8c\u4e2a\u8fdb\u7a0b\u5206\u522b\u8d70\u5230\u7684\u4f4d\u7f6e\uff0c\u6700\u5927\u5f97\u5206\u3002 \u6bcf\u6b21\u8f6c\u79fb\u4e00\u8d77\u8d70\u4e00\u4e2a\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; int A[11][11]; int F[11][11][11][11]; int w(int x1, int y1, int x2, int y2) { if (x1 == x2 and y1 == y2) return A[x1][y1]; return A[x1][y1] + A[x2][y2]; } void Main() { cin >> n; int x, y, t; while (cin >> x >> y >> t) A[x][y] = t; for (int x1 = 1; x1 <= n; ++x1) for (int y1 = 1; y1 <= n; ++y1) for (int x2 = 1; x2 <= n; ++x2) for (int y2 = 1; y2 <= n; ++y2) F[x1][y1][x2][y2] = max({ F[x1 - 1][y1][x2][y2 - 1], F[x1 - 1][y1][x2 - 1][y2], F[x1][y1 - 1][x2][y2 - 1], F[x1][y1 - 1][x2 - 1][y2] }) + w(x1, y1, x2, y2); cout << F[n][n][n][n] << endl; } \u8fd8\u53ef\u4ee5\u4f18\u5316\u5230\u4e09\u65b9\u3002 \u8bbe \\(F(k,x_1,x_2)\\) \u8868\u793a\u5404\u81ea\u8d70\u4e86 \\(k\\) \u6b65\uff0c\u5206\u522b\u5230\u4e86\u4e24\u4e2a\u884c\u6570\u7684\u6700\u5927\u5f97\u5206\u3002 \u8f6c\u79fb\u4e5f\u662f\u76f4\u63a5\u4e00\u8d77\u8d70\u4e00\u6b65\u5373\u53ef\uff0c\u4ee3\u7801\u7565\u3002","title":"P1004 [NOIP2000 \u63d0\u9ad8\u7ec4] \u65b9\u683c\u53d6\u6570"},{"location":"dp/sequence/#p1006-noip2008","text":"\u548c\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u4f46\u662f\u8981\u6c42\u8def\u5f84\u4e0d\u4ea4\u3002 \u6211\u4eec\u4ee4 \\(F(i,j,k,l)\\) \u8868\u793a\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e\uff0c\u5e76\u94a6\u5b9a \\((i,j)\\) \u9760\u5de6\u4e0b\u3001 \\((k,l)\\) \u9760\u53f3\u4e0a\u3002 \u90a3\u4e48\u8def\u5f84\u4e0d\u4ea4\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f\u59cb\u7ec8 \\(l>j\\) \uff0c\u8fd9\u662f\u663e\u7136\u7684\u3002 \u90a3\u4e48\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n, m; int A[N][N]; int F[N][N][N][N]; void Main() { cin >> n >> m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) cin >> A[i][j]; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) for (int k = 1; k <= n; ++k) for (int l = j + 1; l <= m; ++l) F[i][j][k][l] = max({ F[i - 1][j][k][l - 1], F[i - 1][j][k - 1][l], F[i][j - 1][k][l - 1], F[i][j - 1][k - 1][l] }) + A[i][j] + A[k][l]; cout << F[n][m - 1][n - 1][m] << endl; }","title":"P1006 [NOIP2008 \u63d0\u9ad8\u7ec4] \u4f20\u7eb8\u6761"},{"location":"dp/sequence/#_8","text":"","title":"\u5206\u7ec4\u6a21\u578b"},{"location":"dp/sequence/#_9","text":"","title":"\u5408\u5e76\u6a21\u578b"},{"location":"dp/sequence/#p3147-usaco16open-262144-p","text":"\u8bbe \\(F(i,x)\\) \u8868\u793a\u5de6\u7aef\u70b9\u4e3a \\(x\\) \uff0c\u6700\u8fd1\u53ef\u80fd\u5728\u54ea\u91cc\u5408\u5e76\u51fa\u6765 \\(i\\) \u3002 \u8f6c\u79fb\u663e\u7136\uff0c \\[ F(i,x)=F(i-1,F(i-1,x)+1) \\] \u8003\u8651\u521d\u59cb\u72b6\u6001\uff0c \\[ F(A_i,i)=i \\] \u6ce8\u610f\u5230\u5408\u5e76\u51fa\u6765\u7684\u6570\u5b57\u4e00\u5b9a\u662f\u9012\u589e\u7684\uff0c\u90a3\u4e48\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void Main() { cin >> n; for (int i = 1; i <= n; ++i) { int x; cin >> x; F[x][i] = i; } int ans = 0; for (int i = 2; i < 60; ++i) for (int x = 1; x <= n; ++x) { if (!F[i][x] && F[i - 1][x]) F[i][x] = F[i - 1][F[i - 1][x] + 1]; if (F[i][x]) ans = i; } cout << ans << endl; }","title":"P3147 [USACO16OPEN] 262144 P"},{"location":"dp/sequence/#_10","text":"","title":"\u5206\u5272\u6a21\u578b"},{"location":"dp/sequence/#p1868","text":"\u8fd9\u4e2a\u4e5f\u662f\u7ecf\u5178\u8f6c\u79fb\u601d\u60f3\u7684\u5e94\u7528\uff1a \u6bcf\u6b21\u53ea\u8003\u8651\u6700\u540e\u4e00\u6b21\u9009\u7684\uff08\u7c7b\u4f3c P9871 [NOIP2023] \u5929\u5929\u7231\u6253\u5361\u7684\u65b9\u6cd5\uff09\uff01 \u8bbe \\(F(x)\\) \u8868\u793a \\([1,x]\\) \u7684\u7b54\u6848\uff0c\u5982\u4f55\u8f6c\u79fb\uff1f \u6211\u4eec\u94a6\u5b9a\u9009\u62e9\u533a\u95f4 \\([L,R]\\) \u5176\u4e2d \\(R=x\\) \uff0c\u90a3\u4e48\uff0c \\[ F(x)=F(L-1)+(R-L+1) \\] \u4f46\u662f\u8fd9\u6837\u4f1a\u4ece\u8f6c\u79fb\u7684\u95f4\u9699\u4e2d\u6f0f\u6389\u7b54\u6848\uff0c\u600e\u4e48\u529e\uff1f \u8003\u8651\u6bcf\u4e00\u65f6\u523b\u5bf9 \\(F(x)\\) \u505a\u524d\u7f00\u6700\u5927\u503c\uff0c\u5373\u628a\u524d\u9762\u7684\u7b54\u6848\u52a0\u5230\u8fd9\u4e0a\u9762\u5373\u53ef\u3002 \u5373\uff0c \\[ F(x)=\\max_{j<L}F(j)+(R-L+1) \\] \u66b4\u529b\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N+V)\\) \u7684\uff0c\u5176\u4e2d \\(V=\\max R\\) \u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; vector<int> g[N]; int F[N]; void Main() { cin >> n; int mx = 0; for (int i = 1; i <= n; ++i) { int x, y; cin >> x >> y; ++x, ++y; g[y].push_back(x); mx = max(mx, y); } int Ans = 0; for (int i = 1; i <= mx; ++i) { F[i] = F[i - 1]; for (int j : g[i]) F[i] = max(F[i], F[j - 1] + i - j + 1); Ans = max(Ans, F[i]); } cout << Ans << endl; } \u8003\u8651\u5982\u679c\u6211\u4eec\u628a \\(R_i\\) \u653e\u5927\u5230 \\(10^9\\) \u6216\u8005\u66f4\u5927\u600e\u4e48\u505a\uff1f \u8fd8\u662f\u7c7b\u4f3c\uff0c\u5929\u5929\u7231\u6253\u5361\u5361\uff0c\u4e0d\u8fc7\u662f\u7b80\u5316\u7248\u3002 \u6ce8\u610f\u5230\u771f\u6b63\u6709\u7528\u7684\u72b6\u6001\u53ea\u6709 \\(F(L_i-1),F(R_i)\\) \u8fd9\u5927\u7ea6 \\(2N\\) \u4e2a\u3002 \u90a3\u4e48\u6211\u4eec\u7c7b\u4f3c\u79bb\u6563\u5316\u7684\uff0c\u5c06\u6240\u6709\u7684\u7684\u8fd9\u4e9b\u6709\u7528\u7684\u503c\u5904\u7406\uff0c\u5176\u4ed6\u7684\u76f4\u63a5\u590d\u5236\u524d\u9762\u7684\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; int L[N], R[N]; vector<int> g[2 * N]; int F[2 * N]; void Main() { cin >> n; int mx = 0; vector<int> S{-1}; for (int i = 1; i <= n; ++i) { cin >> L[i] >> R[i]; ++L[i], ++R[i]; S.push_back(L[i] - 1); S.push_back(R[i]); } sort(S.begin(), S.end()); S.erase(unique(S.begin(), S.end()), S.end()); #define get_id(x) (lower_bound(S.begin(), S.end(), x) - S.begin()) for (int i = 1; i <= n; ++i) g[get_id(R[i])].push_back(get_id(L[i] - 1)); int Ans = 0; for (int i = 1; i < S.size(); ++i) { F[i] = F[i - 1]; for (int j : g[i]) F[i] = max(F[i], F[j] + S[i] - S[j]); Ans = max(Ans, F[i]); } cout << Ans << endl; }","title":"P1868 \u9965\u997f\u7684\u5976\u725b"},{"location":"dp/sequence/#p1874","text":"\u6709\u4e00\u4e9b\u6709\u610f\u601d\u7684\u6280\u5de7\u3002 \u9996\u5148\u6211\u4eec\u8bbe \\(S(i,j)\\) \u8868\u793a \\([i,j]\\) \u7684\u6570\u4f4d\u7ec4\u6210\u7684\u6570\u5b57\u3002 \u8003\u8651\u8fd9\u4e2a\u4e1c\u897f\u5982\u4f55\u8ba1\u7b97\uff0c\u9996\u5148\u6ce8\u610f\u5230\u6211\u4eec\u8981\u7ec4\u6210\u7684\u6570\u6700\u5927\u662f \\(10^5\\) \uff0c\u90a3\u4e48\u8d85\u8fc7\u7684\u90fd\u6ca1\u610f\u4e49\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651\u53d6\u6a21\uff08\uff1f\uff09\u3002 \u5177\u4f53\u7684\uff0c\u6211\u4eec\u4ee4 \\(S(i,j)\\) \u8868\u793a \\([i,j]\\) \u7684\u6570\u5b57\u6a21\u4e00\u4e2a\u5927\u6570 \\(P\\) \uff08\u6bd4 \\(10^5\\) \u5927\u5373\u53ef\uff09\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7c7b\u4f3c\u5b57\u7b26\u4e32\u54c8\u5e0c\u7684\uff0c\u6c42\u51fa \\(S(i)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u6570\u7801\u7684\u6570\u5b57\uff0c\u7136\u540e\uff0c \\[ S(i,j)=S(j)-S(i-1)\\times P^{j-i+1} \\] \u5373\u53ef\uff0c\u8fd9\u662f\u5f88\u6709\u610f\u601d\u7684\u3002 \u7136\u540e\u8003\u8651\u6c42\u89e3\u7b54\u6848\uff0c\u8bbe \\(F(i,j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u6570\u4f4d\uff0c\u7ec4\u6210 \\(j\\) \u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u90a3\u4e48\u8f6c\u79fb\u53ea\u9700\u8981\u679a\u4e3e\u8fd9\u4e2a\u52a0\u53f7\u7684\u4f4d\u7f6e\u5373\u53ef\uff0c \\[ F(i,j)=\\min_{k<i}\\{F(k,j-S(k+1,i))+1\\} \\] \u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\uff0c\u6ce8\u610f\u5230\u8fd8\u662f \\(S(k+1,i)>j\\) \u4e4b\u540e\u5c31\u6ca1\u610f\u4e49\u4e86\u3002 \u56e0\u6b64\u53cd\u7740\u679a\u4e3e\u8d85\u8fc7\u5c31 break \u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int MOD = 1e9 + 7; int n, tar; string str; int R[50], S[50]; void init() { R[0] = 1, S[0] = 0; for (int i = 1; i <= n; ++i) { R[i] = R[i - 1] * 10ll % MOD; S[i] = (S[i - 1] * 10ll % MOD + str[i - 1] - '0') % MOD; } } int get(int l, int r) { return (S[r] - 1ll * S[l - 1] * R[r - l + 1] % MOD + MOD) % MOD; } int F[50][(int)1e5 + 10]; void Main() { cin >> str >> tar; n = str.size(), init(); memset(F, 0x3f, sizeof F); F[0][0] = -1; for (int i = 1; i <= n; ++i) for (int j = 1; j <= tar; ++j) { for (int k = i - 1; k >= 0; --k) { int t = get(k + 1, i); if (t > j) break; F[i][j] = min(F[i][j], F[k][j - t] + 1); } } int Ans = F[n][tar]; if (Ans + 1 >= 0x3f3f3f3f) Ans = -1; cout << Ans << endl; }","title":"P1874 \u5feb\u901f\u6c42\u548c"},{"location":"dp/sequence/#_11","text":"","title":"\u5176\u4ed6\u4f8b\u9898"},{"location":"dp/sequence/#_12","text":"","title":"\u7b80\u5355\u9898"},{"location":"dp/sequence/#p1095-noip2007","text":"\u6ce8\u610f\u5230\uff0c\u5982\u679c\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u9b54\u6cd5\u3001\u7b49\u7740\u6062\u590d\u7684\u8bdd\uff0c\u5e73\u5747\u7684\u6bcf\u79d2\u79fb\u52a8\u662f\u4e0d\u4f18\u4e8e\u76f4\u63a5\u8d70\u7684\u3002 \u56e0\u6b64\uff0c\u7b54\u6848\u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u4e3a\uff0c\u82b1\u5149\u9b54\u6cd5\uff0c\u7136\u540e\u7b49\u4e00\u5b9a\u65f6\u95f4\u540e\u4e00\u76f4\u8d70\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void Main() { cin >> M >> S >> T; for (int i = 1; i <= T; ++i) { if (M >= 10) F[i] = F[i - 1] + 60, M -= 10; else F[i] = F[i - 1], M += 4; } for (int i = 1; i <= T; ++i) { if (F[i] < F[i - 1] + 17) F[i] = F[i - 1] + 17; if (F[i] >= S) { cout << \"Yes\" << endl; cout << i << endl; return; } } cout << \"No\" << endl; cout << F[T] << endl; } \u4e0b\u9762\u7684 F[i] < F[i - 1] + 17 \u4e00\u5b9a\u4f1a\u4ece\u67d0\u4e00\u4e2a\u70b9\u5f00\u59cb\u4e00\u76f4\u6267\u884c\uff0c\u56e0\u6b64\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\u3002","title":"P1095 [NOIP2007 \u666e\u53ca\u7ec4] \u5b88\u671b\u8005\u7684\u9003\u79bb"},{"location":"dp/sequence/#p1650","text":"\u6ce8\u610f\u5230\u7530\u5fcc\u51fa\u9a6c\uff0c\u4e00\u5b9a\u662f\u6700\u5f3a\u7684\u51e0\u4e2a\u52a0\u4e0a\u6700\u5f31\u7684\u51e0\u4e2a\u3002 \u5176\u4e2d\u5f3a\u7684\u7528\u4e8e\u83b7\u80dc\u5f97\u5206\uff0c\u5f31\u7684\u7528\u4e8e\u6478\u9c7c\u6df7\u8f6e\u6570\u8ba9\u5f3a\u7684\u5f97\u5206\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651 DP\uff0c\u4ee4 \\(F(i,j)\\) \u8868\u793a\uff1a \u8fdb\u884c\u4e86 \\(i\\) \u8f6e\uff0c\u7530\u5fcc\u4ece\u5f3a\u7684\u51fa\u4e86 \\(j\\) \u4e2a\u7684\u6700\u5927\u5206\u6570\u3002 \u8003\u8651\u7b2c \\(i\\) \u4e2a\u7530\u5fcc\u51fa\u4ec0\u4e48\uff0c\u8ba8\u8bba\u5373\u53ef\uff0c\u8f6c\u79fb\uff1a \\[ F(i,j)=\\max\\{F(i-1,j)+w(i,n-(i-j)+1),F(i-1,j-1)+w(i,j)\\} \\] \u5176\u4e2d \\(w(i,j)\\) \u8868\u793a\u9f50\u738b\u7684\u7b2c \\(i\\) \u5339\u9a6c\u5bf9\u7530\u5fcc\u7684\u7b2c \\(j\\) \u5339\u9a6c\u7684\u5f97\u5206\u3002 \u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal O(N^2)\\) \u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void Main() { cin >> n; for (int i = 1; i <= n; ++i) cin >> A[i]; for (int i = 1; i <= n; ++i) cin >> B[i]; sort(A + 1, A + n + 1); sort(B + 1, B + n + 1); for (int i = 1; i <= n; ++i) { F[i][0] = F[i - 1][0] + G(i, n - i + 1); F[i][i] = F[i - 1][i - 1] + G(i, i); for (int j = 1; j < i; ++j) F[i][j] = max(F[i - 1][j] + G(i, n - (i - j) + 1), F[i - 1][j - 1] + G(i, j)); } int Ans = -1e9; for (int i = 0; i <= n; ++i) Ans = max(Ans, F[n][i]); cout << Ans << endl; }","title":"P1650 \u7530\u5fcc\u8d5b\u9a6c"},{"location":"dp/sequence/#p1435-ioi2000","text":"\u8fd9\u9898\u4e5f\u6709\u533a\u95f4 DP \u505a\u6cd5\u3002 \u6ce8\u610f\u5230\u7b54\u6848\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u51cf\u53bb\u6700\u957f\u56de\u6587\u5b50\u4e32\u3002 \u8003\u8651\u5982\u4f55\u6c42\u6700\u957f\u56de\u6587\u5b50\u4e32\uff0c\u5bb9\u6613\u60f3\u5230\u662f\u5c06\u5b57\u7b26\u4e32\u9006\u5e8f\u540e\u6c42 LCS \u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int F[1010][1010]; // LCS: a.size() == b.size() int Main(string a, string b) { int n = a.size(); memset(F, 0, sizeof F); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) if (a[i - 1] == b[j - 1]) F[i][j] = F[i - 1][j - 1] + 1; else F[i][j] = max(F[i][j - 1], F[i - 1][j]); return F[n][n]; } int Main(string a) { string b(a); reverse(begin(b), end(b)); return a.size() - Main(a, b); } void Main() { string str; cin >> str; cout << Main(str) << endl; }","title":"P1435 [IOI2000] \u56de\u6587\u5b57\u4e32"},{"location":"dp/sequence/#_13","text":"","title":"\u4e2d\u6863\u9898"},{"location":"dp/sequence/#cf1446b-catching-cheaters","text":"\u6ce8\u610f\u5230\u7c7b\u4f3c\u4e8e\u53cc\u5e8f\u5217\u6a21\u578b\uff0c\u6211\u4eec\u8bb0 \\(F(i,j)\\) \u8868\u793a \\(A[1\\dots i]\\) \u548c \\(B[1\\dots j]\\) \u7684\u6700\u5927\u4ef7\u503c\uff0c\u94a6\u5b9a \\(A(i)\\) \u548c \\(B(j)\\) \u5fc5\u987b\u9009\u62e9\u3002\u5bb9\u6613\u5199\u51fa\uff1a \\[ F(i,j)= \\begin{cases} F(i-1,j-1)+2&\\text{if $A_i=B_j$}\\\\ \\max\\{0,F(i-1,j)-1,F(i,j-1)-1\\}&\\text{otherwise.} \\end{cases} \\] \u76f4\u63a5\u5b9e\u73b0\u5373\u53ef\u3002","title":"CF1446B Catching Cheaters"},{"location":"dp/sequence/#p3558-poi2013-baj-bytecomputer","text":"\u9996\u5148\u6ce8\u610f\u5230\u53ea\u9700\u8981\u5355\u8c03\u4e0d\u964d\uff0c\u56e0\u6b64\u8ba9\u5e8f\u5217\u51fa\u73b0 \\(-2,2\\) \u7b49\u4e00\u5b9a\u4e0d\u4f18\u3002 \u56e0\u6b64\u8003\u8651\u8bbe \\(F(i,-1/0/1)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5b57\u7b26\uff0c \u8ba9\u7b2c \\(i\\) \u4e2a\u53d8\u4e3a \\(-1/0/1\\) \u4e14\u524d\u9762\u5355\u8c03\u4e0d\u964d\u7684\u6700\u5c0f\u6b21\u6570\u3002 \u8f6c\u79fb\uff0c\u82e5 \\(A_i=-1\\) \uff0c \\[ \\begin{aligned} F(i,-1)&=F(i-1,-1)\\\\ F(i,0)&=\\inf\\\\ F(i,1)&=F(i-1,1)+2 \\end{aligned} \\] \u82e5 \\(A_i=0\\) \uff0c \\[ \\begin{aligned} F(i,-1)&=F(i-1,-1)+1\\\\ F(i,0)&=\\min\\{F(i-1,0),F(i-1,-1)\\}\\\\ F(i,1)&=F(i-1,1)+1 \\end{aligned} \\] \u82e5 \\(A_i=1\\) \uff0c \\[ \\begin{aligned} F(i,-1)&=F(i-1,-1)+2\\\\ F(i,0)&=F(i-1,-1)+1\\\\ F(i,1)&=\\min\\{F(i-1,-1),F(i-1,0),F(i-1,1)\\} \\end{aligned} \\] \u8fd9\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u6ce8\u610f\u7279\u5224 \\(i=1\\) \u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; struct node { int a[3]; int &operator [](int x) { return a[x + 1]; } } F[N]; void Main() { cin >> n; F[1][-1] = 1e9; F[1][0] = 1e9; F[1][1] = 1e9; int x; cin >> x; F[1][x] = 0; for (int i = 2; i <= n; ++i) { cin >> x; if (x == -1) { F[i][-1] = F[i - 1][-1]; F[i][0] = 1e9; F[i][1] = F[i - 1][1] + 2; } if (x == 0) { F[i][-1] = F[i - 1][-1] + 1; F[i][0] = min(F[i - 1][0], F[i - 1][-1]); F[i][1] = F[i - 1][1] + 1; } if (x == 1) { F[i][-1] = F[i - 1][-1] + 2; F[i][0] = F[i - 1][-1] + 1; F[i][1] = min({F[i - 1][-1], F[i - 1][0], F[i - 1][1]}); } } int ans = min({F[n][-1], F[n][0], F[n][1]}); if (ans >= 1e9) { puts(\"BRAK\"); return; } cout << ans << endl; }","title":"P3558 [POI2013] BAJ-Bytecomputer"},{"location":"dp/opt/mono/","text":"\u5355\u8c03\u6570\u636e\u7ed3\u6784\u4f18\u5316 \u00b6 \u5495\u5495\u5495\u3002 \u6700\u5927\u5b57\u6bb5\u548c\u95ee\u9898 \u00b6 \u6211\u4eec\u5c06\u95ee\u9898\u62c6\u89e3\uff0c\u5206\u522b\u8003\u8651\u4e0a\u4e0b\u754c\u3002 \u5904\u7406\u957f\u5ea6\u4e0b\u754c \u00b6 \u8003\u8651\u7c7b\u4f3c\u6700\u5927\u5b57\u6bb5\u548c\u7684\u65b9\u6cd5\u4e00\uff1a \\[ F(x)=\\max_{y<x}\\{S(x)-S(y)\\}=S(x)-\\min_{y<x}S(y) \\] \u6211\u4eec\u52a0\u4e0a\u957f\u5ea6\u4e0b\u754c\u8981\u6c42\uff0c\u6ce8\u610f\u5230 \\(x-y\\) \u5c31\u662f\u957f\u5ea6\uff0c \\[ F(x)=S(x)-\\min_{x-y\\ge L}S(y)=S(x)-\\min_{y\\le x-L}S(y) \\] \u6211\u4eec\u679a\u4e3e \\(x\\) \uff0c\u5c06 \\(y=x-L\\) \u7684 \\(S(y)\\) \u52a0\u5165\uff0c\u6253\u64c2\u53f0\u7ef4\u62a4\u6700\u5c0f\u503c\u5373\u53ef\u3002 \u5904\u7406\u957f\u5ea6\u4e0a\u754c \u00b6 \u7c7b\u4f3c\u7684\uff0c \\[ F(x)=S(x)-\\min_{x-y\\le R}S(y)=S(x)-\\min_{y\\ge x-R}S(y) \\] \u6ce8\u610f\u5230\u662f\u7ecf\u5178\u7684\u5355\u8c03\u961f\u5217\u4f18\u5316\u8f6c\u79fb\u7684\u5f62\u5f0f\u3002 \u5b8c\u6574\u7684\u957f\u5ea6\u9650\u5236 \u00b6 \u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\uff0c \\[ F(x)=S(y)-\\min_{L\\le x-y\\le R}S(y)=S(x)-\\min_{x-R\\le y\\le x-L}S(y) \\] \u6bcf\u6b21\u679a\u4e3e\u52a0\u5165 \\(y=x-L\\) \u7ef4\u62a4\u5355\u8c03\u961f\u5217\uff0c\u8f6c\u79fb\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N)\\) \u7684\u3002","title":"\u5355\u8c03\u6570\u636e\u7ed3\u6784\u4f18\u5316"},{"location":"dp/opt/mono/#_1","text":"\u5495\u5495\u5495\u3002","title":"\u5355\u8c03\u6570\u636e\u7ed3\u6784\u4f18\u5316"},{"location":"dp/opt/mono/#_2","text":"\u6211\u4eec\u5c06\u95ee\u9898\u62c6\u89e3\uff0c\u5206\u522b\u8003\u8651\u4e0a\u4e0b\u754c\u3002","title":"\u6700\u5927\u5b57\u6bb5\u548c\u95ee\u9898"},{"location":"dp/opt/mono/#_3","text":"\u8003\u8651\u7c7b\u4f3c\u6700\u5927\u5b57\u6bb5\u548c\u7684\u65b9\u6cd5\u4e00\uff1a \\[ F(x)=\\max_{y<x}\\{S(x)-S(y)\\}=S(x)-\\min_{y<x}S(y) \\] \u6211\u4eec\u52a0\u4e0a\u957f\u5ea6\u4e0b\u754c\u8981\u6c42\uff0c\u6ce8\u610f\u5230 \\(x-y\\) \u5c31\u662f\u957f\u5ea6\uff0c \\[ F(x)=S(x)-\\min_{x-y\\ge L}S(y)=S(x)-\\min_{y\\le x-L}S(y) \\] \u6211\u4eec\u679a\u4e3e \\(x\\) \uff0c\u5c06 \\(y=x-L\\) \u7684 \\(S(y)\\) \u52a0\u5165\uff0c\u6253\u64c2\u53f0\u7ef4\u62a4\u6700\u5c0f\u503c\u5373\u53ef\u3002","title":"\u5904\u7406\u957f\u5ea6\u4e0b\u754c"},{"location":"dp/opt/mono/#_4","text":"\u7c7b\u4f3c\u7684\uff0c \\[ F(x)=S(x)-\\min_{x-y\\le R}S(y)=S(x)-\\min_{y\\ge x-R}S(y) \\] \u6ce8\u610f\u5230\u662f\u7ecf\u5178\u7684\u5355\u8c03\u961f\u5217\u4f18\u5316\u8f6c\u79fb\u7684\u5f62\u5f0f\u3002","title":"\u5904\u7406\u957f\u5ea6\u4e0a\u754c"},{"location":"dp/opt/mono/#_5","text":"\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\uff0c \\[ F(x)=S(y)-\\min_{L\\le x-y\\le R}S(y)=S(x)-\\min_{x-R\\le y\\le x-L}S(y) \\] \u6bcf\u6b21\u679a\u4e3e\u52a0\u5165 \\(y=x-L\\) \u7ef4\u62a4\u5355\u8c03\u961f\u5217\uff0c\u8f6c\u79fb\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(N)\\) \u7684\u3002","title":"\u5b8c\u6574\u7684\u957f\u5ea6\u9650\u5236"},{"location":"ds/ds/","text":"\u6570\u636e\u7ed3\u6784 \u00b6 \u6570\u636e\u7ed3\u6784\u5c31\u662f\u6570\u636e\u7ed3\u6784\u3002 \u5495\u5495\u5495\u3002","title":"\u6570\u636e\u7ed3\u6784"},{"location":"ds/ds/#_1","text":"\u6570\u636e\u7ed3\u6784\u5c31\u662f\u6570\u636e\u7ed3\u6784\u3002 \u5495\u5495\u5495\u3002","title":"\u6570\u636e\u7ed3\u6784"},{"location":"ds/dsu/dsu1/","text":"\u666e\u901a\u5e76\u67e5\u96c6 \u00b6 \u5e76\u67e5\u96c6 \u00b6 \u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u7528\u4e8e\u7ba1\uf9e4\u5143\u7d20\u6240\u5c5e\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u68ee\uf9f4\u3002 \u5e76\u67e5\u96c6\u4e2d\uff0c\u6bcf\u68f5\u6811\u8868\u793a\u4e00\u4e2a\u96c6\u5408\uff0c\u6811\u4e2d\u7684\u8282\u70b9\u8868\u793a\u5bf9\u5e94\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002 \u5176\u601d\u60f3\u662f\uff0c\u628a\u96c6\u5408\u5c5e\u6027\u7ed1\u5b9a\u5230\u6839\u8282\u70b9\u4e0a\uff0c\u907f\u514d\u591a\u4f59\u7684\u5904\u7406\uff0c\u56e0\u6b64\u4e00\u822c\u96be\u4ee5\u5206\u79bb\u3002 \u5b9e\u73b0 \u00b6 \u5e76\u67e5\u96c6\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a \u5408\u5e76\uff08Union\uff09\uff1a\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u5408\u5e76\u5bf9\u5e94\u7684\u6811\uff09\uff1b \u67e5\u8be2\uff08Find\uff09\uff1a\u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u67e5\u8be2\u5bf9\u5e94\u7684\u6811\u7684\u6839\u8282\u70b9\uff09\u3002 \u6734\u7d20 \u00b6 class union_find { private: vector<int> fa; public: union_find() = delete; union_find(const size_t N): fa(N) { iota(fa.begin(), fa.end(), 0); } int find(int x) { return x == fa[x] ? x : find(fa[x]); } bool connected(int u, int v) { return find(u) == find(v); } void unite(int u, int v) { fa[find(u)] = find(v); } }; \u8def\u5f84\u538b\u7f29 \u00b6 \u4e00\u4e2a\u4e0d\u901a\u7528\u7684\u4f18\u5316\uff0c\u6211\u4eec\u628a\u4efb\u610f\u4e00\u4e2a\u975e\u6839\u8282\u70b9\u76f4\u63a5\u5408\u5e76\u5230\u5b83\u7684\u6839\u4e0a\u3002 class union_find { private: vector<int> fa; public: union_find() = delete; union_find(const size_t N): fa(N) { iota(fa.begin(), fa.end(), 0); } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } bool connected(int u, int v) { return find(u) == find(v); } void unite(int u, int v) { fa[find(u)] = find(v); } }; \u975e\u5e38\u597d\u5199\uff0c\u4f46\u662f\u5bf9\u4e8e\u53ef\u64a4\u9500\u7b49\u5c31\u65e0\u6cd5\u538b\u7f29\u4e86\u3002 \u542f\u53d1\u5f0f\u5408\u5e76\u548c\u6309\u79e9\u5408\u5e76 \u00b6 \u5408\u5e76\u65f6\uff0c\u9009\u62e9\u54ea\u68f5\u6811\u7684\u6839\u8282\u70b9\u4f5c\u4e3a\u65b0\u6811\u7684\u6839\u8282\u70b9\u4f1a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u590d\u6742\u5ea6\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8282\u70b9\u8f83\u5c11\u6216\u6df1\u5ea6\u8f83\u5c0f\u7684\u6811\u8fde\u5230\u53e6\u4e00\u68f5\uff0c\u4ee5\u514d\u53d1\u751f\u9000\u5316\u3002 \u5176\u4e2d\uff0c\u6309\u7167\u8282\u70b9\u4e2a\u6570\u5408\u5e76\uff0c\u79f0\u4e3a\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u7ef4\u62a4\u6811\u7684\u5927\u5c0f\uff09\u3002 \u800c\u6309\u7167\u6df1\u5ea6\uff08\u79f0\u4e3a\u79e9\uff09\u5408\u5e76\u7684\uff0c\u79f0\u4e3a\u6309\u79e9\u5408\u5e76\uff08\u7ef4\u62a4\u6811\u7684\u9ad8\u5ea6\uff09\u3002 \u4e00\u5b9a\u7a0b\u5ea6\u4e0a\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u4f1a\u88ab\u5361\uff0c\u4f46\u662f\u6309\u79e9\u5408\u5e76\u4f1a\u6bd4\u8f83\u96be\u5199\u3002 class union_find { private: vector<int> fa, siz; public: union_find() = delete; union_find(int N): fa(N), siz(N, 1) { iota(fa.begin(), fa.end(), 0); } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } bool connected(int u, int v) { return find(u) == find(v); } void unite(int u, int v) { u = find(u), v = find(v); if (u == v) return; if (siz[u] > siz[v]) swap(u, v); fa[u] = v, siz[v] += siz[u]; } }; \u6309\u79e9\u5408\u5e76\uff0c class union_find { private: vector<int> fa, dep; public: union_find() = delete; union_find(int N): fa(N), dep(N, 1) { iota(fa.begin(), fa.end(), 0); } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } bool connected(int u, int v) { return find(u) == find(v); } void unite(int u, int v) { u = find(u), v = find(v); if (u == v) return; if (dep[u] > dep[v]) swap(u, v); fa[u] = v; if (dep[u] == dep[v]) ++dep[v]; } }; \u6ce8\uff1a\u56e0\u4e3a\u8def\u5f84\u538b\u7f29\u7684\u5b58\u5728\uff0c\u6309\u79e9\u5408\u5e76\u6ca1\u6709\u592a\u5927\u4f18\u52bf\uff0c\u4f46\u662f\u5728\u65e0\u6cd5\u8def\u5f84\u538b\u7f29\u7684\u65f6\u5019\uff0c\u6309\u79e9\u5408\u5e76\u4f3c\u4e4e\u4e5f\u4f18\u52bf\u4e0d\u5927\u3002 \u9644\uff1a\u4e0d\u90a3\u4e48\u51c6\u7684\u8bc4\u6d4b\u8bb0\u5f55\uff0c \u65e0 \u542f\u53d1\u5f0f\u5408\u5e76 \u6309\u79e9\u5408\u5e76 \u65e0 TLE 5000ms AC 32ms AC 32ms \u8def\u5f84\u538b\u7f29 AC 31ms AC 32ms AC 31ms \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5982\u679c\u53ea\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u6216\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5355\u6b21 \\(\\mathcal O(\\log n)\\) \u7684\u3002 \u5982\u679c\u540c\u65f6\u4f7f\u7528\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5355\u6b21 \\(\\mathcal O(\\alpha(n))\\) \u7684\uff0c\u53ef\u4ee5\u8fd1\u4f3c\u770b\u6210\u5355\u6b21 \\(\\mathcal O(1)\\) \u3002 \u4f8b\u9898 \u00b6 AT_abc238_e [ABC238E] Range Sums \u00b6 \u9898\u76ee\u63cf\u8ff0\uff1a\u6709\u4e00\u4e2a\u957f\u4e3a \\(N\\) \u7684\u5e8f\u5217\uff0c\u5224\u65ad\u6839\u636e \\(Q\\) \u4e2a\u533a\u95f4 \\([l_i,r_i]\\) \u7684\u548c\uff0c\u662f\u5426\u80fd\u786e\u5b9a\u6574\u4e2a\u5e8f\u5217\u7684\u5143\u7d20\u548c\u3002 \u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5f53\u786e\u5b9a\u4e86 \\([l,r]\\) \u7684\u548c\uff0c\u6211\u4eec\u5176\u5b9e\u5df2\u7ecf\u786e\u5b9a\u4e86 \\(S_r-S_{l-1}\\) \u7684\u503c\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u7ecf\u8fc7\u82e5\u5e72\u6b21\u4f20\u9012\uff0c\u5982\u679c\u80fd\u4ece \\(S_N\\) \u8f6c\u79fb\u5230 \\(S_0\\) \uff0c\u90a3\u4e48\u5c31\u662f\u53ef\u884c\u7684\u3002 \u8fd9\u5c31\u662f\u4e00\u4e2a\u5e76\u67e5\u96c6\u677f\u5b50\u4e86\uff0c\u4ee3\u7801\u7565\u3002 P1955 [NOI2015] \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 \u00b6 \u6709\u82e5\u5e72\u7ec4\u6761\u4ef6\uff0c\u53ef\u80fd\u4e3a \\(a_i=a_j\\) \u6216 \\(a_i\\neq a_j\\) \uff0c\u8bf7\u5224\u65ad\u662f\u5426\u5408\u6cd5\u3002 \u6ce8\u610f\u5230\u6211\u4eec\u5148\u628a\u7b49\u4e8e\u7684 unite \u8d77\u6765\uff0c\u7136\u540e\u518d\u68c0\u67e5\u4e0d\u7b49\u4e8e\u7684\u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002 \u79bb\u6563\u5316\u53ef\u4ee5\u4f7f\u7528 umap \u590d\u6742\u5ea6\u4f4e\uff08\u5982\u679c\u662f CF \u5efa\u8bae\u4f7f\u7528 map\uff09\uff08\u3002 P1455 \u642d\u914d\u8d2d\u4e70 \u00b6 \u7ef4\u62a4\u96c6\u5408 \\(c,w\\) \u7684\u548c\uff0c\u8fdb\u884c 01 \u80cc\u5305\u3002 \u8fc7\u4e8e\u677f\u5b50\uff0c\u89e3\u6790\u7565\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; struct pack01 { int n, v; vector<int> c, w; pack01() = delete; pack01(int v, vector<int> c, vector<int> w): n(c.size()), v(v), c(c), w(w), dp(v + 1) {} vector<int> dp; int calc() { for (int i = 0; i < n; ++i) for (int j = v; j >= c[i]; --j) dp[j] = max(dp[j], dp[j - c[i]] + w[i]); return dp[v]; } }; signed main() { int n, m, v; cin >> n >> m >> v; vector<int> c(n + 1), w(n + 1), fa(n + 1); for (int i = 1; i <= n; ++i) cin >> c[i] >> w[i], fa[i] = i; // dsu function<int(int)> getfa = [&] (int x) { if (x == fa[x]) return x; return fa[x] = getfa(fa[x]); }; auto unite = [&] (int x, int y) { x = getfa(x), y = getfa(y); if (x == y) return; fa[x] = y, c[y] += c[x], w[y] += w[x]; }; while (m--) { int x, y; cin >> x >> y; unite(x, y); } vector<int> ct, wt; for (int i = 1; i <= n; ++i) { if (i != fa[i]) continue; ct.push_back(c[i]), wt.push_back(w[i]); } pack01 solev(v, ct, wt); cout << solev.calc() << endl; return 0; } P1197 [JSOI2008] \u661f\u7403\u5927\u6218 \u00b6 \u6bcf\u6b21\u6253\u6389\u56fe\u4e2d\u7684\u51e0\u4e2a\u70b9\uff0c\u8be2\u95ee\u8fde\u901a\u5757\u6570\u91cf\u3002 \u6ce8\u610f\u5230\u5e76\u67e5\u96c6\u53ef\u4ee5\u5feb\u901f\u67e5\u8be2\u8fde\u901a\u5757\u6570\u91cf\uff0c\u4f46\u662f\u5f88\u96be\u652f\u6301\u5220\u9664\u64cd\u4f5c\u3002 \u4f46\u662f\u5e76\u67e5\u96c6\u53ef\u4ee5\u5f88\u5feb\u7684\u5b8c\u6210\u52a0\u5165\uff0c\u56e0\u6b64\u6211\u4eec\u6b63\u96be\u5219\u53cd\u3002 \u5148\u628a\u88ab\u6253\u6389\u7684\u70b9\u4e00\u53e3\u6c14\u6253\u6389\uff0c\u5904\u7406\u8fde\u901a\u5757\uff1b \u4ece\u540e\u5f80\u524d\u52a0\u5165\u88ab\u6253\u6389\u7684\u70b9\uff0c\u8bb0\u5f55\u8fde\u901a\u5757\u6570\u91cf\u3002 \u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff0c\u5b9e\u73b0\u662f\u5f88\u7b80\u5355\u7684\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 4e5 + 10; int n, m; int hack[N]; bool hacked[N]; vector<int> g[N]; int fa[N], tot; int getfa(int x) { if (x == fa[x]) return x; return fa[x] = getfa(fa[x]); } void unite(int x, int y) { x = getfa(x), y = getfa(y); if (x != y) fa[x] = y, --tot; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m; tot = n; for (int i = 1; i <= n; ++i) fa[i] = i; for (int i = 0; i < m; ++i) { int u, v; cin >> u >> v; ++u, ++v; g[u].push_back(v); g[v].push_back(u); } int k; cin >> k; for (int i = 0; i < k; ++i) { cin >> hack[i]; hacked[++hack[i]] = true; } for (int i = 1; i <= n; ++i) { if (hacked[i]) continue; if (!g[i].empty()) for (int j : g[i]) { if (hacked[j]) continue; unite(i, j); } } vector<int> ans(k + 1); ans[k] = tot - k; for (int i = k - 1; ~i; --i) { int x = hack[i]; hacked[x] = 0; if (!g[x].empty()) for (int y : g[x]) { if (hacked[y]) continue; unite(x, y); } ans[i] = tot - i; } for (int i : ans) cout << i << endl; return 0; }","title":"\u666e\u901a\u5e76\u67e5\u96c6"},{"location":"ds/dsu/dsu1/#_1","text":"","title":"\u666e\u901a\u5e76\u67e5\u96c6"},{"location":"ds/dsu/dsu1/#_2","text":"\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u7528\u4e8e\u7ba1\uf9e4\u5143\u7d20\u6240\u5c5e\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u68ee\uf9f4\u3002 \u5e76\u67e5\u96c6\u4e2d\uff0c\u6bcf\u68f5\u6811\u8868\u793a\u4e00\u4e2a\u96c6\u5408\uff0c\u6811\u4e2d\u7684\u8282\u70b9\u8868\u793a\u5bf9\u5e94\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002 \u5176\u601d\u60f3\u662f\uff0c\u628a\u96c6\u5408\u5c5e\u6027\u7ed1\u5b9a\u5230\u6839\u8282\u70b9\u4e0a\uff0c\u907f\u514d\u591a\u4f59\u7684\u5904\u7406\uff0c\u56e0\u6b64\u4e00\u822c\u96be\u4ee5\u5206\u79bb\u3002","title":"\u5e76\u67e5\u96c6"},{"location":"ds/dsu/dsu1/#_3","text":"\u5e76\u67e5\u96c6\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a \u5408\u5e76\uff08Union\uff09\uff1a\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u5408\u5e76\u5bf9\u5e94\u7684\u6811\uff09\uff1b \u67e5\u8be2\uff08Find\uff09\uff1a\u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u67e5\u8be2\u5bf9\u5e94\u7684\u6811\u7684\u6839\u8282\u70b9\uff09\u3002","title":"\u5b9e\u73b0"},{"location":"ds/dsu/dsu1/#_4","text":"class union_find { private: vector<int> fa; public: union_find() = delete; union_find(const size_t N): fa(N) { iota(fa.begin(), fa.end(), 0); } int find(int x) { return x == fa[x] ? x : find(fa[x]); } bool connected(int u, int v) { return find(u) == find(v); } void unite(int u, int v) { fa[find(u)] = find(v); } };","title":"\u6734\u7d20"},{"location":"ds/dsu/dsu1/#_5","text":"\u4e00\u4e2a\u4e0d\u901a\u7528\u7684\u4f18\u5316\uff0c\u6211\u4eec\u628a\u4efb\u610f\u4e00\u4e2a\u975e\u6839\u8282\u70b9\u76f4\u63a5\u5408\u5e76\u5230\u5b83\u7684\u6839\u4e0a\u3002 class union_find { private: vector<int> fa; public: union_find() = delete; union_find(const size_t N): fa(N) { iota(fa.begin(), fa.end(), 0); } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } bool connected(int u, int v) { return find(u) == find(v); } void unite(int u, int v) { fa[find(u)] = find(v); } }; \u975e\u5e38\u597d\u5199\uff0c\u4f46\u662f\u5bf9\u4e8e\u53ef\u64a4\u9500\u7b49\u5c31\u65e0\u6cd5\u538b\u7f29\u4e86\u3002","title":"\u8def\u5f84\u538b\u7f29"},{"location":"ds/dsu/dsu1/#_6","text":"\u5408\u5e76\u65f6\uff0c\u9009\u62e9\u54ea\u68f5\u6811\u7684\u6839\u8282\u70b9\u4f5c\u4e3a\u65b0\u6811\u7684\u6839\u8282\u70b9\u4f1a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u590d\u6742\u5ea6\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8282\u70b9\u8f83\u5c11\u6216\u6df1\u5ea6\u8f83\u5c0f\u7684\u6811\u8fde\u5230\u53e6\u4e00\u68f5\uff0c\u4ee5\u514d\u53d1\u751f\u9000\u5316\u3002 \u5176\u4e2d\uff0c\u6309\u7167\u8282\u70b9\u4e2a\u6570\u5408\u5e76\uff0c\u79f0\u4e3a\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u7ef4\u62a4\u6811\u7684\u5927\u5c0f\uff09\u3002 \u800c\u6309\u7167\u6df1\u5ea6\uff08\u79f0\u4e3a\u79e9\uff09\u5408\u5e76\u7684\uff0c\u79f0\u4e3a\u6309\u79e9\u5408\u5e76\uff08\u7ef4\u62a4\u6811\u7684\u9ad8\u5ea6\uff09\u3002 \u4e00\u5b9a\u7a0b\u5ea6\u4e0a\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u4f1a\u88ab\u5361\uff0c\u4f46\u662f\u6309\u79e9\u5408\u5e76\u4f1a\u6bd4\u8f83\u96be\u5199\u3002 class union_find { private: vector<int> fa, siz; public: union_find() = delete; union_find(int N): fa(N), siz(N, 1) { iota(fa.begin(), fa.end(), 0); } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } bool connected(int u, int v) { return find(u) == find(v); } void unite(int u, int v) { u = find(u), v = find(v); if (u == v) return; if (siz[u] > siz[v]) swap(u, v); fa[u] = v, siz[v] += siz[u]; } }; \u6309\u79e9\u5408\u5e76\uff0c class union_find { private: vector<int> fa, dep; public: union_find() = delete; union_find(int N): fa(N), dep(N, 1) { iota(fa.begin(), fa.end(), 0); } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } bool connected(int u, int v) { return find(u) == find(v); } void unite(int u, int v) { u = find(u), v = find(v); if (u == v) return; if (dep[u] > dep[v]) swap(u, v); fa[u] = v; if (dep[u] == dep[v]) ++dep[v]; } }; \u6ce8\uff1a\u56e0\u4e3a\u8def\u5f84\u538b\u7f29\u7684\u5b58\u5728\uff0c\u6309\u79e9\u5408\u5e76\u6ca1\u6709\u592a\u5927\u4f18\u52bf\uff0c\u4f46\u662f\u5728\u65e0\u6cd5\u8def\u5f84\u538b\u7f29\u7684\u65f6\u5019\uff0c\u6309\u79e9\u5408\u5e76\u4f3c\u4e4e\u4e5f\u4f18\u52bf\u4e0d\u5927\u3002 \u9644\uff1a\u4e0d\u90a3\u4e48\u51c6\u7684\u8bc4\u6d4b\u8bb0\u5f55\uff0c \u65e0 \u542f\u53d1\u5f0f\u5408\u5e76 \u6309\u79e9\u5408\u5e76 \u65e0 TLE 5000ms AC 32ms AC 32ms \u8def\u5f84\u538b\u7f29 AC 31ms AC 32ms AC 31ms","title":"\u542f\u53d1\u5f0f\u5408\u5e76\u548c\u6309\u79e9\u5408\u5e76"},{"location":"ds/dsu/dsu1/#_7","text":"\u5982\u679c\u53ea\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u6216\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5355\u6b21 \\(\\mathcal O(\\log n)\\) \u7684\u3002 \u5982\u679c\u540c\u65f6\u4f7f\u7528\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5355\u6b21 \\(\\mathcal O(\\alpha(n))\\) \u7684\uff0c\u53ef\u4ee5\u8fd1\u4f3c\u770b\u6210\u5355\u6b21 \\(\\mathcal O(1)\\) \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"ds/dsu/dsu1/#_8","text":"","title":"\u4f8b\u9898"},{"location":"ds/dsu/dsu1/#at_abc238_e-abc238e-range-sums","text":"\u9898\u76ee\u63cf\u8ff0\uff1a\u6709\u4e00\u4e2a\u957f\u4e3a \\(N\\) \u7684\u5e8f\u5217\uff0c\u5224\u65ad\u6839\u636e \\(Q\\) \u4e2a\u533a\u95f4 \\([l_i,r_i]\\) \u7684\u548c\uff0c\u662f\u5426\u80fd\u786e\u5b9a\u6574\u4e2a\u5e8f\u5217\u7684\u5143\u7d20\u548c\u3002 \u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5f53\u786e\u5b9a\u4e86 \\([l,r]\\) \u7684\u548c\uff0c\u6211\u4eec\u5176\u5b9e\u5df2\u7ecf\u786e\u5b9a\u4e86 \\(S_r-S_{l-1}\\) \u7684\u503c\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u7ecf\u8fc7\u82e5\u5e72\u6b21\u4f20\u9012\uff0c\u5982\u679c\u80fd\u4ece \\(S_N\\) \u8f6c\u79fb\u5230 \\(S_0\\) \uff0c\u90a3\u4e48\u5c31\u662f\u53ef\u884c\u7684\u3002 \u8fd9\u5c31\u662f\u4e00\u4e2a\u5e76\u67e5\u96c6\u677f\u5b50\u4e86\uff0c\u4ee3\u7801\u7565\u3002","title":"AT_abc238_e [ABC238E] Range Sums"},{"location":"ds/dsu/dsu1/#p1955-noi2015","text":"\u6709\u82e5\u5e72\u7ec4\u6761\u4ef6\uff0c\u53ef\u80fd\u4e3a \\(a_i=a_j\\) \u6216 \\(a_i\\neq a_j\\) \uff0c\u8bf7\u5224\u65ad\u662f\u5426\u5408\u6cd5\u3002 \u6ce8\u610f\u5230\u6211\u4eec\u5148\u628a\u7b49\u4e8e\u7684 unite \u8d77\u6765\uff0c\u7136\u540e\u518d\u68c0\u67e5\u4e0d\u7b49\u4e8e\u7684\u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002 \u79bb\u6563\u5316\u53ef\u4ee5\u4f7f\u7528 umap \u590d\u6742\u5ea6\u4f4e\uff08\u5982\u679c\u662f CF \u5efa\u8bae\u4f7f\u7528 map\uff09\uff08\u3002","title":"P1955 [NOI2015] \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790"},{"location":"ds/dsu/dsu1/#p1455","text":"\u7ef4\u62a4\u96c6\u5408 \\(c,w\\) \u7684\u548c\uff0c\u8fdb\u884c 01 \u80cc\u5305\u3002 \u8fc7\u4e8e\u677f\u5b50\uff0c\u89e3\u6790\u7565\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; struct pack01 { int n, v; vector<int> c, w; pack01() = delete; pack01(int v, vector<int> c, vector<int> w): n(c.size()), v(v), c(c), w(w), dp(v + 1) {} vector<int> dp; int calc() { for (int i = 0; i < n; ++i) for (int j = v; j >= c[i]; --j) dp[j] = max(dp[j], dp[j - c[i]] + w[i]); return dp[v]; } }; signed main() { int n, m, v; cin >> n >> m >> v; vector<int> c(n + 1), w(n + 1), fa(n + 1); for (int i = 1; i <= n; ++i) cin >> c[i] >> w[i], fa[i] = i; // dsu function<int(int)> getfa = [&] (int x) { if (x == fa[x]) return x; return fa[x] = getfa(fa[x]); }; auto unite = [&] (int x, int y) { x = getfa(x), y = getfa(y); if (x == y) return; fa[x] = y, c[y] += c[x], w[y] += w[x]; }; while (m--) { int x, y; cin >> x >> y; unite(x, y); } vector<int> ct, wt; for (int i = 1; i <= n; ++i) { if (i != fa[i]) continue; ct.push_back(c[i]), wt.push_back(w[i]); } pack01 solev(v, ct, wt); cout << solev.calc() << endl; return 0; }","title":"P1455 \u642d\u914d\u8d2d\u4e70"},{"location":"ds/dsu/dsu1/#p1197-jsoi2008","text":"\u6bcf\u6b21\u6253\u6389\u56fe\u4e2d\u7684\u51e0\u4e2a\u70b9\uff0c\u8be2\u95ee\u8fde\u901a\u5757\u6570\u91cf\u3002 \u6ce8\u610f\u5230\u5e76\u67e5\u96c6\u53ef\u4ee5\u5feb\u901f\u67e5\u8be2\u8fde\u901a\u5757\u6570\u91cf\uff0c\u4f46\u662f\u5f88\u96be\u652f\u6301\u5220\u9664\u64cd\u4f5c\u3002 \u4f46\u662f\u5e76\u67e5\u96c6\u53ef\u4ee5\u5f88\u5feb\u7684\u5b8c\u6210\u52a0\u5165\uff0c\u56e0\u6b64\u6211\u4eec\u6b63\u96be\u5219\u53cd\u3002 \u5148\u628a\u88ab\u6253\u6389\u7684\u70b9\u4e00\u53e3\u6c14\u6253\u6389\uff0c\u5904\u7406\u8fde\u901a\u5757\uff1b \u4ece\u540e\u5f80\u524d\u52a0\u5165\u88ab\u6253\u6389\u7684\u70b9\uff0c\u8bb0\u5f55\u8fde\u901a\u5757\u6570\u91cf\u3002 \u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff0c\u5b9e\u73b0\u662f\u5f88\u7b80\u5355\u7684\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 4e5 + 10; int n, m; int hack[N]; bool hacked[N]; vector<int> g[N]; int fa[N], tot; int getfa(int x) { if (x == fa[x]) return x; return fa[x] = getfa(fa[x]); } void unite(int x, int y) { x = getfa(x), y = getfa(y); if (x != y) fa[x] = y, --tot; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m; tot = n; for (int i = 1; i <= n; ++i) fa[i] = i; for (int i = 0; i < m; ++i) { int u, v; cin >> u >> v; ++u, ++v; g[u].push_back(v); g[v].push_back(u); } int k; cin >> k; for (int i = 0; i < k; ++i) { cin >> hack[i]; hacked[++hack[i]] = true; } for (int i = 1; i <= n; ++i) { if (hacked[i]) continue; if (!g[i].empty()) for (int j : g[i]) { if (hacked[j]) continue; unite(i, j); } } vector<int> ans(k + 1); ans[k] = tot - k; for (int i = k - 1; ~i; --i) { int x = hack[i]; hacked[x] = 0; if (!g[x].empty()) for (int y : g[x]) { if (hacked[y]) continue; unite(x, y); } ans[i] = tot - i; } for (int i : ans) cout << i << endl; return 0; }","title":"P1197 [JSOI2008] \u661f\u7403\u5927\u6218"},{"location":"ds/dsu/dsu2/","text":"\u6269\u5c55\u57df\u5e76\u67e5\u96c6 \u00b6 \u6982\u5ff5 \u00b6 \u6269\u5c55\u57df\u5e76\u67e5\u96c6 \u7528\u4e8e\u7ef4\u62a4\u4e24\u7c7b\u53ca\u4ee5\u4e0a\u96c6\u5408\u7684\u8fde\u901a\u6027\u3002 \u5177\u4f53\u7684\uff0c\u6211\u4eec\u4e00\u822c\u5f00\u591a\u500d\u7a7a\u95f4\uff0c\u7528 \\(x,x+n,\\dots\\) \u8868\u793a\u540c\u4e00\u4e2a\u7269\u4f53\u7684\u4e0d\u540c\u5c5e\u6027\u3002 \u8fd9\u79cd\u7528\u591a\u4e2a\u57df\u8868\u793a\u540c\u4e00\u5143\u7d20\u4e0d\u540c\u5c5e\u6027\u7684\uff0c\u4e5f\u79f0\u4e3a \u79cd\u7c7b\u5e76\u67e5\u96c6 \u3002 \u4f8b\u9898 \u00b6 P1892 [BOI2003] \u56e2\u4f19 \u00b6 \u7ecf\u5178\u4f8b\u9898\uff1a P1892 [BOI2003] \u56e2\u4f19 \u3002 \u6211\u4eec\u7528 \\(F[1,N]\\) \u8868\u793a\u670b\u53cb\u57df\uff0c\u7528 \\(F[N+1,2N]\\) \u8868\u793a\u654c\u4eba\u57df\u3002 \u82e5 \\(x,y\\) \u662f\u670b\u53cb\uff0c\u90a3\u4e48\u76f4\u63a5\u8fde\u63a5 \\(\\langle x,y\\rangle\\) \uff0c\u8868\u793a\u4ed6\u4fe9\u662f\u670b\u53cb\uff1b \u82e5 \\(x,y\\) \u662f\u654c\u4eba\uff0c\u90a3\u4e48\u8fde\u63a5 \\(\\langle x,y+N\\rangle,\\langle x+N,y\\rangle\\) \uff0c\u8868\u793a\u654c\u4eba\u7684\u654c\u4eba\u662f\u670b\u53cb\u3002 \u4f8b\u5982 \\(A\\to B\\to C\\) \uff0c\u5176\u4e2d\u53ea\u6709 \\(B\\) \u662f\u654c\u4eba\u57df\u7684\uff0c\u90a3\u4e48 \\(A\\) \u654c\u4eba \\(B\\) \u7684\u654c\u4eba \\(C\\) \u5c31\u662f \\(A\\) \u7684\u670b\u53cb\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; struct dsu { vector<int> fa; dsu(int siz): fa(siz) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { return x == fa[x] ? x : fa[x] = getfa(fa[x]); } void unite(int x, int y) { fa[getfa(x)] = getfa(y); } }; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n, m; cin >> n >> m; dsu a(2 * n + 1); while (m--) { char op[3]; int x, y; cin >> op >> x >> y; if (op[0] == 'F') a.unite(x, y); else a.unite(x + n, y), a.unite(y + n, x); } int res = 0; for (int i = 1; i <= n; ++i) res += a.fa[i] == i; cout << res << endl; return 0; } P2024 [NOI2001] \u98df\u7269\u94fe \u00b6 \u4e00\u4e2a\u6bd4\u7ecf\u5178\u4f8b\u9898\u8fd8\u7ecf\u5178\u7684\u4f8b\u9898\uff1a P2024 [NOI2001] \u98df\u7269\u94fe \u3002 \u6211\u4eec\u53e6\uff0c \\(x\\) \u8868\u793a\u672c\u4f53\uff1b \\(x+n\\) \u8868\u793a \\(x\\) \u7684\u4e8b\u7269\u96c6\u5408\uff1b \\(x+2n\\) \u8868\u793a \\(x\\) \u7684\u5929\u654c\u96c6\u5408\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" struct dsu { vector<int> fa; dsu() = default; dsu(int siz): fa(siz) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { return x == fa[x] ? x : fa[x] = getfa(fa[x]); } void unite(int x, int y) { fa[getfa(x)] = getfa(y); } }; int n, k; dsu a; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> k; a = dsu(3 * n + 1); // x: >_< // x + n: x's food // x + 2 * n: x's enemy auto uni = [] (int x, int y) -> bool { if (a.getfa(x) == a.getfa(y + n)) return false; if (a.getfa(x) == a.getfa(y + 2 * n)) return false; a.unite(x, y), a.unite(x + n, y + n), a.unite(x + 2 * n, y + 2 * n); return true; }; auto eat = [] (int x, int y) -> bool { if (a.getfa(x) == a.getfa(y)) return false; if (a.getfa(x) == a.getfa(y + n)) return false; a.unite(x + n, y), a.unite(x, y + 2 * n), a.unite(x + 2 * n, y + n); return true; }; int ans = 0; while (k--) { int op, x, y; cin >> op >> x >> y; if (x > n || y > n) ++ans; else if (op == 1) ans += !uni(x, y); else if (op == 2) ans += !eat(x, y); } cout << ans << endl; return 0; } \u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\u6765\uff0c \u6269\u5c55\u57df\u5e76\u67e5\u96c6\uff0c\u4e00\u5b9a\u8981\u641e\u6e05\u695a\u8981\u5f00\u51e0\u4e2a\u7ef4\u5ea6\uff0c\u8fde\u8fb9\u5fc5\u987b\u8ba8\u8bba\u6e05\u695a\uff0c\u5c3d\u91cf\u591a\u8fde\uff1b \u4e00\u822c\u6765\u8bf4\uff0c\u901a\u5e38\u6709\u51e0\u4e2a\u7ef4\u5ea6\u5c31\u81f3\u5c11\u8981\u8fde\u51e0\u6761\u8fb9\u3002 P5937 [CEOI1999] Parity Game \u00b6 \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u8bbe \\(S\\) \u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\u7684\u524d\u7f00\u548c\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u7684 \\([l,r]\\) \u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u77e5\u9053\u4e86 \\(S_r-S_{l-1}\\) \u7684\u5947\u5076\u6027\u3002 \u6211\u4eec\u7528\u6269\u5c55\u57df\u5e76\u67e5\u96c6\uff0c \u82e5\u4e3a\u5076\u6570\uff0c\u8fde\u8fb9 \\(\\langle l,r\\rangle,\\langle l+n,r+n\\rangle\\) \uff0c\u8868\u793a\u8fd9\u4e24\u4e2a\u5947\u5076\u6027\u76f8\u540c\u3002 \u82e5\u4e3a\u5947\u6570\uff0c\u8fde\u8fb9 \\(\\langle l+n,r\\rangle,\\langle l,r+n\\rangle\\) \uff0c\u8868\u793a\u5947\u5076\u6027\u4e0d\u540c\u3002 \u5982\u679c\u8fde\u8fb9\u7684\u65f6\u5019\u53d1\u73b0\uff0c\u540c\u4e00\u7ec4\u5982\u679c\u51fa\u73b0\u4e86\u53e6\u4e00\u7ec4\u7684\u8fb9\uff0c\u90a3\u4e48\u5931\u6548\u3002 \u63d0\u524d\u79bb\u6563\u5316\u4e00\u4e0b\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" struct query_t { int l, r; bool iseven; }; struct dsu_t { vector<int> fa; dsu_t(int n): fa(n) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { return x == fa[x] ? x : fa[x] = getfa(fa[x]); } void unite(int l, int r) { fa[getfa(l)] = getfa(r); } } dsu(1e4 + 10); signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n, m; cin >> n >> m; vector<int> s(m * 2); vector<query_t> a(m); for (int i = 0; i < m; ++i) { int l, r; string op; cin >> l >> r >> op; --l; s[i] = l, s[i + m] = r; a[i] = (query_t){l, r, op == \"even\"}; } sort(s.begin(), s.end()); s.erase(unique(s.begin(), s.end()), s.end()); n = s.size(); #define getid(x) (lower_bound(s.begin(), s.end(), x) - s.begin() + 1) for (int i = 0; i < m; ++i) { int op = a[i].iseven; int l = getid(a[i].l), r = getid(a[i].r); // cout << \"MERGE \" << l << \" \" << r << \" \" << op << \" WA \" << n << endl; if (op == 1) { if (dsu.getfa(l) == dsu.getfa(r + n) || dsu.getfa(l + n) == dsu.getfa(r)) cout << i << endl, exit(0); dsu.unite(l, r), dsu.unite(l + n, r + n); } else { if (dsu.getfa(l) == dsu.getfa(r) || dsu.getfa(l + n) == dsu.getfa(r + n)) cout << i << endl, exit(0); dsu.unite(l, r + n), dsu.unite(l + n, r); } } cout << m << endl; return 0; }","title":"\u6269\u5c55\u57df\u5e76\u67e5\u96c6"},{"location":"ds/dsu/dsu2/#_1","text":"","title":"\u6269\u5c55\u57df\u5e76\u67e5\u96c6"},{"location":"ds/dsu/dsu2/#_2","text":"\u6269\u5c55\u57df\u5e76\u67e5\u96c6 \u7528\u4e8e\u7ef4\u62a4\u4e24\u7c7b\u53ca\u4ee5\u4e0a\u96c6\u5408\u7684\u8fde\u901a\u6027\u3002 \u5177\u4f53\u7684\uff0c\u6211\u4eec\u4e00\u822c\u5f00\u591a\u500d\u7a7a\u95f4\uff0c\u7528 \\(x,x+n,\\dots\\) \u8868\u793a\u540c\u4e00\u4e2a\u7269\u4f53\u7684\u4e0d\u540c\u5c5e\u6027\u3002 \u8fd9\u79cd\u7528\u591a\u4e2a\u57df\u8868\u793a\u540c\u4e00\u5143\u7d20\u4e0d\u540c\u5c5e\u6027\u7684\uff0c\u4e5f\u79f0\u4e3a \u79cd\u7c7b\u5e76\u67e5\u96c6 \u3002","title":"\u6982\u5ff5"},{"location":"ds/dsu/dsu2/#_3","text":"","title":"\u4f8b\u9898"},{"location":"ds/dsu/dsu2/#p1892-boi2003","text":"\u7ecf\u5178\u4f8b\u9898\uff1a P1892 [BOI2003] \u56e2\u4f19 \u3002 \u6211\u4eec\u7528 \\(F[1,N]\\) \u8868\u793a\u670b\u53cb\u57df\uff0c\u7528 \\(F[N+1,2N]\\) \u8868\u793a\u654c\u4eba\u57df\u3002 \u82e5 \\(x,y\\) \u662f\u670b\u53cb\uff0c\u90a3\u4e48\u76f4\u63a5\u8fde\u63a5 \\(\\langle x,y\\rangle\\) \uff0c\u8868\u793a\u4ed6\u4fe9\u662f\u670b\u53cb\uff1b \u82e5 \\(x,y\\) \u662f\u654c\u4eba\uff0c\u90a3\u4e48\u8fde\u63a5 \\(\\langle x,y+N\\rangle,\\langle x+N,y\\rangle\\) \uff0c\u8868\u793a\u654c\u4eba\u7684\u654c\u4eba\u662f\u670b\u53cb\u3002 \u4f8b\u5982 \\(A\\to B\\to C\\) \uff0c\u5176\u4e2d\u53ea\u6709 \\(B\\) \u662f\u654c\u4eba\u57df\u7684\uff0c\u90a3\u4e48 \\(A\\) \u654c\u4eba \\(B\\) \u7684\u654c\u4eba \\(C\\) \u5c31\u662f \\(A\\) \u7684\u670b\u53cb\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; struct dsu { vector<int> fa; dsu(int siz): fa(siz) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { return x == fa[x] ? x : fa[x] = getfa(fa[x]); } void unite(int x, int y) { fa[getfa(x)] = getfa(y); } }; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n, m; cin >> n >> m; dsu a(2 * n + 1); while (m--) { char op[3]; int x, y; cin >> op >> x >> y; if (op[0] == 'F') a.unite(x, y); else a.unite(x + n, y), a.unite(y + n, x); } int res = 0; for (int i = 1; i <= n; ++i) res += a.fa[i] == i; cout << res << endl; return 0; }","title":"P1892 [BOI2003] \u56e2\u4f19"},{"location":"ds/dsu/dsu2/#p2024-noi2001","text":"\u4e00\u4e2a\u6bd4\u7ecf\u5178\u4f8b\u9898\u8fd8\u7ecf\u5178\u7684\u4f8b\u9898\uff1a P2024 [NOI2001] \u98df\u7269\u94fe \u3002 \u6211\u4eec\u53e6\uff0c \\(x\\) \u8868\u793a\u672c\u4f53\uff1b \\(x+n\\) \u8868\u793a \\(x\\) \u7684\u4e8b\u7269\u96c6\u5408\uff1b \\(x+2n\\) \u8868\u793a \\(x\\) \u7684\u5929\u654c\u96c6\u5408\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" struct dsu { vector<int> fa; dsu() = default; dsu(int siz): fa(siz) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { return x == fa[x] ? x : fa[x] = getfa(fa[x]); } void unite(int x, int y) { fa[getfa(x)] = getfa(y); } }; int n, k; dsu a; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> k; a = dsu(3 * n + 1); // x: >_< // x + n: x's food // x + 2 * n: x's enemy auto uni = [] (int x, int y) -> bool { if (a.getfa(x) == a.getfa(y + n)) return false; if (a.getfa(x) == a.getfa(y + 2 * n)) return false; a.unite(x, y), a.unite(x + n, y + n), a.unite(x + 2 * n, y + 2 * n); return true; }; auto eat = [] (int x, int y) -> bool { if (a.getfa(x) == a.getfa(y)) return false; if (a.getfa(x) == a.getfa(y + n)) return false; a.unite(x + n, y), a.unite(x, y + 2 * n), a.unite(x + 2 * n, y + n); return true; }; int ans = 0; while (k--) { int op, x, y; cin >> op >> x >> y; if (x > n || y > n) ++ans; else if (op == 1) ans += !uni(x, y); else if (op == 2) ans += !eat(x, y); } cout << ans << endl; return 0; } \u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\u6765\uff0c \u6269\u5c55\u57df\u5e76\u67e5\u96c6\uff0c\u4e00\u5b9a\u8981\u641e\u6e05\u695a\u8981\u5f00\u51e0\u4e2a\u7ef4\u5ea6\uff0c\u8fde\u8fb9\u5fc5\u987b\u8ba8\u8bba\u6e05\u695a\uff0c\u5c3d\u91cf\u591a\u8fde\uff1b \u4e00\u822c\u6765\u8bf4\uff0c\u901a\u5e38\u6709\u51e0\u4e2a\u7ef4\u5ea6\u5c31\u81f3\u5c11\u8981\u8fde\u51e0\u6761\u8fb9\u3002","title":"P2024 [NOI2001] \u98df\u7269\u94fe"},{"location":"ds/dsu/dsu2/#p5937-ceoi1999-parity-game","text":"\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u8bbe \\(S\\) \u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\u7684\u524d\u7f00\u548c\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u7684 \\([l,r]\\) \u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u77e5\u9053\u4e86 \\(S_r-S_{l-1}\\) \u7684\u5947\u5076\u6027\u3002 \u6211\u4eec\u7528\u6269\u5c55\u57df\u5e76\u67e5\u96c6\uff0c \u82e5\u4e3a\u5076\u6570\uff0c\u8fde\u8fb9 \\(\\langle l,r\\rangle,\\langle l+n,r+n\\rangle\\) \uff0c\u8868\u793a\u8fd9\u4e24\u4e2a\u5947\u5076\u6027\u76f8\u540c\u3002 \u82e5\u4e3a\u5947\u6570\uff0c\u8fde\u8fb9 \\(\\langle l+n,r\\rangle,\\langle l,r+n\\rangle\\) \uff0c\u8868\u793a\u5947\u5076\u6027\u4e0d\u540c\u3002 \u5982\u679c\u8fde\u8fb9\u7684\u65f6\u5019\u53d1\u73b0\uff0c\u540c\u4e00\u7ec4\u5982\u679c\u51fa\u73b0\u4e86\u53e6\u4e00\u7ec4\u7684\u8fb9\uff0c\u90a3\u4e48\u5931\u6548\u3002 \u63d0\u524d\u79bb\u6563\u5316\u4e00\u4e0b\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" struct query_t { int l, r; bool iseven; }; struct dsu_t { vector<int> fa; dsu_t(int n): fa(n) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { return x == fa[x] ? x : fa[x] = getfa(fa[x]); } void unite(int l, int r) { fa[getfa(l)] = getfa(r); } } dsu(1e4 + 10); signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n, m; cin >> n >> m; vector<int> s(m * 2); vector<query_t> a(m); for (int i = 0; i < m; ++i) { int l, r; string op; cin >> l >> r >> op; --l; s[i] = l, s[i + m] = r; a[i] = (query_t){l, r, op == \"even\"}; } sort(s.begin(), s.end()); s.erase(unique(s.begin(), s.end()), s.end()); n = s.size(); #define getid(x) (lower_bound(s.begin(), s.end(), x) - s.begin() + 1) for (int i = 0; i < m; ++i) { int op = a[i].iseven; int l = getid(a[i].l), r = getid(a[i].r); // cout << \"MERGE \" << l << \" \" << r << \" \" << op << \" WA \" << n << endl; if (op == 1) { if (dsu.getfa(l) == dsu.getfa(r + n) || dsu.getfa(l + n) == dsu.getfa(r)) cout << i << endl, exit(0); dsu.unite(l, r), dsu.unite(l + n, r + n); } else { if (dsu.getfa(l) == dsu.getfa(r) || dsu.getfa(l + n) == dsu.getfa(r + n)) cout << i << endl, exit(0); dsu.unite(l, r + n), dsu.unite(l + n, r); } } cout << m << endl; return 0; }","title":"P5937 [CEOI1999] Parity Game"},{"location":"ds/dsu/dsu3/","text":"\u5e26\u6743\u5e76\u67e5\u96c6 \u00b6 \u6982\u5ff5 \u00b6 \u5e26\u6743\u5e76\u67e5\u96c6 \uff0c\u4e5f\u79f0\u4e3a \u8fb9\u5e26\u6743\u5e76\u67e5\u96c6 \u3002 \u6211\u4eec\u5728\u5e76\u67e5\u96c6\u7684\u8fb9\u4e0a\u5b9a\u4e49\u67d0\u79cd\u6743\u503c\uff0c\u4ece\u800c\u89e3\u51b3\uf901\u591a\u7684\u95ee\u9898\u3002 \u800c\u56e0\u4e3a\u8def\u5f84\u538b\u7f29\u7684\u5b58\u5728\uff0c\u6211\u4eec\u4e00\u822c\u8981\u5b9a\u4e49\u8fd9\u79cd\u6743\u503c\u5728\uf937\u5f84\u538b\u7f29\u65f6\u4ea7\u751f\u7684\u8fd0\u7b97\u3002 \u4f8b\u9898 \u00b6 P2024 [NOI2001] \u98df\u7269\u94fe \u00b6 \u4f60\u8bf4\u5f97\u5bf9\uff0c\u8fd9\u9053\u9898\u4e5f\u53ef\u4ee5\u7528\u5e26\u6743\u5e76\u67e5\u96c6\u6765\u505a\u3002 \u5728\u8fb9\u6743\u4e0a\u7ef4\u62a4\u6a21 3 \u610f\u4e49\u4e0b\u7684\u52a0\u6cd5\u7fa4\uff0c\u4ece\u6839\u5f00\u59cb\u8ba1\u7b97\u4e24\u4e2a\u70b9\u7684\u6df1\u5ea6\u5dee \\[ d=d(x)-d(y) \\] \\(d\\equiv0\\pmod3\\) \uff0c\u5219 \\(x,y\\) \u5c5e\u4e8e\u540c\u7c7b\uff1b \\(d\\equiv1\\pmod3\\) \uff0c\u5219 \\(x\\) \u5403 \\(y\\) \uff0c \\(x\\) \u662f \\(y\\) \u7684\u5929\u654c\uff1b \\(d\\equiv0\\pmod3\\) \uff0c\u5219 \\(y\\) \u5403 \\(x\\) \uff0c \\(y\\) \u662f \\(x\\) \u7684\u5929\u654c\uff1b \u5f53\u6211\u4eec\u5728\u8def\u5f84\u538b\u7f29\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u6211\u4eec\u8bb0\u5f55\u7684 \\(d(x)\\) \u8868\u793a\u7684\u662f \\(x\\) \u5230\u5176\u7236\u8282\u70b9\u7684\u8ddd\u79bb\uff0c \u90a3\u4e48\uff0c\u6211\u4eec\u5df2\u7ecf\u8dd1\u5b8c\u4e86\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u5148\uff0c\u5176\u7236\u8282\u70b9\u4e00\u5b9a\u662f\u76f4\u63a5\u63a5\u5728\u6839\u4e0a\u9762\u7684\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u65b0\u7684\u8ddd\u79bb\u76f4\u63a5\u4e3a\u5176\u7236\u8282\u70b9\u5230\u7956\u5148\uff08\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff09\u7684\u8ddd\u79bb\u52a0\u4e0a\u5176\u5230\u5176\u7236\u8282\u70b9\u7684\u8ddd\u79bb\u5373\u53ef\u3002 int getfa(int x) { if (x == fa[x]) return x; int t = getfa(fa[x]); d[x] = d[x] + d[fa[x]]; return fa[x] = t; } \u5408\u5e76\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u628a \\(x\\) \u5206\u652f\u63a5\u5728 \\(y\\) \u7684\u7956\u5148\u4e0a\uff0c\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff0c \u56e0\u4e3a\u5df2\u7ecf\u8def\u5f84\u538b\u7f29\u4e86\uff0c\u56e0\u6b64 \\(x,y\\) \u7684\u7236\u8282\u70b9\u4e00\u5b9a\u5c31\u662f\u6839\u8282\u70b9\u3002 \u82e5 \\(x,y\\) \u662f\u540c\u7c7b\uff0c\u5219\u5408\u5e76\u5176\u7236\u8282\u70b9\u65f6\u8981\u4fdd\u8bc1\u5176\u6df1\u5ea6\u76f8\u540c\uff0c\u4e8e\u662f\u53d6 \\(d(y)-d(x)\\) \uff1b \u82e5 \\(x\\) \u5403 \\(y\\) \uff0c\u90a3\u4e48\u8981\u4f7f \\(x\\) \u6bd4 \\(y\\) \u9ad8\u4e00\u7ea7\uff0c\u53d6 \\(d(y)-d(x)+1\\) \u3002 \u8fd9\u4e24\u4e2a\u6570\u7684\u672c\u8d28\u5c31\u662f\uff0c\u6211\u4eec\u518d\u5411\u4e0a\u5408\u5e76\u7684\u65f6\u5019\u8981\u52a0\u4e0a \\(d(x)\\) \uff0c\u5219\u53ef\u4ee5\u62b5\u6d88\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" struct dsu { vector<int> fa, d; dsu() = default; dsu(int siz): fa(siz), d(siz) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { if (x == fa[x]) return x; int t = getfa(fa[x]); d[x] = d[x] + d[fa[x]]; return fa[x] = t; } }; int n, k; dsu a; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> k; a = dsu(n + 1); auto uni = [] (int x, int y) -> bool { int px = a.getfa(x); int py = a.getfa(y); if (px != py) { a.fa[px] = py; a.d[px] = a.d[y] - a.d[x]; return true; } return ((a.d[x] - a.d[y]) % 3 + 3) % 3 == 0; }; auto eat = [] (int x, int y) -> bool { int px = a.getfa(x); int py = a.getfa(y); if (px != py) { a.fa[px] = py; a.d[px] = a.d[y] - a.d[x] + 1; return true; } return ((a.d[x] - a.d[y]) % 3 + 3) % 3 == 1; }; int ans = 0; while (k--) { int op, x, y; cin >> op >> x >> y; if (x > n || y > n) ++ans; else if (op == 1) ans += !uni(x, y); else if (op == 2) ans += !eat(x, y); } cout << ans << endl; return 0; } P1196 [NOI2002] \u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4 \u00b6 \u540c\u65f6\u7ef4\u62a4\u8fb9\u6743\u548c\u96c6\u5408\u5927\u5c0f\u3002 \u6ce8\u610f\u5230\u5982\u679c\u628a\u4e00\u4e2a\u961f\u5217 \\(A\\) \u63a5\u5230 \\(B\\) \uff0c\u76f8\u5f53\u4e8e \\(A\\) \u52a0\u4e0a\u8fb9\u6743\u4e3a\u96c6\u5408 \\(B\\) \u7684\u5927\u5c0f\uff0c\u76f4\u63a5\u63a5\u5230 \\(B\\) \u7684\u6839\u4e0a\u3002 \u6211\u4eec\u6839\u636e\u8fd9\u4e2a\uff0c\u76f4\u63a5\u7ef4\u62a4\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; struct dsu { vector<int> fa, siz, d; dsu() = default; dsu(int n): fa(n), siz(n, 1), d(n) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { if (x == fa[x]) return x; int t = getfa(fa[x]); d[x] = d[x] + d[fa[x]]; return fa[x] = t; } // merge x to y void unite(int x, int y) { x = getfa(x), y = getfa(y); fa[x] = y, d[x] = siz[y]; siz[y] += siz[x]; } }; dsu a(30005); signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int T; cin >> T; while (T--) { char op[3]; int x, y; cin >> op >> x >> y; if (op[0] == 'M') a.unite(x, y); else { if (a.getfa(x) != a.getfa(y)) cout << \"-1\" << endl; else cout << abs(a.d[x] - a.d[y]) - 1 << endl; } } return 0; }","title":"\u5e26\u6743\u5e76\u67e5\u96c6"},{"location":"ds/dsu/dsu3/#_1","text":"","title":"\u5e26\u6743\u5e76\u67e5\u96c6"},{"location":"ds/dsu/dsu3/#_2","text":"\u5e26\u6743\u5e76\u67e5\u96c6 \uff0c\u4e5f\u79f0\u4e3a \u8fb9\u5e26\u6743\u5e76\u67e5\u96c6 \u3002 \u6211\u4eec\u5728\u5e76\u67e5\u96c6\u7684\u8fb9\u4e0a\u5b9a\u4e49\u67d0\u79cd\u6743\u503c\uff0c\u4ece\u800c\u89e3\u51b3\uf901\u591a\u7684\u95ee\u9898\u3002 \u800c\u56e0\u4e3a\u8def\u5f84\u538b\u7f29\u7684\u5b58\u5728\uff0c\u6211\u4eec\u4e00\u822c\u8981\u5b9a\u4e49\u8fd9\u79cd\u6743\u503c\u5728\uf937\u5f84\u538b\u7f29\u65f6\u4ea7\u751f\u7684\u8fd0\u7b97\u3002","title":"\u6982\u5ff5"},{"location":"ds/dsu/dsu3/#_3","text":"","title":"\u4f8b\u9898"},{"location":"ds/dsu/dsu3/#p2024-noi2001","text":"\u4f60\u8bf4\u5f97\u5bf9\uff0c\u8fd9\u9053\u9898\u4e5f\u53ef\u4ee5\u7528\u5e26\u6743\u5e76\u67e5\u96c6\u6765\u505a\u3002 \u5728\u8fb9\u6743\u4e0a\u7ef4\u62a4\u6a21 3 \u610f\u4e49\u4e0b\u7684\u52a0\u6cd5\u7fa4\uff0c\u4ece\u6839\u5f00\u59cb\u8ba1\u7b97\u4e24\u4e2a\u70b9\u7684\u6df1\u5ea6\u5dee \\[ d=d(x)-d(y) \\] \\(d\\equiv0\\pmod3\\) \uff0c\u5219 \\(x,y\\) \u5c5e\u4e8e\u540c\u7c7b\uff1b \\(d\\equiv1\\pmod3\\) \uff0c\u5219 \\(x\\) \u5403 \\(y\\) \uff0c \\(x\\) \u662f \\(y\\) \u7684\u5929\u654c\uff1b \\(d\\equiv0\\pmod3\\) \uff0c\u5219 \\(y\\) \u5403 \\(x\\) \uff0c \\(y\\) \u662f \\(x\\) \u7684\u5929\u654c\uff1b \u5f53\u6211\u4eec\u5728\u8def\u5f84\u538b\u7f29\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u6211\u4eec\u8bb0\u5f55\u7684 \\(d(x)\\) \u8868\u793a\u7684\u662f \\(x\\) \u5230\u5176\u7236\u8282\u70b9\u7684\u8ddd\u79bb\uff0c \u90a3\u4e48\uff0c\u6211\u4eec\u5df2\u7ecf\u8dd1\u5b8c\u4e86\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u5148\uff0c\u5176\u7236\u8282\u70b9\u4e00\u5b9a\u662f\u76f4\u63a5\u63a5\u5728\u6839\u4e0a\u9762\u7684\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u65b0\u7684\u8ddd\u79bb\u76f4\u63a5\u4e3a\u5176\u7236\u8282\u70b9\u5230\u7956\u5148\uff08\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff09\u7684\u8ddd\u79bb\u52a0\u4e0a\u5176\u5230\u5176\u7236\u8282\u70b9\u7684\u8ddd\u79bb\u5373\u53ef\u3002 int getfa(int x) { if (x == fa[x]) return x; int t = getfa(fa[x]); d[x] = d[x] + d[fa[x]]; return fa[x] = t; } \u5408\u5e76\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u628a \\(x\\) \u5206\u652f\u63a5\u5728 \\(y\\) \u7684\u7956\u5148\u4e0a\uff0c\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff0c \u56e0\u4e3a\u5df2\u7ecf\u8def\u5f84\u538b\u7f29\u4e86\uff0c\u56e0\u6b64 \\(x,y\\) \u7684\u7236\u8282\u70b9\u4e00\u5b9a\u5c31\u662f\u6839\u8282\u70b9\u3002 \u82e5 \\(x,y\\) \u662f\u540c\u7c7b\uff0c\u5219\u5408\u5e76\u5176\u7236\u8282\u70b9\u65f6\u8981\u4fdd\u8bc1\u5176\u6df1\u5ea6\u76f8\u540c\uff0c\u4e8e\u662f\u53d6 \\(d(y)-d(x)\\) \uff1b \u82e5 \\(x\\) \u5403 \\(y\\) \uff0c\u90a3\u4e48\u8981\u4f7f \\(x\\) \u6bd4 \\(y\\) \u9ad8\u4e00\u7ea7\uff0c\u53d6 \\(d(y)-d(x)+1\\) \u3002 \u8fd9\u4e24\u4e2a\u6570\u7684\u672c\u8d28\u5c31\u662f\uff0c\u6211\u4eec\u518d\u5411\u4e0a\u5408\u5e76\u7684\u65f6\u5019\u8981\u52a0\u4e0a \\(d(x)\\) \uff0c\u5219\u53ef\u4ee5\u62b5\u6d88\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" struct dsu { vector<int> fa, d; dsu() = default; dsu(int siz): fa(siz), d(siz) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { if (x == fa[x]) return x; int t = getfa(fa[x]); d[x] = d[x] + d[fa[x]]; return fa[x] = t; } }; int n, k; dsu a; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> k; a = dsu(n + 1); auto uni = [] (int x, int y) -> bool { int px = a.getfa(x); int py = a.getfa(y); if (px != py) { a.fa[px] = py; a.d[px] = a.d[y] - a.d[x]; return true; } return ((a.d[x] - a.d[y]) % 3 + 3) % 3 == 0; }; auto eat = [] (int x, int y) -> bool { int px = a.getfa(x); int py = a.getfa(y); if (px != py) { a.fa[px] = py; a.d[px] = a.d[y] - a.d[x] + 1; return true; } return ((a.d[x] - a.d[y]) % 3 + 3) % 3 == 1; }; int ans = 0; while (k--) { int op, x, y; cin >> op >> x >> y; if (x > n || y > n) ++ans; else if (op == 1) ans += !uni(x, y); else if (op == 2) ans += !eat(x, y); } cout << ans << endl; return 0; }","title":"P2024 [NOI2001] \u98df\u7269\u94fe"},{"location":"ds/dsu/dsu3/#p1196-noi2002","text":"\u540c\u65f6\u7ef4\u62a4\u8fb9\u6743\u548c\u96c6\u5408\u5927\u5c0f\u3002 \u6ce8\u610f\u5230\u5982\u679c\u628a\u4e00\u4e2a\u961f\u5217 \\(A\\) \u63a5\u5230 \\(B\\) \uff0c\u76f8\u5f53\u4e8e \\(A\\) \u52a0\u4e0a\u8fb9\u6743\u4e3a\u96c6\u5408 \\(B\\) \u7684\u5927\u5c0f\uff0c\u76f4\u63a5\u63a5\u5230 \\(B\\) \u7684\u6839\u4e0a\u3002 \u6211\u4eec\u6839\u636e\u8fd9\u4e2a\uff0c\u76f4\u63a5\u7ef4\u62a4\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; struct dsu { vector<int> fa, siz, d; dsu() = default; dsu(int n): fa(n), siz(n, 1), d(n) { iota(fa.begin(), fa.end(), 0); } int getfa(int x) { if (x == fa[x]) return x; int t = getfa(fa[x]); d[x] = d[x] + d[fa[x]]; return fa[x] = t; } // merge x to y void unite(int x, int y) { x = getfa(x), y = getfa(y); fa[x] = y, d[x] = siz[y]; siz[y] += siz[x]; } }; dsu a(30005); signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int T; cin >> T; while (T--) { char op[3]; int x, y; cin >> op >> x >> y; if (op[0] == 'M') a.unite(x, y); else { if (a.getfa(x) != a.getfa(y)) cout << \"-1\" << endl; else cout << abs(a.d[x] - a.d[y]) - 1 << endl; } } return 0; }","title":"P1196 [NOI2002] \u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4"},{"location":"ds/fenwick/fenwick1/","text":"\u6811\u72b6\u6570\u7ec4\u57fa\u7840 \u00b6 \u5f15\u5165 \u00b6 \u6811\u72b6\u6570\u7ec4\u7684\u7279\u70b9\uff1a \u597d\u5199\u597d\u8c03\u3002 \u4e00\u822c\u53ea\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u524d\u7f00\u67e5\u8be2\u3002 \u53ef\u4ee5\u901a\u8fc7\u5dee\u5206\u3001\u516c\u5f0f\u7b49\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u7b49\u3002 \u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u9898\uff1a \u5355\u8c03\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u548c\u3002 \u6211\u4eec\u6709\u4e24\u4e2a\u6bd4\u8f83\u597d\u60f3\u7684\u601d\u8def\uff1a \u76f4\u63a5 \\(\\mathcal O(1)\\) \u4fee\u6539\uff0c \\(\\mathcal O(n)\\) \u904d\u5386\u67e5\u8be2\uff1b \u7ef4\u62a4\u524d\u7f00\u548c \\(\\mathcal O(1)\\) \u67e5\u8be2\uff0c \\(\\mathcal O(n)\\) \u4fee\u6539\u8d21\u732e\u3002 \u800c\u6811\u72b6\u6570\u7ec4\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6bcf\u4e2a\u64cd\u4f5c\u5355\u6b21 \\(\\mathcal O(\\log n)\\) \u7684\u505a\u6cd5\u3002 \u57fa\u672c\u601d\u60f3 \u00b6 \u4ee3\u6570\u4e0a\uff0c\u592a\u590d\u6742\u4e86\u6211\u4eec\u4e0d\u8003\u8651\u3002 \u51e0\u4f55\u4e0a\uff0c\u5982\u56fe\uff0c \u6211\u4eec\u4ee4 \\(s_i\\) \u8868\u793a\uff0c \u4ece \\(i\\) \u5f80\u524d\u6570 \\(\\operatorname{lowbit(i)}\\) \u4f4d\u7684\u548c\uff0c\u5373 \\(a(i-\\operatorname{lowbit}(i)+1,,i)\\) \u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u77e5\u9053\uff0c\u524d\u7f00\u548c\u53ef\u4ee5\u8868\u793a\u4e3a\u82e5\u5e72\u4e2a\u8fd9\u6837\u7684\u533a\u95f4\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u90fd\u53ef\u4ee5\u88ab \\(\\mathcal O(\\log n)\\) \u4e2a\u5c0f\u5757\u8868\u793a\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u6b63\u786e\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a constexpr int N = 1e5 + 10; #define lowbit(x) ((x) & -(x)) int n, s[N]; // [1, x] int query(int x) { int r = 0; for (; x; x -= lowbit(x)) r += s[x]; return r; } // [x] += v int modify(int x, int v) { for (; x <= n; x += lowbit(x)) s[x] += v; } // [l, r] int query(int l, int r) { if (l == 1) return query(r); return query(r) - query(l - 1); } \u8bf7\u6ce8\u610f\uff1a \u6811\u72b6\u6570\u7ec4\u4e0d\u652f\u6301\u8d1f\u6570\u53ca \u96f6\u4e0b\u6807 \uff0c\u53ef\u4ee5\u4f7f\u7528\u504f\u79fb\u91cf\u6216\u8005\u79bb\u6563\u5316\uff1b \u6811\u72b6\u6570\u7ec4\u672c\u8eab\u53ea\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u524d\u7f00\u67e5\u8be2\uff0c\u53ef\u4ee5\u901a\u8fc7\u6570\u5b66\u65b9\u6cd5\u6765\u5b9e\u73b0\u5176\u4ed6\u7684\u3002 \u5dee\u5206\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u3002 \u6211\u4eec\u5c06\u539f\u6570\u7ec4 \\(s\\) \u53d8\u4e3a\u5176\u5dee\u5206\u6570\u7ec4\uff0c\u90a3\u4e48\uff0c \u533a\u95f4\u4fee\u6539\uff0c\u5dee\u5206\u6027\u8d28\u5373\u53ef\uff1b \u5355\u70b9\u67e5\u8be2\uff0c\u6ce8\u610f\u5230\u539f\u6570\u7ec4\u5373\u5dee\u5206\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u7b26\u5408\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u6027\u8d28\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a int add(int p, int q, int v) { modify(p, v); modify(q + 1, -v); } int at(int x) { return query(x); } \u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u3002 \u63a8\u5f0f\u5b50\uff0c\u611f\u89c9\u4e0d\u5982\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\uff0c\u7565\u3002","title":"\u6811\u72b6\u6570\u7ec4\u57fa\u7840"},{"location":"ds/fenwick/fenwick1/#_1","text":"","title":"\u6811\u72b6\u6570\u7ec4\u57fa\u7840"},{"location":"ds/fenwick/fenwick1/#_2","text":"\u6811\u72b6\u6570\u7ec4\u7684\u7279\u70b9\uff1a \u597d\u5199\u597d\u8c03\u3002 \u4e00\u822c\u53ea\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u524d\u7f00\u67e5\u8be2\u3002 \u53ef\u4ee5\u901a\u8fc7\u5dee\u5206\u3001\u516c\u5f0f\u7b49\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u7b49\u3002 \u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u9898\uff1a \u5355\u8c03\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u548c\u3002 \u6211\u4eec\u6709\u4e24\u4e2a\u6bd4\u8f83\u597d\u60f3\u7684\u601d\u8def\uff1a \u76f4\u63a5 \\(\\mathcal O(1)\\) \u4fee\u6539\uff0c \\(\\mathcal O(n)\\) \u904d\u5386\u67e5\u8be2\uff1b \u7ef4\u62a4\u524d\u7f00\u548c \\(\\mathcal O(1)\\) \u67e5\u8be2\uff0c \\(\\mathcal O(n)\\) \u4fee\u6539\u8d21\u732e\u3002 \u800c\u6811\u72b6\u6570\u7ec4\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6bcf\u4e2a\u64cd\u4f5c\u5355\u6b21 \\(\\mathcal O(\\log n)\\) \u7684\u505a\u6cd5\u3002","title":"\u5f15\u5165"},{"location":"ds/fenwick/fenwick1/#_3","text":"\u4ee3\u6570\u4e0a\uff0c\u592a\u590d\u6742\u4e86\u6211\u4eec\u4e0d\u8003\u8651\u3002 \u51e0\u4f55\u4e0a\uff0c\u5982\u56fe\uff0c \u6211\u4eec\u4ee4 \\(s_i\\) \u8868\u793a\uff0c \u4ece \\(i\\) \u5f80\u524d\u6570 \\(\\operatorname{lowbit(i)}\\) \u4f4d\u7684\u548c\uff0c\u5373 \\(a(i-\\operatorname{lowbit}(i)+1,,i)\\) \u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u77e5\u9053\uff0c\u524d\u7f00\u548c\u53ef\u4ee5\u8868\u793a\u4e3a\u82e5\u5e72\u4e2a\u8fd9\u6837\u7684\u533a\u95f4\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u90fd\u53ef\u4ee5\u88ab \\(\\mathcal O(\\log n)\\) \u4e2a\u5c0f\u5757\u8868\u793a\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u6b63\u786e\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a constexpr int N = 1e5 + 10; #define lowbit(x) ((x) & -(x)) int n, s[N]; // [1, x] int query(int x) { int r = 0; for (; x; x -= lowbit(x)) r += s[x]; return r; } // [x] += v int modify(int x, int v) { for (; x <= n; x += lowbit(x)) s[x] += v; } // [l, r] int query(int l, int r) { if (l == 1) return query(r); return query(r) - query(l - 1); } \u8bf7\u6ce8\u610f\uff1a \u6811\u72b6\u6570\u7ec4\u4e0d\u652f\u6301\u8d1f\u6570\u53ca \u96f6\u4e0b\u6807 \uff0c\u53ef\u4ee5\u4f7f\u7528\u504f\u79fb\u91cf\u6216\u8005\u79bb\u6563\u5316\uff1b \u6811\u72b6\u6570\u7ec4\u672c\u8eab\u53ea\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u524d\u7f00\u67e5\u8be2\uff0c\u53ef\u4ee5\u901a\u8fc7\u6570\u5b66\u65b9\u6cd5\u6765\u5b9e\u73b0\u5176\u4ed6\u7684\u3002 \u5dee\u5206\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u3002 \u6211\u4eec\u5c06\u539f\u6570\u7ec4 \\(s\\) \u53d8\u4e3a\u5176\u5dee\u5206\u6570\u7ec4\uff0c\u90a3\u4e48\uff0c \u533a\u95f4\u4fee\u6539\uff0c\u5dee\u5206\u6027\u8d28\u5373\u53ef\uff1b \u5355\u70b9\u67e5\u8be2\uff0c\u6ce8\u610f\u5230\u539f\u6570\u7ec4\u5373\u5dee\u5206\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u7b26\u5408\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u6027\u8d28\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a int add(int p, int q, int v) { modify(p, v); modify(q + 1, -v); } int at(int x) { return query(x); } \u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u3002 \u63a8\u5f0f\u5b50\uff0c\u611f\u89c9\u4e0d\u5982\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\uff0c\u7565\u3002","title":"\u57fa\u672c\u601d\u60f3"},{"location":"ds/odt/odt/","text":"\u73c2\u6735\u8389\u6811 \u00b6 \u73c2\u6735\u8389\u6811\uff08Chtholly Tree\uff09\uff0c\u53c8\u540d\u8001\u53f8\u673a\u6811 ODT\uff08Old Driver Tree\uff09\u3002 \u8d77\u6e90\u81ea lxl \u7684 CF896C Willem, Chtholly and Seniorious \u3002 \u524d\u7f6e\u77e5\u8bc6\uff1a std::set \u3002 \u601d\u60f3 \u00b6 \u5c06\u533a\u95f4\u7528 set \u7ef4\u62a4\uff0c\u6bcf\u6b21\u5bf9\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5c31\u5c06\u8fd9\u4e2a\u533a\u95f4\u5206\u79bb\uff08split\uff09\u51fa\u6765\u3002 \u590d\u6742\u5ea6\u7684\u4fdd\u8bc1\u4f9d\u9760\u63a8\u5e73\u64cd\u4f5c\uff0c\u7531\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\u5927\u5e45\u51cf\u5c11\u4e86\u8282\u70b9\u7684\u6570\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fbe\u5230\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u7684\u76ee\u7684\uff1b\u800c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u66b4\u529b\u6c42\u89e3\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5361\u6b7b\u73c2\u6735\u8389\u6811\u7684\u65b9\u6cd5\uff1a\u907f\u514d\u63a8\u5e73\u64cd\u4f5c\uff0c\u751a\u81f3\u6ca1\u6709\u63a8\u5e73\u64cd\u4f5c\uff0c\u8fd9\u6837\u73c2\u6735\u8389\u6811\u5c31\u9000\u5316\u4e3a\u66b4\u529b\u7684 \\(\\mathcal O(nm)\\) \u4e86\u3002\uff08\u73c2\u6735\u8389\u5f88\u4f24\u5fc3~\uff09 \u7528\u9014 \u00b6 \u73c2\u6735\u8389\u6811\u6bd4\u8f83\u597d\u5199\uff0c\u4e14\u5bf9\u4e8e\u968f\u673a\u6570\u636e\u590d\u6742\u5ea6\u8f83\u5feb\u3002 \u9002\u7528\u4e8e\uff1a \u533a\u95f4\u64cd\u4f5c\uff0c\u9700\u8981\u6709\u533a\u95f4\u63a8\u5e73\uff08\u8d4b\u503c\uff09\u64cd\u4f5c\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u3002 \u533a\u95f4\u67e5\u8be2\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u5947\u602a\u7684\u64cd\u4f5c\u3002 \u4fdd\u8bc1\u6570\u636e\u968f\u673a \uff1a \\(n\\) \u4e2a\u6570 \\(m\\) \u4e2a\u64cd\u4f5c\uff0c\u5747\u644a\u590d\u6742\u5ea6 \\(\\mathcal O(m \\log n)\\) \u3002 \u5728\u6570\u636e\u4e0d\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u4e00\u4e9b\u6280\u5de7\u4f8b\u5982\u6811\u94fe\u5256\u5206\uff0c\u7ebf\u6bb5\u6811\u3001\u5e73\u8861\u6811\u7ef4\u62a4 ODT \u7b49\uff0c\u624d\u80fd\u8fc7\u3002 \u6781\u5c11\u6570\u9898\u76ee\u662f\u73c2\u6735\u8389\u6811\u4e3a\u6b63\u89e3\u7684\uff0c\u6709\u4e00\u4e9b\u4e0a\u53e4\u9898\u76ee\u6ca1\u6709 Hack \u73c2\u6735\u8389\u6811\u7684\u4ecd\u7136\u53ef\u4ee5\u6765\u505a\u3002 \u5bf9\u4e8e\u73b0\u4ee3\u9898\u76ee\uff0c\u73c2\u6735\u8389\u6811\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u6765\u9a97\u5206\u3001\u5bf9\u62cd\u3002 \u64cd\u4f5c \u00b6 \u8282\u70b9\u7684\u5b58\u50a8 \u00b6 struct node_t { int l, r; mutable int v; node_t(int l): l(l) {} node_t(int l, int r, int v): l(l), r(r), v(v) {} friend bool operator <(const node_t &a, const node_t &b) { return a.l < b.l; } }; \u663e\u7136\u7684\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\u533a\u95f4\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u5bf9\u4e8e\u5b83\u7684\u8303\u56f4 \\([l,r]\\) \u548c\u503c \\(v\\) \uff0c\u6b64\u5904\u7684 \\(v\\) \u663e\u7136\u662f\u4f60\u6307\u5b9a\u7684\u6570\u636e\u3002 \u6807\u8bc6\u7b26 mutable \u8868\u793a\u300c\u53ef\u4fee\u6539\u7684\u300d\uff0c\u4e0e const \u5bf9\u5e94\uff0c\u5176\u4f5c\u7528\u662f\uff0c\u5bf9\u4e8e\u653e\u5165 set \u4e2d\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u5728\u4e0d\u53d6\u51fa\u7684\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u5176 \\(v\\) \u7684\u503c\u3002 \u73c2\u6735\u8389\u6811\u672c\u73c2 \u00b6 set<node_t> odt; \u663e\u7136\u7684\uff0c\u6ca1\u6709\u89e3\u91ca\u3002 \u533a\u95f4\u5206\u88c2 \u00b6 auto split(int x) { auto it = --odt.upper_bound(node_t(x)); if (it->l == x) return it; auto [l, r, v] = *it; odt.erase(it); odt.emplace(l, x - 1, v); return odt.emplace(x, r, v).first; } split \u64cd\u4f5c\u662f\u73c2\u6735\u8389\u6811\u7684\u6839\u672c\u64cd\u4f5c\uff0c\u5176\u4f5c\u7528\u662f\uff0c\u5bf9\u4e8e\u5305\u542b\u4e00\u4e2a \\(x\\) \u7684\u533a\u95f4\uff0c\u5c06\u5176\u5206\u88c2\u4e3a\u4e24\u4e2a\u533a\u95f4 \\([l,x),[x,r]\\) \uff0c\u5e76\u8fd4\u56de \\(x\\) \u5904\u7684\u8fed\u4ee3\u5668\u3002 upper_bound \u8868\u793a\u627e\u5230\u7b2c\u4e00\u4e2a \\(\\ge x\\) \u7684\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5176\u81ea\u51cf\uff0c\u5373\u53ef\u4ee5\u627e\u5230\u7b2c\u4e00\u4e2a \\(l \\le x\\) \u7684\u8282\u70b9\u4e86\u3002 it->l == x \u5982\u679c \\(x\\) \u5df2\u7ecf\u662f\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u5fc5\u8981\u5206\u88c2\uff0c\u76f4\u63a5\u8fd4\u56de\u6b64\u8fed\u4ee3\u5668\u5373\u53ef\u3002 \u5426\u5219\uff0c\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u5e76\u6dfb\u52a0\u4e0a\u5bf9\u4e8e\u7684\u8282\u70b9\u3002\u6ce8\u610f set \u7684 insert \u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a pair<iterator, bool> \u5206\u522b\u8868\u793a\u52a0\u5165\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u4ee5\u53ca\u662f\u5426\u6210\u529f\u6dfb\u52a0\u3002 \u533a\u95f4\u5206\u79bb \u00b6 auto get(int l, int r) { auto itr = split(r + 1), itl = split(l); return make_pair(itl, itr); } \u8868\u793a\u5c06\u533a\u95f4 \\([l,r]\\) \u5206\u79bb\u51fa\u6765\uff0c\u5e76\u8fd4\u56de\u5176\u8fed\u4ee3\u5668 \\([itl,itr)\\) \u3002 \u5173\u4e8e\u4e3a\u4ec0\u4e48\u8981 split \u7684\u662f \\(r + 1\\) \u800c\u4e0d\u662f \\(r\\) \uff0c\u5176\u5b9e\u662f\u56e0\u4e3a\uff0c\u6211\u4eec\u7684 split \u53ef\u4ee5\u5c06\u533a\u95f4\u4ece \\(x\\) \u5904\u5206\u5f00\uff0c\u800c\u60f3\u8981\u5c06 \\([l,r]\\) \u5206\u79bb\u51fa\u6765\uff0c\u5c31\u9700\u8981\u4ece \\(r+1\\) \u65ad\u5f00\uff0c\u800c\u4e0d\u662f \\(r\\) \u3002\uff08\u8bf4\u8fd9\u4e2a\u7684\u539f\u56e0\u662f \u8fd9\u7bc7\u6587\u7ae0 \u7ed9\u51fa\u89e3\u91ca\u663e\u7136\u662f\u9519\u7684\uff09 \u6ce8\u610f \uff08\u6613\u9519\u70b9\uff09\uff1a\u6b64\u5904\u8981\u5148 split \u53f3\u7aef\u70b9 \\(r+1\\) \u7136\u540e\u518d split \u5de6\u7aef\u70b9 \\(l\\) \uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u5c06\u53f3\u7aef\u70b9\u5206\u79bb\u65f6\uff0c\u5982\u679c \\(l\\) \u548c \\(r+1\\) \u4f4d\u4e8e\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5728 split \u7aef\u70b9 \\(r+1\\) \u65f6\uff0c\u5c31\u4f1a\u5c06\u7aef\u70b9 \\(l\\) \u6240\u5728\u7684\u8282\u70b9 erase \u6389\uff0c\u5982\u6b64\u5c31\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u5bfc\u81f4 RE\u3002 \u533a\u95f4\u63d2\u5165 \u00b6 void insert(int l, int r, int v) { odt.emplace(l, r, v); } \u663e\u7136\u7684\uff0c\u6ca1\u6709\u89e3\u91ca\u3002 \u533a\u95f4\u63a8\u5e73 \u00b6 void assign(int l, int r, int v) { auto [itl, itr] = get(l, r); odt.erase(itl, itr); odt.emplace(l, r, v); } \u5148\u5c06\u533a\u95f4 \\([l,r]\\) \u5206\u79bb\u51fa\u6765\uff0c\u7136\u540e\u5220\u9664 \\([itl,itr)\\) \u5185\u7684\u6240\u6709\u8282\u70b9\uff0c\u6700\u540e\u52a0\u5165\u65b0\u589e\u7684\u8282\u70b9\u3002 \u6ce8\u610f\u8fd9\u91cc\u7528\u5230\u4e86 set \u7684 erase \u7528\u6cd5\uff0c\u4f20\u5165\u5de6\u3001\u53f3\u8fed\u4ee3\u5668\uff0c\u5220\u9664\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8282\u70b9\u3002 \u5176\u4ed6\u64cd\u4f5c \u00b6 void performance(int l, int r, auto op) { auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) op(itl); } \u5957\u677f\u5b50\u5c31\u597d\u4e86\uff0c\u4e0b\u6587\u4f1a\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u7684\u64cd\u4f5c\u3002 \u5e38\u89c1\u64cd\u4f5c \u00b6 \u533a\u95f4\u52a0 \u00b6 void add(int l, int r, ll v) { auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) itl->v += v; } \u533a\u95f4 rk.k \u00b6 auto rank_k(int l, int r, int k) -> ll { vector<pair<ll, int>> bucket; auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) bucket.push_back({itl->v, itl->r - itl->l + 1}); sort(bucket.begin(), bucket.end()); for (auto i : bucket) if ((k -= i.second) <= 0) return i.first; return -1; } \u6c42\u5dee\u63a8\u5e73 \u00b6 \u6709\u65f6\u6211\u4eec\u9700\u8981\u5feb\u901f\u6c42\u51fa\u4e00\u4e9b\u6570\u636e\uff0c\u6bd4\u5982\u533a\u95f4\u5185 \\(1\\) \u7684\u4e2a\u6570\uff0c\u5728\u53ea\u6709\u63a8\u5e73\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u63a8\u5e73\u7684\u8fc7\u7a0b\u4e2d\u5b9e\u65f6\u8bb0\u5f55\u53d8\u5316\u503c \\(\\Delta\\mathit{sum}\\) \u3002 int assign_result(int l, int r, int v) { auto [itl, itr] = get(l, r); auto itb = itl; int res = 0; for (; itl != itr; ++itl) if (itl->v != v) res += (v - itl->v) * (itl->r - itl->l + 1); odt.erase(itb, itr), odt.emplace(l, r, v); return res; } \u5904\u7406\u7ec6\u8282\u95ee\u9898 \u00b6 \u5173\u4e8e Debug\uff1a void debug() { for (auto [l, r, v] : odt) cerr << \"(\" << l << \" \" << r << \": \" << v << \")\"; cerr << endl; } \u5173\u4e8e \\(n+1\\) \uff1a \u6211\u4eec\u63a8\u8350\u5728\u521d\u59cb\u5316\uff08insert\uff09\u4e4b\u540e\u518d\u6dfb\u52a0\u4e00\u4e2a\u533a\u95f4 \\([n+1,n+1]\\) \uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u6dfb\u52a0\u7684\u8bdd\uff0c\u67e5\u8be2\u533a\u95f4 \\([*,n]\\) \u5c31\u4f1a\u5bfc\u81f4\u4e0d\u53ef\u9884\u6599\u7684\u9519\u8bef\u3002 \u5173\u4e8e\u975e\u968f\u673a\u6570\u636e \u00b6 \u5728\u6570\u636e\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u663e\u7136\u73c2\u6735\u8389\u6811\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(m\\log n)\\) \uff0c\u4f46\u662f\u524d\u6587\u4e5f\u8bf4\u8fc7\uff0c\u73c2\u6735\u8389\u6811\u7684\u590d\u6742\u5ea6\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u51fa\u9898\u4eba\u5c31\u7b97\u7528\u811a\u9020\u6570\u636e\u4e5f\u80fd\u968f\u968f\u4fbf\u4fbf\u7684\u5361\u6b7b\u73c2\u6735\u8389\u6811\uff08\u4f24\u5fc3 \u4e8e\u662f\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e9b\u4f18\u5316\u7684\u6280\u5de7\uff0c\u6216\u8005\u5176\u4ed6\u65b9\u5f0f\u7ef4\u62a4 ODT \u4e86\u3002 \u8fd8\u6709\u4e00\u7c7b\u95ee\u9898\uff08 P4979 \u77ff\u6d1e\uff1a\u574d\u584c \uff09\uff0c\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u503c\u76f8\u540c\u3002\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u7406\u8bba\u4e0a\uff0c\u503c\u76f8\u540c\u7684\u533a\u95f4\u6700\u597d\u7531\u8282\u70b9\u8868\u793a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4f18\u5316\u7684\u65b9\u6cd5\uff0c\u4e00\u8fb9\u67e5\u8be2\u4e00\u8fb9\u8bb2\u7b49\u503c\u7684\u533a\u95f4\u63a8\u5e73\uff0c\u6ce8\u610f\u5230\u63a8\u5e73\u64cd\u4f5c\u4e5f\u662f\u6709 \\(\\mathcal O(\\log n)\\) \u7684\u590d\u6742\u5ea6\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\uff0c\u6700\u8fdc\u53ef\u4ee5\u5ef6\u4f38\u5230\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u533a\u95f4\u503c\u5168\u90fd\u76f8\u7b49\uff0c\u518d\u63a8\u5e73\u8fd9\u4e2a\u533a\u95f4\u5373\u53ef\u3002 PS\uff1a\u8fd9\u4e2a\u4e0d\u77e5\u9053\u5c06\u6765\u4f1a\u4e0d\u4f1a\u88ab hack\uff0c\u8be6\u89c1\u6211\u53d1\u7684\u8ba8\u8bba https://www.luogu.com.cn/discuss/732354 \u3002 \u5173\u4e8e\u5438\u6c27 \u00b6 \u73c2\u6735\u8389\u6811\u4e0d\u662f\u6b63\u89e3\u7684\u9898\uff0c\u5927\u90e8\u5206\u65f6\u5019\u9700\u8981\u5438\u6c27\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u73c2\u6735\u8389\u6389\u6c34\u91cc\u4e86\uff08\u5a01\u5ec9\u5feb\u53bb\u6551\u4f60\u8001\u5a46\u3002 \u4f8b\u9898 \u00b6 \u94fe\u63a5\uff1a https://www.luogu.com.cn/training/418574 \u3002 \u6700\u540e\u7684\u6700\u540e\uff0c\u653e\u4e00\u4e2a\u5927\u6a21\u677f\u5427\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class odt_t { private: struct node_t { int l, r; mutable int v; node_t(int l): l(l) {} node_t(int l, int r, int v): l(l), r(r), v(v) {} friend bool operator <(const node_t &a, const node_t &b) { return a.l < b.l; } }; set<node_t> odt; auto split(int x) { auto it = --odt.upper_bound(node_t(x)); if (it->l == x) return it; auto [l, r, v] = *it; odt.erase(it); odt.emplace(l, x - 1, v); return odt.emplace(x, r, v).first; } auto get(int l, int r) { auto itr = split(r + 1), itl = split(l); return make_pair(itl, itr); } public: void insert(int l, int r, int v) { odt.emplace(l, r, v); } void assign(int l, int r, int v) { auto [itl, itr] = get(l, r); odt.erase(itl, itr); odt.emplace(l, r, v); } int assign_result(int l, int r, int v) { auto [itl, itr] = get(l, r); auto itb = itl; int res = 0; for (; itl != itr; ++itl) if (itl->v != v) res += (v - itl->v) * (itl->r - itl->l + 1); odt.erase(itb, itr), odt.emplace(l, r, v); return res; } void add(int l, int r, ll v) { auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) itl->v += v; } auto rank_k(int l, int r, int k) -> ll { vector<pair<ll, int>> bucket; auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) bucket.push_back({itl->v, itl->r - itl->l + 1}); sort(bucket.begin(), bucket.end()); for (auto i : bucket) if ((k -= i.second) <= 0) return i.first; return -1; } void debug() { for (auto [l, r, v] : odt) cerr << \"(\" << l << \" \" << r << \": \" << v << \")\"; cerr << endl; } };","title":"\u73c2\u6735\u8389\u6811"},{"location":"ds/odt/odt/#_1","text":"\u73c2\u6735\u8389\u6811\uff08Chtholly Tree\uff09\uff0c\u53c8\u540d\u8001\u53f8\u673a\u6811 ODT\uff08Old Driver Tree\uff09\u3002 \u8d77\u6e90\u81ea lxl \u7684 CF896C Willem, Chtholly and Seniorious \u3002 \u524d\u7f6e\u77e5\u8bc6\uff1a std::set \u3002","title":"\u73c2\u6735\u8389\u6811"},{"location":"ds/odt/odt/#_2","text":"\u5c06\u533a\u95f4\u7528 set \u7ef4\u62a4\uff0c\u6bcf\u6b21\u5bf9\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5c31\u5c06\u8fd9\u4e2a\u533a\u95f4\u5206\u79bb\uff08split\uff09\u51fa\u6765\u3002 \u590d\u6742\u5ea6\u7684\u4fdd\u8bc1\u4f9d\u9760\u63a8\u5e73\u64cd\u4f5c\uff0c\u7531\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\u5927\u5e45\u51cf\u5c11\u4e86\u8282\u70b9\u7684\u6570\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fbe\u5230\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u7684\u76ee\u7684\uff1b\u800c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u66b4\u529b\u6c42\u89e3\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5361\u6b7b\u73c2\u6735\u8389\u6811\u7684\u65b9\u6cd5\uff1a\u907f\u514d\u63a8\u5e73\u64cd\u4f5c\uff0c\u751a\u81f3\u6ca1\u6709\u63a8\u5e73\u64cd\u4f5c\uff0c\u8fd9\u6837\u73c2\u6735\u8389\u6811\u5c31\u9000\u5316\u4e3a\u66b4\u529b\u7684 \\(\\mathcal O(nm)\\) \u4e86\u3002\uff08\u73c2\u6735\u8389\u5f88\u4f24\u5fc3~\uff09","title":"\u601d\u60f3"},{"location":"ds/odt/odt/#_3","text":"\u73c2\u6735\u8389\u6811\u6bd4\u8f83\u597d\u5199\uff0c\u4e14\u5bf9\u4e8e\u968f\u673a\u6570\u636e\u590d\u6742\u5ea6\u8f83\u5feb\u3002 \u9002\u7528\u4e8e\uff1a \u533a\u95f4\u64cd\u4f5c\uff0c\u9700\u8981\u6709\u533a\u95f4\u63a8\u5e73\uff08\u8d4b\u503c\uff09\u64cd\u4f5c\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u3002 \u533a\u95f4\u67e5\u8be2\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u5947\u602a\u7684\u64cd\u4f5c\u3002 \u4fdd\u8bc1\u6570\u636e\u968f\u673a \uff1a \\(n\\) \u4e2a\u6570 \\(m\\) \u4e2a\u64cd\u4f5c\uff0c\u5747\u644a\u590d\u6742\u5ea6 \\(\\mathcal O(m \\log n)\\) \u3002 \u5728\u6570\u636e\u4e0d\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u4e00\u4e9b\u6280\u5de7\u4f8b\u5982\u6811\u94fe\u5256\u5206\uff0c\u7ebf\u6bb5\u6811\u3001\u5e73\u8861\u6811\u7ef4\u62a4 ODT \u7b49\uff0c\u624d\u80fd\u8fc7\u3002 \u6781\u5c11\u6570\u9898\u76ee\u662f\u73c2\u6735\u8389\u6811\u4e3a\u6b63\u89e3\u7684\uff0c\u6709\u4e00\u4e9b\u4e0a\u53e4\u9898\u76ee\u6ca1\u6709 Hack \u73c2\u6735\u8389\u6811\u7684\u4ecd\u7136\u53ef\u4ee5\u6765\u505a\u3002 \u5bf9\u4e8e\u73b0\u4ee3\u9898\u76ee\uff0c\u73c2\u6735\u8389\u6811\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u6765\u9a97\u5206\u3001\u5bf9\u62cd\u3002","title":"\u7528\u9014"},{"location":"ds/odt/odt/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"ds/odt/odt/#_5","text":"struct node_t { int l, r; mutable int v; node_t(int l): l(l) {} node_t(int l, int r, int v): l(l), r(r), v(v) {} friend bool operator <(const node_t &a, const node_t &b) { return a.l < b.l; } }; \u663e\u7136\u7684\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\u533a\u95f4\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u5bf9\u4e8e\u5b83\u7684\u8303\u56f4 \\([l,r]\\) \u548c\u503c \\(v\\) \uff0c\u6b64\u5904\u7684 \\(v\\) \u663e\u7136\u662f\u4f60\u6307\u5b9a\u7684\u6570\u636e\u3002 \u6807\u8bc6\u7b26 mutable \u8868\u793a\u300c\u53ef\u4fee\u6539\u7684\u300d\uff0c\u4e0e const \u5bf9\u5e94\uff0c\u5176\u4f5c\u7528\u662f\uff0c\u5bf9\u4e8e\u653e\u5165 set \u4e2d\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u5728\u4e0d\u53d6\u51fa\u7684\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u5176 \\(v\\) \u7684\u503c\u3002","title":"\u8282\u70b9\u7684\u5b58\u50a8"},{"location":"ds/odt/odt/#_6","text":"set<node_t> odt; \u663e\u7136\u7684\uff0c\u6ca1\u6709\u89e3\u91ca\u3002","title":"\u73c2\u6735\u8389\u6811\u672c\u73c2"},{"location":"ds/odt/odt/#_7","text":"auto split(int x) { auto it = --odt.upper_bound(node_t(x)); if (it->l == x) return it; auto [l, r, v] = *it; odt.erase(it); odt.emplace(l, x - 1, v); return odt.emplace(x, r, v).first; } split \u64cd\u4f5c\u662f\u73c2\u6735\u8389\u6811\u7684\u6839\u672c\u64cd\u4f5c\uff0c\u5176\u4f5c\u7528\u662f\uff0c\u5bf9\u4e8e\u5305\u542b\u4e00\u4e2a \\(x\\) \u7684\u533a\u95f4\uff0c\u5c06\u5176\u5206\u88c2\u4e3a\u4e24\u4e2a\u533a\u95f4 \\([l,x),[x,r]\\) \uff0c\u5e76\u8fd4\u56de \\(x\\) \u5904\u7684\u8fed\u4ee3\u5668\u3002 upper_bound \u8868\u793a\u627e\u5230\u7b2c\u4e00\u4e2a \\(\\ge x\\) \u7684\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5176\u81ea\u51cf\uff0c\u5373\u53ef\u4ee5\u627e\u5230\u7b2c\u4e00\u4e2a \\(l \\le x\\) \u7684\u8282\u70b9\u4e86\u3002 it->l == x \u5982\u679c \\(x\\) \u5df2\u7ecf\u662f\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u5fc5\u8981\u5206\u88c2\uff0c\u76f4\u63a5\u8fd4\u56de\u6b64\u8fed\u4ee3\u5668\u5373\u53ef\u3002 \u5426\u5219\uff0c\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u5e76\u6dfb\u52a0\u4e0a\u5bf9\u4e8e\u7684\u8282\u70b9\u3002\u6ce8\u610f set \u7684 insert \u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a pair<iterator, bool> \u5206\u522b\u8868\u793a\u52a0\u5165\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u4ee5\u53ca\u662f\u5426\u6210\u529f\u6dfb\u52a0\u3002","title":"\u533a\u95f4\u5206\u88c2"},{"location":"ds/odt/odt/#_8","text":"auto get(int l, int r) { auto itr = split(r + 1), itl = split(l); return make_pair(itl, itr); } \u8868\u793a\u5c06\u533a\u95f4 \\([l,r]\\) \u5206\u79bb\u51fa\u6765\uff0c\u5e76\u8fd4\u56de\u5176\u8fed\u4ee3\u5668 \\([itl,itr)\\) \u3002 \u5173\u4e8e\u4e3a\u4ec0\u4e48\u8981 split \u7684\u662f \\(r + 1\\) \u800c\u4e0d\u662f \\(r\\) \uff0c\u5176\u5b9e\u662f\u56e0\u4e3a\uff0c\u6211\u4eec\u7684 split \u53ef\u4ee5\u5c06\u533a\u95f4\u4ece \\(x\\) \u5904\u5206\u5f00\uff0c\u800c\u60f3\u8981\u5c06 \\([l,r]\\) \u5206\u79bb\u51fa\u6765\uff0c\u5c31\u9700\u8981\u4ece \\(r+1\\) \u65ad\u5f00\uff0c\u800c\u4e0d\u662f \\(r\\) \u3002\uff08\u8bf4\u8fd9\u4e2a\u7684\u539f\u56e0\u662f \u8fd9\u7bc7\u6587\u7ae0 \u7ed9\u51fa\u89e3\u91ca\u663e\u7136\u662f\u9519\u7684\uff09 \u6ce8\u610f \uff08\u6613\u9519\u70b9\uff09\uff1a\u6b64\u5904\u8981\u5148 split \u53f3\u7aef\u70b9 \\(r+1\\) \u7136\u540e\u518d split \u5de6\u7aef\u70b9 \\(l\\) \uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u5c06\u53f3\u7aef\u70b9\u5206\u79bb\u65f6\uff0c\u5982\u679c \\(l\\) \u548c \\(r+1\\) \u4f4d\u4e8e\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5728 split \u7aef\u70b9 \\(r+1\\) \u65f6\uff0c\u5c31\u4f1a\u5c06\u7aef\u70b9 \\(l\\) \u6240\u5728\u7684\u8282\u70b9 erase \u6389\uff0c\u5982\u6b64\u5c31\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u5bfc\u81f4 RE\u3002","title":"\u533a\u95f4\u5206\u79bb"},{"location":"ds/odt/odt/#_9","text":"void insert(int l, int r, int v) { odt.emplace(l, r, v); } \u663e\u7136\u7684\uff0c\u6ca1\u6709\u89e3\u91ca\u3002","title":"\u533a\u95f4\u63d2\u5165"},{"location":"ds/odt/odt/#_10","text":"void assign(int l, int r, int v) { auto [itl, itr] = get(l, r); odt.erase(itl, itr); odt.emplace(l, r, v); } \u5148\u5c06\u533a\u95f4 \\([l,r]\\) \u5206\u79bb\u51fa\u6765\uff0c\u7136\u540e\u5220\u9664 \\([itl,itr)\\) \u5185\u7684\u6240\u6709\u8282\u70b9\uff0c\u6700\u540e\u52a0\u5165\u65b0\u589e\u7684\u8282\u70b9\u3002 \u6ce8\u610f\u8fd9\u91cc\u7528\u5230\u4e86 set \u7684 erase \u7528\u6cd5\uff0c\u4f20\u5165\u5de6\u3001\u53f3\u8fed\u4ee3\u5668\uff0c\u5220\u9664\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8282\u70b9\u3002","title":"\u533a\u95f4\u63a8\u5e73"},{"location":"ds/odt/odt/#_11","text":"void performance(int l, int r, auto op) { auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) op(itl); } \u5957\u677f\u5b50\u5c31\u597d\u4e86\uff0c\u4e0b\u6587\u4f1a\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u7684\u64cd\u4f5c\u3002","title":"\u5176\u4ed6\u64cd\u4f5c"},{"location":"ds/odt/odt/#_12","text":"","title":"\u5e38\u89c1\u64cd\u4f5c"},{"location":"ds/odt/odt/#_13","text":"void add(int l, int r, ll v) { auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) itl->v += v; }","title":"\u533a\u95f4\u52a0"},{"location":"ds/odt/odt/#rkk","text":"auto rank_k(int l, int r, int k) -> ll { vector<pair<ll, int>> bucket; auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) bucket.push_back({itl->v, itl->r - itl->l + 1}); sort(bucket.begin(), bucket.end()); for (auto i : bucket) if ((k -= i.second) <= 0) return i.first; return -1; }","title":"\u533a\u95f4 rk.k"},{"location":"ds/odt/odt/#_14","text":"\u6709\u65f6\u6211\u4eec\u9700\u8981\u5feb\u901f\u6c42\u51fa\u4e00\u4e9b\u6570\u636e\uff0c\u6bd4\u5982\u533a\u95f4\u5185 \\(1\\) \u7684\u4e2a\u6570\uff0c\u5728\u53ea\u6709\u63a8\u5e73\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u63a8\u5e73\u7684\u8fc7\u7a0b\u4e2d\u5b9e\u65f6\u8bb0\u5f55\u53d8\u5316\u503c \\(\\Delta\\mathit{sum}\\) \u3002 int assign_result(int l, int r, int v) { auto [itl, itr] = get(l, r); auto itb = itl; int res = 0; for (; itl != itr; ++itl) if (itl->v != v) res += (v - itl->v) * (itl->r - itl->l + 1); odt.erase(itb, itr), odt.emplace(l, r, v); return res; }","title":"\u6c42\u5dee\u63a8\u5e73"},{"location":"ds/odt/odt/#_15","text":"\u5173\u4e8e Debug\uff1a void debug() { for (auto [l, r, v] : odt) cerr << \"(\" << l << \" \" << r << \": \" << v << \")\"; cerr << endl; } \u5173\u4e8e \\(n+1\\) \uff1a \u6211\u4eec\u63a8\u8350\u5728\u521d\u59cb\u5316\uff08insert\uff09\u4e4b\u540e\u518d\u6dfb\u52a0\u4e00\u4e2a\u533a\u95f4 \\([n+1,n+1]\\) \uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u6dfb\u52a0\u7684\u8bdd\uff0c\u67e5\u8be2\u533a\u95f4 \\([*,n]\\) \u5c31\u4f1a\u5bfc\u81f4\u4e0d\u53ef\u9884\u6599\u7684\u9519\u8bef\u3002","title":"\u5904\u7406\u7ec6\u8282\u95ee\u9898"},{"location":"ds/odt/odt/#_16","text":"\u5728\u6570\u636e\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u663e\u7136\u73c2\u6735\u8389\u6811\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(m\\log n)\\) \uff0c\u4f46\u662f\u524d\u6587\u4e5f\u8bf4\u8fc7\uff0c\u73c2\u6735\u8389\u6811\u7684\u590d\u6742\u5ea6\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u51fa\u9898\u4eba\u5c31\u7b97\u7528\u811a\u9020\u6570\u636e\u4e5f\u80fd\u968f\u968f\u4fbf\u4fbf\u7684\u5361\u6b7b\u73c2\u6735\u8389\u6811\uff08\u4f24\u5fc3 \u4e8e\u662f\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e9b\u4f18\u5316\u7684\u6280\u5de7\uff0c\u6216\u8005\u5176\u4ed6\u65b9\u5f0f\u7ef4\u62a4 ODT \u4e86\u3002 \u8fd8\u6709\u4e00\u7c7b\u95ee\u9898\uff08 P4979 \u77ff\u6d1e\uff1a\u574d\u584c \uff09\uff0c\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u503c\u76f8\u540c\u3002\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u7406\u8bba\u4e0a\uff0c\u503c\u76f8\u540c\u7684\u533a\u95f4\u6700\u597d\u7531\u8282\u70b9\u8868\u793a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4f18\u5316\u7684\u65b9\u6cd5\uff0c\u4e00\u8fb9\u67e5\u8be2\u4e00\u8fb9\u8bb2\u7b49\u503c\u7684\u533a\u95f4\u63a8\u5e73\uff0c\u6ce8\u610f\u5230\u63a8\u5e73\u64cd\u4f5c\u4e5f\u662f\u6709 \\(\\mathcal O(\\log n)\\) \u7684\u590d\u6742\u5ea6\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\uff0c\u6700\u8fdc\u53ef\u4ee5\u5ef6\u4f38\u5230\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u533a\u95f4\u503c\u5168\u90fd\u76f8\u7b49\uff0c\u518d\u63a8\u5e73\u8fd9\u4e2a\u533a\u95f4\u5373\u53ef\u3002 PS\uff1a\u8fd9\u4e2a\u4e0d\u77e5\u9053\u5c06\u6765\u4f1a\u4e0d\u4f1a\u88ab hack\uff0c\u8be6\u89c1\u6211\u53d1\u7684\u8ba8\u8bba https://www.luogu.com.cn/discuss/732354 \u3002","title":"\u5173\u4e8e\u975e\u968f\u673a\u6570\u636e"},{"location":"ds/odt/odt/#_17","text":"\u73c2\u6735\u8389\u6811\u4e0d\u662f\u6b63\u89e3\u7684\u9898\uff0c\u5927\u90e8\u5206\u65f6\u5019\u9700\u8981\u5438\u6c27\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u73c2\u6735\u8389\u6389\u6c34\u91cc\u4e86\uff08\u5a01\u5ec9\u5feb\u53bb\u6551\u4f60\u8001\u5a46\u3002","title":"\u5173\u4e8e\u5438\u6c27"},{"location":"ds/odt/odt/#_18","text":"\u94fe\u63a5\uff1a https://www.luogu.com.cn/training/418574 \u3002 \u6700\u540e\u7684\u6700\u540e\uff0c\u653e\u4e00\u4e2a\u5927\u6a21\u677f\u5427\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class odt_t { private: struct node_t { int l, r; mutable int v; node_t(int l): l(l) {} node_t(int l, int r, int v): l(l), r(r), v(v) {} friend bool operator <(const node_t &a, const node_t &b) { return a.l < b.l; } }; set<node_t> odt; auto split(int x) { auto it = --odt.upper_bound(node_t(x)); if (it->l == x) return it; auto [l, r, v] = *it; odt.erase(it); odt.emplace(l, x - 1, v); return odt.emplace(x, r, v).first; } auto get(int l, int r) { auto itr = split(r + 1), itl = split(l); return make_pair(itl, itr); } public: void insert(int l, int r, int v) { odt.emplace(l, r, v); } void assign(int l, int r, int v) { auto [itl, itr] = get(l, r); odt.erase(itl, itr); odt.emplace(l, r, v); } int assign_result(int l, int r, int v) { auto [itl, itr] = get(l, r); auto itb = itl; int res = 0; for (; itl != itr; ++itl) if (itl->v != v) res += (v - itl->v) * (itl->r - itl->l + 1); odt.erase(itb, itr), odt.emplace(l, r, v); return res; } void add(int l, int r, ll v) { auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) itl->v += v; } auto rank_k(int l, int r, int k) -> ll { vector<pair<ll, int>> bucket; auto [itl, itr] = get(l, r); for (; itl != itr; ++itl) bucket.push_back({itl->v, itl->r - itl->l + 1}); sort(bucket.begin(), bucket.end()); for (auto i : bucket) if ((k -= i.second) <= 0) return i.first; return -1; } void debug() { for (auto [l, r, v] : odt) cerr << \"(\" << l << \" \" << r << \": \" << v << \")\"; cerr << endl; } };","title":"\u4f8b\u9898"},{"location":"ds/offline/mo/mo/","text":"\u666e\u901a\u83ab\u961f \u00b6 \u5f62\u5f0f \u00b6 \u6709\u5e8f\u5217 \\([1,n]\\) \u4e0a\u7684\u95ee\u9898 \\([l,r]\\) \u5171 \\(m\\) \u4e2a\u3002 \u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u8003\u8651\u4ece\u4e00\u4e2a\u533a\u95f4\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u533a\u95f4\uff0c\u5373\uff0c \\[ [l,r]\\to[l-1,r]/[l+1,r]/[l,r-1]/[l,r+1] \\] \u82e5\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u5728 \\(\\mathcal O(1)\\) \u7684\u505a\u5b8c\uff0c\u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff0c \\[ \\mathcal O(n\\sqrt n) \\] \u5047\u8bbe \\(n,m\\) \u540c\u9636\u3002 \u505a\u6cd5 \u00b6 \u79bb\u7ebf \u00b6 \u6211\u4eec\u8003\u8651\u4ece\u4e00\u4e2a\u8be2\u95ee\uff0c\u5c06\u533a\u95f4\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u3002 int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; if (x == y) { // \u7ecf\u5e38\u4f1a\u5728\u8fd9\u91cc\u6709\u7279\u52241 continue; } while (x < l) add(--l); while (y > r) add(++r); while (x > l) del(l++); while (y < r) del(r--); ans[q[i].id] = get_ans(l, r); } \u6ce8\u610f\u53ea\u6709\u5148\u62d3\u5c55\u5de6\u53f3\u7aef\u70b9\uff0c\u518d\u6536\u7f29\u624d\u662f\u6b63\u786e\u7684\u3002 \u6392\u5e8f \u00b6 \u4f46\u662f\uff0c\u53ea\u8fd9\u4e48\u505a\u663e\u7136\u53ef\u4ee5\u5361\u6389\u3002 \u6211\u4eec\u8003\u8651\u5bf9\u8be2\u95ee\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5176\u590d\u6742\u5ea6\u6b63\u786e\u3002 struct query { int id, l, r; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; int n, m, c[N]; int siz, belong[N]; cin >> n >> m, siz = sqrt(n); for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= m; ++i) q[i].id = i, cin >> q[i].l >> q[i].r; sort(q + 1, q + m + 1); \u4ee5\u7b2c\u4e00\u5173\u952e\u5b57 \\(l\\) \uff0c\u7b2c\u4e8c\u5173\u952e\u5b57 \\(r\\) \u6392\u5e8f\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a \\([l,r]\\) \u7684\u8be2\u95ee\u53ef\u4ee5\u770b\u6210\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u3002 \u7406\u8bba\u4e0a\uff0c\u590d\u6742\u5ea6\u6700\u4f18\u7684\u60c5\u51b5\u662f\uff0c\u4e8c\u7ef4\u4e2d\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6211\u4eec\u4e0d\u8fd9\u4e48\u590d\u6742\uff0c\u76f4\u63a5\u5206\u5757\uff0c\u540c\u65f6\u5e94\u7528\u5947\u5076\u5316\u6392\u5e8f\u3002 \u590d\u6742\u5ea6\u548c\u5757\u957f \u00b6 \u8bbe\u5757\u957f\u4e3a \\(B\\) \uff0c\u90a3\u4e48\u6709 \\(n/B\\) \u4e2a\u5757\uff0c \u5de6\u7aef\u70b9\u662f\u6709\u5e8f\u7684\uff0c\u6bcf\u6b21\u8be2\u95ee\u6700\u591a\u79fb\u52a8 \\(\\mathcal O(B)\\) \u6b21\uff0c \u5728\u4e00\u4e2a\u5757\u5185\uff0c\u53f3\u7aef\u70b9\u6700\u574f\u79fb\u52a8 \\(\\mathcal O(n)\\) \u6b21\uff08\u5168\u8d70\u4e00\u904d\uff09\u3002 \u56e0\u6b64\uff0c\u7406\u8bba\u79fb\u52a8\u6b21\u6570\u4e3a\uff0c \\[ \\mathcal O\\left(mB+{n^2\\over B}\\right) \\] \u6839\u636e\u4e0d\u7b49\u5f0f\uff0c \\[ mB+{n^2\\over B}\\ge2\\sqrt{mn^2}=\\mathcal O(n\\sqrt m) \\] \u5f53\u4e14\u4ec5\u5f53\uff0c \\[ mB={n^2\\over B} \\] \u4e5f\u5c31\u662f\uff0c \\[ B={n\\over\\sqrt{m}} \\] \u5f53\u9ed8\u8ba4 \\(n,m\\) \u540c\u9636\u65f6\uff0c\u53d6 \\(B=\\sqrt n\\) \u5373\u53ef\u3002 \u542c\u8bf4 lxl \u66fe\u7ecf\u8bf4\uff0c\u5757\u957f\u6700\u597d\u4e3a\uff0c \\[ B={n\\over\\sqrt{2m/3}} \\] \u6ca1\u6709\u6d4b\u8bd5\u8fc7\u3002 \u4e3a\u907f\u514d \\(m\\gg n\\) \u5bfc\u81f4 \\(B=0\\) \uff0c\u53ef\u4ee5\u5199\uff0c \\[ \\texttt{B = max(1, int(n / sqrt(m * 2 / 3.0)))} \\] UPD\uff1a\u4e0d\u786e\u5b9a\u4e0a\u9762\u8fd9\u4e2a\u6b63\u786e\u3002 \u6839\u53f7\u5e73\u8861 \u00b6 \u666e\u901a\u5206\u5757\u7684\u79fb\u52a8\u548c\u67e5\u8be2\u64cd\u4f5c\u662f\u4e0d\u5e73\u8861\u7684\uff0c \u6839\u636e\u4e0a\u9762\u7684\u8bc1\u660e\uff0c\u6709\u7ed3\u8bba\uff0c \u79fb\u52a8\u603b\u5171\u6709 \\(\\mathcal O(n\\sqrt m)\\) \u6b21\uff1b \u67e5\u8be2\u603b\u5171\u6709 \\(\\mathcal O(m)\\) \u6b21\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u53ef\u4ee5 \\(\\mathcal O(1)\\) \u79fb\u52a8\uff0c \\(\\mathcal O(\\sqrt n)\\) \u67e5\u8be2\uff08\u6216\u66f4\u4f18\uff09\uff0c \u90a3\u4e48\u5c31\u53ef\u4ee5\u5728 \\(\\mathcal O(n\\sqrt m+m\\sqrt n)\\) \u5b8c\u6210\u8be2\u95ee\u3002 \u5047\u8bbe \\(n,m\\) \u540c\u9636\uff0c\u5c31\u662f \\(\\mathcal O(n\\sqrt n)\\) \u7684\u3002 \u4f8b\u9898 \u00b6 \u4f8b\u9898\u4e00\uff1aP3901 \u6570\u5217\u627e\u4e0d\u540c \u00b6 \u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u662f\u5426\u4e92\u4e0d\u76f8\u540c\u3002 \u8bb0\u5f55\u53d8\u91cf \\(\\text{cnt}\\) \u8868\u793a\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u51fa\u73b0\u4e24\u6b21\u53ca\u4ee5\u4e0a\u3002 \u62d3\u5c55\u7684\u65f6\u5019\u7528\u6876\u5904\u7406\u4e00\u4e0b\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 1e6 + 10; int n, t, a[N]; int siz, belong[N]; struct query { int l, r, id; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; int bucket[N], cnt; void add(int x) { x = a[x]; if (bucket[x]++ == 1) ++cnt; } void del(int x) { x = a[x]; if (--bucket[x] == 1) --cnt; } bool get_ans() { return cnt == 0; } bool ans[N]; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> t, siz = sqrt(n); for (int i = 1; i <= n; ++i) cin >> a[i], belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= t; ++i) q[i].id = i, cin >> q[i].l >> q[i].r; sort(q + 1, q + t + 1); int l = 1, r = 0; for (int i = 1; i <= t; ++i) { int x = q[i].l, y = q[i].r; if (x == y) { ans[q[i].id] = true; continue; } while (l > x) add(--l); while (r < y) add(++r); while (l < x) del(l++); while (r > y) del(r--); ans[q[i].id] = get_ans(); } for (int i = 1; i <= t; ++i) cout << (ans[i] ? \"Yes\" : \"No\") << endl; return 0; } \u4f8b\u9898\u4e8c\uff1aP2709 \u5c0fB\u7684\u8be2\u95ee \u00b6 \u6c42\u533a\u95f4\u6bcf\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u7684\u5e73\u65b9\u548c\u3002 \u76f4\u63a5\u7ef4\u62a4\u5373\u53ef\uff0c\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c \u6bcf\u6b21\u5148\u628a\u539f\u8d21\u732e\u5220\u53bb\uff0c\u66f4\u6539\u540e\u76f4\u63a5\u52a0\u5165\u73b0\u8d21\u732e\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 5e4 + 10; int n, m, k; int a[N], siz, belong[N]; struct query { int id, l, r; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; int bucket[N], ans[N]; int res = 0; void add(int x) { x = a[x]; res -= bucket[x] * bucket[x]; ++bucket[x]; res += bucket[x] * bucket[x]; } void del(int x) { x = a[x]; res -= bucket[x] * bucket[x]; --bucket[x]; res += bucket[x] * bucket[x]; } int get_ans() { return res; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m >> k, siz = sqrt(n); for (int i = 1; i <= n; ++i) cin >> a[i], belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= m; ++i) q[i].id = i, cin >> q[i].l >> q[i].r; sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; if (x == y) { ans[q[i].id] = 1; continue; } while (x < l) add(--l); while (y > r) add(++r); while (x > l) del(l++); while (y < r) del(r--); ans[q[i].id] = get_ans(); } copy_n(ans + 1, m, ostream_iterator<int>(cout, \"\\n\")); return 0; } \u4f8b\u9898\u4e09\uff1aP1494 \u5c0f Z \u7684\u889c\u5b50 \u00b6 \u6700\u7ecf\u5178\u7684\u83ab\u961f\u677f\u5b50\u9898\u3002 \u548c\u4e0a\u4e00\u9898\u4e00\u6837\u3002 \u7528 C++ \u81ea\u5e26\u7684 __gcd \u5c31\u53ef\u4ee5\uff0c\u4e0d\u4f1a\u88ab\u5361\u5e38\uff08O2\uff09\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" #define gcd(x, y) __gcd(x, y) using ll = long long; constexpr int N = 5e4 + 10; int n, m, c[N]; int siz, belong[N]; struct query { int id, l, r; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; pair<ll, ll> ans[N]; int bucket[N]; ll res; void add(int x) { x = c[x]; res -= bucket[x] * (bucket[x] - 1); ++bucket[x]; res += bucket[x] * (bucket[x] - 1); } void del(int x) { x = c[x]; res -= bucket[x] * (bucket[x] - 1); --bucket[x]; res += bucket[x] * (bucket[x] - 1); } pair<ll, ll> get_ans(int l, int r) { ll a = res; ll b = 1ll * (r - l + 1) * (r - l); auto g = gcd(a, b); return make_pair(a / g, b / g); } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m, siz = sqrt(n); for (int i = 1; i <= n; ++i) cin >> c[i], belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= m; ++i) q[i].id = i, cin >> q[i].l >> q[i].r; sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; if (x == y) { ans[q[i].id] = make_pair(0ll, 1ll); continue; } while (x < l) add(--l); while (y > r) add(++r); while (x > l) del(l++); while (y < r) del(r--); ans[q[i].id] = get_ans(l, r); } for (int i = 1; i <= m; ++i) cout << ans[i].first << \"/\" << ans[i].second << endl; return 0; } \u4f8b\u9898\u56db\uff1aCF375D Tree and Queries \u00b6 \u6ce8\u610f\u5230\u5b50\u6811\u67e5\u8be2\u53ef\u4ee5\u76f4\u63a5 DFS \u5e8f\u533a\u95f4\u67e5\u8be2\u3002 \u7ef4\u62a4\u51fa\u73b0\u6b21\u6570 \\(\\ge k\\) \u7684\u6b21\u6570\u7684\u65b9\u6cd5\uff1a \u7528 \\(\\text{bucket}(x)\\) \u8868\u793a\u4e00\u4e2a\u6570 \\((x)\\) \u7684\u51fa\u73b0\u6b21\u6570\uff1b \u7528 \\(\\text{count}(c)\\) \u8868\u793a\u51fa\u73b0\u6b21\u6570\u4e3a \\((c)\\) \u7684\u6570\u7684\u4e2a\u6570\u3002 \u6ce8\u610f\u5230 \\(\\ge k\\) \u5c31\u662f\u540e\u7f00\u6c42\u548c\u3002 \u6211\u4eec\u9996\u5148\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4 / \u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u8003\u8651\u6839\u53f7\u5e73\u8861\u3002 \u6211\u4eec\u6700\u4f18\u662f\u4ee5 \\(\\mathcal O(1)\\) \u63d2\u5165\uff0c \\(\\mathcal O(\\sqrt n)\\) \u67e5\u8be2\u3002 \u6570\u5217\u5206\u5757\u5373\u53ef\uff0c\u540c\u65f6\u5e94\u7528\u540c\u6837\u4e0a\u9762\u7684\u6280\u5de7\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 1e5 + 10; int n, m, belong[N]; int _col[N], col[N]; vector<int> g[N]; int siz[N], dfn[N], tot; void dfs(int u, int fa) { dfn[u] = ++tot; col[tot] = _col[u]; siz[u] = 1; for (int v : g[u]) { if (v == fa) continue; dfs(v, u); siz[u] += siz[v]; } } struct query { int id, l, r, k; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; int ans[N]; int bucket[N]; int arr[N], sz, cnt; int L[N], R[N]; int sum[N]; void modify(int x, int v) { arr[x] += v; sum[belong[x]] += v; } void add(int x) { x = col[x]; modify(bucket[x], -1); ++bucket[x]; modify(bucket[x], 1); } void del(int x) { x = col[x]; modify(bucket[x], -1); --bucket[x]; modify(bucket[x], 1); } int get_ans(int k) { int p = belong[k]; int res = 0; for (int i = k; i <= R[p]; ++i) res += arr[i]; for (int i = p + 1; i <= cnt; ++i) res += sum[i]; return res; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m, sz = sqrt(n); cnt = (n - 1) / sz + 1; for (int i = 1; i <= n; ++i) cin >> _col[i], belong[i] = (i - 1) / sz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * sz + 1, R[i] = L[i] + sz - 1; R[cnt] = n; for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v); g[v].push_back(u); } dfs(1, -1); for (int i = 1; i <= m; ++i) { int u, k; cin >> u >> k; q[i].k = k; q[i].id = i; q[i].l = dfn[u]; q[i].r = dfn[u] + siz[u] - 1; } sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; if (q[i].k > n) { ans[q[i].id] = 0; continue; } while (x < l) add(--l); while (y > r) add(++r); while (x > l) del(l++); while (y < r) del(r--); ans[q[i].id] = get_ans(q[i].k); } copy_n(ans + 1, m, ostream_iterator<int>(cout, \"\\n\")); return 0; }","title":"\u666e\u901a\u83ab\u961f"},{"location":"ds/offline/mo/mo/#_1","text":"","title":"\u666e\u901a\u83ab\u961f"},{"location":"ds/offline/mo/mo/#_2","text":"\u6709\u5e8f\u5217 \\([1,n]\\) \u4e0a\u7684\u95ee\u9898 \\([l,r]\\) \u5171 \\(m\\) \u4e2a\u3002 \u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u8003\u8651\u4ece\u4e00\u4e2a\u533a\u95f4\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u533a\u95f4\uff0c\u5373\uff0c \\[ [l,r]\\to[l-1,r]/[l+1,r]/[l,r-1]/[l,r+1] \\] \u82e5\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u5728 \\(\\mathcal O(1)\\) \u7684\u505a\u5b8c\uff0c\u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff0c \\[ \\mathcal O(n\\sqrt n) \\] \u5047\u8bbe \\(n,m\\) \u540c\u9636\u3002","title":"\u5f62\u5f0f"},{"location":"ds/offline/mo/mo/#_3","text":"","title":"\u505a\u6cd5"},{"location":"ds/offline/mo/mo/#_4","text":"\u6211\u4eec\u8003\u8651\u4ece\u4e00\u4e2a\u8be2\u95ee\uff0c\u5c06\u533a\u95f4\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u3002 int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; if (x == y) { // \u7ecf\u5e38\u4f1a\u5728\u8fd9\u91cc\u6709\u7279\u52241 continue; } while (x < l) add(--l); while (y > r) add(++r); while (x > l) del(l++); while (y < r) del(r--); ans[q[i].id] = get_ans(l, r); } \u6ce8\u610f\u53ea\u6709\u5148\u62d3\u5c55\u5de6\u53f3\u7aef\u70b9\uff0c\u518d\u6536\u7f29\u624d\u662f\u6b63\u786e\u7684\u3002","title":"\u79bb\u7ebf"},{"location":"ds/offline/mo/mo/#_5","text":"\u4f46\u662f\uff0c\u53ea\u8fd9\u4e48\u505a\u663e\u7136\u53ef\u4ee5\u5361\u6389\u3002 \u6211\u4eec\u8003\u8651\u5bf9\u8be2\u95ee\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5176\u590d\u6742\u5ea6\u6b63\u786e\u3002 struct query { int id, l, r; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; int n, m, c[N]; int siz, belong[N]; cin >> n >> m, siz = sqrt(n); for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= m; ++i) q[i].id = i, cin >> q[i].l >> q[i].r; sort(q + 1, q + m + 1); \u4ee5\u7b2c\u4e00\u5173\u952e\u5b57 \\(l\\) \uff0c\u7b2c\u4e8c\u5173\u952e\u5b57 \\(r\\) \u6392\u5e8f\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a \\([l,r]\\) \u7684\u8be2\u95ee\u53ef\u4ee5\u770b\u6210\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u3002 \u7406\u8bba\u4e0a\uff0c\u590d\u6742\u5ea6\u6700\u4f18\u7684\u60c5\u51b5\u662f\uff0c\u4e8c\u7ef4\u4e2d\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6211\u4eec\u4e0d\u8fd9\u4e48\u590d\u6742\uff0c\u76f4\u63a5\u5206\u5757\uff0c\u540c\u65f6\u5e94\u7528\u5947\u5076\u5316\u6392\u5e8f\u3002","title":"\u6392\u5e8f"},{"location":"ds/offline/mo/mo/#_6","text":"\u8bbe\u5757\u957f\u4e3a \\(B\\) \uff0c\u90a3\u4e48\u6709 \\(n/B\\) \u4e2a\u5757\uff0c \u5de6\u7aef\u70b9\u662f\u6709\u5e8f\u7684\uff0c\u6bcf\u6b21\u8be2\u95ee\u6700\u591a\u79fb\u52a8 \\(\\mathcal O(B)\\) \u6b21\uff0c \u5728\u4e00\u4e2a\u5757\u5185\uff0c\u53f3\u7aef\u70b9\u6700\u574f\u79fb\u52a8 \\(\\mathcal O(n)\\) \u6b21\uff08\u5168\u8d70\u4e00\u904d\uff09\u3002 \u56e0\u6b64\uff0c\u7406\u8bba\u79fb\u52a8\u6b21\u6570\u4e3a\uff0c \\[ \\mathcal O\\left(mB+{n^2\\over B}\\right) \\] \u6839\u636e\u4e0d\u7b49\u5f0f\uff0c \\[ mB+{n^2\\over B}\\ge2\\sqrt{mn^2}=\\mathcal O(n\\sqrt m) \\] \u5f53\u4e14\u4ec5\u5f53\uff0c \\[ mB={n^2\\over B} \\] \u4e5f\u5c31\u662f\uff0c \\[ B={n\\over\\sqrt{m}} \\] \u5f53\u9ed8\u8ba4 \\(n,m\\) \u540c\u9636\u65f6\uff0c\u53d6 \\(B=\\sqrt n\\) \u5373\u53ef\u3002 \u542c\u8bf4 lxl \u66fe\u7ecf\u8bf4\uff0c\u5757\u957f\u6700\u597d\u4e3a\uff0c \\[ B={n\\over\\sqrt{2m/3}} \\] \u6ca1\u6709\u6d4b\u8bd5\u8fc7\u3002 \u4e3a\u907f\u514d \\(m\\gg n\\) \u5bfc\u81f4 \\(B=0\\) \uff0c\u53ef\u4ee5\u5199\uff0c \\[ \\texttt{B = max(1, int(n / sqrt(m * 2 / 3.0)))} \\] UPD\uff1a\u4e0d\u786e\u5b9a\u4e0a\u9762\u8fd9\u4e2a\u6b63\u786e\u3002","title":"\u590d\u6742\u5ea6\u548c\u5757\u957f"},{"location":"ds/offline/mo/mo/#_7","text":"\u666e\u901a\u5206\u5757\u7684\u79fb\u52a8\u548c\u67e5\u8be2\u64cd\u4f5c\u662f\u4e0d\u5e73\u8861\u7684\uff0c \u6839\u636e\u4e0a\u9762\u7684\u8bc1\u660e\uff0c\u6709\u7ed3\u8bba\uff0c \u79fb\u52a8\u603b\u5171\u6709 \\(\\mathcal O(n\\sqrt m)\\) \u6b21\uff1b \u67e5\u8be2\u603b\u5171\u6709 \\(\\mathcal O(m)\\) \u6b21\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u53ef\u4ee5 \\(\\mathcal O(1)\\) \u79fb\u52a8\uff0c \\(\\mathcal O(\\sqrt n)\\) \u67e5\u8be2\uff08\u6216\u66f4\u4f18\uff09\uff0c \u90a3\u4e48\u5c31\u53ef\u4ee5\u5728 \\(\\mathcal O(n\\sqrt m+m\\sqrt n)\\) \u5b8c\u6210\u8be2\u95ee\u3002 \u5047\u8bbe \\(n,m\\) \u540c\u9636\uff0c\u5c31\u662f \\(\\mathcal O(n\\sqrt n)\\) \u7684\u3002","title":"\u6839\u53f7\u5e73\u8861"},{"location":"ds/offline/mo/mo/#_8","text":"","title":"\u4f8b\u9898"},{"location":"ds/offline/mo/mo/#p3901","text":"\u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u662f\u5426\u4e92\u4e0d\u76f8\u540c\u3002 \u8bb0\u5f55\u53d8\u91cf \\(\\text{cnt}\\) \u8868\u793a\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u51fa\u73b0\u4e24\u6b21\u53ca\u4ee5\u4e0a\u3002 \u62d3\u5c55\u7684\u65f6\u5019\u7528\u6876\u5904\u7406\u4e00\u4e0b\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 1e6 + 10; int n, t, a[N]; int siz, belong[N]; struct query { int l, r, id; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; int bucket[N], cnt; void add(int x) { x = a[x]; if (bucket[x]++ == 1) ++cnt; } void del(int x) { x = a[x]; if (--bucket[x] == 1) --cnt; } bool get_ans() { return cnt == 0; } bool ans[N]; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> t, siz = sqrt(n); for (int i = 1; i <= n; ++i) cin >> a[i], belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= t; ++i) q[i].id = i, cin >> q[i].l >> q[i].r; sort(q + 1, q + t + 1); int l = 1, r = 0; for (int i = 1; i <= t; ++i) { int x = q[i].l, y = q[i].r; if (x == y) { ans[q[i].id] = true; continue; } while (l > x) add(--l); while (r < y) add(++r); while (l < x) del(l++); while (r > y) del(r--); ans[q[i].id] = get_ans(); } for (int i = 1; i <= t; ++i) cout << (ans[i] ? \"Yes\" : \"No\") << endl; return 0; }","title":"\u4f8b\u9898\u4e00\uff1aP3901 \u6570\u5217\u627e\u4e0d\u540c"},{"location":"ds/offline/mo/mo/#p2709-b","text":"\u6c42\u533a\u95f4\u6bcf\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u7684\u5e73\u65b9\u548c\u3002 \u76f4\u63a5\u7ef4\u62a4\u5373\u53ef\uff0c\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c \u6bcf\u6b21\u5148\u628a\u539f\u8d21\u732e\u5220\u53bb\uff0c\u66f4\u6539\u540e\u76f4\u63a5\u52a0\u5165\u73b0\u8d21\u732e\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 5e4 + 10; int n, m, k; int a[N], siz, belong[N]; struct query { int id, l, r; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; int bucket[N], ans[N]; int res = 0; void add(int x) { x = a[x]; res -= bucket[x] * bucket[x]; ++bucket[x]; res += bucket[x] * bucket[x]; } void del(int x) { x = a[x]; res -= bucket[x] * bucket[x]; --bucket[x]; res += bucket[x] * bucket[x]; } int get_ans() { return res; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m >> k, siz = sqrt(n); for (int i = 1; i <= n; ++i) cin >> a[i], belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= m; ++i) q[i].id = i, cin >> q[i].l >> q[i].r; sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; if (x == y) { ans[q[i].id] = 1; continue; } while (x < l) add(--l); while (y > r) add(++r); while (x > l) del(l++); while (y < r) del(r--); ans[q[i].id] = get_ans(); } copy_n(ans + 1, m, ostream_iterator<int>(cout, \"\\n\")); return 0; }","title":"\u4f8b\u9898\u4e8c\uff1aP2709 \u5c0fB\u7684\u8be2\u95ee"},{"location":"ds/offline/mo/mo/#p1494-z","text":"\u6700\u7ecf\u5178\u7684\u83ab\u961f\u677f\u5b50\u9898\u3002 \u548c\u4e0a\u4e00\u9898\u4e00\u6837\u3002 \u7528 C++ \u81ea\u5e26\u7684 __gcd \u5c31\u53ef\u4ee5\uff0c\u4e0d\u4f1a\u88ab\u5361\u5e38\uff08O2\uff09\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" #define gcd(x, y) __gcd(x, y) using ll = long long; constexpr int N = 5e4 + 10; int n, m, c[N]; int siz, belong[N]; struct query { int id, l, r; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; pair<ll, ll> ans[N]; int bucket[N]; ll res; void add(int x) { x = c[x]; res -= bucket[x] * (bucket[x] - 1); ++bucket[x]; res += bucket[x] * (bucket[x] - 1); } void del(int x) { x = c[x]; res -= bucket[x] * (bucket[x] - 1); --bucket[x]; res += bucket[x] * (bucket[x] - 1); } pair<ll, ll> get_ans(int l, int r) { ll a = res; ll b = 1ll * (r - l + 1) * (r - l); auto g = gcd(a, b); return make_pair(a / g, b / g); } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m, siz = sqrt(n); for (int i = 1; i <= n; ++i) cin >> c[i], belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= m; ++i) q[i].id = i, cin >> q[i].l >> q[i].r; sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; if (x == y) { ans[q[i].id] = make_pair(0ll, 1ll); continue; } while (x < l) add(--l); while (y > r) add(++r); while (x > l) del(l++); while (y < r) del(r--); ans[q[i].id] = get_ans(l, r); } for (int i = 1; i <= m; ++i) cout << ans[i].first << \"/\" << ans[i].second << endl; return 0; }","title":"\u4f8b\u9898\u4e09\uff1aP1494 \u5c0f Z \u7684\u889c\u5b50"},{"location":"ds/offline/mo/mo/#cf375d-tree-and-queries","text":"\u6ce8\u610f\u5230\u5b50\u6811\u67e5\u8be2\u53ef\u4ee5\u76f4\u63a5 DFS \u5e8f\u533a\u95f4\u67e5\u8be2\u3002 \u7ef4\u62a4\u51fa\u73b0\u6b21\u6570 \\(\\ge k\\) \u7684\u6b21\u6570\u7684\u65b9\u6cd5\uff1a \u7528 \\(\\text{bucket}(x)\\) \u8868\u793a\u4e00\u4e2a\u6570 \\((x)\\) \u7684\u51fa\u73b0\u6b21\u6570\uff1b \u7528 \\(\\text{count}(c)\\) \u8868\u793a\u51fa\u73b0\u6b21\u6570\u4e3a \\((c)\\) \u7684\u6570\u7684\u4e2a\u6570\u3002 \u6ce8\u610f\u5230 \\(\\ge k\\) \u5c31\u662f\u540e\u7f00\u6c42\u548c\u3002 \u6211\u4eec\u9996\u5148\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4 / \u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u8003\u8651\u6839\u53f7\u5e73\u8861\u3002 \u6211\u4eec\u6700\u4f18\u662f\u4ee5 \\(\\mathcal O(1)\\) \u63d2\u5165\uff0c \\(\\mathcal O(\\sqrt n)\\) \u67e5\u8be2\u3002 \u6570\u5217\u5206\u5757\u5373\u53ef\uff0c\u540c\u65f6\u5e94\u7528\u540c\u6837\u4e0a\u9762\u7684\u6280\u5de7\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 1e5 + 10; int n, m, belong[N]; int _col[N], col[N]; vector<int> g[N]; int siz[N], dfn[N], tot; void dfs(int u, int fa) { dfn[u] = ++tot; col[tot] = _col[u]; siz[u] = 1; for (int v : g[u]) { if (v == fa) continue; dfs(v, u); siz[u] += siz[v]; } } struct query { int id, l, r, k; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; int ans[N]; int bucket[N]; int arr[N], sz, cnt; int L[N], R[N]; int sum[N]; void modify(int x, int v) { arr[x] += v; sum[belong[x]] += v; } void add(int x) { x = col[x]; modify(bucket[x], -1); ++bucket[x]; modify(bucket[x], 1); } void del(int x) { x = col[x]; modify(bucket[x], -1); --bucket[x]; modify(bucket[x], 1); } int get_ans(int k) { int p = belong[k]; int res = 0; for (int i = k; i <= R[p]; ++i) res += arr[i]; for (int i = p + 1; i <= cnt; ++i) res += sum[i]; return res; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m, sz = sqrt(n); cnt = (n - 1) / sz + 1; for (int i = 1; i <= n; ++i) cin >> _col[i], belong[i] = (i - 1) / sz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * sz + 1, R[i] = L[i] + sz - 1; R[cnt] = n; for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v); g[v].push_back(u); } dfs(1, -1); for (int i = 1; i <= m; ++i) { int u, k; cin >> u >> k; q[i].k = k; q[i].id = i; q[i].l = dfn[u]; q[i].r = dfn[u] + siz[u] - 1; } sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; if (q[i].k > n) { ans[q[i].id] = 0; continue; } while (x < l) add(--l); while (y > r) add(++r); while (x > l) del(l++); while (y < r) del(r--); ans[q[i].id] = get_ans(q[i].k); } copy_n(ans + 1, m, ostream_iterator<int>(cout, \"\\n\")); return 0; }","title":"\u4f8b\u9898\u56db\uff1aCF375D Tree and Queries"},{"location":"ds/offline/mo/mo_algo/","text":"\u83ab\u961f\u7b97\u6cd5 \u00b6 \u7406\u60f3\u83ab\u961f\u4fe1\u606f \u00b6 \u7ef4\u62a4\u4e00\u4e2a\u5b50\u96c6\u7684\u4fe1\u606f\uff0c\u652f\u6301\uff1a \\(\\mathcal O(a)\\) \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1b \\(\\mathcal O(b)\\) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 \u65e0\u6cd5\u6bd4\u76f4\u63a5\u66b4\u529b\u66f4\u9ad8\u6548\u5730\u5408\u5e76\u3002 \u95ee\u9898\uff1a\u7ed9\u51fa\u4e00\u4e2a\u70b9\u96c6\uff0c\u591a\u6b21\u8be2\u95ee\u70b9\u96c6\u7684\u4e00\u4e2a\u5b50\u96c6\u7684\u4fe1\u606f\u3002 \u4e00\u822c\u53ea\u8003\u8651\u7c7b\u4f3c\u533a\u95f4\u4fe1\u606f\u7684\u7ef4\u62a4\u3002 \u5e38\u89c1\u7684\u83ab\u961f\u5f62\u5f0f \u00b6 \u666e\u901a\u83ab\u961f\uff1b \u6811\u4e0a\u83ab\u961f\uff1b \u5728\u7ebf\u83ab\u961f\uff1b \u56de\u6eda\u83ab\u961f\uff1b \u4e8c\u6b21\u79bb\u7ebf\u83ab\u961f\uff1b \u2026\u2026","title":"\u83ab\u961f\u7b97\u6cd5"},{"location":"ds/offline/mo/mo_algo/#_1","text":"","title":"\u83ab\u961f\u7b97\u6cd5"},{"location":"ds/offline/mo/mo_algo/#_2","text":"\u7ef4\u62a4\u4e00\u4e2a\u5b50\u96c6\u7684\u4fe1\u606f\uff0c\u652f\u6301\uff1a \\(\\mathcal O(a)\\) \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1b \\(\\mathcal O(b)\\) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 \u65e0\u6cd5\u6bd4\u76f4\u63a5\u66b4\u529b\u66f4\u9ad8\u6548\u5730\u5408\u5e76\u3002 \u95ee\u9898\uff1a\u7ed9\u51fa\u4e00\u4e2a\u70b9\u96c6\uff0c\u591a\u6b21\u8be2\u95ee\u70b9\u96c6\u7684\u4e00\u4e2a\u5b50\u96c6\u7684\u4fe1\u606f\u3002 \u4e00\u822c\u53ea\u8003\u8651\u7c7b\u4f3c\u533a\u95f4\u4fe1\u606f\u7684\u7ef4\u62a4\u3002","title":"\u7406\u60f3\u83ab\u961f\u4fe1\u606f"},{"location":"ds/offline/mo/mo_algo/#_3","text":"\u666e\u901a\u83ab\u961f\uff1b \u6811\u4e0a\u83ab\u961f\uff1b \u5728\u7ebf\u83ab\u961f\uff1b \u56de\u6eda\u83ab\u961f\uff1b \u4e8c\u6b21\u79bb\u7ebf\u83ab\u961f\uff1b \u2026\u2026","title":"\u5e38\u89c1\u7684\u83ab\u961f\u5f62\u5f0f"},{"location":"ds/offline/mo/mo_tree/","text":"\u6811\u4e0a\u83ab\u961f \u00b6 \u7b80\u8ff0 \u00b6 \u5206\u4e3a\uff0c \u67e5\u8be2\u94fe\u4fe1\u606f\uff1b \u67e5\u8be2\u5b50\u6811\u4fe1\u606f\u3002 \u5982\u679c\u662f\u67e5\u8be2\u5b50\u6811\u4fe1\u606f\u7684\u7406\u60f3\u83ab\u961f\u4fe1\u606f\uff0c \u90a3\u4e48\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u662f polylog \u7684\uff08\u4f8b\u5982\u666e\u901a\u83ab\u961f\u4f8b\u9898\u56db\uff09\u3002 \u4e0b\u9762\u76f4\u63a5\u8ba8\u8bba\u67e5\u8be2\u94fe\u4fe1\u606f\u3002 \u62ec\u53f7\u5e8f\u5206\u5757 \u00b6 \u4e00\u822c\u7684\u83ab\u961f\u53ea\u80fd\u5904\u7406\u7ebf\u6027\u95ee\u9898\uff0c\u6211\u4eec\u8981\u628a\u6811\u5f3a\u884c\u538b\u6210\u5e8f\u5217\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u7684\u62ec\u53f7\u5e8f\u8dd1\u4e0b\u6765\uff0c\u628a\u62ec\u53f7\u5e8f\u5206\u5757\uff0c\u5728\u62ec\u53f7\u5e8f\u4e0a\u8dd1\u83ab\u961f\u3002 \u6211\u4eec DFS \u6811\u7684\u65f6\u5019\uff0c \u8fdb\u5165 \\(x\\) \u70b9\u5c31 \\(\\text{push}(+x)\\) \uff1b \u8d70\u51fa \\(x\\) \u70b9\u5c31 \\(\\text{push}(-x)\\) \u3002 \u7136\u540e\u5728\u632a\u52a8\u6307\u9488\uff08\u83ab\u961f\u8f6c\u79fb\uff09\u7684\u65f6\u5019\uff0c \u5982\u679c\u65b0\u52a0\u5165\u7684\u503c\u662f \\(+x\\) \uff0c\u5c31\u52a0\u5165 \\(x\\) \uff0c add(x) \uff1b \u5982\u679c\u65b0\u52a0\u5165\u7684\u503c\u662f \\(-x\\) \uff0c\u5c31\u5220\u9664 \\(x\\) \uff0c del(x) \u3002 \u5982\u679c\u65b0\u5220\u9664\u7684\u503c\u662f \\(+x\\) \uff0c\u5c31\u5220\u9664 \\(x\\) \uff0c del(x) \uff1b \u5982\u679c\u65b0\u5220\u9664\u7684\u503c\u662f \\(-x\\) \uff0c\u5c31\u52a0\u5165 \\(x\\) \uff0c add(x) \u3002 \u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u4ece\u6839\u5f00\u59cb\u7684\u8def\u5f84\uff0c\u4e0b\u53bb\u4e3a\u6b63\uff0c\u4e0a\u53bb\u4e3a\u8d1f\uff0c \u90a3\u4e48\uff0c\u4e00\u4e2a\u591a\u4f59\u5b50\u6811\u7684\u5185\u5bb9\uff0c\u5c31\u88ab\u62b5\u6d88\u4e86\uff08\u4ee3\u7801\u4e0a\u5bb9\u6613\u88ab\u5904\u7406\uff09\u3002 \u5b9e\u73b0\u4e0a\uff0c\u4e0e\u6211\u4eec\u4e0a\u9762\u7684\u7406\u8bba\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5730\u65b9\u3002 \u5b9e\u73b0 \u00b6 \u70b9\u6743 / \u8fb9\u6743 \u00b6 \u6211\u4eec\u901a\u5e38\u5bf9\u70b9\u6743\u79bb\u6563\u5316\uff0c int n, m, c[N]; cin >> n >> m; vector<int> s(n); for (int i = 1; i <= n; ++i) { cin >> c[i]; s[i - 1] = c[i]; } sort(s.begin(), s.end()); s.erase(unique(s.begin(), s.end()), s.end()); for (int i = 1; i <= n; ++i) c[i] = lower_bound(s.begin(), s.end(), c[i]) - s.begin() + 1; \u5bf9\u4e8e\u8fb9\u6743\uff0c\u901a\u5e38\u4e0b\u653e\u5230\u70b9\u6743\u3002 \u8def\u5f84\u7684\u8f6c\u5316 \u00b6 \u5bf9\u4e8e\u70b9\u6743\uff0c \u6211\u4eec\u53d1\u73b0\uff0c \u5bf9\u4e8e\u4e00\u6761\u76f4\u7684\u8def\u5f84 \\((u,v)\\) \uff0c\u5728\u62ec\u53f7\u5e8f\u4e0a\u9762\u8868\u793a\u4e3a \\(s(u)\\sim s(v)\\) \u800c\u4e00\u6761\u62d0\u5f2f\u7684\u8def\u5f84\u8868\u793a\u4e3a\uff0c \\(e(u)\\sim s(v)\\) \uff0c\u52a0\u4e0a\u6d88\u5931\u7684 \\(\\text{LCA}\\) \u3002 \u5047\u8bbe \\(s(u)<s(v)\\) \u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u91cd\u94fe\u5256\u5206\u6c42\u4e00\u4e0b LCA \u987a\u4fbf\u9884\u5904\u7406\u62ec\u53f7\u5e8f\u5373\u53ef\u3002 \u5b9e\u73b0 vector<int> g[N]; int fa[N], son[N]; int dep[N], siz[N]; int tot, top[N]; int dfs[2 * N], st[N], ed[N]; void dfs1(int u, int ff) { dfs[++tot] = u, st[u] = tot; int mx = -1; siz[u] = 1, son[u] = -1; for (int v : g[u]) { if (v == ff) continue; fa[v] = u, dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } dfs[++tot] = u, ed[u] = tot; } void dfs2(int u, int _top) { top[u] = _top; if (son[u] == -1) return; dfs2(son[u], _top); for (int v : g[u]) { if (v == fa[u]) continue; if (v == son[u]) continue; dfs2(v, v); } } int lca(int u, int v) { while (top[u] != top[v]) { if (dep[top[u]] > dep[top[v]]) u = fa[top[u]]; else v = fa[top[v]]; } return dep[u] < dep[v] ? u : v; } // Main for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v); g[v].push_back(u); } dfs1(1, -1), dfs2(1, 1); for (int i = 1; i <= m; ++i) { int x, y; cin >> x >> y; if (st[x] > st[y]) swap(x, y); int l = lca(x, y); if (l == x) q[i] = {i, st[x], st[y], -1}; else q[i] = {i, ed[x], st[y], l}; } \u5bf9\u4e8e\u8fb9\u6743\uff0c\u6211\u4eec\u53d1\u73b0\u4e0b\u653e\u4e4b\u540e\u8981\u53cd\u8fc7\u6765\uff0c if (st[x] > st[y]) swap(x, y); int l = lca(x, y); if (l == x) q[i] = {i, st[x], st[y], l}; else q[i] = {i, ed[x], st[y], -1}; \u8fd9\u5f88\u597d\u7406\u89e3\u3002 \u83ab\u961f\u7b97\u6cd5\u90e8\u5206 \u00b6 \u6211\u4eec\u53d1\u73b0\uff0c \u82e5\u4e00\u4e2a\u70b9\u662f\u7b2c\u4e00\u6b21\u88ab\u8ba1\u7b97\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u52a0\u5165\uff0c\u5426\u5219\u4e00\u5b9a\u662f\u5220\u9664\u3002 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ba1\u4e0a\u9762\u5947\u5947\u602a\u602a\u7684\u7406\u8bba\u90e8\u5206\uff0c \u5b9e\u73b0 int block, belong[2 * N]; struct query { int id, l, r, lca; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[M]; void add(int x) { x = c[x]; // do something ... } void del(int x) { x = c[x]; // do something ... } int get_ans() { // do something ... } void calc(int x) { vis[x] ? del(x) : add(x); vis[x] ^= 1; } int ans[M]; // Main block = max(1, int(tot / sqrt(m * 2 / 3.0))); for (int i = 1; i <= tot; ++i) belong[i] = (i - 1) / block + 1; sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; while (x < l) calc(dfs[--l]); while (y > r) calc(dfs[++r]); while (x > l) calc(dfs[l++]); while (y < r) calc(dfs[r--]); if (q[i].lca != -1) calc(q[i].lca); ans[q[i].id] = get_ans(); if (q[i].lca != -1) calc(q[i].lca); } for (int i = 1; i <= m; ++i) cout << ans[i] << endl; \u4f8b\u9898 \u00b6 \u4f8b\u9898\u4e00\uff1aSP10707 COT2 - Count on a tree II \u00b6 \u6c42\u6811\u4e0a\u4e24\u8282\u70b9\u7b80\u5355\u8def\u5f84\u4e2d\u7684\u70b9\u7684\u4e0d\u540c\u989c\u8272\u6570\u3002 \u7ecf\u5178\u4f8b\u9898\uff0c\u5c31\u662f\u4e0a\u9762\u7684\u4ee3\u7801\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 4e4 + 10; constexpr int M = 1e5 + 10; int n, m, c[N]; int block, belong[2 * N]; vector<int> g[N]; struct query { int id, l, r, lca; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[M]; // ----------------------------------------------------------------------------- int fa[N], son[N]; int dep[N], siz[N]; int tot, top[N]; int dfs[2 * N], st[N], ed[N]; void dfs1(int u, int ff) { dfs[++tot] = u, st[u] = tot; int mx = -1; siz[u] = 1, son[u] = -1; for (int v : g[u]) { if (v == ff) continue; fa[v] = u, dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } dfs[++tot] = u, ed[u] = tot; } void dfs2(int u, int _top) { top[u] = _top; if (son[u] == -1) return; dfs2(son[u], _top); for (int v : g[u]) { if (v == fa[u]) continue; if (v == son[u]) continue; dfs2(v, v); } } int lca(int u, int v) { while (top[u] != top[v]) { if (dep[top[u]] > dep[top[v]]) u = fa[top[u]]; else v = fa[top[v]]; } return dep[u] < dep[v] ? u : v; } // ----------------------------------------------------------------------------- bool vis[2 * N]; int res, bucket[N]; void add(int x) { x = c[x]; if (++bucket[x] == 1) ++res; } void del(int x) { x = c[x]; if (--bucket[x] == 0) --res; } void calc(int x) { vis[x] ? del(x) : add(x); vis[x] ^= 1; } int ans[M]; int get_ans() { return res; } // ----------------------------------------------------------------------------- signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m; vector<int> s(n); for (int i = 1; i <= n; ++i) cin >> c[i], s[i - 1] = c[i]; sort(s.begin(), s.end()); s.erase(unique(s.begin(), s.end()), s.end()); for (int i = 1; i <= n; ++i) c[i] = lower_bound(s.begin(), s.end(), c[i]) - s.begin() + 1; for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v); g[v].push_back(u); } dfs1(1, -1), dfs2(1, 1); for (int i = 1; i <= m; ++i) { int x, y; cin >> x >> y; if (st[x] > st[y]) swap(x, y); int l = lca(x, y); if (l == x) q[i] = {i, st[x], st[y], -1}; else q[i] = {i, ed[x], st[y], l}; } block = max(1, int(tot / sqrt(m * 2 / 3.0))); for (int i = 1; i <= tot; ++i) belong[i] = (i - 1) / block + 1; sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; while (x < l) calc(dfs[--l]); while (y > r) calc(dfs[++r]); while (x > l) calc(dfs[l++]); while (y < r) calc(dfs[r--]); if (q[i].lca != -1) calc(q[i].lca); ans[q[i].id] = get_ans(); if (q[i].lca != -1) calc(q[i].lca); } for (int i = 1; i <= m; ++i) cout << ans[i] << endl; return 0; } \u4f8b\u9898\u4e8c\uff1aQOJ7245 Frank Sinatra \u00b6 \u6c42\u8def\u5f84\u8fb9\u6743 \\(\\operatorname{mex}\\) \u3002 \u6211\u4eec\u628a\u70b9\u6743\u4e0b\u653e\uff0c\u76f4\u63a5\u503c\u57df\u5206\u5757\u5904\u7406\u5373\u53ef\uff0c\u7c7b\u4f3c P4137 Rmq Problem / mex \u3002 \u6b64\u5904\u4e00\u4e2a\u6280\u5de7\u5c31\u662f\uff0c\u503c\u57df\u4e3a \\([0,n]\\) \u7684\u5e8f\u5217 \\(\\operatorname{mex}\\) \u4e00\u5b9a\u5728 \\([0,n+1]\\) \u4e2d\uff0c\u4e5f\u5c31\u662f\u66f4\u5927\u7684\u6ca1\u6709\u610f\u4e49\u4e86\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #define NDEBUG 1 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 1e5 + 10; // ----------------------------------------------------------------------------- int n, m; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> g[N]; int col[N]; // ----------------------------------------------------------------------------- int dfs[2 * N], tot; int st[N], ed[N]; namespace hld { int fa[N], son[N]; int dep[N], siz[N]; int top[N]; void dfs1(int u, int ff) { dfs[++tot] = u, st[u] = tot; siz[u] = 1, son[u] = -1; int mx = -1; for (auto t : g[u]) { int v = t.v; if (v == ff) continue; col[v] = t.w; fa[v] = u, dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } dfs[++tot] = u, ed[u] = tot; } void dfs2(int u, int tp) { top[u] = tp; if (son[u] == -1) return; dfs2(son[u], tp); for (auto t : g[u]) { if (t.v == fa[u]) continue; if (t.v == son[u]) continue; dfs2(t.v, t.v); } } } int lca(int u, int v) { while (hld::top[u] != hld::top[v]) { if (hld::dep[hld::top[u]] > hld::dep[hld::top[v]]) u = hld::fa[hld::top[u]]; else v = hld::fa[hld::top[v]]; } return hld::dep[u] < hld::dep[v] ? u : v; } // ----------------------------------------------------------------------------- int block1, belong1[2 * N]; struct query { int id, l, r, lca; friend bool operator <(const query &a, const query &b) { if (belong1[a.l] != belong1[b.l]) return a.l < b.l; return belong1[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; // ----------------------------------------------------------------------------- bool vis[2 * N]; int block, cnt; int belong[N], L[N], R[N]; int bucket[N], appr[N]; void add(int x) { ++x; if (x > n) return; if (!bucket[x]) ++appr[belong[x]]; ++bucket[x]; } void del(int x) { ++x; if (x > n) return; --bucket[x]; if (!bucket[x]) --appr[belong[x]]; } int get_ans() { int inner = 1; while (inner <= cnt && appr[inner] == R[inner] - L[inner] + 1) ++inner; for (int i = L[inner]; i <= R[inner]; ++i) if (!bucket[i]) return i - 1; __builtin_unreachable(); return 0; } void calc(int x) { if (vis[x]) del(col[x]); else add(col[x]); vis[x] ^= 1; } // ----------------------------------------------------------------------------- int ans[N]; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m; // ??????? block = sqrt(n), cnt = (n - 1) / block + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / block + 1; for (int i = 1; i <= cnt; ++i) R[i] = i * block, L[i] = R[i] - block + 1; R[cnt] = n; // ???? for (int i = 2; i <= n; ++i) { int u, v, w; cin >> u >> v >> w; g[u].emplace_back(v, w); g[v].emplace_back(u, w); } // ????? hld::dfs1(1, -1); hld::dfs2(1, 1); col[1] = 1; for (int i = 1; i <= m; ++i) { int u, v; cin >> u >> v; if (st[u] > st[v]) swap(u, v); int l = lca(u, v); if (l == u) q[i] = query{i, st[u], st[v], l}; else q[i] = query{i, ed[u], st[v], -1}; } block1 = max(1, int(tot / sqrt(m * 2 / 3.0))); for (int i = 1; i <= tot; ++i) belong1[i] = (i - 1) / block1 + 1; sort(q + 1, q + m + 1); // ???? int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; while (x < l) calc(dfs[--l]); while (y > r) calc(dfs[++r]); while (x > l) calc(dfs[l++]); while (y < r) calc(dfs[r--]); if (q[i].lca != -1) calc(q[i].lca); ans[q[i].id] = get_ans(); if (q[i].lca != -1) calc(q[i].lca); } for (int i = 1; i <= m; ++i) cout << ans[i] << endl; return 0; } \u4f8b\u9898\u4e09\uff1aBaekjoon13892 ACM Tax \u00b6 \u540c\u4e0a\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #ifndef M_DEBUG #define NDEBUG 1 #define FAST_IO 1 #define D(x) ({ void(0); }) #else #define D(x) ({ cerr << \"| DEBUG #\" << __LINE__ << \" IN \" << __FUNCTION__ << \"() \\t| \\t\" << #x << \" = \\t[\" << (x) << \"]\\n\"; void(0); }) #endif #include <bits/stdc++.h> #ifdef FAST_IO #define endl \"\\n\" #endif using namespace std; // ----------------------------------------------------------------------------- // constexpr int N = 5e4 + 10; constexpr int N = 1e5 + 10; constexpr int M = 1e5 + 10; // ----------------------------------------------------------------------------- int n, m; int col[N]; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> g[N]; // ----------------------------------------------------------------------------- int fa[N], siz[N]; int son[N], dep[N]; int dfs[2 * N], tot; int st[N], ed[N]; void dfs1(int u, int ff) { dfs[++tot] = u; st[u] = tot; son[u] = -1; siz[u] = 1; int mx = -1; for (auto t : g[u]) { int v = t.v; if (v == ff) continue; col[v] = t.w; fa[v] = u; dep[v] = dep[u] + 1; dfs1(v, u); siz[u] += siz[v]; if (siz[v] > mx) { mx = siz[v]; son[u] = v; } } dfs[++tot] = u, ed[u] = tot; } int top[N]; void dfs2(int u, int to) { top[u] = to; if (son[u] == -1) return; dfs2(son[u], to); for (auto t : g[u]) { int v = t.v; if (v == fa[u]) continue; if (v == son[u]) continue; dfs2(v, v); } } int lca(int x, int y) { while (top[x] != top[y]) { if (dep[top[x]] > dep[top[y]]) x = fa[top[x]]; else y = fa[top[y]]; } if (dep[x] > dep[y]) return y; return x; } // ----------------------------------------------------------------------------- int block, belong[2 * N]; struct query { int id, l, r, lca; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } Q[M]; // ----------------------------------------------------------------------------- struct ans { int val; bool ft; ans(): val(0), ft(0) {} ans(int val): val(val), ft(0) {} ans(double val): val(int(val)), ft(val - int(val) != 0) {} friend ostream& operator <<(ostream &out, const ans &x) { out << x.val << (x.ft ? \".5\" : \".0\"); return out; } } Ans[M]; constexpr int MAXV = 1e5; constexpr int V = MAXV + 10; int block2, belong2[V]; int cnt2, L[V], R[V]; void init2() { block2 = sqrt(MAXV); cnt2 = (MAXV - 1) / block2 + 1; for (int i = 1; i <= MAXV; ++i) belong2[i] = (i - 1) / block2 + 1; for (int i = 1; i <= cnt2; ++i) R[i] = i * block2, L[i] = R[i] - block2 + 1; R[cnt2] = V; } int arr[V], sum[V]; void modify(int x, int v) { arr[x] += v; sum[belong2[x]] += v; } int rnk(int k) { int inner = 1; while (sum[inner] < k) k -= sum[inner], ++inner; for (int i = L[inner]; i <= R[inner]; ++i) { k -= arr[i]; if (k <= 0) return i; } __builtin_unreachable(); } int cnt; void add(int x) { ++cnt; modify(x, 1); } void del(int x) { --cnt; modify(x, -1); } ans get_ans() { if (cnt & 1) return rnk((cnt + 1) >> 1); return (rnk((cnt >> 1) + 1) + rnk(cnt >> 1)) / 2.0; } int vis[2 * N]; void calc(int x) { if (vis[x]) del(col[x]); else add(col[x]); vis[x] ^= 1; } // ----------------------------------------------------------------------------- void clear() { memset(arr, 0, sizeof arr); memset(sum, 0, sizeof sum); for (int i = 1; i <= n; ++i) g[i].clear(), g[i].shrink_to_fit(); cnt = tot = dep[1] = 0; memset(vis, 0, sizeof(int) * n * 2); } void Main() { cin >> n; clear(); for (int i = 2; i <= n; ++i) { int u, v, w; cin >> u >> v >> w; g[u].emplace_back(v, w); g[v].emplace_back(u, w); } dfs1(1, -1); dfs2(1, 1); col[1] = 1; cin >> m; for (int i = 1; i <= m; ++i) { int x, y; cin >> x >> y; if (st[x] > st[y]) swap(x, y); int l = lca(x, y); if (x == l) Q[i] = {i, st[x], st[y], l}; else Q[i] = {i, ed[x], st[y], -1}; } block = max(1, int(tot / sqrt(m * 2.0 / 3))); for (int i = 1; i <= tot; ++i) belong[i] = (i - 1) / block + 1; sort(Q + 1, Q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = Q[i].l, y = Q[i].r; if (x == y) { Ans[Q[i].id] = col[dfs[x]]; continue; } while (x < l) calc(dfs[--l]); while (y > r) calc(dfs[++r]); while (x > l) calc(dfs[l++]); while (y < r) calc(dfs[r--]); if (Q[i].lca != -1) calc(Q[i].lca); Ans[Q[i].id] = get_ans(); if (Q[i].lca != -1) calc(Q[i].lca); } for (int i = 1; i <= m; ++i) { cout << Ans[i] << endl; } } signed main() { #ifdef FAST_IO ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); #endif init2(); int T; cin >> T; while (T--) Main(); return 0; }","title":"\u6811\u4e0a\u83ab\u961f"},{"location":"ds/offline/mo/mo_tree/#_1","text":"","title":"\u6811\u4e0a\u83ab\u961f"},{"location":"ds/offline/mo/mo_tree/#_2","text":"\u5206\u4e3a\uff0c \u67e5\u8be2\u94fe\u4fe1\u606f\uff1b \u67e5\u8be2\u5b50\u6811\u4fe1\u606f\u3002 \u5982\u679c\u662f\u67e5\u8be2\u5b50\u6811\u4fe1\u606f\u7684\u7406\u60f3\u83ab\u961f\u4fe1\u606f\uff0c \u90a3\u4e48\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u662f polylog \u7684\uff08\u4f8b\u5982\u666e\u901a\u83ab\u961f\u4f8b\u9898\u56db\uff09\u3002 \u4e0b\u9762\u76f4\u63a5\u8ba8\u8bba\u67e5\u8be2\u94fe\u4fe1\u606f\u3002","title":"\u7b80\u8ff0"},{"location":"ds/offline/mo/mo_tree/#_3","text":"\u4e00\u822c\u7684\u83ab\u961f\u53ea\u80fd\u5904\u7406\u7ebf\u6027\u95ee\u9898\uff0c\u6211\u4eec\u8981\u628a\u6811\u5f3a\u884c\u538b\u6210\u5e8f\u5217\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u7684\u62ec\u53f7\u5e8f\u8dd1\u4e0b\u6765\uff0c\u628a\u62ec\u53f7\u5e8f\u5206\u5757\uff0c\u5728\u62ec\u53f7\u5e8f\u4e0a\u8dd1\u83ab\u961f\u3002 \u6211\u4eec DFS \u6811\u7684\u65f6\u5019\uff0c \u8fdb\u5165 \\(x\\) \u70b9\u5c31 \\(\\text{push}(+x)\\) \uff1b \u8d70\u51fa \\(x\\) \u70b9\u5c31 \\(\\text{push}(-x)\\) \u3002 \u7136\u540e\u5728\u632a\u52a8\u6307\u9488\uff08\u83ab\u961f\u8f6c\u79fb\uff09\u7684\u65f6\u5019\uff0c \u5982\u679c\u65b0\u52a0\u5165\u7684\u503c\u662f \\(+x\\) \uff0c\u5c31\u52a0\u5165 \\(x\\) \uff0c add(x) \uff1b \u5982\u679c\u65b0\u52a0\u5165\u7684\u503c\u662f \\(-x\\) \uff0c\u5c31\u5220\u9664 \\(x\\) \uff0c del(x) \u3002 \u5982\u679c\u65b0\u5220\u9664\u7684\u503c\u662f \\(+x\\) \uff0c\u5c31\u5220\u9664 \\(x\\) \uff0c del(x) \uff1b \u5982\u679c\u65b0\u5220\u9664\u7684\u503c\u662f \\(-x\\) \uff0c\u5c31\u52a0\u5165 \\(x\\) \uff0c add(x) \u3002 \u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u4ece\u6839\u5f00\u59cb\u7684\u8def\u5f84\uff0c\u4e0b\u53bb\u4e3a\u6b63\uff0c\u4e0a\u53bb\u4e3a\u8d1f\uff0c \u90a3\u4e48\uff0c\u4e00\u4e2a\u591a\u4f59\u5b50\u6811\u7684\u5185\u5bb9\uff0c\u5c31\u88ab\u62b5\u6d88\u4e86\uff08\u4ee3\u7801\u4e0a\u5bb9\u6613\u88ab\u5904\u7406\uff09\u3002 \u5b9e\u73b0\u4e0a\uff0c\u4e0e\u6211\u4eec\u4e0a\u9762\u7684\u7406\u8bba\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5730\u65b9\u3002","title":"\u62ec\u53f7\u5e8f\u5206\u5757"},{"location":"ds/offline/mo/mo_tree/#_4","text":"","title":"\u5b9e\u73b0"},{"location":"ds/offline/mo/mo_tree/#_5","text":"\u6211\u4eec\u901a\u5e38\u5bf9\u70b9\u6743\u79bb\u6563\u5316\uff0c int n, m, c[N]; cin >> n >> m; vector<int> s(n); for (int i = 1; i <= n; ++i) { cin >> c[i]; s[i - 1] = c[i]; } sort(s.begin(), s.end()); s.erase(unique(s.begin(), s.end()), s.end()); for (int i = 1; i <= n; ++i) c[i] = lower_bound(s.begin(), s.end(), c[i]) - s.begin() + 1; \u5bf9\u4e8e\u8fb9\u6743\uff0c\u901a\u5e38\u4e0b\u653e\u5230\u70b9\u6743\u3002","title":"\u70b9\u6743 / \u8fb9\u6743"},{"location":"ds/offline/mo/mo_tree/#_6","text":"\u5bf9\u4e8e\u70b9\u6743\uff0c \u6211\u4eec\u53d1\u73b0\uff0c \u5bf9\u4e8e\u4e00\u6761\u76f4\u7684\u8def\u5f84 \\((u,v)\\) \uff0c\u5728\u62ec\u53f7\u5e8f\u4e0a\u9762\u8868\u793a\u4e3a \\(s(u)\\sim s(v)\\) \u800c\u4e00\u6761\u62d0\u5f2f\u7684\u8def\u5f84\u8868\u793a\u4e3a\uff0c \\(e(u)\\sim s(v)\\) \uff0c\u52a0\u4e0a\u6d88\u5931\u7684 \\(\\text{LCA}\\) \u3002 \u5047\u8bbe \\(s(u)<s(v)\\) \u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u91cd\u94fe\u5256\u5206\u6c42\u4e00\u4e0b LCA \u987a\u4fbf\u9884\u5904\u7406\u62ec\u53f7\u5e8f\u5373\u53ef\u3002 \u5b9e\u73b0 vector<int> g[N]; int fa[N], son[N]; int dep[N], siz[N]; int tot, top[N]; int dfs[2 * N], st[N], ed[N]; void dfs1(int u, int ff) { dfs[++tot] = u, st[u] = tot; int mx = -1; siz[u] = 1, son[u] = -1; for (int v : g[u]) { if (v == ff) continue; fa[v] = u, dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } dfs[++tot] = u, ed[u] = tot; } void dfs2(int u, int _top) { top[u] = _top; if (son[u] == -1) return; dfs2(son[u], _top); for (int v : g[u]) { if (v == fa[u]) continue; if (v == son[u]) continue; dfs2(v, v); } } int lca(int u, int v) { while (top[u] != top[v]) { if (dep[top[u]] > dep[top[v]]) u = fa[top[u]]; else v = fa[top[v]]; } return dep[u] < dep[v] ? u : v; } // Main for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v); g[v].push_back(u); } dfs1(1, -1), dfs2(1, 1); for (int i = 1; i <= m; ++i) { int x, y; cin >> x >> y; if (st[x] > st[y]) swap(x, y); int l = lca(x, y); if (l == x) q[i] = {i, st[x], st[y], -1}; else q[i] = {i, ed[x], st[y], l}; } \u5bf9\u4e8e\u8fb9\u6743\uff0c\u6211\u4eec\u53d1\u73b0\u4e0b\u653e\u4e4b\u540e\u8981\u53cd\u8fc7\u6765\uff0c if (st[x] > st[y]) swap(x, y); int l = lca(x, y); if (l == x) q[i] = {i, st[x], st[y], l}; else q[i] = {i, ed[x], st[y], -1}; \u8fd9\u5f88\u597d\u7406\u89e3\u3002","title":"\u8def\u5f84\u7684\u8f6c\u5316"},{"location":"ds/offline/mo/mo_tree/#_7","text":"\u6211\u4eec\u53d1\u73b0\uff0c \u82e5\u4e00\u4e2a\u70b9\u662f\u7b2c\u4e00\u6b21\u88ab\u8ba1\u7b97\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u52a0\u5165\uff0c\u5426\u5219\u4e00\u5b9a\u662f\u5220\u9664\u3002 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ba1\u4e0a\u9762\u5947\u5947\u602a\u602a\u7684\u7406\u8bba\u90e8\u5206\uff0c \u5b9e\u73b0 int block, belong[2 * N]; struct query { int id, l, r, lca; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[M]; void add(int x) { x = c[x]; // do something ... } void del(int x) { x = c[x]; // do something ... } int get_ans() { // do something ... } void calc(int x) { vis[x] ? del(x) : add(x); vis[x] ^= 1; } int ans[M]; // Main block = max(1, int(tot / sqrt(m * 2 / 3.0))); for (int i = 1; i <= tot; ++i) belong[i] = (i - 1) / block + 1; sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; while (x < l) calc(dfs[--l]); while (y > r) calc(dfs[++r]); while (x > l) calc(dfs[l++]); while (y < r) calc(dfs[r--]); if (q[i].lca != -1) calc(q[i].lca); ans[q[i].id] = get_ans(); if (q[i].lca != -1) calc(q[i].lca); } for (int i = 1; i <= m; ++i) cout << ans[i] << endl;","title":"\u83ab\u961f\u7b97\u6cd5\u90e8\u5206"},{"location":"ds/offline/mo/mo_tree/#_8","text":"","title":"\u4f8b\u9898"},{"location":"ds/offline/mo/mo_tree/#sp10707-cot2-count-on-a-tree-ii","text":"\u6c42\u6811\u4e0a\u4e24\u8282\u70b9\u7b80\u5355\u8def\u5f84\u4e2d\u7684\u70b9\u7684\u4e0d\u540c\u989c\u8272\u6570\u3002 \u7ecf\u5178\u4f8b\u9898\uff0c\u5c31\u662f\u4e0a\u9762\u7684\u4ee3\u7801\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 4e4 + 10; constexpr int M = 1e5 + 10; int n, m, c[N]; int block, belong[2 * N]; vector<int> g[N]; struct query { int id, l, r, lca; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[M]; // ----------------------------------------------------------------------------- int fa[N], son[N]; int dep[N], siz[N]; int tot, top[N]; int dfs[2 * N], st[N], ed[N]; void dfs1(int u, int ff) { dfs[++tot] = u, st[u] = tot; int mx = -1; siz[u] = 1, son[u] = -1; for (int v : g[u]) { if (v == ff) continue; fa[v] = u, dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } dfs[++tot] = u, ed[u] = tot; } void dfs2(int u, int _top) { top[u] = _top; if (son[u] == -1) return; dfs2(son[u], _top); for (int v : g[u]) { if (v == fa[u]) continue; if (v == son[u]) continue; dfs2(v, v); } } int lca(int u, int v) { while (top[u] != top[v]) { if (dep[top[u]] > dep[top[v]]) u = fa[top[u]]; else v = fa[top[v]]; } return dep[u] < dep[v] ? u : v; } // ----------------------------------------------------------------------------- bool vis[2 * N]; int res, bucket[N]; void add(int x) { x = c[x]; if (++bucket[x] == 1) ++res; } void del(int x) { x = c[x]; if (--bucket[x] == 0) --res; } void calc(int x) { vis[x] ? del(x) : add(x); vis[x] ^= 1; } int ans[M]; int get_ans() { return res; } // ----------------------------------------------------------------------------- signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m; vector<int> s(n); for (int i = 1; i <= n; ++i) cin >> c[i], s[i - 1] = c[i]; sort(s.begin(), s.end()); s.erase(unique(s.begin(), s.end()), s.end()); for (int i = 1; i <= n; ++i) c[i] = lower_bound(s.begin(), s.end(), c[i]) - s.begin() + 1; for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v); g[v].push_back(u); } dfs1(1, -1), dfs2(1, 1); for (int i = 1; i <= m; ++i) { int x, y; cin >> x >> y; if (st[x] > st[y]) swap(x, y); int l = lca(x, y); if (l == x) q[i] = {i, st[x], st[y], -1}; else q[i] = {i, ed[x], st[y], l}; } block = max(1, int(tot / sqrt(m * 2 / 3.0))); for (int i = 1; i <= tot; ++i) belong[i] = (i - 1) / block + 1; sort(q + 1, q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; while (x < l) calc(dfs[--l]); while (y > r) calc(dfs[++r]); while (x > l) calc(dfs[l++]); while (y < r) calc(dfs[r--]); if (q[i].lca != -1) calc(q[i].lca); ans[q[i].id] = get_ans(); if (q[i].lca != -1) calc(q[i].lca); } for (int i = 1; i <= m; ++i) cout << ans[i] << endl; return 0; }","title":"\u4f8b\u9898\u4e00\uff1aSP10707 COT2 - Count on a tree II"},{"location":"ds/offline/mo/mo_tree/#qoj7245-frank-sinatra","text":"\u6c42\u8def\u5f84\u8fb9\u6743 \\(\\operatorname{mex}\\) \u3002 \u6211\u4eec\u628a\u70b9\u6743\u4e0b\u653e\uff0c\u76f4\u63a5\u503c\u57df\u5206\u5757\u5904\u7406\u5373\u53ef\uff0c\u7c7b\u4f3c P4137 Rmq Problem / mex \u3002 \u6b64\u5904\u4e00\u4e2a\u6280\u5de7\u5c31\u662f\uff0c\u503c\u57df\u4e3a \\([0,n]\\) \u7684\u5e8f\u5217 \\(\\operatorname{mex}\\) \u4e00\u5b9a\u5728 \\([0,n+1]\\) \u4e2d\uff0c\u4e5f\u5c31\u662f\u66f4\u5927\u7684\u6ca1\u6709\u610f\u4e49\u4e86\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #define NDEBUG 1 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 1e5 + 10; // ----------------------------------------------------------------------------- int n, m; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> g[N]; int col[N]; // ----------------------------------------------------------------------------- int dfs[2 * N], tot; int st[N], ed[N]; namespace hld { int fa[N], son[N]; int dep[N], siz[N]; int top[N]; void dfs1(int u, int ff) { dfs[++tot] = u, st[u] = tot; siz[u] = 1, son[u] = -1; int mx = -1; for (auto t : g[u]) { int v = t.v; if (v == ff) continue; col[v] = t.w; fa[v] = u, dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } dfs[++tot] = u, ed[u] = tot; } void dfs2(int u, int tp) { top[u] = tp; if (son[u] == -1) return; dfs2(son[u], tp); for (auto t : g[u]) { if (t.v == fa[u]) continue; if (t.v == son[u]) continue; dfs2(t.v, t.v); } } } int lca(int u, int v) { while (hld::top[u] != hld::top[v]) { if (hld::dep[hld::top[u]] > hld::dep[hld::top[v]]) u = hld::fa[hld::top[u]]; else v = hld::fa[hld::top[v]]; } return hld::dep[u] < hld::dep[v] ? u : v; } // ----------------------------------------------------------------------------- int block1, belong1[2 * N]; struct query { int id, l, r, lca; friend bool operator <(const query &a, const query &b) { if (belong1[a.l] != belong1[b.l]) return a.l < b.l; return belong1[a.l] & 1 ? a.r < b.r : a.r > b.r; } } q[N]; // ----------------------------------------------------------------------------- bool vis[2 * N]; int block, cnt; int belong[N], L[N], R[N]; int bucket[N], appr[N]; void add(int x) { ++x; if (x > n) return; if (!bucket[x]) ++appr[belong[x]]; ++bucket[x]; } void del(int x) { ++x; if (x > n) return; --bucket[x]; if (!bucket[x]) --appr[belong[x]]; } int get_ans() { int inner = 1; while (inner <= cnt && appr[inner] == R[inner] - L[inner] + 1) ++inner; for (int i = L[inner]; i <= R[inner]; ++i) if (!bucket[i]) return i - 1; __builtin_unreachable(); return 0; } void calc(int x) { if (vis[x]) del(col[x]); else add(col[x]); vis[x] ^= 1; } // ----------------------------------------------------------------------------- int ans[N]; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> m; // ??????? block = sqrt(n), cnt = (n - 1) / block + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / block + 1; for (int i = 1; i <= cnt; ++i) R[i] = i * block, L[i] = R[i] - block + 1; R[cnt] = n; // ???? for (int i = 2; i <= n; ++i) { int u, v, w; cin >> u >> v >> w; g[u].emplace_back(v, w); g[v].emplace_back(u, w); } // ????? hld::dfs1(1, -1); hld::dfs2(1, 1); col[1] = 1; for (int i = 1; i <= m; ++i) { int u, v; cin >> u >> v; if (st[u] > st[v]) swap(u, v); int l = lca(u, v); if (l == u) q[i] = query{i, st[u], st[v], l}; else q[i] = query{i, ed[u], st[v], -1}; } block1 = max(1, int(tot / sqrt(m * 2 / 3.0))); for (int i = 1; i <= tot; ++i) belong1[i] = (i - 1) / block1 + 1; sort(q + 1, q + m + 1); // ???? int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = q[i].l, y = q[i].r; while (x < l) calc(dfs[--l]); while (y > r) calc(dfs[++r]); while (x > l) calc(dfs[l++]); while (y < r) calc(dfs[r--]); if (q[i].lca != -1) calc(q[i].lca); ans[q[i].id] = get_ans(); if (q[i].lca != -1) calc(q[i].lca); } for (int i = 1; i <= m; ++i) cout << ans[i] << endl; return 0; }","title":"\u4f8b\u9898\u4e8c\uff1aQOJ7245 Frank Sinatra"},{"location":"ds/offline/mo/mo_tree/#baekjoon13892-acm-tax","text":"\u540c\u4e0a\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #ifndef M_DEBUG #define NDEBUG 1 #define FAST_IO 1 #define D(x) ({ void(0); }) #else #define D(x) ({ cerr << \"| DEBUG #\" << __LINE__ << \" IN \" << __FUNCTION__ << \"() \\t| \\t\" << #x << \" = \\t[\" << (x) << \"]\\n\"; void(0); }) #endif #include <bits/stdc++.h> #ifdef FAST_IO #define endl \"\\n\" #endif using namespace std; // ----------------------------------------------------------------------------- // constexpr int N = 5e4 + 10; constexpr int N = 1e5 + 10; constexpr int M = 1e5 + 10; // ----------------------------------------------------------------------------- int n, m; int col[N]; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> g[N]; // ----------------------------------------------------------------------------- int fa[N], siz[N]; int son[N], dep[N]; int dfs[2 * N], tot; int st[N], ed[N]; void dfs1(int u, int ff) { dfs[++tot] = u; st[u] = tot; son[u] = -1; siz[u] = 1; int mx = -1; for (auto t : g[u]) { int v = t.v; if (v == ff) continue; col[v] = t.w; fa[v] = u; dep[v] = dep[u] + 1; dfs1(v, u); siz[u] += siz[v]; if (siz[v] > mx) { mx = siz[v]; son[u] = v; } } dfs[++tot] = u, ed[u] = tot; } int top[N]; void dfs2(int u, int to) { top[u] = to; if (son[u] == -1) return; dfs2(son[u], to); for (auto t : g[u]) { int v = t.v; if (v == fa[u]) continue; if (v == son[u]) continue; dfs2(v, v); } } int lca(int x, int y) { while (top[x] != top[y]) { if (dep[top[x]] > dep[top[y]]) x = fa[top[x]]; else y = fa[top[y]]; } if (dep[x] > dep[y]) return y; return x; } // ----------------------------------------------------------------------------- int block, belong[2 * N]; struct query { int id, l, r, lca; friend bool operator <(const query &a, const query &b) { if (belong[a.l] != belong[b.l]) return a.l < b.l; return belong[a.l] & 1 ? a.r < b.r : a.r > b.r; } } Q[M]; // ----------------------------------------------------------------------------- struct ans { int val; bool ft; ans(): val(0), ft(0) {} ans(int val): val(val), ft(0) {} ans(double val): val(int(val)), ft(val - int(val) != 0) {} friend ostream& operator <<(ostream &out, const ans &x) { out << x.val << (x.ft ? \".5\" : \".0\"); return out; } } Ans[M]; constexpr int MAXV = 1e5; constexpr int V = MAXV + 10; int block2, belong2[V]; int cnt2, L[V], R[V]; void init2() { block2 = sqrt(MAXV); cnt2 = (MAXV - 1) / block2 + 1; for (int i = 1; i <= MAXV; ++i) belong2[i] = (i - 1) / block2 + 1; for (int i = 1; i <= cnt2; ++i) R[i] = i * block2, L[i] = R[i] - block2 + 1; R[cnt2] = V; } int arr[V], sum[V]; void modify(int x, int v) { arr[x] += v; sum[belong2[x]] += v; } int rnk(int k) { int inner = 1; while (sum[inner] < k) k -= sum[inner], ++inner; for (int i = L[inner]; i <= R[inner]; ++i) { k -= arr[i]; if (k <= 0) return i; } __builtin_unreachable(); } int cnt; void add(int x) { ++cnt; modify(x, 1); } void del(int x) { --cnt; modify(x, -1); } ans get_ans() { if (cnt & 1) return rnk((cnt + 1) >> 1); return (rnk((cnt >> 1) + 1) + rnk(cnt >> 1)) / 2.0; } int vis[2 * N]; void calc(int x) { if (vis[x]) del(col[x]); else add(col[x]); vis[x] ^= 1; } // ----------------------------------------------------------------------------- void clear() { memset(arr, 0, sizeof arr); memset(sum, 0, sizeof sum); for (int i = 1; i <= n; ++i) g[i].clear(), g[i].shrink_to_fit(); cnt = tot = dep[1] = 0; memset(vis, 0, sizeof(int) * n * 2); } void Main() { cin >> n; clear(); for (int i = 2; i <= n; ++i) { int u, v, w; cin >> u >> v >> w; g[u].emplace_back(v, w); g[v].emplace_back(u, w); } dfs1(1, -1); dfs2(1, 1); col[1] = 1; cin >> m; for (int i = 1; i <= m; ++i) { int x, y; cin >> x >> y; if (st[x] > st[y]) swap(x, y); int l = lca(x, y); if (x == l) Q[i] = {i, st[x], st[y], l}; else Q[i] = {i, ed[x], st[y], -1}; } block = max(1, int(tot / sqrt(m * 2.0 / 3))); for (int i = 1; i <= tot; ++i) belong[i] = (i - 1) / block + 1; sort(Q + 1, Q + m + 1); int l = 1, r = 0; for (int i = 1; i <= m; ++i) { int x = Q[i].l, y = Q[i].r; if (x == y) { Ans[Q[i].id] = col[dfs[x]]; continue; } while (x < l) calc(dfs[--l]); while (y > r) calc(dfs[++r]); while (x > l) calc(dfs[l++]); while (y < r) calc(dfs[r--]); if (Q[i].lca != -1) calc(Q[i].lca); Ans[Q[i].id] = get_ans(); if (Q[i].lca != -1) calc(Q[i].lca); } for (int i = 1; i <= m; ++i) { cout << Ans[i] << endl; } } signed main() { #ifdef FAST_IO ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); #endif init2(); int T; cin >> T; while (T--) Main(); return 0; }","title":"\u4f8b\u9898\u4e09\uff1aBaekjoon13892 ACM Tax"},{"location":"ds/rmq/rmq/","text":"RMQ \u95ee\u9898 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u5bf9\u4e8e\u5e8f\u5217 \\(A[1\\dots n]\\) \uff0c\u6709 \\(m\\) \u7ec4\u8be2\u95ee \\(\\langle l,r\\rangle\\) \uff0c\u6c42 \\(\\max_{i=l}^rA_i\\) \u3002 \u6211\u4eec\u4f7f\u7528 \\(\\mathcal O(A)\\sim\\mathcal O(B)\\) \u8868\u793a\u9884\u5904\u7406 \\(\\mathcal O(A)\\) \uff0c\u5355\u6b21\u8be2\u95ee \\(\\mathcal O(B)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u6bd4\u8f83\u4f18\u79c0\u7684\u7ebf\u6bb5\u6811\u505a\u6cd5\uff1a \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(\\mathcal O(n)\\sim\\mathcal O(\\log n)\\) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(\\mathcal O(n)\\) \u3002 #include <bits/stdc++.h> using namespace std; constexpr int N = 2e5 + 10; int n, a[N]; #define ls(x) ((x) << 1) #define rs(x) ((x) << 1 | 1) int seg[N << 2]; void push_up(int k) { seg[k] = max(seg[ls(k)], seg[rs(k)]); } void build(int k = 1, int l = 1, int r = n) { if (l == r) return void(seg[k] = a[l]); int mid = l + r >> 1; build(ls(k), l, mid); build(rs(k), mid + 1, r); push_up(k); } int query(int p, int q, int k = 1, int l = 1, int r = n) { if (l >= p && r <= q) return seg[k]; int mid = l + r >> 1; if (p > mid) return query(p, q, rs(k), mid + 1, r); if (q < mid + 1) return query(p, q, ls(k), l, mid); else return max(query(p, q, ls(k), l, mid), query(p, q, rs(k), mid + 1, r)); } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; copy_n(istream_iterator<int>(cin), n, a + 1); build(); int q, l, r; cin >> q; while (q--) cin >> l >> r, cout << query(l, r) << endl; return 0; } \u4f46\u662f\uff0c\u6211\u4eec\u60f3\u8981\u4e00\u4e9b\u66f4\u597d\u7684 RMQ \u505a\u6cd5\u3002 \u5982\u679c\u4e0d\u5e26\u4fee\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u7528\u4e00\u4e9b\u7ecf\u5178\u7684 RMQ \u7b97\u6cd5\u4e86\u3002","title":"RMQ \u95ee\u9898"},{"location":"ds/rmq/rmq/#rmq","text":"","title":"RMQ \u95ee\u9898"},{"location":"ds/rmq/rmq/#_1","text":"\u5bf9\u4e8e\u5e8f\u5217 \\(A[1\\dots n]\\) \uff0c\u6709 \\(m\\) \u7ec4\u8be2\u95ee \\(\\langle l,r\\rangle\\) \uff0c\u6c42 \\(\\max_{i=l}^rA_i\\) \u3002 \u6211\u4eec\u4f7f\u7528 \\(\\mathcal O(A)\\sim\\mathcal O(B)\\) \u8868\u793a\u9884\u5904\u7406 \\(\\mathcal O(A)\\) \uff0c\u5355\u6b21\u8be2\u95ee \\(\\mathcal O(B)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u6bd4\u8f83\u4f18\u79c0\u7684\u7ebf\u6bb5\u6811\u505a\u6cd5\uff1a \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(\\mathcal O(n)\\sim\\mathcal O(\\log n)\\) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(\\mathcal O(n)\\) \u3002 #include <bits/stdc++.h> using namespace std; constexpr int N = 2e5 + 10; int n, a[N]; #define ls(x) ((x) << 1) #define rs(x) ((x) << 1 | 1) int seg[N << 2]; void push_up(int k) { seg[k] = max(seg[ls(k)], seg[rs(k)]); } void build(int k = 1, int l = 1, int r = n) { if (l == r) return void(seg[k] = a[l]); int mid = l + r >> 1; build(ls(k), l, mid); build(rs(k), mid + 1, r); push_up(k); } int query(int p, int q, int k = 1, int l = 1, int r = n) { if (l >= p && r <= q) return seg[k]; int mid = l + r >> 1; if (p > mid) return query(p, q, rs(k), mid + 1, r); if (q < mid + 1) return query(p, q, ls(k), l, mid); else return max(query(p, q, ls(k), l, mid), query(p, q, rs(k), mid + 1, r)); } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; copy_n(istream_iterator<int>(cin), n, a + 1); build(); int q, l, r; cin >> q; while (q--) cin >> l >> r, cout << query(l, r) << endl; return 0; } \u4f46\u662f\uff0c\u6211\u4eec\u60f3\u8981\u4e00\u4e9b\u66f4\u597d\u7684 RMQ \u505a\u6cd5\u3002 \u5982\u679c\u4e0d\u5e26\u4fee\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u7528\u4e00\u4e9b\u7ecf\u5178\u7684 RMQ \u7b97\u6cd5\u4e86\u3002","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"ds/rmq/st/","text":"ST \u8868 \u00b6 \u6982\u5ff5 \u00b6 ST \u8868\u53ef\u4ee5\u505a\u5230 \\(\\mathcal O(n\\log n)\\) \u9884\u5904\u7406\uff0c \\(\\mathcal O(1)\\) \u6c42\u51fa\u5e8f\u5217\u533a\u95f4\u6700\u5927\u503c\u3002 \u6309\u7167\u6700\u57fa\u7840\u7684\u601d\u60f3\uff0c\u8bbe \\(f(i,j)\\) \u8868\u793a\u533a\u95f4 \\([i,j]\\) \u7684\u6700\u5927\u503c\uff0c\u8003\u8651\u4e0a\u8ff0\u500d\u589e\u601d\u60f3\u3002 \u9884\u5904\u7406 \u00b6 \u91cd\u65b0\u8bbe\u8ba1\u72b6\u6001\uff0c \u7528 \\(f(i,j)\\) \u8868\u793a\u533a\u95f4 \\([i,i+2^j-1]\\) \u7684\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u662f\u4ece \\(i\\) \u5f00\u59cb\u7684 \\(2^j\\) \u4e2a\u6570\u3002 \u8003\u8651\u8fd9\u6837\u5b50\u9012\u63a8\u7684\u8fb9\u754c\uff0c \u663e\u7136 \\(f(i,0)=a_i\\) \u3002 \u663e\u7136 \\(f(i,j)=\\max\\{f(i,j-1),f(i+2^{j-1},j-1)\\}\\) \u3002 \u8fd9\u4e48\u6298\u534a\u7684\u9884\u5904\u7406\uff0c\u53ef\u4ee5\u505a\u5230 \\(\\mathcal O(n\\log n)\\) \u7684\u590d\u6742\u5ea6\u3002 \u67e5\u8be2 \u00b6 \u8003\u8651\u67e5\u8be2\uff0c\u5982\u679c\u6211\u4eec\u6309\u7167\u6734\u7d20\u7684\u601d\u60f3\u53bb\u5904\u7406\u7684\u8bdd\uff0c\u4e5f\u662f \\(\\mathcal O(n\\log n)\\) \u7684\uff0c\u4f46\u662f \u6709\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u6027\u8d28\uff0c \\(\\max\\{x,x\\}=x\\) \uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u8ba1\u7b97\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u533a\u95f4\u4e2d\u4e00\u90e8\u5206\u91cd\u590d\u7684\u533a\u95f4\u8df3\u8fc7\uff0c\u76f4\u63a5\u53bb\u8ba1\u7b97\uff1a \u80fd\u8986\u76d6\u6574\u4e2a\u533a\u95f4\u7684\u4e24\u4e2a\u5de6\u53f3\u7aef\u70b9\u4e0a\u7684\u6574\u4e2a\u533a\u95f4\uff0c\u5c31\u53ef\u4ee5\u505a\u5230 \\(\\mathcal O(1)\\) \u3002 \u4ee3\u7801 \u00b6 \u4e0d\u652f\u6301\u4fee\u6539\uff08\u590d\u6742\u5ea6\u5f88\u5dee\uff09\u3002 #include <bits/stdc++.h> using namespace std; constexpr int N = 2e5 + 10; constexpr int K = 20; int n, a[N]; int st[N][K]; #define pow2(x) (1 << (x)) void build() { for (int i = 1; i <= n; ++i) st[i][0] = a[i]; for (int k = 1; k < K; ++k) for (int i = 1; i + pow2(k) - 1 <= n; ++i) st[i][k] = max(st[i][k - 1], st[i + pow2(k - 1)][k - 1]); } int query(int p, int q) { int k = log2(q - p + 1); return max(st[p][k], st[q - pow2(k) + 1][k]); } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; copy_n(istream_iterator<int>(cin), n, a + 1); build(); int q, l, r; cin >> q; while (q--) cin >> l >> r, cout << query(l, r) << endl; return 0; } \u4f18\u5316 \u00b6 \u4e3a\u4e86\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u6211\u4eec\u628a ST \u8868\u7b2c\u4e8c\u7ef4\u653e\u5230\u524d\u9762\uff0c\u5982\u4e0b\uff0c int st[K][N]; #define pow2(x) (1 << (x)) void build() { for (int i = 1; i <= n; ++i) st[0][i] = a[i]; for (int k = 1; k < K; ++k) for (int i = 1; i + pow2(k) - 1 <= n; ++i) st[k][i] = min(st[k - 1][i], st[k - 1][i + pow2(k - 1)]); } int query(int p, int q) { int k = __lg(q - p + 1); return min(st[k][p], st[k][q - pow2(k) + 1]); } \u540c\u65f6\u4f7f\u7528 __lg \u8ba1\u7b97 \\(\\log_2\\) \uff0c\u8fd9\u6837\u53ef\u4ee5\u83b7\u5f97\u66f4\u5feb\u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u8bc4\u6d4b\u8bb0\u5f55\uff1a \\(f(i,k)\\) \uff1aAC 659 ms https://judge.yosupo.jp/submission/223238 . \\(f(k,i)\\) \uff1aAC 624 ms https://judge.yosupo.jp/submission/223236 . \u6269\u5c55 \u00b6 \u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898 \u00b6 \u9664 RMQ \u4ee5\u5916\uff0c\u8fd8\u6709\u5176\u5b83\u7684\u300c\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\u300d\u3002\u4f8b\u5982\u300c\u533a\u95f4\u6309\u4f4d\u4e0e\u300d\u3001\u300c\u533a\u95f4\u6309\u4f4d\u6216\u300d\u7b49\u3002 ST \u8868\u80fd\u8f83\u597d\u7684\u7ef4\u62a4\u300c\u53ef\u91cd\u590d\u8d21\u732e\u300d\u7684\u533a\u95f4\u4fe1\u606f\uff08\u540c\u65f6\u4e5f\u5e94\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f4e\u3002 \u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898 \u662f\u6307\u6ee1\u8db3 \\(x\\operatorname{opt} x=x\\) \u7684\u8fd0\u7b97\u5bf9\u5e94\u7684\u533a\u95f4\u8be2\u95ee\u3002 \u4f8b\u5982\uff0c \\(\\max(x,x)=x\\) \uff0c \\(\\operatorname{gcd}(x,x)=x\\) \uff0c\u7b49\u7b49\u3002 \u6240\u4ee5 RMQ \u548c\u533a\u95f4 GCD \u5c31\u662f\u4e00\u4e2a\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\uff0c\u50cf\u533a\u95f4\u548c\u5c31\u4e0d\u5177\u6709\u8fd9\u4e2a\u6027\u8d28\u3002 \u5982\u679c\u9884\u5904\u7406\u533a\u95f4\u91cd\u53e0\u4e86\uff0c\u5219\u4f1a\u5bfc\u81f4\u91cd\u53e0\u90e8\u5206\u88ab\u8ba1\u7b97\u4e24\u6b21\uff0c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u613f\u610f\u770b\u5230\u7684\u3002 \u95f2\u8bdd \u00b6 \u6ce8\u610f\u5230\u732b\u6811\u7684\u590d\u6742\u5ea6\u548c ST \u8868\u76f8\u540c\uff0c\u4e14\u652f\u6301\u7ef4\u62a4\u975e\u53ef\u91cd\u590d\u6027\u95ee\u9898\u3002 \u4f46\u662f\u732b\u6811\u8f83 ST \u8868\u66f4\u96be\u5b9e\u73b0\uff0c\u6240\u4ee5\u5f88\u5c11\u7528\u3002","title":"ST \u8868"},{"location":"ds/rmq/st/#st","text":"","title":"ST \u8868"},{"location":"ds/rmq/st/#_1","text":"ST \u8868\u53ef\u4ee5\u505a\u5230 \\(\\mathcal O(n\\log n)\\) \u9884\u5904\u7406\uff0c \\(\\mathcal O(1)\\) \u6c42\u51fa\u5e8f\u5217\u533a\u95f4\u6700\u5927\u503c\u3002 \u6309\u7167\u6700\u57fa\u7840\u7684\u601d\u60f3\uff0c\u8bbe \\(f(i,j)\\) \u8868\u793a\u533a\u95f4 \\([i,j]\\) \u7684\u6700\u5927\u503c\uff0c\u8003\u8651\u4e0a\u8ff0\u500d\u589e\u601d\u60f3\u3002","title":"\u6982\u5ff5"},{"location":"ds/rmq/st/#_2","text":"\u91cd\u65b0\u8bbe\u8ba1\u72b6\u6001\uff0c \u7528 \\(f(i,j)\\) \u8868\u793a\u533a\u95f4 \\([i,i+2^j-1]\\) \u7684\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u662f\u4ece \\(i\\) \u5f00\u59cb\u7684 \\(2^j\\) \u4e2a\u6570\u3002 \u8003\u8651\u8fd9\u6837\u5b50\u9012\u63a8\u7684\u8fb9\u754c\uff0c \u663e\u7136 \\(f(i,0)=a_i\\) \u3002 \u663e\u7136 \\(f(i,j)=\\max\\{f(i,j-1),f(i+2^{j-1},j-1)\\}\\) \u3002 \u8fd9\u4e48\u6298\u534a\u7684\u9884\u5904\u7406\uff0c\u53ef\u4ee5\u505a\u5230 \\(\\mathcal O(n\\log n)\\) \u7684\u590d\u6742\u5ea6\u3002","title":"\u9884\u5904\u7406"},{"location":"ds/rmq/st/#_3","text":"\u8003\u8651\u67e5\u8be2\uff0c\u5982\u679c\u6211\u4eec\u6309\u7167\u6734\u7d20\u7684\u601d\u60f3\u53bb\u5904\u7406\u7684\u8bdd\uff0c\u4e5f\u662f \\(\\mathcal O(n\\log n)\\) \u7684\uff0c\u4f46\u662f \u6709\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u6027\u8d28\uff0c \\(\\max\\{x,x\\}=x\\) \uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u8ba1\u7b97\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u533a\u95f4\u4e2d\u4e00\u90e8\u5206\u91cd\u590d\u7684\u533a\u95f4\u8df3\u8fc7\uff0c\u76f4\u63a5\u53bb\u8ba1\u7b97\uff1a \u80fd\u8986\u76d6\u6574\u4e2a\u533a\u95f4\u7684\u4e24\u4e2a\u5de6\u53f3\u7aef\u70b9\u4e0a\u7684\u6574\u4e2a\u533a\u95f4\uff0c\u5c31\u53ef\u4ee5\u505a\u5230 \\(\\mathcal O(1)\\) \u3002","title":"\u67e5\u8be2"},{"location":"ds/rmq/st/#_4","text":"\u4e0d\u652f\u6301\u4fee\u6539\uff08\u590d\u6742\u5ea6\u5f88\u5dee\uff09\u3002 #include <bits/stdc++.h> using namespace std; constexpr int N = 2e5 + 10; constexpr int K = 20; int n, a[N]; int st[N][K]; #define pow2(x) (1 << (x)) void build() { for (int i = 1; i <= n; ++i) st[i][0] = a[i]; for (int k = 1; k < K; ++k) for (int i = 1; i + pow2(k) - 1 <= n; ++i) st[i][k] = max(st[i][k - 1], st[i + pow2(k - 1)][k - 1]); } int query(int p, int q) { int k = log2(q - p + 1); return max(st[p][k], st[q - pow2(k) + 1][k]); } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; copy_n(istream_iterator<int>(cin), n, a + 1); build(); int q, l, r; cin >> q; while (q--) cin >> l >> r, cout << query(l, r) << endl; return 0; }","title":"\u4ee3\u7801"},{"location":"ds/rmq/st/#_5","text":"\u4e3a\u4e86\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u6211\u4eec\u628a ST \u8868\u7b2c\u4e8c\u7ef4\u653e\u5230\u524d\u9762\uff0c\u5982\u4e0b\uff0c int st[K][N]; #define pow2(x) (1 << (x)) void build() { for (int i = 1; i <= n; ++i) st[0][i] = a[i]; for (int k = 1; k < K; ++k) for (int i = 1; i + pow2(k) - 1 <= n; ++i) st[k][i] = min(st[k - 1][i], st[k - 1][i + pow2(k - 1)]); } int query(int p, int q) { int k = __lg(q - p + 1); return min(st[k][p], st[k][q - pow2(k) + 1]); } \u540c\u65f6\u4f7f\u7528 __lg \u8ba1\u7b97 \\(\\log_2\\) \uff0c\u8fd9\u6837\u53ef\u4ee5\u83b7\u5f97\u66f4\u5feb\u7684\u8fd0\u884c\u901f\u5ea6\u3002 \u8bc4\u6d4b\u8bb0\u5f55\uff1a \\(f(i,k)\\) \uff1aAC 659 ms https://judge.yosupo.jp/submission/223238 . \\(f(k,i)\\) \uff1aAC 624 ms https://judge.yosupo.jp/submission/223236 .","title":"\u4f18\u5316"},{"location":"ds/rmq/st/#_6","text":"","title":"\u6269\u5c55"},{"location":"ds/rmq/st/#_7","text":"\u9664 RMQ \u4ee5\u5916\uff0c\u8fd8\u6709\u5176\u5b83\u7684\u300c\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\u300d\u3002\u4f8b\u5982\u300c\u533a\u95f4\u6309\u4f4d\u4e0e\u300d\u3001\u300c\u533a\u95f4\u6309\u4f4d\u6216\u300d\u7b49\u3002 ST \u8868\u80fd\u8f83\u597d\u7684\u7ef4\u62a4\u300c\u53ef\u91cd\u590d\u8d21\u732e\u300d\u7684\u533a\u95f4\u4fe1\u606f\uff08\u540c\u65f6\u4e5f\u5e94\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f4e\u3002 \u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898 \u662f\u6307\u6ee1\u8db3 \\(x\\operatorname{opt} x=x\\) \u7684\u8fd0\u7b97\u5bf9\u5e94\u7684\u533a\u95f4\u8be2\u95ee\u3002 \u4f8b\u5982\uff0c \\(\\max(x,x)=x\\) \uff0c \\(\\operatorname{gcd}(x,x)=x\\) \uff0c\u7b49\u7b49\u3002 \u6240\u4ee5 RMQ \u548c\u533a\u95f4 GCD \u5c31\u662f\u4e00\u4e2a\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\uff0c\u50cf\u533a\u95f4\u548c\u5c31\u4e0d\u5177\u6709\u8fd9\u4e2a\u6027\u8d28\u3002 \u5982\u679c\u9884\u5904\u7406\u533a\u95f4\u91cd\u53e0\u4e86\uff0c\u5219\u4f1a\u5bfc\u81f4\u91cd\u53e0\u90e8\u5206\u88ab\u8ba1\u7b97\u4e24\u6b21\uff0c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u613f\u610f\u770b\u5230\u7684\u3002","title":"\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898"},{"location":"ds/rmq/st/#_8","text":"\u6ce8\u610f\u5230\u732b\u6811\u7684\u590d\u6742\u5ea6\u548c ST \u8868\u76f8\u540c\uff0c\u4e14\u652f\u6301\u7ef4\u62a4\u975e\u53ef\u91cd\u590d\u6027\u95ee\u9898\u3002 \u4f46\u662f\u732b\u6811\u8f83 ST \u8868\u66f4\u96be\u5b9e\u73b0\uff0c\u6240\u4ee5\u5f88\u5c11\u7528\u3002","title":"\u95f2\u8bdd"},{"location":"ds/seg/scanning/","text":"\u626b\u63cf\u7ebf\u7b97\u6cd5 \u00b6 \u4f60\u4f1a\u53d1\u73b0\u6211\u7684\u7b14\u8bb0\u7684\u987a\u5e8f\u548c\u5f88\u591a\u626b\u63cf\u7ebf\u7684\u8bb2\u89e3\u662f\u53cd\u7740\u6765\u7684\u3002 \u5176\u5b9e\u662f\u548c\u6211\u8001\u5e08\u7ed9\u7684\u8bfe\u4ef6\u5b8c\u5168\u662f\u9006\u5e8f\uff08\u8c01\u5e2e\u6211\u7b97\u4e00\u4e0b\u9006\u5e8f\u5bf9\u554a\u55b5\uff09\u3002 \u524d\u8a00 \u00b6 \u4e00\u5f00\u59cb\u4ee5\u4e3a\u626b\u63cf\u7ebf\u5c31\u662f\u7528\u6765\u6c42\u4e8c\u7ef4\u51e0\u4f55\u56fe\u50cf\u7684\u4fe1\u606f\u7684\u3002 \u4f46\u662f\u5176\u5b9e\u8fd9\u4e2a\u5e76\u4e0d\u51c6\u786e\u3002\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u626b\u63cf\u7ebf\u5176\u5b9e\u662f\u4e00\u4e2a\u601d\u60f3\uff0c\u5c31\u50cf\u52a8\u6001\u89c4\u5212\u4e00\u6837\u3002 \u5177\u4f53\u7684\uff0c\u5176\u601d\u60f3\u4e3a\uff0c\u7528\u4e00\u6839\uff08\u65e0\u5f62\u7684\uff09\u7684\u7ebf\uff0c\u53bb\u626b\u63cf\u4e00\u4e2a\u7a7a\u95f4\u3002 \u5728\u626b\u63cf\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e0b\u4fe1\u606f\uff0c\u7136\u540e\u52a0\u4ee5\u5904\u7406\u3001\u5e94\u7528\u3002\u5982\u56fe\uff1a \u5f53\u7136\u4f60\u53ef\u4ee5\u6682\u65f6\u5ffd\u7565\u8fd9\u4e2a\u56fe\u7247\u7684\u5185\u5bb9\u3002 \u5f15\u5165\u2014\u2014\u4f1a\u8bae\u5ba4\u95ee\u9898 \u00b6 \u95ee\u9898\u63cf\u8ff0\uff1a\u4e00\u4e2a\u996d\u5e97\u8981\u63a5\u5f85 \\(n\\) \u4e2a\u987e\u5ba2\uff0c\u6bcf\u4e2a\u987e\u5ba2\u4f1a\u5728\u65f6\u95f4 \\([l_i,r_i]\\) \u5185\u5c31\u9910\u3002\u6c42\u996d\u5e97\u91cc\u540c\u65f6\u5b58\u5728\u7684\u6700\u591a\u7684\u987e\u5ba2\u6570\u91cf\u3002 \u975e\u5e38\u57fa\u7840\u7684\u4e00\u9053\u9898\u4e86\u3002\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a \u5047\u8bbe\u6211\u4eec\u6709 \\(4\\) \u4e2a\u987e\u5ba2\uff0c\u5206\u522b\u8bb0\u4e3a \\(ABCD\\) \uff0c\u6211\u4eec\u753b\u51fa\u8fd9 \\(4\\) \u4e2a\u987e\u5ba2\u5230\u8bbf\u7684\u65f6\u95f4\u6bb5\u3002 \u8003\u8651\u4eba\u662f\u600e\u4e48\u601d\u8003\u8fd9\u4e00\u4e2a\u95ee\u9898\u7684\u3002 \u6211\u4eec\u4e00\u822c\u4f1a\u4ece\u5de6\u5230\u53f3\uff08\u5f53\u7136\u4ece\u53f3\u5230\u5de6\u4e5f\u662f\u53ef\u4ee5\u7684\uff09\u770b\u5b8c\u8fd9\u4e2a\u65f6\u95f4\u7ebf\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u5b58\u5728\u6700\u591a\u7684\u7ebf\u6bb5\u3002\u663e\u7136\uff0c\u8fd9\u4e2a\u56fe\u91cc\u6700\u591a\u6709 \\(3\\) \u4e2a\u987e\u5ba2\u3002 \u8003\u8651\u8ba1\u7b97\u673a\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002\u597d\u5427\u3002\u4e00\u6837\u3002 \u8003\u8651\u4e00\u6839\u7ebf\u4ece\u5de6\u5230\u53f3\u7684\u626b\u63cf\u65f6\u95f4\u8f74\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u8fd9\u4e2a\u7ebf\u9047\u5230\u4e00\u4e2a\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\uff08\u79f0\u4e3a\u5165\u70b9\uff09\u7684\u65f6\u5019\uff0c\u987e\u5ba2\u6570\u5c31\u4f1a\u52a0\u4e00\uff0c\u5f53\u9047\u5230\u4e00\u4e2a\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\uff08\u79f0\u4e3a\u51fa\u70b9\uff09\u7684\u65f6\u5019\uff0c\u987e\u5ba2\u6570\u5c31\u4f1a\u51cf\u4e00\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u8f74\u4e0a\u6807\u8bb0\u4e00\u4e2a\u503c\uff0c\u8bb0\u4e3a \\(p_i\\) \uff0c\u8868\u793a\u5982\u679c\u626b\u63cf\u7ebf\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\uff0c\u4f1a\u589e\u52a0\u591a\u5c11\u3002 \u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u987e\u5ba2 \\([l,r]\\) \uff0c \\(p_l=p_l+1,p_r=p_r-1\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5982\u679c\u65f6\u95f4\u8f74\u8fc7\u4e8e\u957f\uff1f \u8003\u8651\u79bb\u6563\u5316\u3002\u628a\u6570\u8f74\u538b\u7f29\u3002\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u8fd9\u4e2a\u7b54\u6848\uff0c\u4ec5\u6709\u5b58\u5728\u7684\u6700\u591a\u7684\u4eba\u6570\u662f\u6709\u7528\u7684\uff0c\u533a\u95f4\u957f\u5ea6\u5b9e\u9645\u4e0a\u6ca1\u6709\u7528\u3002 \u4e8e\u662f\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a \\(\\mathcal O(n)\\) \u7684\u7b97\u6cd5\uff0c\u7531\u4e8e\u4ed6\u8fc7\u4e8e\u7b80\u5355\uff0c\u5c31\u4e0d\u5199\u4e86\u3002 \u5f00\u59cb\u2014\u2014\u4e8c\u7ef4\u6570\u70b9 \u00b6 \u5148\u770b\u4e00\u9053\u4f8b\u9898\uff1a P1972 [SDOI2009] HH\u7684\u9879\u94fe \u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217\uff0c\u591a\u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4 \\([l_i,r_i]\\) \uff0c\u6c42\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u663e\u7136\u6709\u83ab\u961f\u548c\u5206\u5757\u7684\u505a\u6cd5\u3002\u8fd9\u91cc\u8bb2\u4e8c\u7ef4\u6570\u70b9\u7684\u7b97\u6cd5\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57\uff0c\u5176\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u53ef\u4ee5\u4f5c\u7528\u7684\u8303\u56f4\u66f4\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u8d2a\u5fc3\u7684\u8003\u8651\uff1a \u8bb0 \\(F_i\\) \u8868\u793a\u4e3a\uff0c\u5f53\u524d\u72b6\u6001\u4e0b\uff0c \\(i\\) \u8fd9\u4e2a\u6570\u662f\u5426\u4e3a\u6700\u540e\u4e00\u6b21\u51fa\u73b0\uff0c \u5373\u662f\u5426\u8ba1\u5165\u8d21\u732e\uff0c\u8bb0 \\(S_i\\) \u4e3a\u5176\u524d\u7f00\u548c\u3002 \u56fa\u5b9a\u53f3\u7aef\u70b9\uff0c\u8003\u8651\u6bcf\u4e2a\u6570\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u6240\u5b58\u5728\u7684\u8d21\u732e\uff0c \u90a3\u4e48\u53ef\u4ee5\u77e5\u9053\uff0c\u533a\u95f4 \\([l,r]\\) \u5185\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u4e3a \\(\\sum_{i=l}^rF_i=S_r-S_{l-1}\\) \u3002 \u7136\u540e\u8003\u8651\u53f3\u7aef\u70b9\u4e0d\u56fa\u5b9a\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u53f3\u7aef\u70b9\u5411\u53f3\u6269\u5c55\uff0c\u662f\u975e\u5e38\u5bb9\u6613\u7684\u3002 \u4e8e\u662f\u8003\u8651\u5c06\u6240\u6709\u533a\u95f4\u79bb\u7ebf\u4e0b\u6765\uff0c\u7136\u540e\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u4ece\u5934\u5f00\u59cb\uff0c\u4e00\u4e2a\u4e00\u4e2a\u6269\u5c55\u53f3\u7aef\u70b9\u3002 \u540c\u65f6\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u3002\u7136\u540e\u8003\u8651\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u600e\u4e48\u7ef4\u62a4\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5feb\u901f\u7684\u77e5\u9053 \\(S_x\\) \u7684\u503c\uff0c\u8fd8\u9700\u8981\u5feb\u901f\u7684\u4fee\u6539\u4efb\u610f\u4e00\u4e2a \\(F\\) \u7684\u503c\uff0c\u8fd9\u5c31\u662f\u6811\u72b6\u6570\u7ec4\uff01 \u7136\u540e\uff08\u7528\u626b\u63cf\u7ebf\uff09\u53bb\u626b\u53f3\u7aef\u70b9\uff0c\u5c31\u6ca1\u5565\u96be\u5ea6\u4e86\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define range(x) x.begin(), x.end() struct query { int id; int l, r; query() = default; query(int id, int l, int r): id(id), l(l), r(r) {} friend bool operator <(const query &a, const query &b) { return a.r < b.r; } }; #define lowbit(x) ((x) & -(x)) constexpr int N = 1e6 + 10; int n, m; int s[N]; void add(int x, int v) { for (; x <= n; x += lowbit(x)) s[x] += v; } int sum(int x) { int r = 0; for (; x; x -= lowbit(x)) r += s[x]; return r; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; vector<int> a(n + 1); for (int i = 1; i <= n; ++i) cin >> a[i]; cin >> m; vector<query> q(m); for (int i = 0; i < m; ++i) cin >> q[i].l >> q[i].r, q[i].id = i; sort(range(q)); int now = 0; vector<int> pos(N), e(m); for (query &_ : q) { int l = _.l, r = _.r; for (int i = now + 1; i <= r; ++i) { if (pos[a[i]]) add(pos[a[i]], -1); add(i, 1), pos[a[i]] = i; } now = r; e[_.id] = sum(r) - sum(l - 1); } for (int i : e) cout << i << '\\n'; return 0; } \u5165\u95e8\u2014\u2014\u4e8c\u7ef4\u6570\u70b9 \u00b6 \u6ca1\u9519\uff0c\u8fd9\u4e2a\u5c31\u662f\u771f\u771f\u6b63\u6b63\u7684\u300c\u4e8c\u7ef4\u6570\u70b9\u300d\u4e86\u3002 \u4f8b\u9898\uff1a P2163 [SHOI2007] \u56ed\u4e01\u7684\u70e6\u607c \u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u5e73\u9762\u5185 \\(n\\) \u4e2a\u70b9 \\((x_i,y_2)\\) \uff0c\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\uff0c\u6c42\u8fd9\u4e2a\u77e9\u5f62\u5185\u6709\u591a\u5c11\u4e2a\u70b9\u3002 \u8fd9\u9053\u9898\u5176\u5b9e\u4e00\u773c\u79bb\u7ebf\u3001\u4e8c\u7ef4\u67e5\u5206\u52a0\u79bb\u6563\u5316\uff08\u5f53\u7136\u8fd9\u9053\u9898\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u4e0d\u9700\u8981\u79bb\u6563\u5316\uff09\u3002 \u8bbe \\(S_{a,b}\\) \u8868\u793a \\(\\sum_{i=0}^a \\sum_{j=0}^b Q_{i,j}\\) \uff0c\u5176\u4e2d \\(Q_{i,j}\\) \u8868\u793a \\((i,j)\\) \u662f\u5426\u6709\u70b9\u3002 \u6ce8\u610f\u5230\u8be2\u95ee \\([x_1,y_1,x_2,y_2]\\) \u7684\u7b54\u6848\u5373\u4e3a \\(S_{x_2,y_2}-S_{x_2,y_1-1}-S_{x_1-1,y_2}+S_{x_1-1,y_1-1}\\) \u3002 \u7136\u540e\u8003\u8651\u79bb\u7ebf\u600e\u4e48\u5904\u7406\u3002 \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5206\u522b\u6765\u770b\uff0c\u7136\u540e\u518d\u4e58\u4e0a\u7cfb\u6570\uff08 \\(\\pm1\\) \uff09\u52a0\u5230\u5bf9\u5e94\u7684\u8be2\u95ee\u91cc\u3002 \u56e0\u6b64\u8f6c\u5316\u4e3a\u600e\u4e48\u6c42\u6240\u6709\u5b58\u5728\u7684\u70b9 \\(S_{a,b}\\) \u4e86\u3002 \u5ef6\u4f38\u4e0a\u4e00\u9898\u7684\u601d\u8def\uff1a \u6309\u7167 \\(x\\) \u5de6\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 \\(y\\) \u8f74\u4e0a\u662f\u5426\u6709\u70b9\uff0c\u4ee5\u53ca\u5feb\u901f\u524d\u7f00\u6c42\u548c\u3002 \u7136\u540e\u626b\u63cf\uff0c\u5e76\u66f4\u65b0\u5373\u53ef\u3002\u4e5f\u4e0d\u96be\uff0c\u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl '\\n' using ll = long long; #define range(x) x.begin(), x.end() struct point { int x, y; point() = default; point(int x, int y): x(x), y(y) {} friend bool operator <(const point &a, const point &b) { return a.x < b.x; } }; struct query { int x, y, v, id; query() = default; query(int x, int y, int v, int id): x(x), y(y), v(v), id(id) {} friend bool operator <(const point &a, const point &b) { return a.x < b.x; } }; constexpr int N = 1e7 + 10; int s[N]; #define lowbit(x) ((x) & -(x)) void add(int x, int v) { for (; x < N; x += lowbit(x)) s[x] += v; } int sum(int x) { int r = 0; for (; x; x -= lowbit(x)) r += s[x]; return r; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n, m; cin >> n >> m; vector<point> a(n); for (int i = 0; i < n; ++i) cin >> a[i].x >> a[i].y, ++a[i].x, ++a[i].y; sort(range(a)); vector<query> q(m << 2); for (int i = 0; i < m; ++i) { int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2; ++x1, ++y1, ++x2, ++y2; q[i] = query(x2, y2, 1, i); q[i + m] = query(x1 - 1, y2, -1, i); q[i + 2 * m] = query(x2, y1 - 1, -1, i); q[i + 3 * 2] = query(x1 - 1, y1 - 1, 1, i); } sort(range(q)); vector<int> ans(m); int cur = 0; for (int i = m; i < (m << 2); ++i) { int x = q[i].x, y = q[i].y, v = q[i].v; for (; cur < n && a[cur].x <= x; ++cur) add(a[cur].y, 1); ans[q[i].id] += v * sum(y); } for (int i : ans) cout << i << endl; return 0; } \u57fa\u7840\u2014\u2014\u4e9a\u7279\u5170\u8482\u65af\u95ee\u9898 \u00b6 \u6700\u7ecf\u5178\u7684\u626b\u63cf\u7ebf\u55b5\uff1a P5490 \u3010\u6a21\u677f\u3011\u626b\u63cf\u7ebf \u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u51fa\u5e73\u9762\u5185 \\(n\\) \u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u4ee5\u53ca\u53f3\u4e0a\u5750\u6807\uff0c\u6c42\u51fa\u6240\u6709\u77e9\u5f62\u6784\u6210\u7684\u56fe\u5f62\u7684\u9762\u79ef\u3002 \u73b0\u5728\u5047\u8bbe\u4e00\u6839\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u626b\uff1a \u6211\u4eec\u53ef\u4ee5\u628a\u6574\u4e2a\u77e9\u5f62\u5206\u6210 \\(5\\) \u4e2a\u989c\u8272\u4e0d\u540c\u7684\u5c0f\u77e9\u5f62\u3002 \u6bcf\u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u8be5\u5982\u4f55\u6c42\u5462\uff1f\u6211\u4eec\u6309\u7167 \\(y\\) \u5750\u6807\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\u6bcf\u4e2a\u77e9\u5f62\uff0c\u9ad8\u4e5f\u5c31\u662f\u76f8\u90bb\u7684\u77e9\u5f62\u7684 \\(y\\) \u5750\u6807\u7684\u5dee\u503c\uff0c\u77e9\u5f62\u7684\u957f\u5ea6\u662f\u82e5\u5e72\u6761\u7ebf\u6bb5\u7684\u4ea4\u96c6\uff0c\u5e76\u4e14\u5728\u4e0d\u65ad\u53d1\u751f\u53d8\u5316\u3002 \u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u5f62\u7684\u957f\u5ea6\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u77e9\u5f62\uff0c\u8bb0\u4e0b\u9762\u7684\u8fb9\u4e3a\u300c\u5165\u8fb9\u300d\uff0c\u4e0a\u9762\u7684\u8fb9\u4e3a\u300c\u51fa\u8fb9\u300d\u3002 \u6309\u7167 \\(y\\) \u5750\u6807\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\u6bcf\u4e2a\u77e9\u5f62\uff0c\u5165\u8fb9\u5148\u88ab\u626b\u63cf\u5230\uff0c\u5c06\u5165\u8fb9\u52a0\u5165\u5230\u7ebf\u6bb5\u6811\uff0c\u51fa\u8fb9\u540e\u88ab\u626b\u63cf\u5230\uff0c\u5c06\u51fa\u8fb9\u4ece\u7ebf\u6bb5\u6811\u4e2d\u5220\u9664\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5165\u8fb9\u548c\u51fa\u8fb9\uff0c\u53ef\u4ee5\u6807\u8bb0\u4e3a \\(\\pm1\\) \uff0c\u4ee3\u8868\u52a0\u5165\u548c\u5220\u9664\u3002 \u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4e1c\u897f\u90fd\u662f\u70b9\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u662f\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u533a\u95f4\u4e0b\u653e\u5230\u70b9\u4e0a\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u7ebf\u6bb5\u3002 \u7ef4\u62a4\u4e00\u4e2a \\(\\mathit{cov}\\) \u4e3a\u5f53\u524d\u533a\u95f4\u88ab\u51e0\u4e2a\u77e9\u5f62\u8986\u76d6\uff0c\u4ee5\u53ca\u4e00\u4e2a \\(\\mathit{len}\\) \u8868\u793a\u5f53\u524d\u533a\u95f4\u88ab\u8986\u76d6\u7684\u533a\u95f4\u957f\u5ea6\u3002 \u6211\u4eec\u626b\u63cf\u5230\u4e00\u6761\u7ebf\uff0c\u5c06\u8be5\u6761\u7ebf\u6bb5\u52a0\u5165\u5230\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u4fee\u6539\u5bf9\u5e94\u533a\u95f4\u7684 \\(\\mathit{cov}\\) \u3002 \u5411\u4e0a\u66f4\u65b0\u8868\u793a\u5f53\u524d\u533a\u95f4\u88ab\u8986\u76d6\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u5f53 \\(\\mathit{cov}\\) \u975e \\(0\\) \uff0c\u5219\u4ee3\u8868\u6574\u4e2a\u533a\u95f4\u88ab\u8986\u76d6\uff1b \\(\\mathit{cov}\\) \u4e3a \\(0\\) \uff0c\u5219\u7edf\u8ba1\u5b50\u533a\u95f4\u88ab\u8986\u76d6\u7684\u957f\u5ea6 \u6ce8\u610f\u5230\u7ef4\u62a4\u7684\u7ebf\u6bb5\uff0c\u4e00\u5b9a\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u6807\u8bb0\u4e0b\u4f20\uff0c\u6700\u540e\u4e00\u5b9a\u4f1a\u88ab\u51cf\u56de\u53bb\u3002 \u6211\u4eec\u6839\u636e\u4ee3\u7801\u6765\u89e3\u91ca\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u4e0b\u6587\u4ee3\u7801\u8868\u793a\u7684\u662f\u5728\u6807\u51c6\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c \\(x\\) \u8f74\u6c34\u5e73\u5411\u53f3\u3001 \\(y\\) \u8f74\u6570\u503c\u5411\u4e0a\uff0c\u626b\u63cf\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u626b\u7684\u3002 #include <bits/stdc++.h> using namespace std; using ll = long long; #define range(x) x.begin(), x.end() \u5934\u6587\u4ef6\u7b49\u3002 struct line { int y, x1, x2, v; line() = default; line(int y, int x1, int x2, int v): y(y), x1(x1), x2(x2), v(v) {} friend bool operator <(const line &a, const line &b) { return a.y < b.y; } }; \u5b9a\u4e49\u4e86\u7ebf\u6bb5\uff0c\u5305\u62ec\u5176\u7eb5\u5750\u6807\uff0c\u6a2a\u5750\u6807\u4e0a\u5ef6\u4f38\u7684\u8d77\u59cb\u548c\u7ec8\u6b62\uff0c\u4ee5\u53ca\u6743\u503c\u3002 class segment { private: struct emm { int l, r; int cnt, len; }; vector<emm> a; \u4e2a\u4eba\u4e60\u60ef\uff0c\u4f7f\u7528 class + struct \u5b9a\u4e49\u7ebf\u6bb5\u6811\uff0c\u6807\u8bb0\u5de6\u7aef\u70b9 \\(l\\) \u53ca\u53f3\u7aef\u70b9 \\(r\\) \uff08\u8868\u793a\u7684\u662f\u539f\u5750\u6807\uff0c\u5373\u672a\u7ecf\u79bb\u6563\u5316\u7684\uff0c\u800c\u4e14\u6ce8\u610f\u6b64\u5904\u7684\u7aef\u70b9\u4e5f\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u6709\u533a\u522b\uff0c\u662f\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\uff0c\u800c\u975e\u95ed\u533a\u95f4\uff09\u3002 void push_up(int k) { if (a[k].cnt) a[k].len = a[k].r - a[k].l; else a[k].len = a[k * 2].len + a[k * 2 + 1].len; } \u6807\u8bb0\u4e0a\u4f20\uff0c\u4e0d\u80fd\u5168\u7528 else \u91cc\u7684\u8bed\u53e5\u7684\u539f\u56e0\u662f\uff0c\u6ca1\u6709\u6807\u8bb0\u4e0b\u4f20\uff0c\u53ea\u80fd\u6839\u636e\u8fd9\u4e2a\u533a\u95f4\u5f53\u524d\u6709\u6ca1\u6709\u88ab\u8986\u76d6\u6765\u8003\u8651\u3002\u800c\u5982\u679c\u5176\u4e24\u4e2a\u5b50\u533a\u95f4\u90fd\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u800c\u5176\u672a\u88ab\u6807\u8bb0\u4e3a\u5b8c\u5168\u8986\u76d6\uff0c\u4f1a\u8c03\u7528\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u52a0\u8d77\u6765\u4e5f\u662f\u5176\u533a\u95f4\u603b\u957f\u5ea6\u3002 void build(vector<int> &p, int k, int l, int r) { a[k].l = p[l], a[k].r = p[r]; a[k].len = a[k].cnt = 0; if (r - l == 1) return; int mid = l + r >> 1; build(p, k * 2, l, mid); build(p, k * 2 + 1, mid, r); } \u5efa\u6811\uff0c\u4f20\u5165\u7684 \\(l\\) \u548c \\(r\\) \u5e76\u4e0d\u662f\u533a\u95f4\u7684\u7aef\u70b9\uff0c\u800c\u662f\u533a\u95f4\u7aef\u70b9\u7684\u79bb\u6563\u5316\u7684 \\(\\mathit{rank}\\) \uff0c\u9700\u8981\u8c03\u7528 \\(p_i\\) \u6765\u5bfb\u627e\u539f\u5750\u6807\uff0c\u7528\u6765\u6807\u8bb0\u7ed9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u533a\u95f4\u3002\u800c\u7ec8\u6b62\u6761\u4ef6 r - l == 1 \u662f\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u7ed3\u70b9\u7ef4\u62a4\u7684\u662f\u533a\u95f4\uff0c\u800c\u975e\u5355\u4e00\u7684\u8282\u70b9\uff0c\u9700\u8981\u4e24\u4e2a\u7aef\u70b9\u3002\u4e0d\u9700\u8981\u5728\u8fd9\u91cc\u6807\u8bb0\u4e0a\u6b21\u7684\u539f\u56e0\u662f\u8fd8\u6ca1\u6709\u4efb\u4f55\u6709\u610f\u4e49\u7684\u503c\u8d4b\u7ed9\u5b83\u3002 void modify(int k, int p, int q, int v) { int l = a[k].l, r = a[k].r; if (l >= p && r <= q) return void((a[k].cnt += v, push_up(k))); if (a[k * 2].r > p) modify(k * 2, p, q, v); if (a[k * 2 + 1].l < q) modify(k * 2 + 1, p, q, v); push_up(k); } \u4fee\u6539\u64cd\u4f5c\uff0c\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4fee\u6539\u4e00\u4e2a\u533a\u95f4\u4ec5\u4ec5\u662f\u6807\u8bb0\u5b83\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u7136\u540e\u6807\u8bb0\u4e0a\u4f20\uff0c\u4e5f\u5c31\u662f\u91cd\u65b0\u8ba1\u7b97\u8fd9\u4e2a\u533a\u95f4\u7684 \\(\\mathit{len}\\) \u503c\u3002 public: segment(vector<int> &p, int n) { a.resize(n << 3); build(p, 1, 1, n); } void change(int l, int r, int v) { modify(1, l, r, v); } int xht() { return a[1].len; } }; \u6ca1\u4ec0\u4e48\u610f\u4e49\uff0c\u53ea\u662f\u7b80\u5316\u4e0b\u9762\u8c03\u7528\u7684\u4ee3\u7801\u3002 signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n; cin >> n; vector<line> a(n * 2); vector<int> p(n * 2); p.push_back(-1); for (int i = 0; i < n; ++i) { int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2; p[i] = x1, p[i + n] = x2; a[i] = line(y1, x1, x2, 1); a[i + n] = line(y2, x1, x2, -1); } sort(range(a)), sort(range(p)); int tot = unique(range(p)) - p.begin(); \u8f93\u5165\u548c\u79bb\u6563\u5316\uff0c\u6ce8\u610f \\(p\\) \u8981\u52a0\u4e00\u4e2a\u6781\u5c0f\u503c\uff08\u6839\u636e\u9898\u76ee\u4e0d\u540c\uff0c\u8981\u6bd4\u6700\u5c0f\u5750\u6807\u503c\u8fd8\u8981\u5c0f\uff0c\u8fd9\u9053\u9898\u5de6\u8fb9\u90fd\u662f\u975e\u8d1f\uff0c\u56e0\u6b64\u53d6 \\(-1\\) \u662f\u53ef\u4ee5\u7684\uff0c\u6709\u7684\u8fd8\u8981\u53d6\u66f4\u5c0f\u7684\u503c\uff09\u3002 segment seg(p, tot - 1); ll ans = 0; for (int i = 0; i < 2 * n - 1; ++i) { seg.change(a[i].x1, a[i].x2, a[i].v); ans += 1ll * seg.xht() * (a[i + 1].y - a[i].y); } cout << ans << endl; return 0; } \u5efa\u6811\u548c\u8be2\u95ee\u3002\u5177\u4f53\u7684\u770b\u4e0a\u9762\u5bf9\u4e8e\u5c0f\u77e9\u9635\u9762\u79ef\u8ba1\u7b97\u7684\u89e3\u91ca\u3002 UPD\uff1a\u66f4\u65b0\u4e00\u4e2a\u65b0\u7801\u98ce\u7684\u677f\u5b50\u3002 constexpr int N = 1e5 + 10; struct query { double x1, x2, y; int v; query() = default; query(double a, double b, double c, int v): x1(a), x2(b), y(c), v(v) {} friend bool operator <(const query &a, const query &b) { return a.y < b.y; } }; template<typename T> void owap(T &a, T &b) { if (a > b) swap(a, b); } namespace seg { int n; vector<double> q; struct node { double l, r, len; int cnt; } a[N << 2]; void push_up(int k) { if (a[k].cnt) a[k].len = a[k].r - a[k].l; else a[k].len = a[k << 1].len + a[k << 1 | 1].len; } void build(int k, int l, int r) { a[k].l = q[l], a[k].r = q[r]; a[k].cnt = a[k].len = 0; if (r - l == 1) return; int mid = (l + r) >> 1; build(k << 1, l, mid); build(k << 1 | 1, mid, r); } void modify(int k, double p, double q, int v) { double l = a[k].l, r = a[k].r; if (l >= p && r <= q) { a[k].cnt += v; push_up(k); return; } if (a[k << 1].r > p) modify(k << 1, p, q, v); if (a[k << 1 | 1].l < q) modify(k << 1 | 1, p, q, v); push_up(k); } void init(int m, vector<double> &p) { n = m, q = p; build(1, 0, n - 1); } void change(double x1, double x2, int v) { modify(1, x1, x2, v); } double calc() { return a[1].len; } } double Main(int n) { vector<double> s; vector<query> q; for (int i = 0; i < n; ++i) { double x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2; owap(x1, x2), owap(y1, y2); s.push_back(x1), s.push_back(x2); q.emplace_back(x1, x2, y1, 1); q.emplace_back(x1, x2, y2, -1); } sort(q.begin(), q.end()); sort(s.begin(), s.end()); s.erase(unique(s.begin(), s.end()), s.end()); #define getid(x) ({ lower_bound(s.begin(), s.end(), x) - s.begin() + 1; }) seg::init((int)s.size(), s); double ans = 0; for (int i = 0; i + 1 < (int)q.size(); ++i) { seg::change(q[i].x1, q[i].x2, q[i].v); ans += seg::calc() * (q[i + 1].y - q[i].y); } return ans; } \u8fdb\u9636\u2014\u2014\u77e9\u5f62\u5468\u957f\u95ee\u9898 \u00b6 \u4f8b\u9898\uff1a P1856 [IOI1998] [USACO5.5] \u77e9\u5f62\u5468\u957fPicture \u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u51fa\u5e73\u9762\u5185 \\(n\\) \u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u4ee5\u53ca\u53f3\u4e0a\u5750\u6807\uff0c\u6c42\u51fa\u6240\u6709\u77e9\u5f62\u6784\u6210\u7684\u56fe\u5f62\u7684\u5468\u957f\u3002 \u9996\u5148\u8ba1\u7b97\u6a2a\u7ebf\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u626b\u63cf\u7ebf\u5411\u4e0a\u5e73\u79fb\u7684\u65f6\u5019\uff0c\u589e\u52a0\u6216\u8005\u51cf\u5c11\u7684\u957f\u5ea6\u5c31\u662f\u5468\u957f\u7684\u5171\u7ebf\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u7ebf\u6bb5\u662f\u4e00\u6761\u4e00\u6761\u52a0\u7684\uff0c\u6240\u4ee5\u5c31\u4fdd\u8bc1\u4e86\uff0c\u52a0\u4e0a\u53bb\uff0c\u4e00\u5b9a\u662f\u52a0\u4e86\u4e00\u4e2a\u8868\u9762\uff1b\u51cf\u53bb\uff0c\u4e5f\u4e00\u5b9a\u662f\u51cf\u53bb\u4e86\u4e00\u4e2a\u8868\u9762\u3002 \u56e0\u6b64\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f\u4e0a\u4e00\u6b21\u83b7\u5f97\u7684\u957f\u5ea6\u4e0e\u8fd9\u4e00\u6b21\u7684\u957f\u5ea6\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u3002\u518d\u89e3\u91ca\u4e00\u4e0b\u7edd\u5bf9\u503c\uff0c\u56e0\u4e3a\u5468\u957f\u4e00\u5b9a\u662f\u6b63\u7684\uff0c\u800c\u6bcf\u6b21\u957f\u5ea6\u53d8\u5316\u91cf\u5c31\u662f\u65b0\u589e\u7684\u8868\u9762\u3002 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u4e2a\u7edd\u5bf9\u503c\u3002\u800c\u7ad6\u7ebf\u7684\u957f\u5ea6\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u4ece\u5de6\u5230\u53f3\u518d\u626b\u63cf\u4e00\u904d\u3002 \u626b\u63cf\u6a2a\u7ebf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u540c\u6b65\u8bb0\u5f55\u6ca1\u6709\u91cd\u5408\u7684\u77e9\u5f62\u4e2a\u6570\uff0c\u518d\u4e58\u4e0a\u4e8c\u5c31\u662f\u65b0\u589e\u7684\u7eb5\u8fb9\u6570\uff0c\u5728\u4e58\u4e0a\u8fd9\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u5c31\u662f\u65b0\u589e\u7684\u7ad6\u7ebf\u7684\u957f\u5ea6\u4e86\u3002 \u4f5c\u8005\u592a\u83dc\uff0c\u53ea\u4f1a\u7b2c\u4e00\u4e2a\u3002 \u7136\u540e\u6211\u4eec\u6839\u636e\u4ee3\u7801\u518d\u8be6\u89e3\u4e00\u4e0b\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define range(x) x.begin(), x.end() using ll = long long; struct line { int y, x1, x2, v; line() = default; line(int y, int x1, int x2, int v): y(y), x1(x1), x2(x2), v(v) {} friend bool operator <(const line &a, const line &b) { return a.y < b.y; } }; class segment { private: struct emm { int l, r; int cov, len; }; vector<emm> a; void push_up(int k) { if (a[k].cov) a[k].len = a[k].r - a[k].l; else a[k].len = a[k * 2].len + a[k * 2 + 1].len; } void build(vector<int> &p, int k, int l, int r) { a[k].l = p[l], a[k].r = p[r]; a[k].cov = a[k].len = 0; if (r - l == 1) return; int mid = r + l >> 1; build(p, k * 2, l, mid); build(p, k * 2 + 1, mid, r); } void modify(int k, int p, int q, int v) { int l = a[k].l, r = a[k].r; if (l >= p && r <= q) return void((a[k].cov += v, push_up(k))); if (a[k * 2].r > p) modify(k * 2, p, q, v); if (a[k * 2 + 1].l < q) modify(k * 2 + 1, p, q, v); push_up(k); } public: segment(vector<int> &p, int n) { a.resize(n << 3); build(p, 1, 1, n); } int xht() { return a[1].len; } void change(int l, int r, int v) { modify(1, l, r, v); } }; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n, lt; cin >> n; \u4ece\u8fd9\u4e0b\u9762\u5f00\u59cb\u624d\u548c\u4e0a\u4e00\u4e2a\u6709\u672c\u8d28\u4e0d\u540c\uff0c\u4e5f\u5c31\u662f\u5efa\u4e86\u4e24\u4e2a\u626b\u63cf\u7ebf\uff0c\u5176\u4e2d\u6807\u53f7 \\(1\\) \u7684\u662f\u5411\u4e0a\u626b\u63cf\u7684\uff0c\u6807\u53f7 \\(2\\) \u7684\u662f\u5411\u53f3\u626b\u63cf\u7684\u3002 vector<line> a1(n * 2), a2(n * 2); vector<int> p1(n * 2); vector<int> p2(n * 2); p1.push_back(-1e5); p2.push_back(-1e5); for (int i = 0; i < n; ++i) { int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2; p1[i] = x1, p1[i + n] = x2; p2[i] = y1, p2[i + n] = y2; a1[i] = line(y1, x1, x2, 1); a1[i + n] = line(y2, x1, x2, -1); a2[i] = line(x1, y1, y2, 1); a2[i + n] = line(x2, y1, y2, -1); } sort(range(a1)), sort(range(p1)); sort(range(a2)), sort(range(p2)); int tot1 = unique(range(p1)) - p1.begin(); int tot2 = unique(range(p2)) - p2.begin(); segment seg1(p1, tot1 - 1); segment seg2(p2, tot2 - 1); ll res = 0; int lt1 = 0, lt2 = 0; for (int i = 0; i < 2 * n; ++i) { seg1.change(a1[i].x1, a1[i].x2, a1[i].v); seg2.change(a2[i].x1, a2[i].x2, a2[i].v); int rt1 = seg1.xht(); res += abs(rt1 - lt1); int rt2 = seg2.xht(); res += abs(rt2 - lt2); lt1 = rt1, lt2 = rt2; } cout << res << endl; return 0; } \u7ec3\u4e60\u9898 \u00b6 \u9898\u5355\uff1a https://www.luogu.com.cn/training/479926 \u3002 Reference \u00b6 [1] https://oi-wiki.org/geometry/scanning/ [2] https://blog.csdn.net/qq_30320171/article/details/129787418 [3] https://www.luogu.com.cn/article/iilru8ad [4] https://www.luogu.com.cn/article/9cuyuf44 [5] https://www.youtube.com/watch?v=YnIxejYW7cE","title":"\u626b\u63cf\u7ebf\u7b97\u6cd5"},{"location":"ds/seg/scanning/#_1","text":"\u4f60\u4f1a\u53d1\u73b0\u6211\u7684\u7b14\u8bb0\u7684\u987a\u5e8f\u548c\u5f88\u591a\u626b\u63cf\u7ebf\u7684\u8bb2\u89e3\u662f\u53cd\u7740\u6765\u7684\u3002 \u5176\u5b9e\u662f\u548c\u6211\u8001\u5e08\u7ed9\u7684\u8bfe\u4ef6\u5b8c\u5168\u662f\u9006\u5e8f\uff08\u8c01\u5e2e\u6211\u7b97\u4e00\u4e0b\u9006\u5e8f\u5bf9\u554a\u55b5\uff09\u3002","title":"\u626b\u63cf\u7ebf\u7b97\u6cd5"},{"location":"ds/seg/scanning/#_2","text":"\u4e00\u5f00\u59cb\u4ee5\u4e3a\u626b\u63cf\u7ebf\u5c31\u662f\u7528\u6765\u6c42\u4e8c\u7ef4\u51e0\u4f55\u56fe\u50cf\u7684\u4fe1\u606f\u7684\u3002 \u4f46\u662f\u5176\u5b9e\u8fd9\u4e2a\u5e76\u4e0d\u51c6\u786e\u3002\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u626b\u63cf\u7ebf\u5176\u5b9e\u662f\u4e00\u4e2a\u601d\u60f3\uff0c\u5c31\u50cf\u52a8\u6001\u89c4\u5212\u4e00\u6837\u3002 \u5177\u4f53\u7684\uff0c\u5176\u601d\u60f3\u4e3a\uff0c\u7528\u4e00\u6839\uff08\u65e0\u5f62\u7684\uff09\u7684\u7ebf\uff0c\u53bb\u626b\u63cf\u4e00\u4e2a\u7a7a\u95f4\u3002 \u5728\u626b\u63cf\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e0b\u4fe1\u606f\uff0c\u7136\u540e\u52a0\u4ee5\u5904\u7406\u3001\u5e94\u7528\u3002\u5982\u56fe\uff1a \u5f53\u7136\u4f60\u53ef\u4ee5\u6682\u65f6\u5ffd\u7565\u8fd9\u4e2a\u56fe\u7247\u7684\u5185\u5bb9\u3002","title":"\u524d\u8a00"},{"location":"ds/seg/scanning/#_3","text":"\u95ee\u9898\u63cf\u8ff0\uff1a\u4e00\u4e2a\u996d\u5e97\u8981\u63a5\u5f85 \\(n\\) \u4e2a\u987e\u5ba2\uff0c\u6bcf\u4e2a\u987e\u5ba2\u4f1a\u5728\u65f6\u95f4 \\([l_i,r_i]\\) \u5185\u5c31\u9910\u3002\u6c42\u996d\u5e97\u91cc\u540c\u65f6\u5b58\u5728\u7684\u6700\u591a\u7684\u987e\u5ba2\u6570\u91cf\u3002 \u975e\u5e38\u57fa\u7840\u7684\u4e00\u9053\u9898\u4e86\u3002\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a \u5047\u8bbe\u6211\u4eec\u6709 \\(4\\) \u4e2a\u987e\u5ba2\uff0c\u5206\u522b\u8bb0\u4e3a \\(ABCD\\) \uff0c\u6211\u4eec\u753b\u51fa\u8fd9 \\(4\\) \u4e2a\u987e\u5ba2\u5230\u8bbf\u7684\u65f6\u95f4\u6bb5\u3002 \u8003\u8651\u4eba\u662f\u600e\u4e48\u601d\u8003\u8fd9\u4e00\u4e2a\u95ee\u9898\u7684\u3002 \u6211\u4eec\u4e00\u822c\u4f1a\u4ece\u5de6\u5230\u53f3\uff08\u5f53\u7136\u4ece\u53f3\u5230\u5de6\u4e5f\u662f\u53ef\u4ee5\u7684\uff09\u770b\u5b8c\u8fd9\u4e2a\u65f6\u95f4\u7ebf\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u5b58\u5728\u6700\u591a\u7684\u7ebf\u6bb5\u3002\u663e\u7136\uff0c\u8fd9\u4e2a\u56fe\u91cc\u6700\u591a\u6709 \\(3\\) \u4e2a\u987e\u5ba2\u3002 \u8003\u8651\u8ba1\u7b97\u673a\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002\u597d\u5427\u3002\u4e00\u6837\u3002 \u8003\u8651\u4e00\u6839\u7ebf\u4ece\u5de6\u5230\u53f3\u7684\u626b\u63cf\u65f6\u95f4\u8f74\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u8fd9\u4e2a\u7ebf\u9047\u5230\u4e00\u4e2a\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\uff08\u79f0\u4e3a\u5165\u70b9\uff09\u7684\u65f6\u5019\uff0c\u987e\u5ba2\u6570\u5c31\u4f1a\u52a0\u4e00\uff0c\u5f53\u9047\u5230\u4e00\u4e2a\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\uff08\u79f0\u4e3a\u51fa\u70b9\uff09\u7684\u65f6\u5019\uff0c\u987e\u5ba2\u6570\u5c31\u4f1a\u51cf\u4e00\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u8f74\u4e0a\u6807\u8bb0\u4e00\u4e2a\u503c\uff0c\u8bb0\u4e3a \\(p_i\\) \uff0c\u8868\u793a\u5982\u679c\u626b\u63cf\u7ebf\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\uff0c\u4f1a\u589e\u52a0\u591a\u5c11\u3002 \u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u987e\u5ba2 \\([l,r]\\) \uff0c \\(p_l=p_l+1,p_r=p_r-1\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5982\u679c\u65f6\u95f4\u8f74\u8fc7\u4e8e\u957f\uff1f \u8003\u8651\u79bb\u6563\u5316\u3002\u628a\u6570\u8f74\u538b\u7f29\u3002\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u8fd9\u4e2a\u7b54\u6848\uff0c\u4ec5\u6709\u5b58\u5728\u7684\u6700\u591a\u7684\u4eba\u6570\u662f\u6709\u7528\u7684\uff0c\u533a\u95f4\u957f\u5ea6\u5b9e\u9645\u4e0a\u6ca1\u6709\u7528\u3002 \u4e8e\u662f\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a \\(\\mathcal O(n)\\) \u7684\u7b97\u6cd5\uff0c\u7531\u4e8e\u4ed6\u8fc7\u4e8e\u7b80\u5355\uff0c\u5c31\u4e0d\u5199\u4e86\u3002","title":"\u5f15\u5165\u2014\u2014\u4f1a\u8bae\u5ba4\u95ee\u9898"},{"location":"ds/seg/scanning/#_4","text":"\u5148\u770b\u4e00\u9053\u4f8b\u9898\uff1a P1972 [SDOI2009] HH\u7684\u9879\u94fe \u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217\uff0c\u591a\u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4 \\([l_i,r_i]\\) \uff0c\u6c42\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u663e\u7136\u6709\u83ab\u961f\u548c\u5206\u5757\u7684\u505a\u6cd5\u3002\u8fd9\u91cc\u8bb2\u4e8c\u7ef4\u6570\u70b9\u7684\u7b97\u6cd5\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57\uff0c\u5176\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u53ef\u4ee5\u4f5c\u7528\u7684\u8303\u56f4\u66f4\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u8d2a\u5fc3\u7684\u8003\u8651\uff1a \u8bb0 \\(F_i\\) \u8868\u793a\u4e3a\uff0c\u5f53\u524d\u72b6\u6001\u4e0b\uff0c \\(i\\) \u8fd9\u4e2a\u6570\u662f\u5426\u4e3a\u6700\u540e\u4e00\u6b21\u51fa\u73b0\uff0c \u5373\u662f\u5426\u8ba1\u5165\u8d21\u732e\uff0c\u8bb0 \\(S_i\\) \u4e3a\u5176\u524d\u7f00\u548c\u3002 \u56fa\u5b9a\u53f3\u7aef\u70b9\uff0c\u8003\u8651\u6bcf\u4e2a\u6570\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u6240\u5b58\u5728\u7684\u8d21\u732e\uff0c \u90a3\u4e48\u53ef\u4ee5\u77e5\u9053\uff0c\u533a\u95f4 \\([l,r]\\) \u5185\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u4e3a \\(\\sum_{i=l}^rF_i=S_r-S_{l-1}\\) \u3002 \u7136\u540e\u8003\u8651\u53f3\u7aef\u70b9\u4e0d\u56fa\u5b9a\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u53f3\u7aef\u70b9\u5411\u53f3\u6269\u5c55\uff0c\u662f\u975e\u5e38\u5bb9\u6613\u7684\u3002 \u4e8e\u662f\u8003\u8651\u5c06\u6240\u6709\u533a\u95f4\u79bb\u7ebf\u4e0b\u6765\uff0c\u7136\u540e\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u4ece\u5934\u5f00\u59cb\uff0c\u4e00\u4e2a\u4e00\u4e2a\u6269\u5c55\u53f3\u7aef\u70b9\u3002 \u540c\u65f6\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u3002\u7136\u540e\u8003\u8651\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u600e\u4e48\u7ef4\u62a4\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5feb\u901f\u7684\u77e5\u9053 \\(S_x\\) \u7684\u503c\uff0c\u8fd8\u9700\u8981\u5feb\u901f\u7684\u4fee\u6539\u4efb\u610f\u4e00\u4e2a \\(F\\) \u7684\u503c\uff0c\u8fd9\u5c31\u662f\u6811\u72b6\u6570\u7ec4\uff01 \u7136\u540e\uff08\u7528\u626b\u63cf\u7ebf\uff09\u53bb\u626b\u53f3\u7aef\u70b9\uff0c\u5c31\u6ca1\u5565\u96be\u5ea6\u4e86\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define range(x) x.begin(), x.end() struct query { int id; int l, r; query() = default; query(int id, int l, int r): id(id), l(l), r(r) {} friend bool operator <(const query &a, const query &b) { return a.r < b.r; } }; #define lowbit(x) ((x) & -(x)) constexpr int N = 1e6 + 10; int n, m; int s[N]; void add(int x, int v) { for (; x <= n; x += lowbit(x)) s[x] += v; } int sum(int x) { int r = 0; for (; x; x -= lowbit(x)) r += s[x]; return r; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; vector<int> a(n + 1); for (int i = 1; i <= n; ++i) cin >> a[i]; cin >> m; vector<query> q(m); for (int i = 0; i < m; ++i) cin >> q[i].l >> q[i].r, q[i].id = i; sort(range(q)); int now = 0; vector<int> pos(N), e(m); for (query &_ : q) { int l = _.l, r = _.r; for (int i = now + 1; i <= r; ++i) { if (pos[a[i]]) add(pos[a[i]], -1); add(i, 1), pos[a[i]] = i; } now = r; e[_.id] = sum(r) - sum(l - 1); } for (int i : e) cout << i << '\\n'; return 0; }","title":"\u5f00\u59cb\u2014\u2014\u4e8c\u7ef4\u6570\u70b9"},{"location":"ds/seg/scanning/#_5","text":"\u6ca1\u9519\uff0c\u8fd9\u4e2a\u5c31\u662f\u771f\u771f\u6b63\u6b63\u7684\u300c\u4e8c\u7ef4\u6570\u70b9\u300d\u4e86\u3002 \u4f8b\u9898\uff1a P2163 [SHOI2007] \u56ed\u4e01\u7684\u70e6\u607c \u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u5e73\u9762\u5185 \\(n\\) \u4e2a\u70b9 \\((x_i,y_2)\\) \uff0c\u8be2\u95ee\u4e00\u4e2a\u77e9\u5f62\uff0c\u6c42\u8fd9\u4e2a\u77e9\u5f62\u5185\u6709\u591a\u5c11\u4e2a\u70b9\u3002 \u8fd9\u9053\u9898\u5176\u5b9e\u4e00\u773c\u79bb\u7ebf\u3001\u4e8c\u7ef4\u67e5\u5206\u52a0\u79bb\u6563\u5316\uff08\u5f53\u7136\u8fd9\u9053\u9898\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u4e0d\u9700\u8981\u79bb\u6563\u5316\uff09\u3002 \u8bbe \\(S_{a,b}\\) \u8868\u793a \\(\\sum_{i=0}^a \\sum_{j=0}^b Q_{i,j}\\) \uff0c\u5176\u4e2d \\(Q_{i,j}\\) \u8868\u793a \\((i,j)\\) \u662f\u5426\u6709\u70b9\u3002 \u6ce8\u610f\u5230\u8be2\u95ee \\([x_1,y_1,x_2,y_2]\\) \u7684\u7b54\u6848\u5373\u4e3a \\(S_{x_2,y_2}-S_{x_2,y_1-1}-S_{x_1-1,y_2}+S_{x_1-1,y_1-1}\\) \u3002 \u7136\u540e\u8003\u8651\u79bb\u7ebf\u600e\u4e48\u5904\u7406\u3002 \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5206\u522b\u6765\u770b\uff0c\u7136\u540e\u518d\u4e58\u4e0a\u7cfb\u6570\uff08 \\(\\pm1\\) \uff09\u52a0\u5230\u5bf9\u5e94\u7684\u8be2\u95ee\u91cc\u3002 \u56e0\u6b64\u8f6c\u5316\u4e3a\u600e\u4e48\u6c42\u6240\u6709\u5b58\u5728\u7684\u70b9 \\(S_{a,b}\\) \u4e86\u3002 \u5ef6\u4f38\u4e0a\u4e00\u9898\u7684\u601d\u8def\uff1a \u6309\u7167 \\(x\\) \u5de6\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 \\(y\\) \u8f74\u4e0a\u662f\u5426\u6709\u70b9\uff0c\u4ee5\u53ca\u5feb\u901f\u524d\u7f00\u6c42\u548c\u3002 \u7136\u540e\u626b\u63cf\uff0c\u5e76\u66f4\u65b0\u5373\u53ef\u3002\u4e5f\u4e0d\u96be\uff0c\u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl '\\n' using ll = long long; #define range(x) x.begin(), x.end() struct point { int x, y; point() = default; point(int x, int y): x(x), y(y) {} friend bool operator <(const point &a, const point &b) { return a.x < b.x; } }; struct query { int x, y, v, id; query() = default; query(int x, int y, int v, int id): x(x), y(y), v(v), id(id) {} friend bool operator <(const point &a, const point &b) { return a.x < b.x; } }; constexpr int N = 1e7 + 10; int s[N]; #define lowbit(x) ((x) & -(x)) void add(int x, int v) { for (; x < N; x += lowbit(x)) s[x] += v; } int sum(int x) { int r = 0; for (; x; x -= lowbit(x)) r += s[x]; return r; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n, m; cin >> n >> m; vector<point> a(n); for (int i = 0; i < n; ++i) cin >> a[i].x >> a[i].y, ++a[i].x, ++a[i].y; sort(range(a)); vector<query> q(m << 2); for (int i = 0; i < m; ++i) { int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2; ++x1, ++y1, ++x2, ++y2; q[i] = query(x2, y2, 1, i); q[i + m] = query(x1 - 1, y2, -1, i); q[i + 2 * m] = query(x2, y1 - 1, -1, i); q[i + 3 * 2] = query(x1 - 1, y1 - 1, 1, i); } sort(range(q)); vector<int> ans(m); int cur = 0; for (int i = m; i < (m << 2); ++i) { int x = q[i].x, y = q[i].y, v = q[i].v; for (; cur < n && a[cur].x <= x; ++cur) add(a[cur].y, 1); ans[q[i].id] += v * sum(y); } for (int i : ans) cout << i << endl; return 0; }","title":"\u5165\u95e8\u2014\u2014\u4e8c\u7ef4\u6570\u70b9"},{"location":"ds/seg/scanning/#_6","text":"\u6700\u7ecf\u5178\u7684\u626b\u63cf\u7ebf\u55b5\uff1a P5490 \u3010\u6a21\u677f\u3011\u626b\u63cf\u7ebf \u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u51fa\u5e73\u9762\u5185 \\(n\\) \u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u4ee5\u53ca\u53f3\u4e0a\u5750\u6807\uff0c\u6c42\u51fa\u6240\u6709\u77e9\u5f62\u6784\u6210\u7684\u56fe\u5f62\u7684\u9762\u79ef\u3002 \u73b0\u5728\u5047\u8bbe\u4e00\u6839\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u626b\uff1a \u6211\u4eec\u53ef\u4ee5\u628a\u6574\u4e2a\u77e9\u5f62\u5206\u6210 \\(5\\) \u4e2a\u989c\u8272\u4e0d\u540c\u7684\u5c0f\u77e9\u5f62\u3002 \u6bcf\u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u8be5\u5982\u4f55\u6c42\u5462\uff1f\u6211\u4eec\u6309\u7167 \\(y\\) \u5750\u6807\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\u6bcf\u4e2a\u77e9\u5f62\uff0c\u9ad8\u4e5f\u5c31\u662f\u76f8\u90bb\u7684\u77e9\u5f62\u7684 \\(y\\) \u5750\u6807\u7684\u5dee\u503c\uff0c\u77e9\u5f62\u7684\u957f\u5ea6\u662f\u82e5\u5e72\u6761\u7ebf\u6bb5\u7684\u4ea4\u96c6\uff0c\u5e76\u4e14\u5728\u4e0d\u65ad\u53d1\u751f\u53d8\u5316\u3002 \u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u5f62\u7684\u957f\u5ea6\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u77e9\u5f62\uff0c\u8bb0\u4e0b\u9762\u7684\u8fb9\u4e3a\u300c\u5165\u8fb9\u300d\uff0c\u4e0a\u9762\u7684\u8fb9\u4e3a\u300c\u51fa\u8fb9\u300d\u3002 \u6309\u7167 \\(y\\) \u5750\u6807\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\u6bcf\u4e2a\u77e9\u5f62\uff0c\u5165\u8fb9\u5148\u88ab\u626b\u63cf\u5230\uff0c\u5c06\u5165\u8fb9\u52a0\u5165\u5230\u7ebf\u6bb5\u6811\uff0c\u51fa\u8fb9\u540e\u88ab\u626b\u63cf\u5230\uff0c\u5c06\u51fa\u8fb9\u4ece\u7ebf\u6bb5\u6811\u4e2d\u5220\u9664\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5165\u8fb9\u548c\u51fa\u8fb9\uff0c\u53ef\u4ee5\u6807\u8bb0\u4e3a \\(\\pm1\\) \uff0c\u4ee3\u8868\u52a0\u5165\u548c\u5220\u9664\u3002 \u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4e1c\u897f\u90fd\u662f\u70b9\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u662f\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u533a\u95f4\u4e0b\u653e\u5230\u70b9\u4e0a\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u7ebf\u6bb5\u3002 \u7ef4\u62a4\u4e00\u4e2a \\(\\mathit{cov}\\) \u4e3a\u5f53\u524d\u533a\u95f4\u88ab\u51e0\u4e2a\u77e9\u5f62\u8986\u76d6\uff0c\u4ee5\u53ca\u4e00\u4e2a \\(\\mathit{len}\\) \u8868\u793a\u5f53\u524d\u533a\u95f4\u88ab\u8986\u76d6\u7684\u533a\u95f4\u957f\u5ea6\u3002 \u6211\u4eec\u626b\u63cf\u5230\u4e00\u6761\u7ebf\uff0c\u5c06\u8be5\u6761\u7ebf\u6bb5\u52a0\u5165\u5230\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u4fee\u6539\u5bf9\u5e94\u533a\u95f4\u7684 \\(\\mathit{cov}\\) \u3002 \u5411\u4e0a\u66f4\u65b0\u8868\u793a\u5f53\u524d\u533a\u95f4\u88ab\u8986\u76d6\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u5f53 \\(\\mathit{cov}\\) \u975e \\(0\\) \uff0c\u5219\u4ee3\u8868\u6574\u4e2a\u533a\u95f4\u88ab\u8986\u76d6\uff1b \\(\\mathit{cov}\\) \u4e3a \\(0\\) \uff0c\u5219\u7edf\u8ba1\u5b50\u533a\u95f4\u88ab\u8986\u76d6\u7684\u957f\u5ea6 \u6ce8\u610f\u5230\u7ef4\u62a4\u7684\u7ebf\u6bb5\uff0c\u4e00\u5b9a\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u6807\u8bb0\u4e0b\u4f20\uff0c\u6700\u540e\u4e00\u5b9a\u4f1a\u88ab\u51cf\u56de\u53bb\u3002 \u6211\u4eec\u6839\u636e\u4ee3\u7801\u6765\u89e3\u91ca\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u4e0b\u6587\u4ee3\u7801\u8868\u793a\u7684\u662f\u5728\u6807\u51c6\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c \\(x\\) \u8f74\u6c34\u5e73\u5411\u53f3\u3001 \\(y\\) \u8f74\u6570\u503c\u5411\u4e0a\uff0c\u626b\u63cf\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u626b\u7684\u3002 #include <bits/stdc++.h> using namespace std; using ll = long long; #define range(x) x.begin(), x.end() \u5934\u6587\u4ef6\u7b49\u3002 struct line { int y, x1, x2, v; line() = default; line(int y, int x1, int x2, int v): y(y), x1(x1), x2(x2), v(v) {} friend bool operator <(const line &a, const line &b) { return a.y < b.y; } }; \u5b9a\u4e49\u4e86\u7ebf\u6bb5\uff0c\u5305\u62ec\u5176\u7eb5\u5750\u6807\uff0c\u6a2a\u5750\u6807\u4e0a\u5ef6\u4f38\u7684\u8d77\u59cb\u548c\u7ec8\u6b62\uff0c\u4ee5\u53ca\u6743\u503c\u3002 class segment { private: struct emm { int l, r; int cnt, len; }; vector<emm> a; \u4e2a\u4eba\u4e60\u60ef\uff0c\u4f7f\u7528 class + struct \u5b9a\u4e49\u7ebf\u6bb5\u6811\uff0c\u6807\u8bb0\u5de6\u7aef\u70b9 \\(l\\) \u53ca\u53f3\u7aef\u70b9 \\(r\\) \uff08\u8868\u793a\u7684\u662f\u539f\u5750\u6807\uff0c\u5373\u672a\u7ecf\u79bb\u6563\u5316\u7684\uff0c\u800c\u4e14\u6ce8\u610f\u6b64\u5904\u7684\u7aef\u70b9\u4e5f\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u6709\u533a\u522b\uff0c\u662f\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\uff0c\u800c\u975e\u95ed\u533a\u95f4\uff09\u3002 void push_up(int k) { if (a[k].cnt) a[k].len = a[k].r - a[k].l; else a[k].len = a[k * 2].len + a[k * 2 + 1].len; } \u6807\u8bb0\u4e0a\u4f20\uff0c\u4e0d\u80fd\u5168\u7528 else \u91cc\u7684\u8bed\u53e5\u7684\u539f\u56e0\u662f\uff0c\u6ca1\u6709\u6807\u8bb0\u4e0b\u4f20\uff0c\u53ea\u80fd\u6839\u636e\u8fd9\u4e2a\u533a\u95f4\u5f53\u524d\u6709\u6ca1\u6709\u88ab\u8986\u76d6\u6765\u8003\u8651\u3002\u800c\u5982\u679c\u5176\u4e24\u4e2a\u5b50\u533a\u95f4\u90fd\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u800c\u5176\u672a\u88ab\u6807\u8bb0\u4e3a\u5b8c\u5168\u8986\u76d6\uff0c\u4f1a\u8c03\u7528\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u52a0\u8d77\u6765\u4e5f\u662f\u5176\u533a\u95f4\u603b\u957f\u5ea6\u3002 void build(vector<int> &p, int k, int l, int r) { a[k].l = p[l], a[k].r = p[r]; a[k].len = a[k].cnt = 0; if (r - l == 1) return; int mid = l + r >> 1; build(p, k * 2, l, mid); build(p, k * 2 + 1, mid, r); } \u5efa\u6811\uff0c\u4f20\u5165\u7684 \\(l\\) \u548c \\(r\\) \u5e76\u4e0d\u662f\u533a\u95f4\u7684\u7aef\u70b9\uff0c\u800c\u662f\u533a\u95f4\u7aef\u70b9\u7684\u79bb\u6563\u5316\u7684 \\(\\mathit{rank}\\) \uff0c\u9700\u8981\u8c03\u7528 \\(p_i\\) \u6765\u5bfb\u627e\u539f\u5750\u6807\uff0c\u7528\u6765\u6807\u8bb0\u7ed9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u533a\u95f4\u3002\u800c\u7ec8\u6b62\u6761\u4ef6 r - l == 1 \u662f\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u7ed3\u70b9\u7ef4\u62a4\u7684\u662f\u533a\u95f4\uff0c\u800c\u975e\u5355\u4e00\u7684\u8282\u70b9\uff0c\u9700\u8981\u4e24\u4e2a\u7aef\u70b9\u3002\u4e0d\u9700\u8981\u5728\u8fd9\u91cc\u6807\u8bb0\u4e0a\u6b21\u7684\u539f\u56e0\u662f\u8fd8\u6ca1\u6709\u4efb\u4f55\u6709\u610f\u4e49\u7684\u503c\u8d4b\u7ed9\u5b83\u3002 void modify(int k, int p, int q, int v) { int l = a[k].l, r = a[k].r; if (l >= p && r <= q) return void((a[k].cnt += v, push_up(k))); if (a[k * 2].r > p) modify(k * 2, p, q, v); if (a[k * 2 + 1].l < q) modify(k * 2 + 1, p, q, v); push_up(k); } \u4fee\u6539\u64cd\u4f5c\uff0c\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4fee\u6539\u4e00\u4e2a\u533a\u95f4\u4ec5\u4ec5\u662f\u6807\u8bb0\u5b83\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u7136\u540e\u6807\u8bb0\u4e0a\u4f20\uff0c\u4e5f\u5c31\u662f\u91cd\u65b0\u8ba1\u7b97\u8fd9\u4e2a\u533a\u95f4\u7684 \\(\\mathit{len}\\) \u503c\u3002 public: segment(vector<int> &p, int n) { a.resize(n << 3); build(p, 1, 1, n); } void change(int l, int r, int v) { modify(1, l, r, v); } int xht() { return a[1].len; } }; \u6ca1\u4ec0\u4e48\u610f\u4e49\uff0c\u53ea\u662f\u7b80\u5316\u4e0b\u9762\u8c03\u7528\u7684\u4ee3\u7801\u3002 signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n; cin >> n; vector<line> a(n * 2); vector<int> p(n * 2); p.push_back(-1); for (int i = 0; i < n; ++i) { int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2; p[i] = x1, p[i + n] = x2; a[i] = line(y1, x1, x2, 1); a[i + n] = line(y2, x1, x2, -1); } sort(range(a)), sort(range(p)); int tot = unique(range(p)) - p.begin(); \u8f93\u5165\u548c\u79bb\u6563\u5316\uff0c\u6ce8\u610f \\(p\\) \u8981\u52a0\u4e00\u4e2a\u6781\u5c0f\u503c\uff08\u6839\u636e\u9898\u76ee\u4e0d\u540c\uff0c\u8981\u6bd4\u6700\u5c0f\u5750\u6807\u503c\u8fd8\u8981\u5c0f\uff0c\u8fd9\u9053\u9898\u5de6\u8fb9\u90fd\u662f\u975e\u8d1f\uff0c\u56e0\u6b64\u53d6 \\(-1\\) \u662f\u53ef\u4ee5\u7684\uff0c\u6709\u7684\u8fd8\u8981\u53d6\u66f4\u5c0f\u7684\u503c\uff09\u3002 segment seg(p, tot - 1); ll ans = 0; for (int i = 0; i < 2 * n - 1; ++i) { seg.change(a[i].x1, a[i].x2, a[i].v); ans += 1ll * seg.xht() * (a[i + 1].y - a[i].y); } cout << ans << endl; return 0; } \u5efa\u6811\u548c\u8be2\u95ee\u3002\u5177\u4f53\u7684\u770b\u4e0a\u9762\u5bf9\u4e8e\u5c0f\u77e9\u9635\u9762\u79ef\u8ba1\u7b97\u7684\u89e3\u91ca\u3002 UPD\uff1a\u66f4\u65b0\u4e00\u4e2a\u65b0\u7801\u98ce\u7684\u677f\u5b50\u3002 constexpr int N = 1e5 + 10; struct query { double x1, x2, y; int v; query() = default; query(double a, double b, double c, int v): x1(a), x2(b), y(c), v(v) {} friend bool operator <(const query &a, const query &b) { return a.y < b.y; } }; template<typename T> void owap(T &a, T &b) { if (a > b) swap(a, b); } namespace seg { int n; vector<double> q; struct node { double l, r, len; int cnt; } a[N << 2]; void push_up(int k) { if (a[k].cnt) a[k].len = a[k].r - a[k].l; else a[k].len = a[k << 1].len + a[k << 1 | 1].len; } void build(int k, int l, int r) { a[k].l = q[l], a[k].r = q[r]; a[k].cnt = a[k].len = 0; if (r - l == 1) return; int mid = (l + r) >> 1; build(k << 1, l, mid); build(k << 1 | 1, mid, r); } void modify(int k, double p, double q, int v) { double l = a[k].l, r = a[k].r; if (l >= p && r <= q) { a[k].cnt += v; push_up(k); return; } if (a[k << 1].r > p) modify(k << 1, p, q, v); if (a[k << 1 | 1].l < q) modify(k << 1 | 1, p, q, v); push_up(k); } void init(int m, vector<double> &p) { n = m, q = p; build(1, 0, n - 1); } void change(double x1, double x2, int v) { modify(1, x1, x2, v); } double calc() { return a[1].len; } } double Main(int n) { vector<double> s; vector<query> q; for (int i = 0; i < n; ++i) { double x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2; owap(x1, x2), owap(y1, y2); s.push_back(x1), s.push_back(x2); q.emplace_back(x1, x2, y1, 1); q.emplace_back(x1, x2, y2, -1); } sort(q.begin(), q.end()); sort(s.begin(), s.end()); s.erase(unique(s.begin(), s.end()), s.end()); #define getid(x) ({ lower_bound(s.begin(), s.end(), x) - s.begin() + 1; }) seg::init((int)s.size(), s); double ans = 0; for (int i = 0; i + 1 < (int)q.size(); ++i) { seg::change(q[i].x1, q[i].x2, q[i].v); ans += seg::calc() * (q[i + 1].y - q[i].y); } return ans; }","title":"\u57fa\u7840\u2014\u2014\u4e9a\u7279\u5170\u8482\u65af\u95ee\u9898"},{"location":"ds/seg/scanning/#_7","text":"\u4f8b\u9898\uff1a P1856 [IOI1998] [USACO5.5] \u77e9\u5f62\u5468\u957fPicture \u3002 \u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u51fa\u5e73\u9762\u5185 \\(n\\) \u4e2a\u77e9\u5f62\u7684\u5de6\u4e0b\u4ee5\u53ca\u53f3\u4e0a\u5750\u6807\uff0c\u6c42\u51fa\u6240\u6709\u77e9\u5f62\u6784\u6210\u7684\u56fe\u5f62\u7684\u5468\u957f\u3002 \u9996\u5148\u8ba1\u7b97\u6a2a\u7ebf\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u626b\u63cf\u7ebf\u5411\u4e0a\u5e73\u79fb\u7684\u65f6\u5019\uff0c\u589e\u52a0\u6216\u8005\u51cf\u5c11\u7684\u957f\u5ea6\u5c31\u662f\u5468\u957f\u7684\u5171\u7ebf\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u7ebf\u6bb5\u662f\u4e00\u6761\u4e00\u6761\u52a0\u7684\uff0c\u6240\u4ee5\u5c31\u4fdd\u8bc1\u4e86\uff0c\u52a0\u4e0a\u53bb\uff0c\u4e00\u5b9a\u662f\u52a0\u4e86\u4e00\u4e2a\u8868\u9762\uff1b\u51cf\u53bb\uff0c\u4e5f\u4e00\u5b9a\u662f\u51cf\u53bb\u4e86\u4e00\u4e2a\u8868\u9762\u3002 \u56e0\u6b64\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f\u4e0a\u4e00\u6b21\u83b7\u5f97\u7684\u957f\u5ea6\u4e0e\u8fd9\u4e00\u6b21\u7684\u957f\u5ea6\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u3002\u518d\u89e3\u91ca\u4e00\u4e0b\u7edd\u5bf9\u503c\uff0c\u56e0\u4e3a\u5468\u957f\u4e00\u5b9a\u662f\u6b63\u7684\uff0c\u800c\u6bcf\u6b21\u957f\u5ea6\u53d8\u5316\u91cf\u5c31\u662f\u65b0\u589e\u7684\u8868\u9762\u3002 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u4e2a\u7edd\u5bf9\u503c\u3002\u800c\u7ad6\u7ebf\u7684\u957f\u5ea6\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u4ece\u5de6\u5230\u53f3\u518d\u626b\u63cf\u4e00\u904d\u3002 \u626b\u63cf\u6a2a\u7ebf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u540c\u6b65\u8bb0\u5f55\u6ca1\u6709\u91cd\u5408\u7684\u77e9\u5f62\u4e2a\u6570\uff0c\u518d\u4e58\u4e0a\u4e8c\u5c31\u662f\u65b0\u589e\u7684\u7eb5\u8fb9\u6570\uff0c\u5728\u4e58\u4e0a\u8fd9\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u5c31\u662f\u65b0\u589e\u7684\u7ad6\u7ebf\u7684\u957f\u5ea6\u4e86\u3002 \u4f5c\u8005\u592a\u83dc\uff0c\u53ea\u4f1a\u7b2c\u4e00\u4e2a\u3002 \u7136\u540e\u6211\u4eec\u6839\u636e\u4ee3\u7801\u518d\u8be6\u89e3\u4e00\u4e0b\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define range(x) x.begin(), x.end() using ll = long long; struct line { int y, x1, x2, v; line() = default; line(int y, int x1, int x2, int v): y(y), x1(x1), x2(x2), v(v) {} friend bool operator <(const line &a, const line &b) { return a.y < b.y; } }; class segment { private: struct emm { int l, r; int cov, len; }; vector<emm> a; void push_up(int k) { if (a[k].cov) a[k].len = a[k].r - a[k].l; else a[k].len = a[k * 2].len + a[k * 2 + 1].len; } void build(vector<int> &p, int k, int l, int r) { a[k].l = p[l], a[k].r = p[r]; a[k].cov = a[k].len = 0; if (r - l == 1) return; int mid = r + l >> 1; build(p, k * 2, l, mid); build(p, k * 2 + 1, mid, r); } void modify(int k, int p, int q, int v) { int l = a[k].l, r = a[k].r; if (l >= p && r <= q) return void((a[k].cov += v, push_up(k))); if (a[k * 2].r > p) modify(k * 2, p, q, v); if (a[k * 2 + 1].l < q) modify(k * 2 + 1, p, q, v); push_up(k); } public: segment(vector<int> &p, int n) { a.resize(n << 3); build(p, 1, 1, n); } int xht() { return a[1].len; } void change(int l, int r, int v) { modify(1, l, r, v); } }; signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); int n, lt; cin >> n; \u4ece\u8fd9\u4e0b\u9762\u5f00\u59cb\u624d\u548c\u4e0a\u4e00\u4e2a\u6709\u672c\u8d28\u4e0d\u540c\uff0c\u4e5f\u5c31\u662f\u5efa\u4e86\u4e24\u4e2a\u626b\u63cf\u7ebf\uff0c\u5176\u4e2d\u6807\u53f7 \\(1\\) \u7684\u662f\u5411\u4e0a\u626b\u63cf\u7684\uff0c\u6807\u53f7 \\(2\\) \u7684\u662f\u5411\u53f3\u626b\u63cf\u7684\u3002 vector<line> a1(n * 2), a2(n * 2); vector<int> p1(n * 2); vector<int> p2(n * 2); p1.push_back(-1e5); p2.push_back(-1e5); for (int i = 0; i < n; ++i) { int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2; p1[i] = x1, p1[i + n] = x2; p2[i] = y1, p2[i + n] = y2; a1[i] = line(y1, x1, x2, 1); a1[i + n] = line(y2, x1, x2, -1); a2[i] = line(x1, y1, y2, 1); a2[i + n] = line(x2, y1, y2, -1); } sort(range(a1)), sort(range(p1)); sort(range(a2)), sort(range(p2)); int tot1 = unique(range(p1)) - p1.begin(); int tot2 = unique(range(p2)) - p2.begin(); segment seg1(p1, tot1 - 1); segment seg2(p2, tot2 - 1); ll res = 0; int lt1 = 0, lt2 = 0; for (int i = 0; i < 2 * n; ++i) { seg1.change(a1[i].x1, a1[i].x2, a1[i].v); seg2.change(a2[i].x1, a2[i].x2, a2[i].v); int rt1 = seg1.xht(); res += abs(rt1 - lt1); int rt2 = seg2.xht(); res += abs(rt2 - lt2); lt1 = rt1, lt2 = rt2; } cout << res << endl; return 0; }","title":"\u8fdb\u9636\u2014\u2014\u77e9\u5f62\u5468\u957f\u95ee\u9898"},{"location":"ds/seg/scanning/#_8","text":"\u9898\u5355\uff1a https://www.luogu.com.cn/training/479926 \u3002","title":"\u7ec3\u4e60\u9898"},{"location":"ds/seg/scanning/#reference","text":"[1] https://oi-wiki.org/geometry/scanning/ [2] https://blog.csdn.net/qq_30320171/article/details/129787418 [3] https://www.luogu.com.cn/article/iilru8ad [4] https://www.luogu.com.cn/article/9cuyuf44 [5] https://www.youtube.com/watch?v=YnIxejYW7cE","title":"Reference"},{"location":"ds/seg/seg1/","text":"\u7ebf\u6bb5\u6811\u57fa\u7840 \u00b6 \u5495\u5495\u5495 \u00b6 \u4f8b\u9898 \u00b6 using ll = long long; constexpr ll mod = 998244353; constexpr int root = 1; \u4f8b\u9898\u4e00\uff1aP3372 \u7ebf\u6bb5\u6811 1 \u00b6 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class seg_t { private: struct emm { int l, r; ll v, lz; }; int n; vector<emm> a; void pushup(int k) { a[k].v = a[k * 2].v + a[k * 2 + 1].v; } void run(int k, ll v) { a[k].lz += v; a[k].v += v * (a[k].r - a[k].l + 1); } void pushdown(int k) { if (!a[k].lz) return; run(k * 2, a[k].lz); run(k * 2 + 1, a[k].lz); a[k].lz = 0; } void build(vector<ll> &q, int k, int l, int r) { a[k].lz = 0, a[k].l = l, a[k].r = r; if (l == r) { a[k].v = q[l]; return; } int mid = l + (r - l >> 1); build(q, k * 2, l, mid); build(q, k * 2 + 1, mid + 1, r); pushup(k); } void modify(int k, const int p, const int q, const ll v) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) { run(k, v); return; } pushdown(k); int mid = l + (r - l >> 1); if (mid >= p) modify(k * 2, p, q, v); if (mid + 1 <= q) modify(k * 2 + 1, p, q, v); pushup(k); } ll query(int k, const int p, const int q) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) return a[k].v; pushdown(k); int mid = l + (r - l >> 1); ll res = 0; if (mid >= p) res += query(k * 2, p, q); if (mid + 1 <= q) res += query(k * 2 + 1, p, q); return res; } public: seg_t(vector<ll> &q) { n = q.size(), a.resize(4 * n); build(q, 1, 1, n); } void add(int l, int r, ll v) { modify(1, l, r, v); } ll sum(int l, int r) { return query(1, l, r); } }; \u4f8b\u9898\u4e8c\uff1aP3373 \u7ebf\u6bb5\u6811 2 \u00b6 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class seg_t { private: struct emm { int l, r; ll v, ad, ml; }; int n; vector<emm> a; void push_up(int k) { (a[k].v = a[k * 2].v + a[k * 2 + 1].v) %= mod; } void action_add(int k, ll t) { (a[k].ad += t) %= mod; (a[k].v += t * (a[k].r - a[k].l + 1) % mod) %= mod; } void action_mul(int k, ll t) { (a[k].v *= t) %= mod; (a[k].ad *= t) %= mod, (a[k].ml *= t) %= mod; } void push_down(int k) { if (a[k].ml != 1) { action_mul(k * 2, a[k].ml); action_mul(k * 2 + 1, a[k].ml); a[k].ml = 1; } if (a[k].ad) { action_add(k * 2, a[k].ad); action_add(k * 2 + 1, a[k].ad); a[k].ad = 0; } } void build(vector<ll> &q, int k, int l, int r) { a[k].l = l, a[k].r = r; a[k].ad = 0, a[k].ml = 1; if (l == r) { a[k].v = q[l]; return; } int mid = l + (r - l >> 1); build(q, k * 2, l, mid); build(q, k * 2 + 1, mid + 1, r); push_up(k); } ll query(int k, int p, int q) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) return a[k].v; push_down(k); int mid = l + (r - l >> 1); ll res = 0; if (mid >= p) res += query(k * 2, p, q); if (mid + 1 <= q) res += query(k * 2 + 1, p, q); return res % mod; } void modify_add(int k, int p, int q, ll v) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) { action_add(k, v); return; } push_down(k); int mid = l + (r - l >> 1); if (mid >= p) modify_add(k * 2, p, q, v); if (mid + 1 <= q) modify_add(k * 2 + 1, p, q, v); push_up(k); } void modify_mul(int k, int p, int q, ll v) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) { action_mul(k, v); return; } push_down(k); int mid = l + (r - l >> 1); if (mid >= p) modify_mul(k * 2, p, q, v); if (mid + 1 <= q) modify_mul(k * 2 + 1, p, q, v); push_up(k); } public: seg_t(vector<ll> &q) { n = q.size(); a.resize(n * 4); build(q, root, 1, n); } ll sum(int l, int r) { return query(root, l, r); } void add(int l, int r, ll v) { modify_add(root, l, r, v); } void mul(int l, int r, ll v) { modify_mul(root, l, r, v); } }; \u4f8b\u9898\u4e09\uff1aCF438D The Child and Sequence \u00b6 \u53d6\u6a21\u7684\u4e24\u4e2a\u5b9a\u7406\u3002\u4e00\u4e2a\u662f\u4e0d\u53d6\u6a21\uff0c\u4e00\u4e2a\u662f\u53d6\u4e86\u5c0f\u4e8e\u4e00\u534a\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class seg_t { private: struct emm { int l, r; ll v, mx; }; int n; vector<emm> a; void push_up(int k) { a[k].v = a[k * 2].v + a[k * 2 + 1].v; a[k].mx = max(a[k * 2].mx, a[k * 2 + 1].mx); } void build(vector<ll> &q, int k, int l, int r) { a[k].l = l, a[k].r = r; if (l == r) { a[k].v = a[k].mx = q[l]; return; } int mid = l + (r - l >> 1); build(q, k * 2, l, mid); build(q, k * 2 + 1, mid + 1, r); push_up(k); } ll query(int k, int p, int q) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) return a[k].v; int mid = l + (r - l >> 1); ll res = 0; if (mid >= p) res += query(k * 2, p, q); if (mid + 1 <= q) res += query(k * 2 + 1, p, q); return res; } void modify(int k, int x, ll v) { auto &l = a[k].l, &r = a[k].r; if (l == r) { a[k].v = a[k].mx = v; return; } int mid = l + (r - l >> 1); if (x <= mid) modify(k * 2, x, v); else modify(k * 2 + 1, x, v); push_up(k); } void putmod(int k, int p, int q, ll m) { auto &l = a[k].l, &r = a[k].r; if (l == r) { a[k].v = a[k].mx = a[k].v % m; return; } int mid = l + (r - l >> 1); if (mid >= p && a[k * 2].mx >= m) putmod(k * 2, p, q, m); if (mid + 1 <= q && a[k * 2 + 1].mx >= m) putmod(k * 2 + 1, p, q, m); push_up(k); } public: seg_t(vector<ll> &q) { n = q.size(); a.resize(n * 4); build(q, root, 1, n); } ll sum(int l, int r) { return query(root, l, r); } void mod(int l, int r, ll x) { putmod(root, l, r, x); } void change(int k, ll x) { modify(root, k, x); } }; \u4f8b\u9898\u56db\uff1a\u6700\u5927\u5b57\u6bb5\u548c GSS \u7cfb\u5217 \u00b6 SP1043 GSS1 & SP1716 GSS3 & SP2916 GSS5\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class seg_t { private: struct v_t { int prefix, suffix; int sum, res; void set(const int x) { prefix = suffix = sum = res = x; } friend v_t operator+ (const v_t &a, const v_t &b) { v_t res; res.sum = a.sum + b.sum; res.prefix = max(a.prefix, a.sum + b.prefix); res.suffix = max(b.suffix, b.sum + a.suffix); res.res = max(max(a.res, b.res), a.suffix + b.prefix); return res; } }; struct emm { int l, r; v_t v; }; int n; vector<emm> a; void push_up(int k) { a[k].v = a[k * 2].v + a[k * 2 + 1].v; } void build(vector<int> &q, int k, int l, int r) { a[k].l = l, a[k].r = r; if (l == r) { a[k].v.set(q[l]); return; } int mid = l + (r - l >> 1); build(q, k * 2, l, mid); build(q, k * 2 + 1, mid + 1, r); push_up(k); } void modify(int k, int x, int v) { auto &l = a[k].l, &r = a[k].r; if (l == r) { a[k].v.set(v); return; } int mid = l + (r - l >> 1); if (x <= mid) modify(k * 2, x, v); else modify(k * 2 + 1, x, v); push_up(k); } v_t query(int k, int p, int q) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) return a[k].v; int mid = l + (r - l >> 1); if (mid < p) return query(k * 2 + 1, p, q); if (mid + 1 > q) return query(k * 2, p, q); return query(k * 2, p, q) + query(k * 2 + 1, p, q); } public: seg_t(vector<int> &q) { n = q.size(); a.resize(4 * n); build(q, root, 1, n); } int mis(int l, int r) { return query(root, l, r).res; } int sum(int l, int r) { return query(root, l, r).sum; } int pre(int l, int r) { return query(root, l, r).prefix; } int suf(int l, int r) { return query(root, l, r).suffix; } void change(int x, int v) { modify(root, x, v); } }; void solve(int n) { vector<int> a(n + 1); rep(i, n) a[i + 1] = rr; int m = ur; seg_t seg(a); auto query = [&] (int l1, int r1, int l2, int r2) { if (l1 == r1 && r1 == r2) return seg.mis(l1, r2); if (r1 < l2) return seg.sum(r1 + 1, l2 - 1) + seg.suf(l1, r1) + seg.pre(l2, r2); int ans = seg.mis(l2, r1); if(l1 < l2) ans = max(ans, seg.suf(l1, l2) + seg.pre(l2, r2) - a[l2]); if(r2 > r1) ans = max(ans, seg.suf(l1, r1) + seg.pre(r1, r2) - a[r1]); return ans; }; while (m--) { int l1 = ur, r1 = ur, l2 = ur, r2 = ur; printf(\"%d\\n\", query(l1, r1, l2, r2)); } } \u4f8b\u9898\u4e94\uff1aP1253 \u6276\u82cf\u7684\u95ee\u9898 \u00b6 \u66fe\u7ecf\u5199\u7684\u4ee3\u7801\u3002\u548c\u73b0\u5728\u7684\u7ebf\u6bb5\u6811\u98ce\u683c\u4e0d\u4e00\u6837\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 template<typename tp, tp INIT> class segment { #define mid ((l + r) >> 1) #define vp vector<tp> private: int n; vp s, mad, mre; void _build(int k, int l, int r, vp &a) { if (l == r) { s[k] = a[l]; return; } _build(k * 2, l, mid, a), _build(k * 2 + 1, mid + 1, r, a); s[k] = max(s[k * 2], s[k * 2 + 1]); } void _addmad(int k, tp x) { s[k] += x; if (mad[k] == -INIT) mad[k] = x; else mad[k] += x; } void _addmre(int k, tp x) { s[k] = mre[k] = x, mad[k] = -INIT; } void _pushdown(int k) { if (mre[k] != -INIT) _addmre(k * 2, mre[k]), _addmre(k * 2 + 1, mre[k]), mre[k] = -INIT; if (mad[k] != -INIT) _addmad(k * 2, mad[k]), _addmad(k * 2 + 1, mad[k]), mad[k] = -INIT; } void _add(int k, int l, int r, int p, int q, tp x) { if (r < p || l > q) return; if (l >= p && r <= q) { _addmad(k, x); return; } _pushdown(k); _add(k * 2, l, mid, p, q, x), _add(k * 2 + 1, mid + 1, r, p, q, x); s[k] = max(s[k * 2], s[k * 2 + 1]); } void _modify(int k, int l, int r, int p, int q, tp x) { if (r < p || l > q) return; if (l >= p && r <= q) { _addmre(k, x); return; } _pushdown(k); _modify(k * 2, l, mid, p, q, x), _modify(k * 2 + 1, mid + 1, r, p, q, x); s[k] = max(s[k * 2], s[k * 2 + 1]); } tp _query(int k, int l, int r, int p, int q) { if (l >= p && r <= q) return s[k]; _pushdown(k); if (mid < p) return _query(k * 2 + 1, mid + 1, r, p, q); if (mid >= q) return _query(k * 2, l, mid, p, q); return max(_query(k * 2 + 1, mid + 1, r, p, q), _query(k * 2, l, mid, p, q)); } public: void build(vp &a) { n = (int)a.size() - 1, s = mad = mre = vp(3 * n, -INIT), _build(1, 1, n, a); } void add(int l, int r, tp x) { _add(1, 1, n, l, r, x); } void modify(int l, int r, tp x) { _modify(1, 1, n, l, r, x); } tp query(int l, int r) { return _query(1, 1, n, l, r); } #undef mid #undef vp };","title":"\u7ebf\u6bb5\u6811\u57fa\u7840"},{"location":"ds/seg/seg1/#_1","text":"","title":"\u7ebf\u6bb5\u6811\u57fa\u7840"},{"location":"ds/seg/seg1/#_2","text":"","title":"\u5495\u5495\u5495"},{"location":"ds/seg/seg1/#_3","text":"using ll = long long; constexpr ll mod = 998244353; constexpr int root = 1;","title":"\u4f8b\u9898"},{"location":"ds/seg/seg1/#p3372-1","text":"\u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class seg_t { private: struct emm { int l, r; ll v, lz; }; int n; vector<emm> a; void pushup(int k) { a[k].v = a[k * 2].v + a[k * 2 + 1].v; } void run(int k, ll v) { a[k].lz += v; a[k].v += v * (a[k].r - a[k].l + 1); } void pushdown(int k) { if (!a[k].lz) return; run(k * 2, a[k].lz); run(k * 2 + 1, a[k].lz); a[k].lz = 0; } void build(vector<ll> &q, int k, int l, int r) { a[k].lz = 0, a[k].l = l, a[k].r = r; if (l == r) { a[k].v = q[l]; return; } int mid = l + (r - l >> 1); build(q, k * 2, l, mid); build(q, k * 2 + 1, mid + 1, r); pushup(k); } void modify(int k, const int p, const int q, const ll v) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) { run(k, v); return; } pushdown(k); int mid = l + (r - l >> 1); if (mid >= p) modify(k * 2, p, q, v); if (mid + 1 <= q) modify(k * 2 + 1, p, q, v); pushup(k); } ll query(int k, const int p, const int q) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) return a[k].v; pushdown(k); int mid = l + (r - l >> 1); ll res = 0; if (mid >= p) res += query(k * 2, p, q); if (mid + 1 <= q) res += query(k * 2 + 1, p, q); return res; } public: seg_t(vector<ll> &q) { n = q.size(), a.resize(4 * n); build(q, 1, 1, n); } void add(int l, int r, ll v) { modify(1, l, r, v); } ll sum(int l, int r) { return query(1, l, r); } };","title":"\u4f8b\u9898\u4e00\uff1aP3372 \u7ebf\u6bb5\u6811 1"},{"location":"ds/seg/seg1/#p3373-2","text":"\u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class seg_t { private: struct emm { int l, r; ll v, ad, ml; }; int n; vector<emm> a; void push_up(int k) { (a[k].v = a[k * 2].v + a[k * 2 + 1].v) %= mod; } void action_add(int k, ll t) { (a[k].ad += t) %= mod; (a[k].v += t * (a[k].r - a[k].l + 1) % mod) %= mod; } void action_mul(int k, ll t) { (a[k].v *= t) %= mod; (a[k].ad *= t) %= mod, (a[k].ml *= t) %= mod; } void push_down(int k) { if (a[k].ml != 1) { action_mul(k * 2, a[k].ml); action_mul(k * 2 + 1, a[k].ml); a[k].ml = 1; } if (a[k].ad) { action_add(k * 2, a[k].ad); action_add(k * 2 + 1, a[k].ad); a[k].ad = 0; } } void build(vector<ll> &q, int k, int l, int r) { a[k].l = l, a[k].r = r; a[k].ad = 0, a[k].ml = 1; if (l == r) { a[k].v = q[l]; return; } int mid = l + (r - l >> 1); build(q, k * 2, l, mid); build(q, k * 2 + 1, mid + 1, r); push_up(k); } ll query(int k, int p, int q) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) return a[k].v; push_down(k); int mid = l + (r - l >> 1); ll res = 0; if (mid >= p) res += query(k * 2, p, q); if (mid + 1 <= q) res += query(k * 2 + 1, p, q); return res % mod; } void modify_add(int k, int p, int q, ll v) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) { action_add(k, v); return; } push_down(k); int mid = l + (r - l >> 1); if (mid >= p) modify_add(k * 2, p, q, v); if (mid + 1 <= q) modify_add(k * 2 + 1, p, q, v); push_up(k); } void modify_mul(int k, int p, int q, ll v) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) { action_mul(k, v); return; } push_down(k); int mid = l + (r - l >> 1); if (mid >= p) modify_mul(k * 2, p, q, v); if (mid + 1 <= q) modify_mul(k * 2 + 1, p, q, v); push_up(k); } public: seg_t(vector<ll> &q) { n = q.size(); a.resize(n * 4); build(q, root, 1, n); } ll sum(int l, int r) { return query(root, l, r); } void add(int l, int r, ll v) { modify_add(root, l, r, v); } void mul(int l, int r, ll v) { modify_mul(root, l, r, v); } };","title":"\u4f8b\u9898\u4e8c\uff1aP3373 \u7ebf\u6bb5\u6811 2"},{"location":"ds/seg/seg1/#cf438d-the-child-and-sequence","text":"\u53d6\u6a21\u7684\u4e24\u4e2a\u5b9a\u7406\u3002\u4e00\u4e2a\u662f\u4e0d\u53d6\u6a21\uff0c\u4e00\u4e2a\u662f\u53d6\u4e86\u5c0f\u4e8e\u4e00\u534a\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class seg_t { private: struct emm { int l, r; ll v, mx; }; int n; vector<emm> a; void push_up(int k) { a[k].v = a[k * 2].v + a[k * 2 + 1].v; a[k].mx = max(a[k * 2].mx, a[k * 2 + 1].mx); } void build(vector<ll> &q, int k, int l, int r) { a[k].l = l, a[k].r = r; if (l == r) { a[k].v = a[k].mx = q[l]; return; } int mid = l + (r - l >> 1); build(q, k * 2, l, mid); build(q, k * 2 + 1, mid + 1, r); push_up(k); } ll query(int k, int p, int q) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) return a[k].v; int mid = l + (r - l >> 1); ll res = 0; if (mid >= p) res += query(k * 2, p, q); if (mid + 1 <= q) res += query(k * 2 + 1, p, q); return res; } void modify(int k, int x, ll v) { auto &l = a[k].l, &r = a[k].r; if (l == r) { a[k].v = a[k].mx = v; return; } int mid = l + (r - l >> 1); if (x <= mid) modify(k * 2, x, v); else modify(k * 2 + 1, x, v); push_up(k); } void putmod(int k, int p, int q, ll m) { auto &l = a[k].l, &r = a[k].r; if (l == r) { a[k].v = a[k].mx = a[k].v % m; return; } int mid = l + (r - l >> 1); if (mid >= p && a[k * 2].mx >= m) putmod(k * 2, p, q, m); if (mid + 1 <= q && a[k * 2 + 1].mx >= m) putmod(k * 2 + 1, p, q, m); push_up(k); } public: seg_t(vector<ll> &q) { n = q.size(); a.resize(n * 4); build(q, root, 1, n); } ll sum(int l, int r) { return query(root, l, r); } void mod(int l, int r, ll x) { putmod(root, l, r, x); } void change(int k, ll x) { modify(root, k, x); } };","title":"\u4f8b\u9898\u4e09\uff1aCF438D The Child and Sequence"},{"location":"ds/seg/seg1/#gss","text":"SP1043 GSS1 & SP1716 GSS3 & SP2916 GSS5\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 class seg_t { private: struct v_t { int prefix, suffix; int sum, res; void set(const int x) { prefix = suffix = sum = res = x; } friend v_t operator+ (const v_t &a, const v_t &b) { v_t res; res.sum = a.sum + b.sum; res.prefix = max(a.prefix, a.sum + b.prefix); res.suffix = max(b.suffix, b.sum + a.suffix); res.res = max(max(a.res, b.res), a.suffix + b.prefix); return res; } }; struct emm { int l, r; v_t v; }; int n; vector<emm> a; void push_up(int k) { a[k].v = a[k * 2].v + a[k * 2 + 1].v; } void build(vector<int> &q, int k, int l, int r) { a[k].l = l, a[k].r = r; if (l == r) { a[k].v.set(q[l]); return; } int mid = l + (r - l >> 1); build(q, k * 2, l, mid); build(q, k * 2 + 1, mid + 1, r); push_up(k); } void modify(int k, int x, int v) { auto &l = a[k].l, &r = a[k].r; if (l == r) { a[k].v.set(v); return; } int mid = l + (r - l >> 1); if (x <= mid) modify(k * 2, x, v); else modify(k * 2 + 1, x, v); push_up(k); } v_t query(int k, int p, int q) { auto &l = a[k].l, &r = a[k].r; if (l >= p && r <= q) return a[k].v; int mid = l + (r - l >> 1); if (mid < p) return query(k * 2 + 1, p, q); if (mid + 1 > q) return query(k * 2, p, q); return query(k * 2, p, q) + query(k * 2 + 1, p, q); } public: seg_t(vector<int> &q) { n = q.size(); a.resize(4 * n); build(q, root, 1, n); } int mis(int l, int r) { return query(root, l, r).res; } int sum(int l, int r) { return query(root, l, r).sum; } int pre(int l, int r) { return query(root, l, r).prefix; } int suf(int l, int r) { return query(root, l, r).suffix; } void change(int x, int v) { modify(root, x, v); } }; void solve(int n) { vector<int> a(n + 1); rep(i, n) a[i + 1] = rr; int m = ur; seg_t seg(a); auto query = [&] (int l1, int r1, int l2, int r2) { if (l1 == r1 && r1 == r2) return seg.mis(l1, r2); if (r1 < l2) return seg.sum(r1 + 1, l2 - 1) + seg.suf(l1, r1) + seg.pre(l2, r2); int ans = seg.mis(l2, r1); if(l1 < l2) ans = max(ans, seg.suf(l1, l2) + seg.pre(l2, r2) - a[l2]); if(r2 > r1) ans = max(ans, seg.suf(l1, r1) + seg.pre(r1, r2) - a[r1]); return ans; }; while (m--) { int l1 = ur, r1 = ur, l2 = ur, r2 = ur; printf(\"%d\\n\", query(l1, r1, l2, r2)); } }","title":"\u4f8b\u9898\u56db\uff1a\u6700\u5927\u5b57\u6bb5\u548c GSS \u7cfb\u5217"},{"location":"ds/seg/seg1/#p1253","text":"\u66fe\u7ecf\u5199\u7684\u4ee3\u7801\u3002\u548c\u73b0\u5728\u7684\u7ebf\u6bb5\u6811\u98ce\u683c\u4e0d\u4e00\u6837\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 template<typename tp, tp INIT> class segment { #define mid ((l + r) >> 1) #define vp vector<tp> private: int n; vp s, mad, mre; void _build(int k, int l, int r, vp &a) { if (l == r) { s[k] = a[l]; return; } _build(k * 2, l, mid, a), _build(k * 2 + 1, mid + 1, r, a); s[k] = max(s[k * 2], s[k * 2 + 1]); } void _addmad(int k, tp x) { s[k] += x; if (mad[k] == -INIT) mad[k] = x; else mad[k] += x; } void _addmre(int k, tp x) { s[k] = mre[k] = x, mad[k] = -INIT; } void _pushdown(int k) { if (mre[k] != -INIT) _addmre(k * 2, mre[k]), _addmre(k * 2 + 1, mre[k]), mre[k] = -INIT; if (mad[k] != -INIT) _addmad(k * 2, mad[k]), _addmad(k * 2 + 1, mad[k]), mad[k] = -INIT; } void _add(int k, int l, int r, int p, int q, tp x) { if (r < p || l > q) return; if (l >= p && r <= q) { _addmad(k, x); return; } _pushdown(k); _add(k * 2, l, mid, p, q, x), _add(k * 2 + 1, mid + 1, r, p, q, x); s[k] = max(s[k * 2], s[k * 2 + 1]); } void _modify(int k, int l, int r, int p, int q, tp x) { if (r < p || l > q) return; if (l >= p && r <= q) { _addmre(k, x); return; } _pushdown(k); _modify(k * 2, l, mid, p, q, x), _modify(k * 2 + 1, mid + 1, r, p, q, x); s[k] = max(s[k * 2], s[k * 2 + 1]); } tp _query(int k, int l, int r, int p, int q) { if (l >= p && r <= q) return s[k]; _pushdown(k); if (mid < p) return _query(k * 2 + 1, mid + 1, r, p, q); if (mid >= q) return _query(k * 2, l, mid, p, q); return max(_query(k * 2 + 1, mid + 1, r, p, q), _query(k * 2, l, mid, p, q)); } public: void build(vp &a) { n = (int)a.size() - 1, s = mad = mre = vp(3 * n, -INIT), _build(1, 1, n, a); } void add(int l, int r, tp x) { _add(1, 1, n, l, r, x); } void modify(int l, int r, tp x) { _modify(1, 1, n, l, r, x); } tp query(int l, int r) { return _query(1, 1, n, l, r); } #undef mid #undef vp };","title":"\u4f8b\u9898\u4e94\uff1aP1253 \u6276\u82cf\u7684\u95ee\u9898"},{"location":"ds/seg/seg2/","text":"\u7ebf\u6bb5\u6811\u63d0\u9ad8 \u00b6 \u4e00\u4e9b\u6bd4\u8f83\u7cfb\u7edf\u7684\u4e1c\u897f\uff0c\u4f1a\u5355\u72ec\u653e\u6587\u7ae0\uff0c\u8fd9\u91cc\u53ea\u5199\u4e00\u4e9b\u7406\u8bba\u7684\u3002 \u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635 \u00b6 \u4f8b\u9898\uff1a P7453 [THUSCH2017] \u5927\u9b54\u6cd5\u5e08 \u3002 \u5f53\u533a\u95f4\u4fe1\u606f\u6bd4\u8f83\u590d\u6742\uff0c\u4f46\u662f\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528\u77e9\u9635\u7ef4\u62a4\u3002 \u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u77e9\u9635\uff0c\u5408\u5e76\u533a\u95f4\u65f6\u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\u8f6c\u79fb\u3002 \u4f46\u662f\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u590d\u6742\u5ea6\u8f83\u5dee\uff08\u81ea\u8eab\u5e26 \\(\\mathcal O(k^3)\\) \u7684\uff09\uff0c\u53ef\u80fd\u4f1a\u88ab\u5361\u3002 \u5806\u5f0f\u5efa\u6811 \u00b6 \u6211\u4eec\u79f0\uff0c\u82e5\u8282\u70b9 \\(x\\) \u7684\u5de6\u53f3\u513f\u5b50\u5206\u522b\u7f16\u53f7 \\(2x,2x+1\\) \uff0c\u5219\u662f\u5806\u5f0f\u7684\u3002 \u5806\u5f0f\u5efa\u6811\u540e\uff0c\u5f80\u5f80\u94a6\u5b9a\u7ebf\u6bb5\u6811\u503c\u57df\u4e3a \\([1,2^k]\\) \uff0c\u4e0d\u591f\u7684\u8865\u4f59\u4f4d\u5373\u53ef\u3002 \u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f\u5728\u732b\u6811\u548c zkw \u7ebf\u6bb5\u6811\u90fd\u6709\u5f88\u597d\u7684\u5e94\u7528\u3002 \u6b64\u5904\u63d0\u4f9b\u4e00\u4e2a\u6bd4\u8f83\u597d\u73a9\u7684\u81ea\u52a8\u8865\u9f50\u5230 \\(2^k\\) \u7684\u65b9\u6cd5\uff1a #define awa(x) ({ \\ auto t = x; \\ __builtin_popcount(t) == 1 ? t : (1 << (__lg(t) + 1)); \\ }) \u8fd9\u6837 \\(n\\) \u5c31\u53d8\u6210\u4e86 \\(\\ge n\\) \u7684\u6700\u5c0f\u7684 \\(2\\) \u7684\u975e\u8d1f\u6574\u6570\u6b21\u5e42\u3002 \u5982\u679c\u662f\u5927\u4e8e\u5c31\u53ea\u53d6\u540e\u9762\u534a\u8fb9\u5373\u53ef\u3002 \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811 \u00b6 \u8bb0\u5f55\u4e00\u68f5\u6811\u7684 root \u548c tot \u3002 \u4e0d\u8981 build \u3002 \u5728 modify \u7684\u65f6\u5019\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\u5219 ++tot \u8bbe\u7f6e\u7f16\u53f7\u3002 \u5728 query \u7684\u65f6\u5019\u5982\u679c\u8282\u70b9\u4e3a\u7a7a\u5219\u8fd4\u56de\u4e00\u4e2a\u5408\u9002\u7684\u503c\u3002 \u5b9e\u73b0\u65b9\u6cd5\u5f88\u591a\uff0c\u6211\u503e\u5411\u4e8e\u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20 &k \u5f15\u7528\uff0c \u8c03\u7528\u7684\u65f6\u5019\u4f20 k -> a[k].lss/rss \uff1b \u5982\u679c k == 0 \u5219 k = ++tot \u53ef\u4ee5\u5728\u524d\u9762\u81ea\u52a8\u4fee\u6539\u4e86\u3002 \u4e0b\u653e\u6807\u8bb0\u65f6\u5982\u679c\u6ca1\u6709\u5b69\u5b50\uff0c\u5c31\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\uff0c\u6216\u8005\u6807\u8bb0\u6c38\u4e45\u5316\u3002 \u53e6\u5916\uff0c\u6211\u4eec\u901a\u8fc7\u52a8\u6001\u5f00\u70b9\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u7ebf\u6bb5\u6811\u68ee\u6797\uff0c\u8fdb\u800c\u5b9e\u73b0\u4e3b\u5e2d\u6811\u3001\u7ebf\u6bb5\u6811\u5408\u5e76\u7b49\u3002 \u6743\u503c\u7ebf\u6bb5\u6811 \u00b6 \u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u6743\u503c\u800c\u4e0d\u662f\u6570\u7ec4\u4e0b\u6807\uff0c\u7c7b\u4f3c\u6876\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002 \u901a\u5e38\u6743\u503c\u7ebf\u6bb5\u6811\u53ea\u4f1a\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u4ee5\u53ca\u4e8c\u5206\uff08\u89c1\u4e0b\u9762\uff09\u64cd\u4f5c\u3002 \u8fd9\u4e9b\u90fd\u662f\u5f88\u7b80\u5355\u7684\uff0c\u6211\u4f1a\u5355\u72ec\u653e\u4e00\u4e2a\u535a\u5ba2\u8bb0\u5f55\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u4e3b\u5e2d\u6811\uff09\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76 \u00b6 \u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u822c\u53ea\u7528\u4e8e\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e0b\u6587\u518d\u8bf4\u4e3a\u4ec0\u4e48\u3002 \u539f\u5730\u5408\u5e76 \u00b6 \u601d\u60f3\u5f88\u7b80\u5355\uff0c\u4ee3\u7801\u5f88\u7b80\u5355\u3002 \u6211\u4eec\u5408\u5e76\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5e76\u4f9d\u6b21\u4e0a\u4f20\u3002 int merge(int x, int y, int l, int r) { if (!x || !y) return x + y; if (l == r) { // do someting ... return x; } int mid = (l + r) >> 1; a[x].lss = merge(a[x].lss, a[y].lss, l, mid); a[x].rss = merge(a[x].rss, a[y].rss, mid + 1, r); return push_up(x), x; } \u5982\u679c\u6bd4\u8f83\u5bb9\u6613\u5408\u5e76\u4efb\u610f\u5927\u5c0f\u7684\u4e24\u4e2a\u533a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u7b80\u5355\u505a\u6cd5\u3002 int merge(int x, int y) { if (!x || !y) return x | y; // do someting ... a[x].lss = merge(a[x].lss, a[y].lss); a[x].rss = merge(a[x].rss, a[y].rss); return x; } \u590d\u6742\u5ea6\u5f88\u62bd\u8c61\u3002 \u4e00\u822c\u6765\u8bf4\u6bd4\u8f83\u7384\u5b66\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f \\(\\mathcal O(\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u9700\u8981\u5408\u5e76)\\) \u7684\u3002 \u5bf9\u4e8e\u6ee1\u7684\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u5408\u5e76\u590d\u6742\u5ea6\u5c31\u662f\u91cd\u6784\u7684\u590d\u6742\u5ea6\uff0c\u5f88\u62bd\u8c61\u3002 \u6240\u4ee5\u4e00\u822c\u53ea\u5408\u5e76\u7a00\u758f\u7684\uff0c\u6bd4\u5982\u6743\u503c\u7ebf\u6bb5\u6811\u3002 \u7a7a\u95f4\u5f00\u591a\u5927\uff1f\u4e0d\u77e5\u9053\u3002\u4e5f\u662f\u7384\u5b66\uff0c\u80fd\u5f00\u5927\u5c31\u5927\u70b9\u628a\u3002 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76 \u00b6 \u6211\u4eec\u4e0a\u4e00\u4e2a\u5199\u6cd5\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u7ed3\u679c\u653e\u5728\u4e86 \\(x\\) \u6811\u4e0a\u9762\uff0c\u66ff\u6362\u4e86\u539f\u6765\u7684\u7ed3\u6784\u3002 \u4f46\u662f\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u4f9d\u7136\u9700\u8981 \\(x\\) \u6811\u7684\u4fe1\u606f\uff0c\u5c31\u9700\u8981\u62f7\u8d1d\uff08\u7c7b\u4f3c\u53ef\u6301\u4e45\u5316\u7684\u65b0\u5f00\u70b9\uff09\u3002 \u4f46\u662f\u62f7\u8d1d\u7684\u95ee\u9898\u662f\uff0c\u7a7a\u95f4\u5f88\u5927\uff0c\u4e00\u822c\u4e0d\u5e38\u7528\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u6811\u4e0a\u64cd\u4f5c \u00b6 \u7c7b\u4f3c\u542f\u53d1\u5f0f\u5408\u5e76\u3002 \u4f8b\u9898\uff1a CF600E Lomsat gelral \u3002 \u6838\u5fc3\u601d\u60f3\u662f\uff0c\u81ea\u5e95\u5411\u4e0a\u6216\u81ea\u9876\u5411\u4e0b\u7684\uff0cDFS \u6574\u68f5\u6811\uff0c\u628a\u8282\u70b9\u4fe1\u606f\u5408\u5e76\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0a\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; vector<int> g[N]; int root[N], tot; struct node { int lss, rss; struct vt { int cnt, ans; friend vt operator +(const vt &a, const vt &b) { if (a.cnt > b.cnt) return a; if (b.cnt > a.cnt) return b; return vt{a.cnt, a.ans + b.ans}; } } v; } a[int(1e7)]; void push_up(int k) { a[k].v = a[a[k].lss].v + a[a[k].rss].v; } void modify(int &k, int l, int r, int x, int v) { if (!k) k = ++tot; if (l == r) { a[k].v.ans = x; a[k].v.cnt += v; return; } int mid = (l + r) >> 1; if (x <= mid) modify(a[k].lss, l, mid, x, v); else modify(a[k].rss, mid + 1, r, x, v); push_up(k); } int merge(int x, int y, int l, int r) { if (!x || !y) return x | y; if (l == r) { a[x].v.cnt += a[y].v.cnt; return x; } int mid = (l + r) >> 1; a[x].lss = merge(a[x].lss, a[y].lss, l, mid); a[x].rss = merge(a[x].rss, a[y].rss, mid + 1, r); push_up(x); return x; } int ans[N]; int get_ans(int root) { return a[root].v.ans; } void dfs(int u, int fa) { for (int v : g[u]) if (v != fa) { dfs(v, u); root[u] = merge(root[u], root[v], 1, MAXN); } ans[u] = get_ans(root[u]); } \u7ebf\u6bb5\u6811\u4e8c\u5206 \u00b6 \u901a\u5e38\u662f\u5728\u503c\u57df\u7ebf\u6bb5\u6811\u4e0a\u9762\u3002 \u4f8b\u9898\uff1a https://hydro.ac/d/RainPPR/p/P1001 \u3002 \u6734\u7d20\u53cc \\(\\log\\) \u505a\u6cd5 \u00b6 \u6211\u4eec\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u518d\u5728\u7ebf\u6bb5\u6811\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u3002 \u90a3\u4e48\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u81ea\u7136\u5c31\u662f \\(\\mathcal O(\\log^2 n)\\) \u7684\uff0c\u5176\u4e2d \\(n\\) \u662f\u503c\u57df\u3002 \u7279\u70b9\u662f\u597d\u5199\uff0c\u53ef\u80fd\u4f1a\u88ab\u5361\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u3002 UPD\uff1a\u5927\u90e8\u5206\u65f6\u5019\u53ea\u6709\u5355\u8c03\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u56e0\u6b64\u7528\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u5feb\u5f97\u591a\u3002 \u5355 \\(\\log\\) \u5168\u5c40\u4e8c\u5206 \u00b6 \u6240\u8c13\u5168\u5c40\uff0c\u5c31\u662f\u8981\u67e5\u8be2\u7684\u533a\u95f4\u5df2\u7ecf\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e00\u4e2a\u5b8c\u6574\u8282\u70b9\u5185\u4e86\u3002 \u6b64\u65f6\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u4e14\u597d\u5199\uff0c \u8bb0 root \u4e3a\u5f53\u524d\u8981\u4e8c\u5206\u8282\u70b9\uff1b \u5224\u65ad\u5de6\u5b50\u6811 lson[root] \u662f\u5426\u6ee1\u8db3\uff1b \u5224\u65ad\u67da\u5b50\u53a8 rson[root] \u662f\u5426\u6ee1\u8db3\uff1b \u9009\u62e9\u5408\u9002\u7684\u4e00\u8fb9\u8f6c\u79fb\u3002 \u6700\u7ecf\u5178\u7684\u4f8b\u5b50\u5c31\u662f\u5355\u70b9\u4fee\u6539\u5168\u5c40\u7b2c \\(k\\) \u5c0f\u3002 \u5355 \\(\\log\\) \u5c40\u90e8\u4e8c\u5206 \u00b6 \u6240\u8c13\u5c40\u90e8\uff0c\u5c31\u662f\u6307\u4e00\u4e2a\u503c\u57df\u533a\u95f4\u5185\uff0c\u8de8\u8d8a\u4e86\u591a\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u7684\u3002 \u6211\u4eec\u9700\u8981\u5148\u4ece\u7ebf\u6bb5\u6811\u8dd1\u5230\u533a\u95f4\u5bf9\u5e94\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u5982\u679c\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0a\u5c31\u8fdb\u53bb\u3002 \u590d\u6742\u5ea6\uff1a\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u88ab\u8868\u793a\u6210 \\(\\mathcal O(\\log n)\\) \u4e2a\u5757\uff0c\u4e14\u6df1\u5ea6\u6700\u5927\u4e3a \\(\\mathcal O(\\log n)\\) \u3002 \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 namespace ds { constexpr int N = 5e5 + 10; struct node { int l, r, v; } a[N << 2]; void build(int k, int l, int r) { a[k] = {l, r, 0}; if (l == r) return; int mid = (l + r) >> 1; build(k << 1, l, mid); build(k << 1 | 1, mid + 1, r); } void modify(int x, int v) { int root = 1; while (true) { a[root].v += v; int l = a[root].l, r = a[root].r; if (l == r) break; int mid = (l + r) >> 1; if (x <= mid) root = root << 1; else root = root << 1 | 1; } } vector<int> pos; int query(int k, int p, int &x) { int l = a[k].l, r = a[k].r; if (l >= p) { if (a[k].v < x) { x -= a[k].v; return -1; } while (a[k].l != a[k].r) { if (a[k << 1].v < x) x -= a[k << 1].v, k = k << 1 | 1; else k = k << 1; } return a[k].l; } if (l == r) return -1; int mid = (l + r) >> 1; if (p <= mid) { int t = query(k << 1, p, x); if (t != -1) return t; } return query(k << 1 | 1, p, x); } void init(int n) { build(1, 1, n); } void add(int x) { modify(x, 1); } void del(int x) { modify(x, -1); } int rnk(int l, int k) { return query(1, l, k); } }","title":"\u7ebf\u6bb5\u6811\u63d0\u9ad8"},{"location":"ds/seg/seg2/#_1","text":"\u4e00\u4e9b\u6bd4\u8f83\u7cfb\u7edf\u7684\u4e1c\u897f\uff0c\u4f1a\u5355\u72ec\u653e\u6587\u7ae0\uff0c\u8fd9\u91cc\u53ea\u5199\u4e00\u4e9b\u7406\u8bba\u7684\u3002","title":"\u7ebf\u6bb5\u6811\u63d0\u9ad8"},{"location":"ds/seg/seg2/#_2","text":"\u4f8b\u9898\uff1a P7453 [THUSCH2017] \u5927\u9b54\u6cd5\u5e08 \u3002 \u5f53\u533a\u95f4\u4fe1\u606f\u6bd4\u8f83\u590d\u6742\uff0c\u4f46\u662f\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528\u77e9\u9635\u7ef4\u62a4\u3002 \u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u77e9\u9635\uff0c\u5408\u5e76\u533a\u95f4\u65f6\u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\u8f6c\u79fb\u3002 \u4f46\u662f\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u590d\u6742\u5ea6\u8f83\u5dee\uff08\u81ea\u8eab\u5e26 \\(\\mathcal O(k^3)\\) \u7684\uff09\uff0c\u53ef\u80fd\u4f1a\u88ab\u5361\u3002","title":"\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635"},{"location":"ds/seg/seg2/#_3","text":"\u6211\u4eec\u79f0\uff0c\u82e5\u8282\u70b9 \\(x\\) \u7684\u5de6\u53f3\u513f\u5b50\u5206\u522b\u7f16\u53f7 \\(2x,2x+1\\) \uff0c\u5219\u662f\u5806\u5f0f\u7684\u3002 \u5806\u5f0f\u5efa\u6811\u540e\uff0c\u5f80\u5f80\u94a6\u5b9a\u7ebf\u6bb5\u6811\u503c\u57df\u4e3a \\([1,2^k]\\) \uff0c\u4e0d\u591f\u7684\u8865\u4f59\u4f4d\u5373\u53ef\u3002 \u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f\u5728\u732b\u6811\u548c zkw \u7ebf\u6bb5\u6811\u90fd\u6709\u5f88\u597d\u7684\u5e94\u7528\u3002 \u6b64\u5904\u63d0\u4f9b\u4e00\u4e2a\u6bd4\u8f83\u597d\u73a9\u7684\u81ea\u52a8\u8865\u9f50\u5230 \\(2^k\\) \u7684\u65b9\u6cd5\uff1a #define awa(x) ({ \\ auto t = x; \\ __builtin_popcount(t) == 1 ? t : (1 << (__lg(t) + 1)); \\ }) \u8fd9\u6837 \\(n\\) \u5c31\u53d8\u6210\u4e86 \\(\\ge n\\) \u7684\u6700\u5c0f\u7684 \\(2\\) \u7684\u975e\u8d1f\u6574\u6570\u6b21\u5e42\u3002 \u5982\u679c\u662f\u5927\u4e8e\u5c31\u53ea\u53d6\u540e\u9762\u534a\u8fb9\u5373\u53ef\u3002","title":"\u5806\u5f0f\u5efa\u6811"},{"location":"ds/seg/seg2/#_4","text":"\u8bb0\u5f55\u4e00\u68f5\u6811\u7684 root \u548c tot \u3002 \u4e0d\u8981 build \u3002 \u5728 modify \u7684\u65f6\u5019\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\u5219 ++tot \u8bbe\u7f6e\u7f16\u53f7\u3002 \u5728 query \u7684\u65f6\u5019\u5982\u679c\u8282\u70b9\u4e3a\u7a7a\u5219\u8fd4\u56de\u4e00\u4e2a\u5408\u9002\u7684\u503c\u3002 \u5b9e\u73b0\u65b9\u6cd5\u5f88\u591a\uff0c\u6211\u503e\u5411\u4e8e\u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20 &k \u5f15\u7528\uff0c \u8c03\u7528\u7684\u65f6\u5019\u4f20 k -> a[k].lss/rss \uff1b \u5982\u679c k == 0 \u5219 k = ++tot \u53ef\u4ee5\u5728\u524d\u9762\u81ea\u52a8\u4fee\u6539\u4e86\u3002 \u4e0b\u653e\u6807\u8bb0\u65f6\u5982\u679c\u6ca1\u6709\u5b69\u5b50\uff0c\u5c31\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\uff0c\u6216\u8005\u6807\u8bb0\u6c38\u4e45\u5316\u3002 \u53e6\u5916\uff0c\u6211\u4eec\u901a\u8fc7\u52a8\u6001\u5f00\u70b9\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u7ebf\u6bb5\u6811\u68ee\u6797\uff0c\u8fdb\u800c\u5b9e\u73b0\u4e3b\u5e2d\u6811\u3001\u7ebf\u6bb5\u6811\u5408\u5e76\u7b49\u3002","title":"\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811"},{"location":"ds/seg/seg2/#_5","text":"\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u6743\u503c\u800c\u4e0d\u662f\u6570\u7ec4\u4e0b\u6807\uff0c\u7c7b\u4f3c\u6876\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002 \u901a\u5e38\u6743\u503c\u7ebf\u6bb5\u6811\u53ea\u4f1a\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u4ee5\u53ca\u4e8c\u5206\uff08\u89c1\u4e0b\u9762\uff09\u64cd\u4f5c\u3002 \u8fd9\u4e9b\u90fd\u662f\u5f88\u7b80\u5355\u7684\uff0c\u6211\u4f1a\u5355\u72ec\u653e\u4e00\u4e2a\u535a\u5ba2\u8bb0\u5f55\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u4e3b\u5e2d\u6811\uff09\u3002","title":"\u6743\u503c\u7ebf\u6bb5\u6811"},{"location":"ds/seg/seg2/#_6","text":"\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u822c\u53ea\u7528\u4e8e\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e0b\u6587\u518d\u8bf4\u4e3a\u4ec0\u4e48\u3002","title":"\u7ebf\u6bb5\u6811\u5408\u5e76"},{"location":"ds/seg/seg2/#_7","text":"\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u4ee3\u7801\u5f88\u7b80\u5355\u3002 \u6211\u4eec\u5408\u5e76\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5e76\u4f9d\u6b21\u4e0a\u4f20\u3002 int merge(int x, int y, int l, int r) { if (!x || !y) return x + y; if (l == r) { // do someting ... return x; } int mid = (l + r) >> 1; a[x].lss = merge(a[x].lss, a[y].lss, l, mid); a[x].rss = merge(a[x].rss, a[y].rss, mid + 1, r); return push_up(x), x; } \u5982\u679c\u6bd4\u8f83\u5bb9\u6613\u5408\u5e76\u4efb\u610f\u5927\u5c0f\u7684\u4e24\u4e2a\u533a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u7b80\u5355\u505a\u6cd5\u3002 int merge(int x, int y) { if (!x || !y) return x | y; // do someting ... a[x].lss = merge(a[x].lss, a[y].lss); a[x].rss = merge(a[x].rss, a[y].rss); return x; } \u590d\u6742\u5ea6\u5f88\u62bd\u8c61\u3002 \u4e00\u822c\u6765\u8bf4\u6bd4\u8f83\u7384\u5b66\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f \\(\\mathcal O(\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u9700\u8981\u5408\u5e76)\\) \u7684\u3002 \u5bf9\u4e8e\u6ee1\u7684\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u5408\u5e76\u590d\u6742\u5ea6\u5c31\u662f\u91cd\u6784\u7684\u590d\u6742\u5ea6\uff0c\u5f88\u62bd\u8c61\u3002 \u6240\u4ee5\u4e00\u822c\u53ea\u5408\u5e76\u7a00\u758f\u7684\uff0c\u6bd4\u5982\u6743\u503c\u7ebf\u6bb5\u6811\u3002 \u7a7a\u95f4\u5f00\u591a\u5927\uff1f\u4e0d\u77e5\u9053\u3002\u4e5f\u662f\u7384\u5b66\uff0c\u80fd\u5f00\u5927\u5c31\u5927\u70b9\u628a\u3002","title":"\u539f\u5730\u5408\u5e76"},{"location":"ds/seg/seg2/#_8","text":"\u6211\u4eec\u4e0a\u4e00\u4e2a\u5199\u6cd5\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u7ed3\u679c\u653e\u5728\u4e86 \\(x\\) \u6811\u4e0a\u9762\uff0c\u66ff\u6362\u4e86\u539f\u6765\u7684\u7ed3\u6784\u3002 \u4f46\u662f\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u4f9d\u7136\u9700\u8981 \\(x\\) \u6811\u7684\u4fe1\u606f\uff0c\u5c31\u9700\u8981\u62f7\u8d1d\uff08\u7c7b\u4f3c\u53ef\u6301\u4e45\u5316\u7684\u65b0\u5f00\u70b9\uff09\u3002 \u4f46\u662f\u62f7\u8d1d\u7684\u95ee\u9898\u662f\uff0c\u7a7a\u95f4\u5f88\u5927\uff0c\u4e00\u822c\u4e0d\u5e38\u7528\u3002","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76"},{"location":"ds/seg/seg2/#_9","text":"\u7c7b\u4f3c\u542f\u53d1\u5f0f\u5408\u5e76\u3002 \u4f8b\u9898\uff1a CF600E Lomsat gelral \u3002 \u6838\u5fc3\u601d\u60f3\u662f\uff0c\u81ea\u5e95\u5411\u4e0a\u6216\u81ea\u9876\u5411\u4e0b\u7684\uff0cDFS \u6574\u68f5\u6811\uff0c\u628a\u8282\u70b9\u4fe1\u606f\u5408\u5e76\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0a\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int n; vector<int> g[N]; int root[N], tot; struct node { int lss, rss; struct vt { int cnt, ans; friend vt operator +(const vt &a, const vt &b) { if (a.cnt > b.cnt) return a; if (b.cnt > a.cnt) return b; return vt{a.cnt, a.ans + b.ans}; } } v; } a[int(1e7)]; void push_up(int k) { a[k].v = a[a[k].lss].v + a[a[k].rss].v; } void modify(int &k, int l, int r, int x, int v) { if (!k) k = ++tot; if (l == r) { a[k].v.ans = x; a[k].v.cnt += v; return; } int mid = (l + r) >> 1; if (x <= mid) modify(a[k].lss, l, mid, x, v); else modify(a[k].rss, mid + 1, r, x, v); push_up(k); } int merge(int x, int y, int l, int r) { if (!x || !y) return x | y; if (l == r) { a[x].v.cnt += a[y].v.cnt; return x; } int mid = (l + r) >> 1; a[x].lss = merge(a[x].lss, a[y].lss, l, mid); a[x].rss = merge(a[x].rss, a[y].rss, mid + 1, r); push_up(x); return x; } int ans[N]; int get_ans(int root) { return a[root].v.ans; } void dfs(int u, int fa) { for (int v : g[u]) if (v != fa) { dfs(v, u); root[u] = merge(root[u], root[v], 1, MAXN); } ans[u] = get_ans(root[u]); }","title":"\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u6811\u4e0a\u64cd\u4f5c"},{"location":"ds/seg/seg2/#_10","text":"\u901a\u5e38\u662f\u5728\u503c\u57df\u7ebf\u6bb5\u6811\u4e0a\u9762\u3002 \u4f8b\u9898\uff1a https://hydro.ac/d/RainPPR/p/P1001 \u3002","title":"\u7ebf\u6bb5\u6811\u4e8c\u5206"},{"location":"ds/seg/seg2/#log","text":"\u6211\u4eec\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u518d\u5728\u7ebf\u6bb5\u6811\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u3002 \u90a3\u4e48\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u81ea\u7136\u5c31\u662f \\(\\mathcal O(\\log^2 n)\\) \u7684\uff0c\u5176\u4e2d \\(n\\) \u662f\u503c\u57df\u3002 \u7279\u70b9\u662f\u597d\u5199\uff0c\u53ef\u80fd\u4f1a\u88ab\u5361\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u3002 UPD\uff1a\u5927\u90e8\u5206\u65f6\u5019\u53ea\u6709\u5355\u8c03\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u56e0\u6b64\u7528\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u5feb\u5f97\u591a\u3002","title":"\u6734\u7d20\u53cc \\(\\log\\) \u505a\u6cd5"},{"location":"ds/seg/seg2/#log_1","text":"\u6240\u8c13\u5168\u5c40\uff0c\u5c31\u662f\u8981\u67e5\u8be2\u7684\u533a\u95f4\u5df2\u7ecf\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e00\u4e2a\u5b8c\u6574\u8282\u70b9\u5185\u4e86\u3002 \u6b64\u65f6\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u4e14\u597d\u5199\uff0c \u8bb0 root \u4e3a\u5f53\u524d\u8981\u4e8c\u5206\u8282\u70b9\uff1b \u5224\u65ad\u5de6\u5b50\u6811 lson[root] \u662f\u5426\u6ee1\u8db3\uff1b \u5224\u65ad\u67da\u5b50\u53a8 rson[root] \u662f\u5426\u6ee1\u8db3\uff1b \u9009\u62e9\u5408\u9002\u7684\u4e00\u8fb9\u8f6c\u79fb\u3002 \u6700\u7ecf\u5178\u7684\u4f8b\u5b50\u5c31\u662f\u5355\u70b9\u4fee\u6539\u5168\u5c40\u7b2c \\(k\\) \u5c0f\u3002","title":"\u5355 \\(\\log\\) \u5168\u5c40\u4e8c\u5206"},{"location":"ds/seg/seg2/#log_2","text":"\u6240\u8c13\u5c40\u90e8\uff0c\u5c31\u662f\u6307\u4e00\u4e2a\u503c\u57df\u533a\u95f4\u5185\uff0c\u8de8\u8d8a\u4e86\u591a\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u7684\u3002 \u6211\u4eec\u9700\u8981\u5148\u4ece\u7ebf\u6bb5\u6811\u8dd1\u5230\u533a\u95f4\u5bf9\u5e94\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u5982\u679c\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0a\u5c31\u8fdb\u53bb\u3002 \u590d\u6742\u5ea6\uff1a\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u88ab\u8868\u793a\u6210 \\(\\mathcal O(\\log n)\\) \u4e2a\u5757\uff0c\u4e14\u6df1\u5ea6\u6700\u5927\u4e3a \\(\\mathcal O(\\log n)\\) \u3002 \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 namespace ds { constexpr int N = 5e5 + 10; struct node { int l, r, v; } a[N << 2]; void build(int k, int l, int r) { a[k] = {l, r, 0}; if (l == r) return; int mid = (l + r) >> 1; build(k << 1, l, mid); build(k << 1 | 1, mid + 1, r); } void modify(int x, int v) { int root = 1; while (true) { a[root].v += v; int l = a[root].l, r = a[root].r; if (l == r) break; int mid = (l + r) >> 1; if (x <= mid) root = root << 1; else root = root << 1 | 1; } } vector<int> pos; int query(int k, int p, int &x) { int l = a[k].l, r = a[k].r; if (l >= p) { if (a[k].v < x) { x -= a[k].v; return -1; } while (a[k].l != a[k].r) { if (a[k << 1].v < x) x -= a[k << 1].v, k = k << 1 | 1; else k = k << 1; } return a[k].l; } if (l == r) return -1; int mid = (l + r) >> 1; if (p <= mid) { int t = query(k << 1, p, x); if (t != -1) return t; } return query(k << 1 | 1, p, x); } void init(int n) { build(1, 1, n); } void add(int x) { modify(x, 1); } void del(int x) { modify(x, -1); } int rnk(int l, int k) { return query(1, l, k); } }","title":"\u5355 \\(\\log\\) \u5c40\u90e8\u4e8c\u5206"},{"location":"ds/seg/seg_cat/","text":"\u732b\u6811 \u00b6 \u4f7f\u7528\u60c5\u666f \u00b6 \u6ca1\u6709\u4fee\u6539\uff0c\u53ea\u6709\u533a\u95f4\u67e5\u8be2\uff1b\u4e14\u7ef4\u62a4\u7684\u4fe1\u606f\u53ef\u4ee5\u5feb\u901f\u5408\u5e76\u4e14\u6ee1\u8db3\u7ed3\u5408\u5f8b\u3002 \u6211\u4eec\u76f4\u63a5\u629b\u51fa\u732b\u6811\u7684\u590d\u6742\u5ea6\uff1a\u9884\u5904\u7406 \\(\\mathcal O(n\\log n)\\) \uff0c\u67e5\u8be2 \\(\\mathcal O(1)\\) \u5982\u679c\u8be2\u95ee\u7684\u64cd\u4f5c\u662f\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\uff08RMQ\uff09\uff0c\u90a3\u4e48\u5979\u548c ST \u8868\u662f\u7406\u8bba\u590d\u6742\u5ea6\u76f8\u540c\u7684\u3002 \u5982\u679c\u8be2\u95ee\u7684\u64cd\u4f5c\u6ee1\u8db3\u53ef\u51cf\u6027\uff08SUM\uff09\uff0c\u90a3\u4e48\u76f4\u63a5\u524d\u7f00\u548c\u5904\u7406\u662f\u66f4\u4f18\u7684\u3002 \u5982\u679c\u67e5\u8be2\u6b21\u6570 \\(m\\) \u8fdc\u5c0f\u4e8e\u5143\u7d20\u4e2a\u6570 \\(n\\) \uff0c\u90a3\u4e48\u7ebf\u6bb5\u6811\u662f\u66f4\u4f18\u7684\u3002 \u5426\u5219\uff0c\u90a3\u4e48\u732b\u6811\u662f\u4f18\u4e8e\u7ebf\u6bb5\u6811\u7b49\u7684\u3002 \u9884\u5904\u7406 \u00b6 \u4e0b\u9762\u76f4\u63a5\u8bb0 \\(m=\\dfrac{l+r}2\\) \uff0c\u8868\u793a\u533a\u95f4\u4e2d\u70b9\u3002 \u6211\u4eec\u5c06\u533a\u95f4 \\([l,r]\\) \u5206\u4e3a\u4e24\u90e8\u5206 \\([l,m],[m+1,r]\\) \u3002 \u4ece \\(m,m+1\\) \u5206\u522b\u51fa\u53d1\uff0c\u5411\u5de6\u3001\u53f3\u904d\u5386\u5230 \\(l,r\\) \uff0c\u540c\u6b65\u7ef4\u62a4\u8981\u5904\u7406\u7684\u4fe1\u606f\u3002 \u9012\u5f52\u5de6\u53f3\u533a\u95f4\u3002 \u590d\u6742\u5ea6\u5206\u6790\uff1a \u6700\u591a\u8fed\u4ee3 \\(\\mathcal O(\\log n)\\) \u5c42\uff1b \u6bcf\u4e00\u5c42\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f1a\u4e14\u4ec5\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c \u6545\uff0c\u9884\u5904\u7406\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(n\\log n)\\) \u3002 \u67e5\u8be2 \u00b6 \u5bf9\u4e8e\u8be2\u95ee\u533a\u95f4 \\([p,q]\\) \uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u7ebf\u6bb5\u6811\u8282\u70b9 \\([l,r]\\) \uff0c \u6ee1\u8db3 \\(l\\le p\\le q\\le r\\) \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0a\u9762\u76f4\u63a5\u5408\u5e76\u524d\u7f00\u548c\u540e\u7f00\u5373\u53ef\u3002 \u9996\u5148\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u4ece\u4e0a\u5230\u4e0b\u628a\u8be2\u95ee\u533a\u95f4\u63a8\u5230\u5408\u9002\u7684\u5c42\u4e0a\uff0c\u662f \\(\\mathcal O(\\log n)\\) \u7684\u3002 \u7136\u540e\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u4ece\u4e0b\u5f80\u4e0a\u627e LCA\uff0c\u6811\u5256 \\(\\mathcal O(\\log \\log n)\\) \u7684\uff0cST \u8868 \\(\\mathcal O(1)\\) \u7684\u3002 \u4f46\u662f\u8fd9\u592a\u590d\u6742\u4e86\uff0c\u6211\u4eec\u8003\u8651\u5806\u5f0f\u5efa\u6811\uff0c\u6b64\u65f6\uff0c \u8bbe\u6839\u8282\u70b9\u7f16\u53f7\u4e3a \\(1\\) \uff0c\u5b50\u8282\u70b9\u6ee1\u8db3\u5806\u5f0f\uff0c \u6ce8\u610f\u5230\u4e00\u4e2a\u8282\u70b9\u7f16\u53f7\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u540e \\(k\\) \u4f4d\u5c31\u8868\u793a\u4e86\u5411\u4e0a \\(k\\) \u5c42\u7684\u4fe1\u606f\u3002 \u56e0\u6b64\uff0cLCA \u8282\u70b9\u7f16\u53f7\u5c31\u662f\u533a\u95f4 \\([l,r]\\) \u5bf9\u5e94\u8282\u70b9\u7f16\u53f7\u4e8c\u8fdb\u5236\u8868\u793a\u7684 LCP\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09\u3002 \u7528\u516c\u5f0f\u8868\u8fbe\u5c31\u662f x >> __lg(x ^ y) \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5355\u7684\u5728 \\(\\mathcal O(1)\\) \u67e5\u8be2\u4e86\u3002 \u5b9e\u73b0 \u00b6 \u9898\u76ee\uff1a SP1043 GSS1 \u9759\u6001\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c \u3002 \u4ee3\u7801 #define fill_over(x) ((1 << (__lg(x) + 1)) - 1) constexpr int N = 1 << 16; int n, m, a[N]; int pos[N], ans[20][N << 2], sum[20][N << 2]; void build(int k, int l, int r, int dep) { if (l == r) return void(pos[l] = k); int mid = (l + r) >> 1; // LEFT: [l, mid] sum[dep][mid] = a[mid]; for (int i = mid - 1; i >= l; --i) sum[dep][i] = sum[dep][i + 1] + a[i]; for (int i = mid - 1; i >= l; --i) sum[dep][i] = max(sum[dep][i], sum[dep][i + 1]); ans[dep][mid] = a[mid]; for (int i = mid - 1; i >= l; --i) ans[dep][i] = max(ans[dep][i + 1], 0) + a[i]; for (int i = mid - 1; i >= l; --i) ans[dep][i] = max(ans[dep][i], ans[dep][i + 1]); // RIGHT: [mid + 1, r] sum[dep][mid + 1] = a[mid + 1]; for (int i = mid + 2; i <= r; ++i) sum[dep][i] = sum[dep][i - 1] + a[i]; for (int i = mid + 2; i <= r; ++i) sum[dep][i] = max(sum[dep][i], sum[dep][i - 1]); ans[dep][mid + 1] = a[mid + 1]; for (int i = mid + 2; i <= r; ++i) ans[dep][i] = max(ans[dep][i - 1], 0) + a[i]; for (int i = mid + 2; i <= r; ++i) ans[dep][i] = max(ans[dep][i], ans[dep][i - 1]); // DOWN build(k << 1, l, mid, dep + 1); build(k << 1 | 1, mid + 1, r, dep + 1); } int query(int l, int r) { if (l == r) return a[l]; int dep = __lg(pos[l]) - __lg(pos[l] ^ pos[r]); return max({ans[dep][l], ans[dep][r], sum[dep][l] + sum[dep][r]}); } void init() { cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; m = fill_over(n) + 1, build(1, 1, m, 1); }","title":"\u732b\u6811"},{"location":"ds/seg/seg_cat/#_1","text":"","title":"\u732b\u6811"},{"location":"ds/seg/seg_cat/#_2","text":"\u6ca1\u6709\u4fee\u6539\uff0c\u53ea\u6709\u533a\u95f4\u67e5\u8be2\uff1b\u4e14\u7ef4\u62a4\u7684\u4fe1\u606f\u53ef\u4ee5\u5feb\u901f\u5408\u5e76\u4e14\u6ee1\u8db3\u7ed3\u5408\u5f8b\u3002 \u6211\u4eec\u76f4\u63a5\u629b\u51fa\u732b\u6811\u7684\u590d\u6742\u5ea6\uff1a\u9884\u5904\u7406 \\(\\mathcal O(n\\log n)\\) \uff0c\u67e5\u8be2 \\(\\mathcal O(1)\\) \u5982\u679c\u8be2\u95ee\u7684\u64cd\u4f5c\u662f\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\uff08RMQ\uff09\uff0c\u90a3\u4e48\u5979\u548c ST \u8868\u662f\u7406\u8bba\u590d\u6742\u5ea6\u76f8\u540c\u7684\u3002 \u5982\u679c\u8be2\u95ee\u7684\u64cd\u4f5c\u6ee1\u8db3\u53ef\u51cf\u6027\uff08SUM\uff09\uff0c\u90a3\u4e48\u76f4\u63a5\u524d\u7f00\u548c\u5904\u7406\u662f\u66f4\u4f18\u7684\u3002 \u5982\u679c\u67e5\u8be2\u6b21\u6570 \\(m\\) \u8fdc\u5c0f\u4e8e\u5143\u7d20\u4e2a\u6570 \\(n\\) \uff0c\u90a3\u4e48\u7ebf\u6bb5\u6811\u662f\u66f4\u4f18\u7684\u3002 \u5426\u5219\uff0c\u90a3\u4e48\u732b\u6811\u662f\u4f18\u4e8e\u7ebf\u6bb5\u6811\u7b49\u7684\u3002","title":"\u4f7f\u7528\u60c5\u666f"},{"location":"ds/seg/seg_cat/#_3","text":"\u4e0b\u9762\u76f4\u63a5\u8bb0 \\(m=\\dfrac{l+r}2\\) \uff0c\u8868\u793a\u533a\u95f4\u4e2d\u70b9\u3002 \u6211\u4eec\u5c06\u533a\u95f4 \\([l,r]\\) \u5206\u4e3a\u4e24\u90e8\u5206 \\([l,m],[m+1,r]\\) \u3002 \u4ece \\(m,m+1\\) \u5206\u522b\u51fa\u53d1\uff0c\u5411\u5de6\u3001\u53f3\u904d\u5386\u5230 \\(l,r\\) \uff0c\u540c\u6b65\u7ef4\u62a4\u8981\u5904\u7406\u7684\u4fe1\u606f\u3002 \u9012\u5f52\u5de6\u53f3\u533a\u95f4\u3002 \u590d\u6742\u5ea6\u5206\u6790\uff1a \u6700\u591a\u8fed\u4ee3 \\(\\mathcal O(\\log n)\\) \u5c42\uff1b \u6bcf\u4e00\u5c42\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f1a\u4e14\u4ec5\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c \u6545\uff0c\u9884\u5904\u7406\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(n\\log n)\\) \u3002","title":"\u9884\u5904\u7406"},{"location":"ds/seg/seg_cat/#_4","text":"\u5bf9\u4e8e\u8be2\u95ee\u533a\u95f4 \\([p,q]\\) \uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u7ebf\u6bb5\u6811\u8282\u70b9 \\([l,r]\\) \uff0c \u6ee1\u8db3 \\(l\\le p\\le q\\le r\\) \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0a\u9762\u76f4\u63a5\u5408\u5e76\u524d\u7f00\u548c\u540e\u7f00\u5373\u53ef\u3002 \u9996\u5148\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u4ece\u4e0a\u5230\u4e0b\u628a\u8be2\u95ee\u533a\u95f4\u63a8\u5230\u5408\u9002\u7684\u5c42\u4e0a\uff0c\u662f \\(\\mathcal O(\\log n)\\) \u7684\u3002 \u7136\u540e\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u4ece\u4e0b\u5f80\u4e0a\u627e LCA\uff0c\u6811\u5256 \\(\\mathcal O(\\log \\log n)\\) \u7684\uff0cST \u8868 \\(\\mathcal O(1)\\) \u7684\u3002 \u4f46\u662f\u8fd9\u592a\u590d\u6742\u4e86\uff0c\u6211\u4eec\u8003\u8651\u5806\u5f0f\u5efa\u6811\uff0c\u6b64\u65f6\uff0c \u8bbe\u6839\u8282\u70b9\u7f16\u53f7\u4e3a \\(1\\) \uff0c\u5b50\u8282\u70b9\u6ee1\u8db3\u5806\u5f0f\uff0c \u6ce8\u610f\u5230\u4e00\u4e2a\u8282\u70b9\u7f16\u53f7\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u540e \\(k\\) \u4f4d\u5c31\u8868\u793a\u4e86\u5411\u4e0a \\(k\\) \u5c42\u7684\u4fe1\u606f\u3002 \u56e0\u6b64\uff0cLCA \u8282\u70b9\u7f16\u53f7\u5c31\u662f\u533a\u95f4 \\([l,r]\\) \u5bf9\u5e94\u8282\u70b9\u7f16\u53f7\u4e8c\u8fdb\u5236\u8868\u793a\u7684 LCP\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09\u3002 \u7528\u516c\u5f0f\u8868\u8fbe\u5c31\u662f x >> __lg(x ^ y) \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5355\u7684\u5728 \\(\\mathcal O(1)\\) \u67e5\u8be2\u4e86\u3002","title":"\u67e5\u8be2"},{"location":"ds/seg/seg_cat/#_5","text":"\u9898\u76ee\uff1a SP1043 GSS1 \u9759\u6001\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c \u3002 \u4ee3\u7801 #define fill_over(x) ((1 << (__lg(x) + 1)) - 1) constexpr int N = 1 << 16; int n, m, a[N]; int pos[N], ans[20][N << 2], sum[20][N << 2]; void build(int k, int l, int r, int dep) { if (l == r) return void(pos[l] = k); int mid = (l + r) >> 1; // LEFT: [l, mid] sum[dep][mid] = a[mid]; for (int i = mid - 1; i >= l; --i) sum[dep][i] = sum[dep][i + 1] + a[i]; for (int i = mid - 1; i >= l; --i) sum[dep][i] = max(sum[dep][i], sum[dep][i + 1]); ans[dep][mid] = a[mid]; for (int i = mid - 1; i >= l; --i) ans[dep][i] = max(ans[dep][i + 1], 0) + a[i]; for (int i = mid - 1; i >= l; --i) ans[dep][i] = max(ans[dep][i], ans[dep][i + 1]); // RIGHT: [mid + 1, r] sum[dep][mid + 1] = a[mid + 1]; for (int i = mid + 2; i <= r; ++i) sum[dep][i] = sum[dep][i - 1] + a[i]; for (int i = mid + 2; i <= r; ++i) sum[dep][i] = max(sum[dep][i], sum[dep][i - 1]); ans[dep][mid + 1] = a[mid + 1]; for (int i = mid + 2; i <= r; ++i) ans[dep][i] = max(ans[dep][i - 1], 0) + a[i]; for (int i = mid + 2; i <= r; ++i) ans[dep][i] = max(ans[dep][i], ans[dep][i - 1]); // DOWN build(k << 1, l, mid, dep + 1); build(k << 1 | 1, mid + 1, r, dep + 1); } int query(int l, int r) { if (l == r) return a[l]; int dep = __lg(pos[l]) - __lg(pos[l] ^ pos[r]); return max({ans[dep][l], ans[dep][r], sum[dep][l] + sum[dep][r]}); } void init() { cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; m = fill_over(n) + 1, build(1, 1, m, 1); }","title":"\u5b9e\u73b0"},{"location":"ds/seg/seg_lichao/","text":"\u674e\u8d85\u7ebf\u6bb5\u6811 \u00b6 \u7ef4\u62a4\u76f4\u7ebf \u00b6 \u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u4f18\u7ebf\u6bb5\u3002 \u5176\u4e2d\uff0c\u6700\u4f18\u7ebf\u6bb5\u6307\u7684\u662f\uff0c\u5728\u533a\u95f4 \\([l,r]\\) \u4e2d\uff0c\u4e2d\u70b9 \\(mid\\) \u5904\u6700\u4f18\u7684\u7ebf\u6bb5\u3002 \u6211\u4eec\u79f0\u4e00\u4e2a\u7ebf\u6bb5\u5728\u5355\u70b9\u66f4\u4f18 / \u6700\u4f18\uff0c\u663e\u7136\uff0c\u662f\u6307\u6b64\u5904\u7684\u51fd\u6570\u503c\u66f4\u5927\u3002 \u6211\u4eec\u4e0b\u9762\u79f0\u4e00\u4e2a\u7ebf\u6bb5\u5728\u533a\u95f4\u5185\u66f4\u4f18 / \u6700\u4f18\uff0c\u662f\u6307\u5728\u4e2d\u70b9\u5904\u7684\u6bd4\u8f83\u3002 \u6211\u4eec\u79f0\u4e00\u4e2a\u7ebf\u6bb5\u5728\u533a\u95f4 / \u5355\u70b9\u4e25\u683c\u66f4\u4f18\uff0c\u662f\u6307\u5728\u8be5\u533a\u95f4\u4efb\u4f55\u4e00\u5904\u90fd\u66f4\u4f18\u3002 \u63d2\u5165\u76f4\u7ebf \u00b6 \u9996\u5148\u8003\u8651\u5728\u533a\u95f4 \\([l,r]\\) \u4e2d\u63d2\u5165\u7ebf\u6bb5\uff1a \u82e5\u8be5\u533a\u95f4\u65e0\u7ebf\u6bb5\uff0c\u90a3\u4e48\u76f4\u63a5\u8ba9\u4ed6\u6210\u4e3a\u6700\u4f18\u7ebf\u6bb5\u3002 \u5982\u679c\u5df2\u7ecf\u6709\u4e86\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u4e0d\u65b9\u4fbf\u5c06\u4e00\u4e2a\u533a\u95f4\u4e0b\u4f20\uff0c\u56e0\u6b64\u6807\u8bb0\u6c38\u4e45\u5316\u3002 \u8bbe\u65b0\u7ebf\u6bb5\u4e3a \\(f\\) \uff0c\u5f53\u524d\u7684\u6700\u4f18\u7ebf\u6bb5\u4e3a \\(g\\) \uff0c\u8003\u8651\u5408\u5e76\uff0c \u6211\u4eec\u94a6\u5b9a \\(f\\) \u5728\u533a\u95f4 \\([l,r]\\) \u5f31\u4e8e \\(g\\) \uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u90a3\u4e48\u4ea4\u6362\u5373\u53ef\u3002 \u82e5\u5728\u5de6\u53f3\u7aef\u70b9 \\(f\\) \u90fd\u66f4\u5f31\uff0c\u90a3\u4e48 \\(g\\) \u4e25\u683c\u4f18\u4e8e \\(f\\) \uff0c \\(f\\) \u4e0d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\uff0c\u4e0d\u9700\u8981\u4e0b\u4f20\u3002 \u82e5\u5728\u5de6\u7aef\u70b9 \\(f\\) \u66f4\u4f18\uff0c\u56e0\u4e3a \\(f\\) \u5728\u4e2d\u70b9\u66f4\u5f31\uff0c\u56e0\u6b64\u5de6\u4fa7\u4e00\u5b9a\u5b58\u5728\u5206\u754c\u70b9\uff0c\u9012\u5f52\u5de6\u4fa7\u3002 \u82e5\u5728\u53f3\u7aef\u70b9 \\(f\\) \u66f4\u4f18\uff0c\u56e0\u4e3a \\(f\\) \u5728\u4e2d\u70b9\u66f4\u5f31\uff0c\u56e0\u6b64\u53f3\u4fa7\u4e00\u5b9a\u5b58\u5728\u5206\u754c\u70b9\uff0c\u9012\u5f52\u53f3\u4fa7\u3002 \u590d\u6742\u5ea6\u5206\u6790\uff1a \u56e0\u4e3a\u4e24\u76f4\u7ebf\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u4ea4\u70b9\uff0c\u56e0\u6b64\u5de6\u53f3\u6700\u591a\u9012\u5f52\u4e00\u4e2a\u3002 \u56e0\u6b64\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff0c\u5355\u6b21 \\(\\mathcal O(n\\log n)\\) \u3002 \u4e3a\u4f55\u4e0d\u80fd\u94a6\u5b9a \\(f\\) \u5f3a\u4e8e \\(g\\) \u7136\u540e\u52a0\u5165 \\(f\\) \u634f\uff1f \u6ce8\u610f\u5230\u5982\u679c \\(f\\) \u4e25\u683c\u5f3a\u4e8e \\(g\\) \uff0c\u90a3\u4e48\u4e3a\u4e86\u66f4\u65b0\u7b54\u6848\uff0c\u6211\u4eec\u8fd8\u662f\u9700\u8981\u4ea4\u6362 \\(f,g\\) \u3002 \u7136\u540e\u8fd9\u6837\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u6ca1\u6709\u3002 \u67e5\u8be2\u6700\u503c \u00b6 \u6807\u8bb0\u6c38\u4e45\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u628a\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6bcf\u4e00\u4e2a\u6700\u4f18\u7ebf\u6bb5\u8ba1\u7b97\u3002 \u6ce8\u610f\u5230\u662f\u533a\u6700\u503c\uff0c\u662f\u53ef\u4ee5\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u968f\u4fbf\u641e\u5c31\u53ef\u4ee5\u4e86\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u540c\u7ebf\u6bb5\u6811\uff0c\u4e3a\u5355\u6b21 \\(\\mathcal O(\\log n)\\) \u3002 \u4ee3\u7801 \u00b6 P4254 [JSOI2008] Blue Mary \u5f00\u516c\u53f8 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 struct line { double k, b; } p[M]; int tot; double calc(int u, int t) { return p[u].b + p[u].k * t; } #define ls(k) ((k) << 1) #define rs(k) ((k) << 1 | 1) int best[N << 2]; void modify(int k, int l, int r, int u) { int &v = best[k]; int mid = (l + r) >> 1; if (calc(u, mid) > calc(v, mid)) swap(u, v); if (calc(u, l) > calc(v, l)) modify(ls(k), l, mid, u); if (calc(u, r) > calc(v, r)) modify(rs(k), mid + 1, r, u); } double query(int k, int l, int r, int t) { double res = calc(best[k], t); if (l == r) return res; int mid = (l + r) >> 1; if (t <= mid) res = max(res, query(ls(k), l, mid, t)); else res = max(res, query(rs(k), mid + 1, r, t)); return res; } void Insert(double k, double b) { p[++tot] = {k, b}; modify(1, 1, (int)5e4, tot); } double Query(int t) { return query(1, 1, (int)5e4, t); } \u7ef4\u62a4\u7ebf\u6bb5 \u00b6 \u63d2\u5165\u7ebf\u6bb5 \u00b6 \u6211\u4eec\u5ef6\u7eed\u4e0a\u9762\u7684\u601d\u8def\uff0c\u4f46\u662f\u3002 \u6211\u4eec\u9700\u8981\u7ebf\u6bb5\u6811\u5f0f\u7684\u904d\u5386\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u624d\u80fd\u66f4\u65b0\u6700\u4f18\u7ebf\u6bb5\u3002 \u6ce8\u610f\u5230\u7ebf\u6bb5\u6811\u4f1a\u628a\u533a\u95f4\u5206\u4e3a \\(\\mathcal O(\\log n)\\) \u4e2a\u533a\u95f4\uff0c \u6211\u4eec\u9700\u8981\u5bf9\u6bcf\u4e2a\u533a\u95f4\u8fdb\u884c \\(\\mathcal O(\\log n)\\) \u7684\u66f4\u65b0\uff0c \u56e0\u6b64\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(\\log^2n)\\) \u7684\u3002 \u67e5\u8be2\u6700\u503c \u00b6 \u548c\u4e0a\u9762\u6ca1\u6709\u53d8\u5316\u3002 \u4ee3\u7801 \u00b6 \u4e0b\u9762\u662f\u548c\u4e0a\u9762\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u4e5f\u5f88\u597d\u5199\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 struct line { double k, b; } p[M]; int tot; double calc(int u, int t) { return p[u].b + p[u].k * t; } #define ls(k) ((k) << 1) #define rs(k) ((k) << 1 | 1) int best[N << 2]; void update(int k, int l, int r, int u) { int &v = best[k]; int mid = (l + r) >> 1; if (calc(u, mid) > calc(v, mid)) swap(u, v); if (calc(u, l) > calc(v, l)) update(ls(k), l, mid, u); if (calc(u, r) > calc(v, r)) update(rs(k), mid + 1, r, u); } void modify(int k, int l, int r, int p, int q, int u) { if (l >= p && r <= q) return update(k, l, r, u); int mid = (l + r) >> 1; if (q <= mid) return modify(ls(k), l, mid, p, q, u); if (p >= mid + 1) return modify(rs(k), mid + 1, r, p, q, u); modify(ls(k), l, mid, p, q, u), modify(rs(k), mid + 1, r, p, q, u); } double query(int k, int l, int r, int t) { double res = calc(best[k], t); if (l == r) return res; int mid = (l + r) >> 1; if (t <= mid) res = max(res, query(ls(k), l, mid, t)); else res = max(res, query(rs(k), mid + 1, r, t)); return res; } void Insert(double k, double b) { p[++tot] = {k, b}; modify(1, 1, (int)5e4, tot); } double Query(int t) { return query(1, 1, (int)5e4, t); } P4097 \u3010\u6a21\u677f\u3011\u674e\u8d85\u7ebf\u6bb5\u6811 / [HEOI2013] Segment \u8fd9\u4e2a\u9898\u76ee\u5f3a\u5236\u5728\u7ebf\uff0c\u4e14\u9700\u8981\u8f93\u51fa\u6700\u4f18\u7ebf\u6bb5\u4e14\u7f16\u53f7\u6700\u5c0f\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u88ab\u5361\u7cbe\u5ea6\uff0c \u7cbe\u5ea6\u5904\u7406 constexpr double eps = 1e-8; inline int Cmp(double x, double y) { if (x - y > eps) return 1; if (y - x > eps) return -1; return 0; } inline pair<double, int> Max(const pair<double, int> &a, const pair<double, int> &b) { int c = Cmp(a.first, b.first); if (c == 0) return a.second < b.second ? a : b; return c == 1 ? a : b; }","title":"\u674e\u8d85\u7ebf\u6bb5\u6811"},{"location":"ds/seg/seg_lichao/#_1","text":"","title":"\u674e\u8d85\u7ebf\u6bb5\u6811"},{"location":"ds/seg/seg_lichao/#_2","text":"\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u4f18\u7ebf\u6bb5\u3002 \u5176\u4e2d\uff0c\u6700\u4f18\u7ebf\u6bb5\u6307\u7684\u662f\uff0c\u5728\u533a\u95f4 \\([l,r]\\) \u4e2d\uff0c\u4e2d\u70b9 \\(mid\\) \u5904\u6700\u4f18\u7684\u7ebf\u6bb5\u3002 \u6211\u4eec\u79f0\u4e00\u4e2a\u7ebf\u6bb5\u5728\u5355\u70b9\u66f4\u4f18 / \u6700\u4f18\uff0c\u663e\u7136\uff0c\u662f\u6307\u6b64\u5904\u7684\u51fd\u6570\u503c\u66f4\u5927\u3002 \u6211\u4eec\u4e0b\u9762\u79f0\u4e00\u4e2a\u7ebf\u6bb5\u5728\u533a\u95f4\u5185\u66f4\u4f18 / \u6700\u4f18\uff0c\u662f\u6307\u5728\u4e2d\u70b9\u5904\u7684\u6bd4\u8f83\u3002 \u6211\u4eec\u79f0\u4e00\u4e2a\u7ebf\u6bb5\u5728\u533a\u95f4 / \u5355\u70b9\u4e25\u683c\u66f4\u4f18\uff0c\u662f\u6307\u5728\u8be5\u533a\u95f4\u4efb\u4f55\u4e00\u5904\u90fd\u66f4\u4f18\u3002","title":"\u7ef4\u62a4\u76f4\u7ebf"},{"location":"ds/seg/seg_lichao/#_3","text":"\u9996\u5148\u8003\u8651\u5728\u533a\u95f4 \\([l,r]\\) \u4e2d\u63d2\u5165\u7ebf\u6bb5\uff1a \u82e5\u8be5\u533a\u95f4\u65e0\u7ebf\u6bb5\uff0c\u90a3\u4e48\u76f4\u63a5\u8ba9\u4ed6\u6210\u4e3a\u6700\u4f18\u7ebf\u6bb5\u3002 \u5982\u679c\u5df2\u7ecf\u6709\u4e86\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u4e0d\u65b9\u4fbf\u5c06\u4e00\u4e2a\u533a\u95f4\u4e0b\u4f20\uff0c\u56e0\u6b64\u6807\u8bb0\u6c38\u4e45\u5316\u3002 \u8bbe\u65b0\u7ebf\u6bb5\u4e3a \\(f\\) \uff0c\u5f53\u524d\u7684\u6700\u4f18\u7ebf\u6bb5\u4e3a \\(g\\) \uff0c\u8003\u8651\u5408\u5e76\uff0c \u6211\u4eec\u94a6\u5b9a \\(f\\) \u5728\u533a\u95f4 \\([l,r]\\) \u5f31\u4e8e \\(g\\) \uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u90a3\u4e48\u4ea4\u6362\u5373\u53ef\u3002 \u82e5\u5728\u5de6\u53f3\u7aef\u70b9 \\(f\\) \u90fd\u66f4\u5f31\uff0c\u90a3\u4e48 \\(g\\) \u4e25\u683c\u4f18\u4e8e \\(f\\) \uff0c \\(f\\) \u4e0d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\uff0c\u4e0d\u9700\u8981\u4e0b\u4f20\u3002 \u82e5\u5728\u5de6\u7aef\u70b9 \\(f\\) \u66f4\u4f18\uff0c\u56e0\u4e3a \\(f\\) \u5728\u4e2d\u70b9\u66f4\u5f31\uff0c\u56e0\u6b64\u5de6\u4fa7\u4e00\u5b9a\u5b58\u5728\u5206\u754c\u70b9\uff0c\u9012\u5f52\u5de6\u4fa7\u3002 \u82e5\u5728\u53f3\u7aef\u70b9 \\(f\\) \u66f4\u4f18\uff0c\u56e0\u4e3a \\(f\\) \u5728\u4e2d\u70b9\u66f4\u5f31\uff0c\u56e0\u6b64\u53f3\u4fa7\u4e00\u5b9a\u5b58\u5728\u5206\u754c\u70b9\uff0c\u9012\u5f52\u53f3\u4fa7\u3002 \u590d\u6742\u5ea6\u5206\u6790\uff1a \u56e0\u4e3a\u4e24\u76f4\u7ebf\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u4ea4\u70b9\uff0c\u56e0\u6b64\u5de6\u53f3\u6700\u591a\u9012\u5f52\u4e00\u4e2a\u3002 \u56e0\u6b64\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff0c\u5355\u6b21 \\(\\mathcal O(n\\log n)\\) \u3002 \u4e3a\u4f55\u4e0d\u80fd\u94a6\u5b9a \\(f\\) \u5f3a\u4e8e \\(g\\) \u7136\u540e\u52a0\u5165 \\(f\\) \u634f\uff1f \u6ce8\u610f\u5230\u5982\u679c \\(f\\) \u4e25\u683c\u5f3a\u4e8e \\(g\\) \uff0c\u90a3\u4e48\u4e3a\u4e86\u66f4\u65b0\u7b54\u6848\uff0c\u6211\u4eec\u8fd8\u662f\u9700\u8981\u4ea4\u6362 \\(f,g\\) \u3002 \u7136\u540e\u8fd9\u6837\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u6ca1\u6709\u3002","title":"\u63d2\u5165\u76f4\u7ebf"},{"location":"ds/seg/seg_lichao/#_4","text":"\u6807\u8bb0\u6c38\u4e45\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u628a\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6bcf\u4e00\u4e2a\u6700\u4f18\u7ebf\u6bb5\u8ba1\u7b97\u3002 \u6ce8\u610f\u5230\u662f\u533a\u6700\u503c\uff0c\u662f\u53ef\u4ee5\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u968f\u4fbf\u641e\u5c31\u53ef\u4ee5\u4e86\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u540c\u7ebf\u6bb5\u6811\uff0c\u4e3a\u5355\u6b21 \\(\\mathcal O(\\log n)\\) \u3002","title":"\u67e5\u8be2\u6700\u503c"},{"location":"ds/seg/seg_lichao/#_5","text":"P4254 [JSOI2008] Blue Mary \u5f00\u516c\u53f8 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 struct line { double k, b; } p[M]; int tot; double calc(int u, int t) { return p[u].b + p[u].k * t; } #define ls(k) ((k) << 1) #define rs(k) ((k) << 1 | 1) int best[N << 2]; void modify(int k, int l, int r, int u) { int &v = best[k]; int mid = (l + r) >> 1; if (calc(u, mid) > calc(v, mid)) swap(u, v); if (calc(u, l) > calc(v, l)) modify(ls(k), l, mid, u); if (calc(u, r) > calc(v, r)) modify(rs(k), mid + 1, r, u); } double query(int k, int l, int r, int t) { double res = calc(best[k], t); if (l == r) return res; int mid = (l + r) >> 1; if (t <= mid) res = max(res, query(ls(k), l, mid, t)); else res = max(res, query(rs(k), mid + 1, r, t)); return res; } void Insert(double k, double b) { p[++tot] = {k, b}; modify(1, 1, (int)5e4, tot); } double Query(int t) { return query(1, 1, (int)5e4, t); }","title":"\u4ee3\u7801"},{"location":"ds/seg/seg_lichao/#_6","text":"","title":"\u7ef4\u62a4\u7ebf\u6bb5"},{"location":"ds/seg/seg_lichao/#_7","text":"\u6211\u4eec\u5ef6\u7eed\u4e0a\u9762\u7684\u601d\u8def\uff0c\u4f46\u662f\u3002 \u6211\u4eec\u9700\u8981\u7ebf\u6bb5\u6811\u5f0f\u7684\u904d\u5386\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u624d\u80fd\u66f4\u65b0\u6700\u4f18\u7ebf\u6bb5\u3002 \u6ce8\u610f\u5230\u7ebf\u6bb5\u6811\u4f1a\u628a\u533a\u95f4\u5206\u4e3a \\(\\mathcal O(\\log n)\\) \u4e2a\u533a\u95f4\uff0c \u6211\u4eec\u9700\u8981\u5bf9\u6bcf\u4e2a\u533a\u95f4\u8fdb\u884c \\(\\mathcal O(\\log n)\\) \u7684\u66f4\u65b0\uff0c \u56e0\u6b64\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(\\log^2n)\\) \u7684\u3002","title":"\u63d2\u5165\u7ebf\u6bb5"},{"location":"ds/seg/seg_lichao/#_8","text":"\u548c\u4e0a\u9762\u6ca1\u6709\u53d8\u5316\u3002","title":"\u67e5\u8be2\u6700\u503c"},{"location":"ds/seg/seg_lichao/#_9","text":"\u4e0b\u9762\u662f\u548c\u4e0a\u9762\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u4e5f\u5f88\u597d\u5199\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 struct line { double k, b; } p[M]; int tot; double calc(int u, int t) { return p[u].b + p[u].k * t; } #define ls(k) ((k) << 1) #define rs(k) ((k) << 1 | 1) int best[N << 2]; void update(int k, int l, int r, int u) { int &v = best[k]; int mid = (l + r) >> 1; if (calc(u, mid) > calc(v, mid)) swap(u, v); if (calc(u, l) > calc(v, l)) update(ls(k), l, mid, u); if (calc(u, r) > calc(v, r)) update(rs(k), mid + 1, r, u); } void modify(int k, int l, int r, int p, int q, int u) { if (l >= p && r <= q) return update(k, l, r, u); int mid = (l + r) >> 1; if (q <= mid) return modify(ls(k), l, mid, p, q, u); if (p >= mid + 1) return modify(rs(k), mid + 1, r, p, q, u); modify(ls(k), l, mid, p, q, u), modify(rs(k), mid + 1, r, p, q, u); } double query(int k, int l, int r, int t) { double res = calc(best[k], t); if (l == r) return res; int mid = (l + r) >> 1; if (t <= mid) res = max(res, query(ls(k), l, mid, t)); else res = max(res, query(rs(k), mid + 1, r, t)); return res; } void Insert(double k, double b) { p[++tot] = {k, b}; modify(1, 1, (int)5e4, tot); } double Query(int t) { return query(1, 1, (int)5e4, t); } P4097 \u3010\u6a21\u677f\u3011\u674e\u8d85\u7ebf\u6bb5\u6811 / [HEOI2013] Segment \u8fd9\u4e2a\u9898\u76ee\u5f3a\u5236\u5728\u7ebf\uff0c\u4e14\u9700\u8981\u8f93\u51fa\u6700\u4f18\u7ebf\u6bb5\u4e14\u7f16\u53f7\u6700\u5c0f\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u88ab\u5361\u7cbe\u5ea6\uff0c \u7cbe\u5ea6\u5904\u7406 constexpr double eps = 1e-8; inline int Cmp(double x, double y) { if (x - y > eps) return 1; if (y - x > eps) return -1; return 0; } inline pair<double, int> Max(const pair<double, int> &a, const pair<double, int> &b) { int c = Cmp(a.first, b.first); if (c == 0) return a.second < b.second ? a : b; return c == 1 ? a : b; }","title":"\u4ee3\u7801"},{"location":"ds/seg/seg_opt/","text":"\u7ebf\u6bb5\u6811\u4f18\u5316 \u00b6 \u6bd4\u8f83\u57fa\u7840\uff0c\u56e0\u6b64\u8bb2\u7684\u5f88\u5feb\u3002 \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u7684\u7ebf\u6bb5\u6811\uff0c\u8fd9\u662f\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u3002 \u7ebf\u6bb5\u6811\u95ee\u9898 \u00b6 \u6211\u4eec\u4ee5 LOJ \u7684\u8fd9\u9053\u9898\u4e3a\u4f8b\uff0c \u4f8b\u9898\uff1a LOJ #130. \u6811\u72b6\u6570\u7ec4 1 \uff1a\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u3002 \u6d1b\u8c37\u4e0a\u9762\u4e5f\u6709\u7c7b\u4f3c\u7684\u9898\uff1a P3374 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1 \u3002 \u56e0\u4e3a\u6d1b\u8c37\u7684\u9898\u7684\u6570\u636e\u8303\u56f4\u8f83\u5c0f\uff0c\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u7684 LOJ \u7684\u9898\u3002 \u666e\u901a\u7ebf\u6bb5\u6811 \u00b6 \u7ebf\u6bb5\u6811\u9996\u5148\u53ef\u4ee5\u5206\u4e3a\uff0c \u6307\u9488\u5f0f\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u4f7f\u7528\u6307\u9488\u300c\u52a8\u6001\u5f00\u70b9\u300d\u8fdb\u884c\u64cd\u4f5c\u3002 \u6570\u7ec4\u5f0f\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u4f7f\u7528\u591a\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4fe1\u606f\u3002 \u7ed3\u6784\u4f53\u5f0f\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u8bb0\u5f55\u591a\u4e2a\u4fe1\u606f\u3002 \u4e00\u822c\u6765\u8bf4\u901f\u5ea6\u4f9d\u6b21\u9012\u589e\uff0c\u6211\u4eec\u6b64\u5904\u8003\u8651\u8fd9\u79cd\u7ebf\u6bb5\u6811\u600e\u4e48\u4f18\u5316\u3002 Version #1\uff1a\u6734\u7d20\u7248 \u00b6 \u6211\u4eec\u4e0d\u8003\u8651\u6307\u9488\u5f0f\u7ebf\u6bb5\u6811\uff0c\u5148\u770b\u4e00\u4e2a\u666e\u901a\u7684\u6570\u7ec4\u5f0f\u7ebf\u6bb5\u6811\u7684\u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 ll sum[N << 2]; void push_up(int k) { sum[k] = sum[k << 1] + sum[k << 1 | 1]; } void build(int k, int l, int r) { sum[k] = 0; if (l == r) { sum[k] = a[l]; return; } int mid = (l + r) >> 1; build(k << 1, l, mid); build(k << 1 | 1, mid + 1, r); push_up(k); } void modify(int k, int l, int r, int x, int v) { if (l == r) { sum[k] += v; return; } int mid = (l + r) >> 1; if (x <= mid) modify(k << 1, l, mid, x, v); else modify(k << 1 | 1, mid + 1, r, x, v); push_up(k); } ll query(int k, int l, int r, int p, int q) { if (l >= p && r <= q) return sum[k]; int mid = (l + r) >> 1; ll res = 0; if (p <= mid) res += query(k << 1, l, mid, p, q); if (q >= mid + 1) res += query(k << 1 | 1, mid + 1, r, p, q); return res; } \u5b83\u5728 LOJ \u4e0a\u9762\u8dd1\u4e86 571 ms\uff08 https://loj.ac/s/2128355 \uff09\u3002 Version #2\uff1a\u975e\u9012\u5f52\u5316 \u00b6 \u6ce8\u610f\u5230\u5355\u70b9\u4fee\u6539\u53ea\u662f\u5728\u6811\u4e0a\u8d70\u51fa\u4e86\u4e00\u6761\u4ece\u4e0a\u5230\u4e0b\u7684\u8def\u5f84\uff0c\u56e0\u6b64\u53ef\u4ee5\u975e\u9012\u5f52\u5904\u7406\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void modify(int x, int v) { int k = 1; int l = 1, r = n; while (l < r) { sum[k] += v; int mid = (l + r) >> 1; if (x <= mid) r = mid, k = k << 1; else l = mid + 1, k = k << 1 | 1; } sum[k] += v; } \u8fd9\u6837\u5c31\u4f18\u5316\u5230\u4e86 493 ms\uff08 https://loj.ac/s/2128360 \uff09\u3002 zkw \u7ebf\u6bb5\u6811 \u00b6 \u66f4\u8be6\u7ec6\u7684\u89c1\u6211\u53e6\u4e00\u4e2a\u535a\u5ba2\u3002 \u6211\u4eec\u5806\u5f0f\u5efa\u6811\uff0c\u5e76\u94a6\u5b9a\u503c\u57df\u4e3a \\([0,K]\\) \uff0c\u5176\u4e2d \\(K\\) \u4e3a \\(>N\\) \u7684\u6700\u5c0f\u7684 \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u3002 Version #3\uff1a\u81ea\u5e95\u5411\u4e0a \u00b6 \u6839\u636e\u4e8c\u8fdb\u5236 + \u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int m; void build() { m = 1 << (__lg(n) + 1); for (int i = 1; i <= n; ++i) sum[m + i] = a[i]; for (int i = m - 1; i; --i) push_up(i); } void modify(int x, int v) { x += m; while (x) { sum[x] += v; x >>= 1; } } ll query(int p, int q) { p += m - 1, q += m + 1; ll s = 0; while (p ^ q ^ 1) { if (p % 2 == 0) s += sum[p ^ 1]; if (q % 2 == 1) s += sum[q ^ 1]; p >>= 1, q >>= 1; } return s; } \u8dd1\u5230\u4e86 328 ms\uff08 https://loj.ac/s/2128362 \uff09\u3002 Version #4\uff1a\u5206\u652f\u6d88\u9664 \u00b6 \u6211\u4eec\u77e5\u9053\u5728 C++ \u4e2d\uff0c\u5bf9\u4e8e\u5206\u652f\u7684\u4f18\u5316\u662f\u8f83\u5c0f\u7684\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u4e09\u5143\u8fd0\u7b97\u7b26\u6216\u8005\u4e58\u6cd5\u6765\u66ff\u4ee3 if \u7684\u5206\u652f\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 ll query(int p, int q) { p += m - 1, q += m + 1; ll s = 0; while (p ^ q ^ 1) { s += (p % 2 == 0) * sum[p ^ 1]; s += (q % 2 == 1) * sum[q ^ 1]; p >>= 1, q >>= 1; } return s; } \u8fd9\u6837\u5c31\u662f 286 ms\uff08 https://loj.ac/s/2128365 \uff09\u3002 \u6811\u72b6\u6570\u7ec4 \u00b6 \u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u7406\u89e3\u4e3a\u53bb\u6389\u67da\u5b50\u53a8\u7684 zkw \u7ebf\u6bb5\u6811\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u5176\u7a7a\u95f4\u51cf\u534a\uff0c\u540c\u65f6\u5e26\u4e0a \\(1/2\\) \u7684\u5de8\u5c0f\u5e38\u6570\u3002 Version #5\uff1a\u4f4d\u8fd0\u7b97\u4f18\u5316 \u00b6 \u6ce8\u610f\u5230\u51cf\u53bb \\(\\operatorname{lowbit}\\) \u7684\u8fc7\u7a0b\uff0c\u7b49\u4ef7\u4e8e\u4f4d\u4e0e\u672c\u8eab\u51cf\u4e00\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void modify(int x, int v) { for (; x <= n; x += x & -x) sum[x] += v; } ll query(int x) { ll r = 0; for (; x; x &= x - 1) r += sum[x]; return r; } ll query(int p, int q) { return query(q) - query(p - 1); } \u8dd1\u4e86 258 ms\uff08 https://loj.ac/s/2128367 \uff09\u3002 Version #6\uff1a\u7ebf\u6027\u5efa\u6811 \u00b6 \u65b9\u6cd5\u4e00 \u65b9\u6cd5\u4e8c \u5c1d\u8bd5\u5012\u8fc7\u6765\uff0c\u628a\u53f6\u5b50\u7ed3\u70b9\u7684\u503c\u76f4\u63a5\u4f20\u7ed9\u7236\u4eb2\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void build() { for (int i = 1; i <= n; ++i) { sum[i] += a[i]; int j = i + (i & -i); if (j <= n) sum[j] += sum[i]; } } \u8fd9\u6837\u662f 241 ms\uff08 https://loj.ac/s/2128373 \uff09\uff0c\u5f88\u5feb\u7684\u3002 \u6839\u636e\u6811\u72b6\u6570\u7ec4\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u7684\u533a\u95f4\uff0c\u524d\u7f00\u548c\u5904\u7406\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 ll pre[N], sum[N]; void build() { for (int i = 1; i <= n; ++i) pre[i] = pre[i - 1] + a[i]; for (int i = 1; i <= n; ++i) sum[i] = pre[i] - pre[i - (i & -i)]; } \u8dd1\u4e86 245 ms\uff08 https://loj.ac/s/2128375 \uff09\u3002 Version #7\uff1a\u7f13\u5b58\u4f18\u5316 \u00b6 \u7406\u8bba\u89c1 HPC Fenwick Trees \uff0c\u56e0\u4e3a\u6211\u81ea\u5df1\u6ca1\u7814\u7a76\u61c2\u3002 \u5728\u6240\u6709\u5173\u4e8e sum \u7684\u64cd\u4f5c\u4e0a\u90fd\u52a0\u4e0a hole(x) \uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 inline constexpr int hole(int k) { return k + (k >> 10); } void build() { for (int i = 1; i <= n; ++i) pre[i] = pre[i - 1] + a[i]; for (int i = 1; i <= n; ++i) sum[hole(i)] = pre[i] - pre[i - (i & -i)]; } void modify(int x, int v) { for (; x <= n; x += x & -x) sum[hole(x)] += v; } ll query(int x) { ll r = 0; for (; x; x &= x - 1) r += sum[hole(x)]; return r; } \u8fd9\u6837\u80fd\u5feb\u4e0d\u5c11\uff0c234 ms\uff08 https://loj.ac/s/2128379 \uff09\u3002 WTree \u4e0d\u4f1a\u3002 Reference \u00b6 https://en.algorithmica.org/hpc/data-structures/segment-trees/","title":"\u7ebf\u6bb5\u6811\u4f18\u5316"},{"location":"ds/seg/seg_opt/#_1","text":"\u6bd4\u8f83\u57fa\u7840\uff0c\u56e0\u6b64\u8bb2\u7684\u5f88\u5feb\u3002 \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u7684\u7ebf\u6bb5\u6811\uff0c\u8fd9\u662f\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u3002","title":"\u7ebf\u6bb5\u6811\u4f18\u5316"},{"location":"ds/seg/seg_opt/#_2","text":"\u6211\u4eec\u4ee5 LOJ \u7684\u8fd9\u9053\u9898\u4e3a\u4f8b\uff0c \u4f8b\u9898\uff1a LOJ #130. \u6811\u72b6\u6570\u7ec4 1 \uff1a\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u3002 \u6d1b\u8c37\u4e0a\u9762\u4e5f\u6709\u7c7b\u4f3c\u7684\u9898\uff1a P3374 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1 \u3002 \u56e0\u4e3a\u6d1b\u8c37\u7684\u9898\u7684\u6570\u636e\u8303\u56f4\u8f83\u5c0f\uff0c\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u7684 LOJ \u7684\u9898\u3002","title":"\u7ebf\u6bb5\u6811\u95ee\u9898"},{"location":"ds/seg/seg_opt/#_3","text":"\u7ebf\u6bb5\u6811\u9996\u5148\u53ef\u4ee5\u5206\u4e3a\uff0c \u6307\u9488\u5f0f\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u4f7f\u7528\u6307\u9488\u300c\u52a8\u6001\u5f00\u70b9\u300d\u8fdb\u884c\u64cd\u4f5c\u3002 \u6570\u7ec4\u5f0f\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u4f7f\u7528\u591a\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4fe1\u606f\u3002 \u7ed3\u6784\u4f53\u5f0f\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u8bb0\u5f55\u591a\u4e2a\u4fe1\u606f\u3002 \u4e00\u822c\u6765\u8bf4\u901f\u5ea6\u4f9d\u6b21\u9012\u589e\uff0c\u6211\u4eec\u6b64\u5904\u8003\u8651\u8fd9\u79cd\u7ebf\u6bb5\u6811\u600e\u4e48\u4f18\u5316\u3002","title":"\u666e\u901a\u7ebf\u6bb5\u6811"},{"location":"ds/seg/seg_opt/#version-1","text":"\u6211\u4eec\u4e0d\u8003\u8651\u6307\u9488\u5f0f\u7ebf\u6bb5\u6811\uff0c\u5148\u770b\u4e00\u4e2a\u666e\u901a\u7684\u6570\u7ec4\u5f0f\u7ebf\u6bb5\u6811\u7684\u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 ll sum[N << 2]; void push_up(int k) { sum[k] = sum[k << 1] + sum[k << 1 | 1]; } void build(int k, int l, int r) { sum[k] = 0; if (l == r) { sum[k] = a[l]; return; } int mid = (l + r) >> 1; build(k << 1, l, mid); build(k << 1 | 1, mid + 1, r); push_up(k); } void modify(int k, int l, int r, int x, int v) { if (l == r) { sum[k] += v; return; } int mid = (l + r) >> 1; if (x <= mid) modify(k << 1, l, mid, x, v); else modify(k << 1 | 1, mid + 1, r, x, v); push_up(k); } ll query(int k, int l, int r, int p, int q) { if (l >= p && r <= q) return sum[k]; int mid = (l + r) >> 1; ll res = 0; if (p <= mid) res += query(k << 1, l, mid, p, q); if (q >= mid + 1) res += query(k << 1 | 1, mid + 1, r, p, q); return res; } \u5b83\u5728 LOJ \u4e0a\u9762\u8dd1\u4e86 571 ms\uff08 https://loj.ac/s/2128355 \uff09\u3002","title":"Version #1\uff1a\u6734\u7d20\u7248"},{"location":"ds/seg/seg_opt/#version-2","text":"\u6ce8\u610f\u5230\u5355\u70b9\u4fee\u6539\u53ea\u662f\u5728\u6811\u4e0a\u8d70\u51fa\u4e86\u4e00\u6761\u4ece\u4e0a\u5230\u4e0b\u7684\u8def\u5f84\uff0c\u56e0\u6b64\u53ef\u4ee5\u975e\u9012\u5f52\u5904\u7406\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void modify(int x, int v) { int k = 1; int l = 1, r = n; while (l < r) { sum[k] += v; int mid = (l + r) >> 1; if (x <= mid) r = mid, k = k << 1; else l = mid + 1, k = k << 1 | 1; } sum[k] += v; } \u8fd9\u6837\u5c31\u4f18\u5316\u5230\u4e86 493 ms\uff08 https://loj.ac/s/2128360 \uff09\u3002","title":"Version #2\uff1a\u975e\u9012\u5f52\u5316"},{"location":"ds/seg/seg_opt/#zkw","text":"\u66f4\u8be6\u7ec6\u7684\u89c1\u6211\u53e6\u4e00\u4e2a\u535a\u5ba2\u3002 \u6211\u4eec\u5806\u5f0f\u5efa\u6811\uff0c\u5e76\u94a6\u5b9a\u503c\u57df\u4e3a \\([0,K]\\) \uff0c\u5176\u4e2d \\(K\\) \u4e3a \\(>N\\) \u7684\u6700\u5c0f\u7684 \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u3002","title":"zkw \u7ebf\u6bb5\u6811"},{"location":"ds/seg/seg_opt/#version-3","text":"\u6839\u636e\u4e8c\u8fdb\u5236 + \u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int m; void build() { m = 1 << (__lg(n) + 1); for (int i = 1; i <= n; ++i) sum[m + i] = a[i]; for (int i = m - 1; i; --i) push_up(i); } void modify(int x, int v) { x += m; while (x) { sum[x] += v; x >>= 1; } } ll query(int p, int q) { p += m - 1, q += m + 1; ll s = 0; while (p ^ q ^ 1) { if (p % 2 == 0) s += sum[p ^ 1]; if (q % 2 == 1) s += sum[q ^ 1]; p >>= 1, q >>= 1; } return s; } \u8dd1\u5230\u4e86 328 ms\uff08 https://loj.ac/s/2128362 \uff09\u3002","title":"Version #3\uff1a\u81ea\u5e95\u5411\u4e0a"},{"location":"ds/seg/seg_opt/#version-4","text":"\u6211\u4eec\u77e5\u9053\u5728 C++ \u4e2d\uff0c\u5bf9\u4e8e\u5206\u652f\u7684\u4f18\u5316\u662f\u8f83\u5c0f\u7684\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u4e09\u5143\u8fd0\u7b97\u7b26\u6216\u8005\u4e58\u6cd5\u6765\u66ff\u4ee3 if \u7684\u5206\u652f\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 ll query(int p, int q) { p += m - 1, q += m + 1; ll s = 0; while (p ^ q ^ 1) { s += (p % 2 == 0) * sum[p ^ 1]; s += (q % 2 == 1) * sum[q ^ 1]; p >>= 1, q >>= 1; } return s; } \u8fd9\u6837\u5c31\u662f 286 ms\uff08 https://loj.ac/s/2128365 \uff09\u3002","title":"Version #4\uff1a\u5206\u652f\u6d88\u9664"},{"location":"ds/seg/seg_opt/#_4","text":"\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u7406\u89e3\u4e3a\u53bb\u6389\u67da\u5b50\u53a8\u7684 zkw \u7ebf\u6bb5\u6811\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u5176\u7a7a\u95f4\u51cf\u534a\uff0c\u540c\u65f6\u5e26\u4e0a \\(1/2\\) \u7684\u5de8\u5c0f\u5e38\u6570\u3002","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"ds/seg/seg_opt/#version-5","text":"\u6ce8\u610f\u5230\u51cf\u53bb \\(\\operatorname{lowbit}\\) \u7684\u8fc7\u7a0b\uff0c\u7b49\u4ef7\u4e8e\u4f4d\u4e0e\u672c\u8eab\u51cf\u4e00\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void modify(int x, int v) { for (; x <= n; x += x & -x) sum[x] += v; } ll query(int x) { ll r = 0; for (; x; x &= x - 1) r += sum[x]; return r; } ll query(int p, int q) { return query(q) - query(p - 1); } \u8dd1\u4e86 258 ms\uff08 https://loj.ac/s/2128367 \uff09\u3002","title":"Version #5\uff1a\u4f4d\u8fd0\u7b97\u4f18\u5316"},{"location":"ds/seg/seg_opt/#version-6","text":"\u65b9\u6cd5\u4e00 \u65b9\u6cd5\u4e8c \u5c1d\u8bd5\u5012\u8fc7\u6765\uff0c\u628a\u53f6\u5b50\u7ed3\u70b9\u7684\u503c\u76f4\u63a5\u4f20\u7ed9\u7236\u4eb2\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 void build() { for (int i = 1; i <= n; ++i) { sum[i] += a[i]; int j = i + (i & -i); if (j <= n) sum[j] += sum[i]; } } \u8fd9\u6837\u662f 241 ms\uff08 https://loj.ac/s/2128373 \uff09\uff0c\u5f88\u5feb\u7684\u3002 \u6839\u636e\u6811\u72b6\u6570\u7ec4\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u7684\u533a\u95f4\uff0c\u524d\u7f00\u548c\u5904\u7406\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 ll pre[N], sum[N]; void build() { for (int i = 1; i <= n; ++i) pre[i] = pre[i - 1] + a[i]; for (int i = 1; i <= n; ++i) sum[i] = pre[i] - pre[i - (i & -i)]; } \u8dd1\u4e86 245 ms\uff08 https://loj.ac/s/2128375 \uff09\u3002","title":"Version #6\uff1a\u7ebf\u6027\u5efa\u6811"},{"location":"ds/seg/seg_opt/#version-7","text":"\u7406\u8bba\u89c1 HPC Fenwick Trees \uff0c\u56e0\u4e3a\u6211\u81ea\u5df1\u6ca1\u7814\u7a76\u61c2\u3002 \u5728\u6240\u6709\u5173\u4e8e sum \u7684\u64cd\u4f5c\u4e0a\u90fd\u52a0\u4e0a hole(x) \uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 inline constexpr int hole(int k) { return k + (k >> 10); } void build() { for (int i = 1; i <= n; ++i) pre[i] = pre[i - 1] + a[i]; for (int i = 1; i <= n; ++i) sum[hole(i)] = pre[i] - pre[i - (i & -i)]; } void modify(int x, int v) { for (; x <= n; x += x & -x) sum[hole(x)] += v; } ll query(int x) { ll r = 0; for (; x; x &= x - 1) r += sum[hole(x)]; return r; } \u8fd9\u6837\u80fd\u5feb\u4e0d\u5c11\uff0c234 ms\uff08 https://loj.ac/s/2128379 \uff09\u3002 WTree \u4e0d\u4f1a\u3002","title":"Version #7\uff1a\u7f13\u5b58\u4f18\u5316"},{"location":"ds/seg/seg_opt/#reference","text":"https://en.algorithmica.org/hpc/data-structures/segment-trees/","title":"Reference"},{"location":"ds/sqrt/decomposition/","text":"\u6570\u5217\u5206\u5757 \u00b6 \u4e0b\u9762\u90e8\u5206\u4ee3\u7801\u4f7f\u7528\uff0c using ll = long long; #define int ll \u57fa\u7840\u601d\u60f3 \u00b6 \u95ee\u9898\u5f15\u5165 \u00b6 \u95ee\u9898\uff1a\u5b9e\u73b0 \u533a\u95f4\u52a0\uff1b \u533a\u95f4\u6c42\u548c\u3002 \u57fa\u672c\u7ed3\u6784 \u00b6 \u5f15\u7528\u7ecf\u5178\u4e1c\u897f\uff0c \u6211\u4eec\u8003\u8651\u6784\u9020\u4e00\u4e2a\u7ed3\u6784\uff0c\u5f62\u5982\uff0c \u90a3\u4e48\uff0c\u7ed3\u8bba\u662f\uff0c \u590d\u6742\u5ea6\u8bc1\u660e \u00b6 \u4e3a\u4ec0\u4e48\u5757\u957f\u4e00\u822c\u662f \\(\\sqrt n\\) \u5462\uff1f \u6211\u4eec\u5047\u8bbe\u6784\u9020\u7684\u5757\u957f\u662f \\(B\\) \uff0c\u90a3\u4e48\u603b\u5757\u6570\u4e3a\uff0c \\[ {n\\over B} \\] \u6211\u4eec\u6bcf\u4e00\u6b21\u4fee\u6539\u67e5\u8be2\uff0c\u590d\u6742\u5ea6\uff0c \u5728\u4e00\u5757\u5185\uff0c\u66b4\u529b\u679a\u4e3e\uff0c \\(\\mathcal O(B)\\) \uff1b \u4e0d\u5728\u4e00\u5757\u5185\uff0c\u679a\u4e3e\u6574\u5757\u3001\u96f6\u6563\u5757\uff0c \\(\\mathcal O(n/B+B)\\) \u3002 \u6839\u636e\u5747\u503c\u4e0d\u7b49\u5f0f\uff0c \\[ {n\\over B}+B\\ge2\\sqrt n \\] \u53d6\u7b49\u5f53\u4e14\u4ec5\u5f53 \\(b=\\sqrt n\\) \u3002 \u5206\u5757\u7684\u5e94\u7528 \u00b6 \u5982\u679c\u5728\u5206\u6cbb\u7ed3\u6784\u4e0a\u5f88\u96be\u5feb\u901f\u5408\u5e76\u67d0\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u5206\u5757\u6765\u505a\u3002 \u7b80\u5316\u5b9e\u73b0 \u00b6 \u4e0a\u9762\u7684\u95ee\u9898\uff0c\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6c42\u548c\u3002 \u9884\u5904\u7406 \u00b6 int n, siz, cnt; int a[N], tag[N]; int belong[N], L[N], R[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } n \u8868\u793a\u539f\u6570\u7ec4\uff08 a \uff09\u957f\u5ea6\uff1b siz \u8868\u793a\u5757\u957f\uff1b cnt \u8868\u793a\u603b\u5757\u6570\uff1b belong[i] \u8868\u793a\u539f\u6570\u7ec4\u7b2c \\(i\\) \u4e2a\u88ab\u5206\u5230\u4e86\u7b2c\u51e0\u5757\uff1b tag[i] \u8868\u793a\u7b2c \\(i\\) \u5757\u4e0a\u9762\u7684\u9644\u52a0\u503c\uff1b L[i],R[i] \u5206\u522b\u8868\u793a\u7b2c \\(i\\) \u5757\u7684\u5de6\u3001\u53f3\u7aef\u70b9\u3002 \u7279\u5224\u5728\u540c\u4e00\u5757\u5185\u7684\u60c5\u51b5\uff0c\u5904\u7406\u5de6\u53f3\u96f6\u6563\u5757\u548c\u5404\u4e2a\u6574\u5757\u3002 1 \u533a\u95f4\u52a0\u3001\u5355\u70b9\u67e5\u8be2 \u00b6 \u4e0d\u7ef4\u62a4\u6574\u5757\u4fe1\u606f\uff08\u5355\u70b9\u67e5\u8be2\uff09\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 5e4 + 10; int n, siz, cnt; int belong[N], L[N], R[N]; int a[N], tag[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void add(int l, int r, int c) { int p = belong[l], q = belong[r]; if (p == q) { for (int i = l; i <= r; ++i) a[i] += c; return; } for (int i = l; i <= R[p]; ++i) a[i] += c; for (int i = p + 1; i <= q - 1; ++i) tag[i] += c; for (int i = L[q]; i <= r; ++i) a[i] += c; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i]; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) add(l, r, c); else cout << a[r] + tag[belong[r]] << endl; } return 0; } 4 \u533a\u95f4\u52a0\u3001\u533a\u95f4\u67e5\u8be2 \u00b6 \u7279\u5224\u5728\u540c\u4e00\u5757\u5185\u7684\u60c5\u51b5\uff0c\u5904\u7406\u5de6\u53f3\u96f6\u6563\u5757\u548c\u5404\u4e2a\u6574\u5757\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 5e4 + 10; int n, siz, cnt; int belong[N], L[N], R[N]; ll a[N], sum[N], tag[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void add(int l, int r, int c) { int p = belong[l], q = belong[r]; if (p == q) { for (int i = l; i <= r; ++i) a[i] += c, sum[p] += c; return; } for (int i = l; i <= R[p]; ++i) a[i] += c, sum[p] += c; for (int i = p + 1; i <= q - 1; ++i) sum[i] += c * (R[i] - L[i] + 1), tag[i] += c; for (int i = L[q]; i <= r; ++i) a[i] += c, sum[q] += c; } ll query(int l, int r, int m) { int p = belong[l], q = belong[r]; ll res = 0; if (p == q) { for (int i = l; i <= r; ++i) res = (res + a[i] + tag[p]) % m; return res; } for (int i = l; i <= R[p]; ++i) res = (res + a[i] + tag[p]) % m; for (int i = p + 1; i <= q - 1; ++i) res = (res + sum[i]) % m; for (int i = L[q]; i <= r; ++i) res = (res + a[i] + tag[q]) % m; return res; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i], sum[belong[i]] += a[i]; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) add(l, r, c); else cout << query(l, r, c + 1) << endl; } return 0; } 6 \u5355\u70b9\u63d2\u5165\u3001\u5355\u70b9\u67e5\u8be2 \u00b6 \u4f7f\u7528 STL rope\u3002 \u7b2c\u96f6\u90e8\u5206 \u6784\u9020\u51fd\u6570 \u89e3\u91ca rope<T> \u6784\u9020\u4e00\u4e2a\u7c7b\u578b\u4e3a T \u7684\u6570\u7ec4 crope \u7b49\u540c\u4e8e rope<char> rope<T>(siz) \u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a siz \u7684\u6570\u7ec4 rope<T>(siz, val) \u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a siz \u7684\u521d\u59cb\u503c\u5747\u4e3a val \u7684\u6570\u7ec4 \u7b2c\u4e00\u90e8\u5206 \u64cd\u4f5c \u89e3\u91ca a[p] \u6216 a.at(p) \u8fd4\u56de p \u5904\u7684\u5143\u7d20\uff08\u53ea\u8bfb\uff09 a.size() \u8fd4\u56de\u5927\u5c0f a.empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a a.clear() \u6e05\u7a7a\uff08\u5220\u9664\u6240\u6709\u5143\u7d20\uff09 a.begin() / a.end() \u8fed\u4ee3\u5668 a.rbegin() / a.rend() \u53cd\u5411\u8fed\u4ee3\u5668 a.front() / a.back() \u8fd4\u56de\u9996\u4f4d\u5143\u7d20 a.c_str() \u8fd4\u56de c \u98ce\u683c\u6570\u7ec4\uff08\u53ea\u8bfb\uff09 \u7b2c\u4e8c\u90e8\u5206 \u64cd\u4f5c \u89e3\u91ca a.push_back(x) \u5728\u672b\u5c3e\u6dfb\u52a0 x \u5143\u7d20 a.pop_back() \u5728\u67d0\u4f4d\u5220\u9664 a.push_front(x) \u5728\u5f00\u5934\u6dfb\u52a0 x \u5143\u7d20 a.pop_front() \u5728\u5f00\u5934\u5220\u9664 \u7b2c\u4e09\u90e8\u5206 \u64cd\u4f5c \u89e3\u91ca a.insert(p, x) \u5728\u4e0b\u6807 p \u524d\u63d2\u5165 x \u5143\u7d20 a.insert(p, c, x) \u5728\u4e0b\u6807 p \u524d\u63d2\u5165 c \u4e2a x \u5143\u7d20 a.erase(p) \u4ece\u4e0b\u6807 p \u5f00\u59cb\u5220\u9664 \\(1\\) \u4e2a\u5143\u7d20 a.erase(p, c) \u4ece\u4e0b\u6807 p \u5f00\u59cb\u5220\u9664 c \u4e2a\u5143\u7d20 a.replace(p, x) \u628a\u4e0b\u6807 p \u5904\u7684\u5143\u7d20\u66ff\u6362\u4e3a x \u5143\u7d20 a.substr(p, x) \u4ece\u4e0b\u6807 p \u5f00\u59cb\u622a\u53d6 x \u4e2a\u8fd4\u56de \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> #include <ext/rope> using namespace std; using namespace __gnu_cxx; int n; rope<int> a; signed main() { cin >> n; a.push_back(0); for (int i = 1, x; i <= n; ++i) cin >> x, a.push_back(x); for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) a.insert(l, r); else cout << a[r] << endl; } return 0; } \u6570\u5217\u5206\u5757\u5165\u95e8\u4e5d\u9898 \u00b6 2 \u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6392\u540d \u00b6 \u533a\u95f4\u52a0\uff1b \u533a\u95f4\u67e5\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684\u6570\u91cf\u3002 SP3261 RACETIME - Race Against Time SP18185 GIVEAWAY - Give Away UVA12003 Array Transformer P2801 \u6559\u4e3b\u7684\u9b54\u6cd5 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 5e4 + 10; int n, siz, cnt; int belong[N], L[N], R[N]; int a[N], tag[N]; int sorted[N], is[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void add(int l, int r, int c) { int p = belong[l], q = belong[r]; if (p == q) { for (int i = l; i <= r; ++i) a[i] += c; return void(is[p] = 0); } for (int i = l; i <= R[p]; ++i) a[i] += c; is[p] = 0; for (int i = p + 1; i <= q - 1; ++i) tag[i] += c; for (int i = L[q]; i <= r; ++i) a[i] += c; is[q] = 0; } int query(int l, int r, ll c) { int p = belong[l], q = belong[r]; int res = 0; if (p == q) { for (int i = l; i <= r; ++i) res += (a[i] + tag[p]) < c; return res; } for (int i = l; i <= R[p]; ++i) res += (a[i] + tag[p]) < c; for (int i = p + 1; i <= q - 1; ++i) { if (!is[i]) copy_n(a + L[i], siz, sorted + L[i]), sort(sorted + L[i], sorted + R[i] + 1), is[i] = 1; res += lower_bound(sorted + L[i], sorted + R[i] + 1, c - tag[i]) - (sorted + L[i]); } for (int i = L[q]; i <= r; ++i) res += (a[i] + tag[q]) < c; return res; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i], sorted[i] = a[i]; for (int i = 1; i <= cnt; ++i) sort(sorted + L[i], sorted + R[i] + 1), is[i] = 1; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) add(l, r, c); else cout << query(l, r, 1ll * c * c) << endl; } return 0; } a \u8868\u793a\u539f\u6570\u7ec4\uff1b tag \u8868\u793a\u533a\u95f4\u52a0\u6807\u8bb0\uff1b sorted \u8868\u793a\u5206\u5757\u540e\u5757\u5185\u6392\u5e8f\u7684\u7ed3\u679c\uff1b is \u8868\u793a\u4e00\u4e2a\u5757\u662f\u5426\u6392\u5e8f\u5b8c\u3002 3 \u533a\u95f4\u52a0\uff0c\u533a\u95f4\u524d\u9a71 \u00b6 \u548c\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int query(int l, int r, int c) { int p = belong[l], q = belong[r]; int res = INT_MIN, flag = 0; if (p == q) { for (int i = l; i <= r; ++i) if (a[i] + tag[p] < c) flag = 1, res = max(res, a[i] + tag[p]); return flag ? res : -1; } for (int i = l; i <= R[p]; ++i) if (a[i] + tag[p] < c) flag = 1, res = max(res, a[i] + tag[p]); for (int i = p + 1; i <= q - 1; ++i) { if (!is[i]) copy_n(a + L[i], siz, sorted + L[i]), sort(sorted + L[i], sorted + R[i] + 1), is[i] = 1; auto it = lower_bound(sorted + L[i], sorted + R[i] + 1, c - tag[i]) - 1; if (*it + tag[i] < c) flag = 1, res = max(res, *it + tag[i]); } for (int i = L[q]; i <= r; ++i) if (a[i] + tag[q] < c) flag = 1, res = max(res, a[i] + tag[q]); return flag ? res : -1; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i], sorted[i] = a[i]; for (int i = 1; i <= cnt; ++i) sort(sorted + L[i], sorted + R[i] + 1), is[i] = 1; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) add(l, r, c); else cout << query(l, r, c) << endl; } return 0; } 5 \u533a\u95f4\u5f00\u65b9\uff0c\u533a\u95f4\u67e5\u8be2 \u00b6 \u6ce8\u610f\u5230\uff0c\u5f00\u65b9\u4e00\u5b9a\u6b21\u6570\u4ee5\u540e\uff0c\u6240\u6709\u7684\u6570\u90fd\u4f1a\u5728 \\(0,1\\) \u4e0d\u53d8\u3002 \u5373 \\(f(x)=\\sqrt x\\) \u5728\u6b63\u6570\u7684\u4e0d\u52a8\u70b9\u4e3a \\(0,1\\) \uff0c\u56e0\u6b64\uff0c \u7ef4\u62a4 tag \u8868\u793a\u4e00\u4e2a\u6bb5\u662f\u5426\u5df2\u7ecf\u53d8\u4e3a\u4e86 \\(0,1\\) \uff1b \u5982\u679c\u4e00\u4e2a\u6bb5\u5df2\u7ecf\u53d8\u6210\u4e86 \\(0,1\\) \u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u518d\u5f00\u65b9\u4e86\u3002 \u6d1b\u8c37\u4e0a\u7684\u9898\u662f\uff1a P4145 \u4e0a\u5e1d\u9020\u9898\u7684\u4e03\u5206\u949f 2 / \u82b1\u795e\u6e38\u5386\u5404\u56fd \u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 5e4 + 10; int n, siz, cnt; int belong[N], L[N], R[N]; int a[N], sum[N], tag[N]; // tag: is 0 or 1 void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void m_sqrt(int l, int r) { int p = belong[l], q = belong[r]; if (p == q) { if (tag[p]) return; for (int i = l; i <= r; ++i) { sum[p] -= a[i]; a[i] = sqrt(a[i]); sum[p] += a[i]; } return; } if (!tag[p]) for (int i = l; i <= R[p]; ++i) { sum[p] -= a[i]; a[i] = sqrt(a[i]); sum[p] += a[i]; } for (int i = p + 1; i <= q - 1; ++i) { if (tag[i]) continue; int fl = true; sum[i] = 0; for (int j = L[i]; j <= R[i]; ++j) { a[j] = sqrt(a[j]), sum[i] += a[j]; if (a[j] > 1) fl = false; } tag[i] = fl; } if (!tag[q]) for (int i = L[q]; i <= r; ++i) { sum[q] -= a[i]; a[i] = sqrt(a[i]); sum[q] += a[i]; } } int query(int l, int r) { int p = belong[l], q = belong[r]; int res = 0; if (p == q) { for (int i = l; i <= r; ++i) res += a[i]; return res; } for (int i = l; i <= R[p]; ++i) res += a[i]; for (int i = p + 1; i <= q - 1; ++i) res += sum[i]; for (int i = L[q]; i <= r; ++i) res += a[i]; return res; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i], sum[belong[i]] += a[i]; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) m_sqrt(l, r); else cout << query(l, r) << endl; } return 0; } 7 \u533a\u95f4\u52a0\u4e58\uff0c\u5355\u70b9\u67e5\u8be2 \u00b6 \u7c7b\u4f3c \u7ebf\u6bb5\u6811 2 \u7684 tag \u5904\u7406\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 1e5 + 10; constexpr int MOD = 10007; int n, siz, cnt; int belong[N], L[N], R[N]; int a[N], tagadd[N], tagmul[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1, tagadd[i] = 0, tagmul[i] = 1; R[cnt] = n; } void rebuild(int x) { for (int i = L[x]; i <= R[x]; ++i) a[i] = (a[i] * tagmul[x] % MOD + tagadd[x]) % MOD; tagadd[x] = 0, tagmul[x] = 1; } void modify(int l, int r, int mul, int add) { int p = belong[l], q = belong[r]; if (p == q) { rebuild(p); for (int i = l; i <= r; ++i) a[i] = (a[i] * mul % MOD + add) % MOD; return; } rebuild(p); for (int i = l; i <= R[p]; ++i) a[i] = (a[i] * mul % MOD + add) % MOD; for (int i = p + 1; i <= q - 1; ++i) { tagmul[i] = tagmul[i] * mul % MOD; tagadd[i] = (tagadd[i] * mul % MOD + add) % MOD; } rebuild(q); for (int i = L[q]; i <= r; ++i) a[i] = (a[i] * mul % MOD + add) % MOD; } int query(int x) { return (a[x] * tagmul[belong[x]] % MOD + tagadd[belong[x]]) % MOD; } signed main() { cin >> n; build(); copy_n(istream_iterator<int>(cin), n, a + 1); for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) modify(l, r, 1, c); if (op == 1) modify(l, r, c, 0); if (op == 2) cout << query(r) << endl; } return 0; } 8 \u533a\u95f4\u8ba1\u6570\uff0c\u533a\u95f4\u8986\u76d6 \u00b6 \u54c8\u54c8\u54c8\uff0c\u73c2\u6735\u8389\uff0c\u542f\u52a8\uff01 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 namespace odt { struct emm { int l, r; mutable int v; emm(int l): l(l) {} emm(int l, int r, int v): l(l), r(r), v(v) {} int len() const { return r - l + 1; } friend bool operator <(const emm &a, const emm &b) { return a.l < b.l; } }; set<emm> cute; auto split(int x) { auto it = --cute.upper_bound(emm(x)); if (it->l == x) return it; auto t = *it; cute.erase(it); cute.emplace(emm(t.l, x - 1, t.v)); return cute.emplace(emm(x, t.r, t.v)).first; } auto get(int l, int r) { auto itr = split(r + 1), itl = split(l); return make_pair(itl, itr); } int assign(int l, int r, int v) { auto it = get(l, r); auto itl = it.first, itr = it.second; int res = 0; for (; itl != itr; ++itl) if (itl->v == v) res += itl->len(); cute.erase(it.first, itr); cute.emplace(l, r, v); return res; } } signed main() { int n; cin >> n; for (int i = 1, x; i <= n; ++i) cin >> x, odt::cute.emplace(i, i, x); for (int k = 1; k <= n; ++k) { int l, r, c; cin >> l >> r >> c; cout << odt::assign(l, r, c) << endl; } return 0; } 9 \u533a\u95f4\u6700\u5c0f\u4f17\u6570 \u00b6 P4168 [Violet] \u84b2\u516c\u82f1 \u8bb0\u96c6\u5408 \\(S\\) \u7684\u4f17\u6570\u4e3a \\(\\text{mode}(S)\\) \uff0c \u6839\u636e\u4e00\u4e9b\u6027\u8d28\uff0c \\[ \\text{mode}(a\\cup b)\\in\\text{mode}(a)\\cup b \\] \u8bc1\u660e\uff1a\u82e5 \\(t\\) \u65e2\u4e0d\u662f \\(\\text{mode}(a)\\) \u4e5f\u4e0d\u5c5e\u4e8e \\(b\\) \uff0c\u90a3\u4e48 \\(t\\) \u7684\u51fa\u73b0\u6b21\u6570\u4e00\u5b9a\u5c0f\u4e8e \\(\\text{mode}(a)\\) \u3002 \u5148\u79bb\u6563\u5316\uff0c\u5757\u957f\u4e3a \\(\\sqrt n\\) \u5206\u5757\uff0c \u8bbe \\(\\text{between}(i,j)\\) \u8868\u793a\u7b2c \\([i,j]\\) \u5757\u7684\u6700\u5c0f\u4f17\u6570\u3002 \u8bbe \\(\\text{prefix}(i,x)\\) \u8868\u793a\u524d \\(i\\) \u5757\uff0c\u6570\u5b57 \\(j\\) \u7684\u51fa\u73b0\u6b21\u6570\u3002 \u90a3\u4e48\uff0c\u533a\u95f4 \\([l,r]\\) \u6700\u5c0f\u4f17\u6570\u4e00\u5b9a\u662f\u6574\u5757\u7684\u6700\u5c0f\u4f17\u6570\uff0c\u6216\u8005\u6563\u5757\u7684\u3002 \u76f4\u63a5\u5904\u7406\u5373\u53ef\u3002 \u5982\u4f55\u9884\u5904\u7406 \\(\\text{prefix}\\) \uff1f\u666e\u53ca\u7ec4\u91cd\u9020\u3002 \u5982\u4f55\u9884\u5904\u7406 \\(\\text{between}\\) \uff1f\u518d\u6839\u636e\u6027\u8d28\uff0c\u52a0\u5165 \\(j\\) \u96c6\u5408\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(\\mathcal O(q\\sqrt n)\\) \u3002 \u6ce8\u610f\u4e00\u5b9a\u8981\u52a0\u5165\u6240\u6709\u7684\u6570\u5b57\u4ee5\u540e\u518d\u7edf\u8ba1\uff1b \u6ce8\u610f\u7b97\u6563\u5757\u7684\u65f6\u5019\u8981\u52a0\u4e0a\u6574\u5757\u7684\u6b21\u6570\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 1e5 + 10; constexpr int SN = 400; int n, a[N], siz, cnt; int belong[N], L[N], R[N]; int between[SN][SN], prefix[SN][N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; for (int i = 1; i <= cnt; ++i) { copy_n(prefix[i - 1], n, prefix[i]); for (int j = L[i]; j <= R[i]; ++j) ++prefix[i][a[j]]; } for (int i = 1; i <= cnt; ++i) for (int j = i; j <= cnt; ++j) { int r = between[i][j - 1]; for (int k = L[j]; k <= R[j]; ++k) { int c = a[k]; int ori = prefix[j][r] - prefix[i - 1][r]; int now = prefix[j][c] - prefix[i - 1][c]; if (now > ori || (now == ori && c < r)) r = c; } between[i][j] = r; } } array<int, N> bucket; int query(int l, int r) { fill_n(bucket.begin(), n, 0); int p = belong[l], q = belong[r]; int id = 0; if (q - p == 1) { for (int i = l; i <= r; ++i) ++bucket[a[i]]; for (int i = l; i <= r; ++i) { int c = a[i]; int ori = bucket[id]; int now = bucket[c]; if (now > ori || (now == ori && c < id)) id = c; } return id; } id = between[p + 1][q - 1]; for (int i = l; i <= R[p]; ++i) ++bucket[a[i]]; for (int i = L[q]; i <= r; ++i) ++bucket[a[i]]; for (int i = l; i <= R[p]; ++i) { int c = a[i]; int ori = bucket[id] + prefix[q - 1][id] - prefix[p][id]; int now = bucket[c] + prefix[q - 1][c] - prefix[p][c]; if (now > ori || (now == ori && c < id)) id = c; } for (int i = q[L]; i <= r; ++i) { int c = a[i]; int ori = bucket[id] + prefix[q - 1][id] - prefix[p][id]; int now = bucket[c] + prefix[q - 1][c] - prefix[p][c]; if (now > ori || (now == ori && c < id)) id = c; } return id; } signed main() { cin >> n; vector<int> s(n); for (int i = 1; i <= n; ++i) cin >> a[i], s[i - 1] = a[i]; sort(s.begin(), s.end()), s.erase(unique(s.begin(), s.end()), s.end()); for (int i = 1; i <= n; ++i) a[i] = lower_bound(s.begin(), s.end(), a[i]) - s.begin(); build(); for (int i = 1; i <= n; ++i) { int l, r; cin >> l >> r; cout << s[query(l, r)] << endl; } return 0; } \u5176\u4ed6\u4f8b\u9898 \u00b6 P3870\uff1a01 \u53cd\u8f6c\uff0c\u533a\u95f4\u6c42\u548c \u00b6 tag \u8868\u793a\u4e00\u5757\u662f\u5426\u53cd\u8f6c\uff1b sum \u8868\u793a\u533a\u95f4\u548c\uff0c\u4e0d\u8003\u8651\u662f\u5426\u53cd\u8f6c\u3002 constexpr int N = 1e5 + 10; int n, m, siz, cnt; int belong[N], L[N], R[N]; int a[N], sum[N], tag[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void change(int l, int r) { int p = belong[l], q = belong[r]; if (p == q) { for (int i = l; i <= r; ++i) { if (a[i] == 0) a[i] = 1, ++sum[p]; else a[i] = 0, --sum[p]; } return; } for (int i = l; i <= R[p]; ++i) { if (a[i] == 0) a[i] = 1, ++sum[p]; else a[i] = 0, --sum[p]; } for (int i = p + 1; i <= q - 1; ++i) tag[i] ^= 1; for (int i = L[q]; i <= r; ++i) { if (a[i] == 0) a[i] = 1, ++sum[q]; else a[i] = 0, --sum[q]; } } int query(int l, int r) { int p = belong[l], q = belong[r]; int res = 0; if (p == q) { for (int i = l; i <= r; ++i) res += a[i] ^ tag[p]; return res; } for (int i = l; i <= R[p]; ++i) res += a[i] ^ tag[p]; for (int i = p + 1; i <= q - 1; ++i) { if (!tag[i]) res += sum[i]; else res += siz - sum[i]; } for (int i = L[q]; i <= r; ++i) res += a[i] ^ tag[q]; return res; } signed main() { cin >> n >> m; build(); while (m--) { int op, l, r; cin >> op >> l >> r; if (op == 0) change(l, r); else cout << query(l, r) << endl; } return 0; } Reference \u00b6 [1] https://blog.csdn.net/ZhuRanCheng/article/details/128854390 [2] https://yuhi.xyz/post/\u5206\u5757\u5b66\u4e60\u7b14\u8bb0/ [3] https://www.jianshu.com/p/2aba8f326052 [4] https://www.cnblogs.com/xyzqwq/p/fenkuai.html [5] https://oi-wiki.org/ds/decompose/","title":"\u6570\u5217\u5206\u5757"},{"location":"ds/sqrt/decomposition/#_1","text":"\u4e0b\u9762\u90e8\u5206\u4ee3\u7801\u4f7f\u7528\uff0c using ll = long long; #define int ll","title":"\u6570\u5217\u5206\u5757"},{"location":"ds/sqrt/decomposition/#_2","text":"","title":"\u57fa\u7840\u601d\u60f3"},{"location":"ds/sqrt/decomposition/#_3","text":"\u95ee\u9898\uff1a\u5b9e\u73b0 \u533a\u95f4\u52a0\uff1b \u533a\u95f4\u6c42\u548c\u3002","title":"\u95ee\u9898\u5f15\u5165"},{"location":"ds/sqrt/decomposition/#_4","text":"\u5f15\u7528\u7ecf\u5178\u4e1c\u897f\uff0c \u6211\u4eec\u8003\u8651\u6784\u9020\u4e00\u4e2a\u7ed3\u6784\uff0c\u5f62\u5982\uff0c \u90a3\u4e48\uff0c\u7ed3\u8bba\u662f\uff0c","title":"\u57fa\u672c\u7ed3\u6784"},{"location":"ds/sqrt/decomposition/#_5","text":"\u4e3a\u4ec0\u4e48\u5757\u957f\u4e00\u822c\u662f \\(\\sqrt n\\) \u5462\uff1f \u6211\u4eec\u5047\u8bbe\u6784\u9020\u7684\u5757\u957f\u662f \\(B\\) \uff0c\u90a3\u4e48\u603b\u5757\u6570\u4e3a\uff0c \\[ {n\\over B} \\] \u6211\u4eec\u6bcf\u4e00\u6b21\u4fee\u6539\u67e5\u8be2\uff0c\u590d\u6742\u5ea6\uff0c \u5728\u4e00\u5757\u5185\uff0c\u66b4\u529b\u679a\u4e3e\uff0c \\(\\mathcal O(B)\\) \uff1b \u4e0d\u5728\u4e00\u5757\u5185\uff0c\u679a\u4e3e\u6574\u5757\u3001\u96f6\u6563\u5757\uff0c \\(\\mathcal O(n/B+B)\\) \u3002 \u6839\u636e\u5747\u503c\u4e0d\u7b49\u5f0f\uff0c \\[ {n\\over B}+B\\ge2\\sqrt n \\] \u53d6\u7b49\u5f53\u4e14\u4ec5\u5f53 \\(b=\\sqrt n\\) \u3002","title":"\u590d\u6742\u5ea6\u8bc1\u660e"},{"location":"ds/sqrt/decomposition/#_6","text":"\u5982\u679c\u5728\u5206\u6cbb\u7ed3\u6784\u4e0a\u5f88\u96be\u5feb\u901f\u5408\u5e76\u67d0\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u5206\u5757\u6765\u505a\u3002","title":"\u5206\u5757\u7684\u5e94\u7528"},{"location":"ds/sqrt/decomposition/#_7","text":"\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6c42\u548c\u3002","title":"\u7b80\u5316\u5b9e\u73b0"},{"location":"ds/sqrt/decomposition/#_8","text":"int n, siz, cnt; int a[N], tag[N]; int belong[N], L[N], R[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } n \u8868\u793a\u539f\u6570\u7ec4\uff08 a \uff09\u957f\u5ea6\uff1b siz \u8868\u793a\u5757\u957f\uff1b cnt \u8868\u793a\u603b\u5757\u6570\uff1b belong[i] \u8868\u793a\u539f\u6570\u7ec4\u7b2c \\(i\\) \u4e2a\u88ab\u5206\u5230\u4e86\u7b2c\u51e0\u5757\uff1b tag[i] \u8868\u793a\u7b2c \\(i\\) \u5757\u4e0a\u9762\u7684\u9644\u52a0\u503c\uff1b L[i],R[i] \u5206\u522b\u8868\u793a\u7b2c \\(i\\) \u5757\u7684\u5de6\u3001\u53f3\u7aef\u70b9\u3002 \u7279\u5224\u5728\u540c\u4e00\u5757\u5185\u7684\u60c5\u51b5\uff0c\u5904\u7406\u5de6\u53f3\u96f6\u6563\u5757\u548c\u5404\u4e2a\u6574\u5757\u3002","title":"\u9884\u5904\u7406"},{"location":"ds/sqrt/decomposition/#1","text":"\u4e0d\u7ef4\u62a4\u6574\u5757\u4fe1\u606f\uff08\u5355\u70b9\u67e5\u8be2\uff09\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 5e4 + 10; int n, siz, cnt; int belong[N], L[N], R[N]; int a[N], tag[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void add(int l, int r, int c) { int p = belong[l], q = belong[r]; if (p == q) { for (int i = l; i <= r; ++i) a[i] += c; return; } for (int i = l; i <= R[p]; ++i) a[i] += c; for (int i = p + 1; i <= q - 1; ++i) tag[i] += c; for (int i = L[q]; i <= r; ++i) a[i] += c; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i]; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) add(l, r, c); else cout << a[r] + tag[belong[r]] << endl; } return 0; }","title":"1 \u533a\u95f4\u52a0\u3001\u5355\u70b9\u67e5\u8be2"},{"location":"ds/sqrt/decomposition/#4","text":"\u7279\u5224\u5728\u540c\u4e00\u5757\u5185\u7684\u60c5\u51b5\uff0c\u5904\u7406\u5de6\u53f3\u96f6\u6563\u5757\u548c\u5404\u4e2a\u6574\u5757\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 5e4 + 10; int n, siz, cnt; int belong[N], L[N], R[N]; ll a[N], sum[N], tag[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void add(int l, int r, int c) { int p = belong[l], q = belong[r]; if (p == q) { for (int i = l; i <= r; ++i) a[i] += c, sum[p] += c; return; } for (int i = l; i <= R[p]; ++i) a[i] += c, sum[p] += c; for (int i = p + 1; i <= q - 1; ++i) sum[i] += c * (R[i] - L[i] + 1), tag[i] += c; for (int i = L[q]; i <= r; ++i) a[i] += c, sum[q] += c; } ll query(int l, int r, int m) { int p = belong[l], q = belong[r]; ll res = 0; if (p == q) { for (int i = l; i <= r; ++i) res = (res + a[i] + tag[p]) % m; return res; } for (int i = l; i <= R[p]; ++i) res = (res + a[i] + tag[p]) % m; for (int i = p + 1; i <= q - 1; ++i) res = (res + sum[i]) % m; for (int i = L[q]; i <= r; ++i) res = (res + a[i] + tag[q]) % m; return res; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i], sum[belong[i]] += a[i]; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) add(l, r, c); else cout << query(l, r, c + 1) << endl; } return 0; }","title":"4 \u533a\u95f4\u52a0\u3001\u533a\u95f4\u67e5\u8be2"},{"location":"ds/sqrt/decomposition/#6","text":"\u4f7f\u7528 STL rope\u3002 \u7b2c\u96f6\u90e8\u5206 \u6784\u9020\u51fd\u6570 \u89e3\u91ca rope<T> \u6784\u9020\u4e00\u4e2a\u7c7b\u578b\u4e3a T \u7684\u6570\u7ec4 crope \u7b49\u540c\u4e8e rope<char> rope<T>(siz) \u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a siz \u7684\u6570\u7ec4 rope<T>(siz, val) \u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a siz \u7684\u521d\u59cb\u503c\u5747\u4e3a val \u7684\u6570\u7ec4 \u7b2c\u4e00\u90e8\u5206 \u64cd\u4f5c \u89e3\u91ca a[p] \u6216 a.at(p) \u8fd4\u56de p \u5904\u7684\u5143\u7d20\uff08\u53ea\u8bfb\uff09 a.size() \u8fd4\u56de\u5927\u5c0f a.empty() \u8fd4\u56de\u662f\u5426\u4e3a\u7a7a a.clear() \u6e05\u7a7a\uff08\u5220\u9664\u6240\u6709\u5143\u7d20\uff09 a.begin() / a.end() \u8fed\u4ee3\u5668 a.rbegin() / a.rend() \u53cd\u5411\u8fed\u4ee3\u5668 a.front() / a.back() \u8fd4\u56de\u9996\u4f4d\u5143\u7d20 a.c_str() \u8fd4\u56de c \u98ce\u683c\u6570\u7ec4\uff08\u53ea\u8bfb\uff09 \u7b2c\u4e8c\u90e8\u5206 \u64cd\u4f5c \u89e3\u91ca a.push_back(x) \u5728\u672b\u5c3e\u6dfb\u52a0 x \u5143\u7d20 a.pop_back() \u5728\u67d0\u4f4d\u5220\u9664 a.push_front(x) \u5728\u5f00\u5934\u6dfb\u52a0 x \u5143\u7d20 a.pop_front() \u5728\u5f00\u5934\u5220\u9664 \u7b2c\u4e09\u90e8\u5206 \u64cd\u4f5c \u89e3\u91ca a.insert(p, x) \u5728\u4e0b\u6807 p \u524d\u63d2\u5165 x \u5143\u7d20 a.insert(p, c, x) \u5728\u4e0b\u6807 p \u524d\u63d2\u5165 c \u4e2a x \u5143\u7d20 a.erase(p) \u4ece\u4e0b\u6807 p \u5f00\u59cb\u5220\u9664 \\(1\\) \u4e2a\u5143\u7d20 a.erase(p, c) \u4ece\u4e0b\u6807 p \u5f00\u59cb\u5220\u9664 c \u4e2a\u5143\u7d20 a.replace(p, x) \u628a\u4e0b\u6807 p \u5904\u7684\u5143\u7d20\u66ff\u6362\u4e3a x \u5143\u7d20 a.substr(p, x) \u4ece\u4e0b\u6807 p \u5f00\u59cb\u622a\u53d6 x \u4e2a\u8fd4\u56de \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> #include <ext/rope> using namespace std; using namespace __gnu_cxx; int n; rope<int> a; signed main() { cin >> n; a.push_back(0); for (int i = 1, x; i <= n; ++i) cin >> x, a.push_back(x); for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) a.insert(l, r); else cout << a[r] << endl; } return 0; }","title":"6 \u5355\u70b9\u63d2\u5165\u3001\u5355\u70b9\u67e5\u8be2"},{"location":"ds/sqrt/decomposition/#_9","text":"","title":"\u6570\u5217\u5206\u5757\u5165\u95e8\u4e5d\u9898"},{"location":"ds/sqrt/decomposition/#2","text":"\u533a\u95f4\u52a0\uff1b \u533a\u95f4\u67e5\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684\u6570\u91cf\u3002 SP3261 RACETIME - Race Against Time SP18185 GIVEAWAY - Give Away UVA12003 Array Transformer P2801 \u6559\u4e3b\u7684\u9b54\u6cd5 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 5e4 + 10; int n, siz, cnt; int belong[N], L[N], R[N]; int a[N], tag[N]; int sorted[N], is[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void add(int l, int r, int c) { int p = belong[l], q = belong[r]; if (p == q) { for (int i = l; i <= r; ++i) a[i] += c; return void(is[p] = 0); } for (int i = l; i <= R[p]; ++i) a[i] += c; is[p] = 0; for (int i = p + 1; i <= q - 1; ++i) tag[i] += c; for (int i = L[q]; i <= r; ++i) a[i] += c; is[q] = 0; } int query(int l, int r, ll c) { int p = belong[l], q = belong[r]; int res = 0; if (p == q) { for (int i = l; i <= r; ++i) res += (a[i] + tag[p]) < c; return res; } for (int i = l; i <= R[p]; ++i) res += (a[i] + tag[p]) < c; for (int i = p + 1; i <= q - 1; ++i) { if (!is[i]) copy_n(a + L[i], siz, sorted + L[i]), sort(sorted + L[i], sorted + R[i] + 1), is[i] = 1; res += lower_bound(sorted + L[i], sorted + R[i] + 1, c - tag[i]) - (sorted + L[i]); } for (int i = L[q]; i <= r; ++i) res += (a[i] + tag[q]) < c; return res; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i], sorted[i] = a[i]; for (int i = 1; i <= cnt; ++i) sort(sorted + L[i], sorted + R[i] + 1), is[i] = 1; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) add(l, r, c); else cout << query(l, r, 1ll * c * c) << endl; } return 0; } a \u8868\u793a\u539f\u6570\u7ec4\uff1b tag \u8868\u793a\u533a\u95f4\u52a0\u6807\u8bb0\uff1b sorted \u8868\u793a\u5206\u5757\u540e\u5757\u5185\u6392\u5e8f\u7684\u7ed3\u679c\uff1b is \u8868\u793a\u4e00\u4e2a\u5757\u662f\u5426\u6392\u5e8f\u5b8c\u3002","title":"2 \u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6392\u540d"},{"location":"ds/sqrt/decomposition/#3","text":"\u548c\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int query(int l, int r, int c) { int p = belong[l], q = belong[r]; int res = INT_MIN, flag = 0; if (p == q) { for (int i = l; i <= r; ++i) if (a[i] + tag[p] < c) flag = 1, res = max(res, a[i] + tag[p]); return flag ? res : -1; } for (int i = l; i <= R[p]; ++i) if (a[i] + tag[p] < c) flag = 1, res = max(res, a[i] + tag[p]); for (int i = p + 1; i <= q - 1; ++i) { if (!is[i]) copy_n(a + L[i], siz, sorted + L[i]), sort(sorted + L[i], sorted + R[i] + 1), is[i] = 1; auto it = lower_bound(sorted + L[i], sorted + R[i] + 1, c - tag[i]) - 1; if (*it + tag[i] < c) flag = 1, res = max(res, *it + tag[i]); } for (int i = L[q]; i <= r; ++i) if (a[i] + tag[q] < c) flag = 1, res = max(res, a[i] + tag[q]); return flag ? res : -1; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i], sorted[i] = a[i]; for (int i = 1; i <= cnt; ++i) sort(sorted + L[i], sorted + R[i] + 1), is[i] = 1; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) add(l, r, c); else cout << query(l, r, c) << endl; } return 0; }","title":"3 \u533a\u95f4\u52a0\uff0c\u533a\u95f4\u524d\u9a71"},{"location":"ds/sqrt/decomposition/#5","text":"\u6ce8\u610f\u5230\uff0c\u5f00\u65b9\u4e00\u5b9a\u6b21\u6570\u4ee5\u540e\uff0c\u6240\u6709\u7684\u6570\u90fd\u4f1a\u5728 \\(0,1\\) \u4e0d\u53d8\u3002 \u5373 \\(f(x)=\\sqrt x\\) \u5728\u6b63\u6570\u7684\u4e0d\u52a8\u70b9\u4e3a \\(0,1\\) \uff0c\u56e0\u6b64\uff0c \u7ef4\u62a4 tag \u8868\u793a\u4e00\u4e2a\u6bb5\u662f\u5426\u5df2\u7ecf\u53d8\u4e3a\u4e86 \\(0,1\\) \uff1b \u5982\u679c\u4e00\u4e2a\u6bb5\u5df2\u7ecf\u53d8\u6210\u4e86 \\(0,1\\) \u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u518d\u5f00\u65b9\u4e86\u3002 \u6d1b\u8c37\u4e0a\u7684\u9898\u662f\uff1a P4145 \u4e0a\u5e1d\u9020\u9898\u7684\u4e03\u5206\u949f 2 / \u82b1\u795e\u6e38\u5386\u5404\u56fd \u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 5e4 + 10; int n, siz, cnt; int belong[N], L[N], R[N]; int a[N], sum[N], tag[N]; // tag: is 0 or 1 void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void m_sqrt(int l, int r) { int p = belong[l], q = belong[r]; if (p == q) { if (tag[p]) return; for (int i = l; i <= r; ++i) { sum[p] -= a[i]; a[i] = sqrt(a[i]); sum[p] += a[i]; } return; } if (!tag[p]) for (int i = l; i <= R[p]; ++i) { sum[p] -= a[i]; a[i] = sqrt(a[i]); sum[p] += a[i]; } for (int i = p + 1; i <= q - 1; ++i) { if (tag[i]) continue; int fl = true; sum[i] = 0; for (int j = L[i]; j <= R[i]; ++j) { a[j] = sqrt(a[j]), sum[i] += a[j]; if (a[j] > 1) fl = false; } tag[i] = fl; } if (!tag[q]) for (int i = L[q]; i <= r; ++i) { sum[q] -= a[i]; a[i] = sqrt(a[i]); sum[q] += a[i]; } } int query(int l, int r) { int p = belong[l], q = belong[r]; int res = 0; if (p == q) { for (int i = l; i <= r; ++i) res += a[i]; return res; } for (int i = l; i <= R[p]; ++i) res += a[i]; for (int i = p + 1; i <= q - 1; ++i) res += sum[i]; for (int i = L[q]; i <= r; ++i) res += a[i]; return res; } signed main() { cin >> n; build(); for (int i = 1; i <= n; ++i) cin >> a[i], sum[belong[i]] += a[i]; for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) m_sqrt(l, r); else cout << query(l, r) << endl; } return 0; }","title":"5 \u533a\u95f4\u5f00\u65b9\uff0c\u533a\u95f4\u67e5\u8be2"},{"location":"ds/sqrt/decomposition/#7","text":"\u7c7b\u4f3c \u7ebf\u6bb5\u6811 2 \u7684 tag \u5904\u7406\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 1e5 + 10; constexpr int MOD = 10007; int n, siz, cnt; int belong[N], L[N], R[N]; int a[N], tagadd[N], tagmul[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1, tagadd[i] = 0, tagmul[i] = 1; R[cnt] = n; } void rebuild(int x) { for (int i = L[x]; i <= R[x]; ++i) a[i] = (a[i] * tagmul[x] % MOD + tagadd[x]) % MOD; tagadd[x] = 0, tagmul[x] = 1; } void modify(int l, int r, int mul, int add) { int p = belong[l], q = belong[r]; if (p == q) { rebuild(p); for (int i = l; i <= r; ++i) a[i] = (a[i] * mul % MOD + add) % MOD; return; } rebuild(p); for (int i = l; i <= R[p]; ++i) a[i] = (a[i] * mul % MOD + add) % MOD; for (int i = p + 1; i <= q - 1; ++i) { tagmul[i] = tagmul[i] * mul % MOD; tagadd[i] = (tagadd[i] * mul % MOD + add) % MOD; } rebuild(q); for (int i = L[q]; i <= r; ++i) a[i] = (a[i] * mul % MOD + add) % MOD; } int query(int x) { return (a[x] * tagmul[belong[x]] % MOD + tagadd[belong[x]]) % MOD; } signed main() { cin >> n; build(); copy_n(istream_iterator<int>(cin), n, a + 1); for (int i = 1; i <= n; ++i) { int op, l, r, c; cin >> op >> l >> r >> c; if (op == 0) modify(l, r, 1, c); if (op == 1) modify(l, r, c, 0); if (op == 2) cout << query(r) << endl; } return 0; }","title":"7 \u533a\u95f4\u52a0\u4e58\uff0c\u5355\u70b9\u67e5\u8be2"},{"location":"ds/sqrt/decomposition/#8","text":"\u54c8\u54c8\u54c8\uff0c\u73c2\u6735\u8389\uff0c\u542f\u52a8\uff01 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 namespace odt { struct emm { int l, r; mutable int v; emm(int l): l(l) {} emm(int l, int r, int v): l(l), r(r), v(v) {} int len() const { return r - l + 1; } friend bool operator <(const emm &a, const emm &b) { return a.l < b.l; } }; set<emm> cute; auto split(int x) { auto it = --cute.upper_bound(emm(x)); if (it->l == x) return it; auto t = *it; cute.erase(it); cute.emplace(emm(t.l, x - 1, t.v)); return cute.emplace(emm(x, t.r, t.v)).first; } auto get(int l, int r) { auto itr = split(r + 1), itl = split(l); return make_pair(itl, itr); } int assign(int l, int r, int v) { auto it = get(l, r); auto itl = it.first, itr = it.second; int res = 0; for (; itl != itr; ++itl) if (itl->v == v) res += itl->len(); cute.erase(it.first, itr); cute.emplace(l, r, v); return res; } } signed main() { int n; cin >> n; for (int i = 1, x; i <= n; ++i) cin >> x, odt::cute.emplace(i, i, x); for (int k = 1; k <= n; ++k) { int l, r, c; cin >> l >> r >> c; cout << odt::assign(l, r, c) << endl; } return 0; }","title":"8 \u533a\u95f4\u8ba1\u6570\uff0c\u533a\u95f4\u8986\u76d6"},{"location":"ds/sqrt/decomposition/#9","text":"P4168 [Violet] \u84b2\u516c\u82f1 \u8bb0\u96c6\u5408 \\(S\\) \u7684\u4f17\u6570\u4e3a \\(\\text{mode}(S)\\) \uff0c \u6839\u636e\u4e00\u4e9b\u6027\u8d28\uff0c \\[ \\text{mode}(a\\cup b)\\in\\text{mode}(a)\\cup b \\] \u8bc1\u660e\uff1a\u82e5 \\(t\\) \u65e2\u4e0d\u662f \\(\\text{mode}(a)\\) \u4e5f\u4e0d\u5c5e\u4e8e \\(b\\) \uff0c\u90a3\u4e48 \\(t\\) \u7684\u51fa\u73b0\u6b21\u6570\u4e00\u5b9a\u5c0f\u4e8e \\(\\text{mode}(a)\\) \u3002 \u5148\u79bb\u6563\u5316\uff0c\u5757\u957f\u4e3a \\(\\sqrt n\\) \u5206\u5757\uff0c \u8bbe \\(\\text{between}(i,j)\\) \u8868\u793a\u7b2c \\([i,j]\\) \u5757\u7684\u6700\u5c0f\u4f17\u6570\u3002 \u8bbe \\(\\text{prefix}(i,x)\\) \u8868\u793a\u524d \\(i\\) \u5757\uff0c\u6570\u5b57 \\(j\\) \u7684\u51fa\u73b0\u6b21\u6570\u3002 \u90a3\u4e48\uff0c\u533a\u95f4 \\([l,r]\\) \u6700\u5c0f\u4f17\u6570\u4e00\u5b9a\u662f\u6574\u5757\u7684\u6700\u5c0f\u4f17\u6570\uff0c\u6216\u8005\u6563\u5757\u7684\u3002 \u76f4\u63a5\u5904\u7406\u5373\u53ef\u3002 \u5982\u4f55\u9884\u5904\u7406 \\(\\text{prefix}\\) \uff1f\u666e\u53ca\u7ec4\u91cd\u9020\u3002 \u5982\u4f55\u9884\u5904\u7406 \\(\\text{between}\\) \uff1f\u518d\u6839\u636e\u6027\u8d28\uff0c\u52a0\u5165 \\(j\\) \u96c6\u5408\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(\\mathcal O(q\\sqrt n)\\) \u3002 \u6ce8\u610f\u4e00\u5b9a\u8981\u52a0\u5165\u6240\u6709\u7684\u6570\u5b57\u4ee5\u540e\u518d\u7edf\u8ba1\uff1b \u6ce8\u610f\u7b97\u6563\u5757\u7684\u65f6\u5019\u8981\u52a0\u4e0a\u6574\u5757\u7684\u6b21\u6570\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 constexpr int N = 1e5 + 10; constexpr int SN = 400; int n, a[N], siz, cnt; int belong[N], L[N], R[N]; int between[SN][SN], prefix[SN][N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; for (int i = 1; i <= cnt; ++i) { copy_n(prefix[i - 1], n, prefix[i]); for (int j = L[i]; j <= R[i]; ++j) ++prefix[i][a[j]]; } for (int i = 1; i <= cnt; ++i) for (int j = i; j <= cnt; ++j) { int r = between[i][j - 1]; for (int k = L[j]; k <= R[j]; ++k) { int c = a[k]; int ori = prefix[j][r] - prefix[i - 1][r]; int now = prefix[j][c] - prefix[i - 1][c]; if (now > ori || (now == ori && c < r)) r = c; } between[i][j] = r; } } array<int, N> bucket; int query(int l, int r) { fill_n(bucket.begin(), n, 0); int p = belong[l], q = belong[r]; int id = 0; if (q - p == 1) { for (int i = l; i <= r; ++i) ++bucket[a[i]]; for (int i = l; i <= r; ++i) { int c = a[i]; int ori = bucket[id]; int now = bucket[c]; if (now > ori || (now == ori && c < id)) id = c; } return id; } id = between[p + 1][q - 1]; for (int i = l; i <= R[p]; ++i) ++bucket[a[i]]; for (int i = L[q]; i <= r; ++i) ++bucket[a[i]]; for (int i = l; i <= R[p]; ++i) { int c = a[i]; int ori = bucket[id] + prefix[q - 1][id] - prefix[p][id]; int now = bucket[c] + prefix[q - 1][c] - prefix[p][c]; if (now > ori || (now == ori && c < id)) id = c; } for (int i = q[L]; i <= r; ++i) { int c = a[i]; int ori = bucket[id] + prefix[q - 1][id] - prefix[p][id]; int now = bucket[c] + prefix[q - 1][c] - prefix[p][c]; if (now > ori || (now == ori && c < id)) id = c; } return id; } signed main() { cin >> n; vector<int> s(n); for (int i = 1; i <= n; ++i) cin >> a[i], s[i - 1] = a[i]; sort(s.begin(), s.end()), s.erase(unique(s.begin(), s.end()), s.end()); for (int i = 1; i <= n; ++i) a[i] = lower_bound(s.begin(), s.end(), a[i]) - s.begin(); build(); for (int i = 1; i <= n; ++i) { int l, r; cin >> l >> r; cout << s[query(l, r)] << endl; } return 0; }","title":"9 \u533a\u95f4\u6700\u5c0f\u4f17\u6570"},{"location":"ds/sqrt/decomposition/#_10","text":"","title":"\u5176\u4ed6\u4f8b\u9898"},{"location":"ds/sqrt/decomposition/#p387001","text":"tag \u8868\u793a\u4e00\u5757\u662f\u5426\u53cd\u8f6c\uff1b sum \u8868\u793a\u533a\u95f4\u548c\uff0c\u4e0d\u8003\u8651\u662f\u5426\u53cd\u8f6c\u3002 constexpr int N = 1e5 + 10; int n, m, siz, cnt; int belong[N], L[N], R[N]; int a[N], sum[N], tag[N]; void build() { siz = sqrt(n), cnt = (n - 1) / siz + 1; for (int i = 1; i <= n; ++i) belong[i] = (i - 1) / siz + 1; for (int i = 1; i <= cnt; ++i) L[i] = (i - 1) * siz + 1, R[i] = L[i] + siz - 1; R[cnt] = n; } void change(int l, int r) { int p = belong[l], q = belong[r]; if (p == q) { for (int i = l; i <= r; ++i) { if (a[i] == 0) a[i] = 1, ++sum[p]; else a[i] = 0, --sum[p]; } return; } for (int i = l; i <= R[p]; ++i) { if (a[i] == 0) a[i] = 1, ++sum[p]; else a[i] = 0, --sum[p]; } for (int i = p + 1; i <= q - 1; ++i) tag[i] ^= 1; for (int i = L[q]; i <= r; ++i) { if (a[i] == 0) a[i] = 1, ++sum[q]; else a[i] = 0, --sum[q]; } } int query(int l, int r) { int p = belong[l], q = belong[r]; int res = 0; if (p == q) { for (int i = l; i <= r; ++i) res += a[i] ^ tag[p]; return res; } for (int i = l; i <= R[p]; ++i) res += a[i] ^ tag[p]; for (int i = p + 1; i <= q - 1; ++i) { if (!tag[i]) res += sum[i]; else res += siz - sum[i]; } for (int i = L[q]; i <= r; ++i) res += a[i] ^ tag[q]; return res; } signed main() { cin >> n >> m; build(); while (m--) { int op, l, r; cin >> op >> l >> r; if (op == 0) change(l, r); else cout << query(l, r) << endl; } return 0; }","title":"P3870\uff1a01 \u53cd\u8f6c\uff0c\u533a\u95f4\u6c42\u548c"},{"location":"ds/sqrt/decomposition/#reference","text":"[1] https://blog.csdn.net/ZhuRanCheng/article/details/128854390 [2] https://yuhi.xyz/post/\u5206\u5757\u5b66\u4e60\u7b14\u8bb0/ [3] https://www.jianshu.com/p/2aba8f326052 [4] https://www.cnblogs.com/xyzqwq/p/fenkuai.html [5] https://oi-wiki.org/ds/decompose/","title":"Reference"},{"location":"graph/dsu-on-tree/","text":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 \u00b6 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u901a\u5e38\u53ef\u4ee5\u7528\u81ea\u5e95\u5411\u4e0a / \u81ea\u9876\u5411\u4e0b\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5b8c\u6210\u3002 \u4f46\u662f\u76f8\u6bd4\u6765\u8bf4\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u4f1a\u66f4\u597d\u5b9e\u73b0\u4e00\u70b9\uff0c\u4f46\u7f3a\u70b9\u662f\u601d\u7ef4\u66f4\u591a\u3002 \u542f\u53d1\u5f0f\u5408\u5e76 \u00b6 \u542f\u53d1\u5f0f\u7b97\u6cd5\u662f\u57fa\u4e8e\u4eba\u7c7b\u7684\u7ecf\u9a8c\u548c\u76f4\u89c2\u611f\u89c9\uff0c\u5bf9\u7b97\u6cd5\u7684\u4f18\u5316\u3002 \u542f\u53d1\u5f0f\u5408\u5e76\u6700\u5e38\u89c1\u7684\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u3002 \u5bf9\u4e8e\u6811\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u7edf\u79f0\u4e3a\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u3002 \u5176\u4e2d\u6bd4\u8f83\u7279\u5b9a\u7684\u4e00\u7c7b\u6280\u5de7\u6210\u4e3a DSU on Tree\u3002 \u4e0b\u6587\u4e0d\u5206\u8fa8\u5b9a\u4e49\uff0c\u5168\u90fd\u6210\u4e3a\uff08\u6811\u4e0a\uff09\u542f\u53d1\u5f0f\u5408\u5e76\u3002 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 \u00b6 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7528\u4e8e\u79bb\u7ebf\u7684\u6c42\u89e3\u5b50\u6811\u7684\u95ee\u9898\uff0c\u4e0d\u5e26\u4fee\u6539\u3002 \u6709\u4e9b\u9898\u53ef\u4ee5\u7528\u6811\u4e0a\u83ab\u961f\u6216\u8005\u6811\u5957\u6811\u4e00\u7c7b\u7684\u5b9e\u73b0\uff0c\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u4e00\u822c\u5f88\u4f18\u3002 \u5176\u601d\u60f3\u5927\u6982\u662f\uff0c\u6211\u4eec\u65e0\u6cd5\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u4fe1\u606f\u3002 \u4e8e\u662f\u6211\u4eec\u5c06\u6700\u5927\u7684\u5b50\u6811\u7684\u4fe1\u606f\u4fdd\u7559\uff0c\u628a\u5176\u4ed6\u5b50\u6811\u7684\u4fe1\u606f\u6c42\u89e3\u5b8c\u5148\u6254\u6389\u5728\u7b97\u4e00\u904d\u52a0\u8fdb\u53bb\u3002 \u6211\u4eec\u904d\u5386\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c \u9012\u5f52\u904d\u5386\u8f7b\u513f\u5b50\uff0c\u4e0d\u4fdd\u7559\u8d21\u732e\uff1b \u9012\u5f52\u904d\u5386\u91cd\u513f\u5b50\uff0c\u4fdd\u7559\u8d21\u732e\uff1b \u518d\u904d\u5386\u8f7b\u513f\u5b50\uff0c\u5355\u72ec\u8ba1\u5165\u5176\u8d21\u732e\uff1b \u66f4\u65b0\u8be5\u8282\u70b9\u7684\u7b54\u6848\uff1b \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u4e0d\u4fdd\u7559\uff0c\u90a3\u4e48\u6d88\u9664\u8d21\u732e\u3002 \u5176\u4e2d\uff0c\u7b2c\u4e09\u6b65\u53ef\u4ee5\u6709\u591a\u79cd\u5b9e\u73b0\uff1a \u53ef\u4ee5\u76f4\u63a5\u8ba1\u5165\u8d21\u732e\u7684\uff0c\u7528\u7c7b\u4f3c\u4e0a\u9762\u5b50\u6811\u904d\u5386\u7684\u65b9\u6cd5\u5904\u7406\uff1b \u4e0d\u80fd\u76f4\u63a5\u8ba1\u5165\u8d21\u732e\u7684\uff0c\u5355\u72ec\u5199\u4e00\u4e2a\u9012\u5f52\u5b9e\u73b0\u3002 \u53ef\u4ee5\u53d1\u73b0\u6211\u8fd9\u91cc\u63d0\u5230\u7684\u4e24\u4e2a\uff0c\u5176\u5b9e\u672c\u8d28\u90fd\u662f\u7b2c\u4e8c\u4e2a\uff0c\u7b2c\u4e00\u4e2a\u5b9e\u73b0\u7b80\u5355\u800c\u5df2\u3002 \u603b\u7ed3\uff1a \u9996\u5148\u8fdb\u884c\u91cd\u94fe\u5256\u5206\uff1b \u5904\u7406\u8f7b\u513f\u5b50\u7684\u7b54\u6848\uff1b \u6e05\u7a7a\u8f7b\u513f\u5b50\u7684\u8d21\u732e\uff1b \u5904\u7406\u91cd\u513f\u5b50\u7684\u7b54\u6848\uff1b \u52a0\u5165\u8f7b\u513f\u5b50\u7684\u8d21\u732e\uff1b \u8ba1\u7b97\u8be5\u8282\u70b9\u7684\u7b54\u6848\u3002 \u5b9e\u73b0 \u00b6 \u6ce8\u610f\u5230\u8fd9\u91cc\u4e0d\u9700\u8981\u94fe\u7684 DFS \u5e8f\u8fde\u7eed\u7684\u6027\u8d28\uff0c\u56e0\u6b64 DFN \u7684\u5904\u7406\u53ef\u4ee5\u653e\u5728\u7b2c\u4e00\u4e2a DFS \u4e2d\u3002 \u7b2c\u4e00\u4e2a DFS \u8bb0\u5f55\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\uff1a \u7236\u8282\u70b9\uff08 fa \uff09\u3001\u6df1\u5ea6\uff08 dep \uff09\u3001\u5b50\u6811\u5927\u5c0f\uff08 siz \uff09\u3001\u91cd\u5b50\u8282\u70b9\uff08 son \uff09\u3002 \u8282\u70b9\u7f16\u53f7 DFN\uff08 dfn \uff09\u3001DFS \u5e8f\u4e2d\u7684\u8282\u70b9\u7f16\u53f7\uff08 rnk \uff09\u3002 \u4e0d\u662f\u6bcf\u4e2a\u4fe1\u606f\u90fd\u5fc5\u987b\u7684\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801\uff0c int dep[N], siz[N], son[N]; int dfn[N], rnk[N], idx; void dfs1(int u, int ff) { int mx = -1; siz[u] = 1, son[u] = -1; dfn[u] = ++idx, rnk[idx] = u; for (int v : g[u]) if (v != ff) { dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } } \u7b2c\u4e8c\u4e2a DFS\uff0c\u6c42\u89e3\u7b54\u6848\uff0c\u4ee3\u7801\u5f62\u5982\uff0c void dfs2(int u, int ff, int keep) { for (int v : g[u]) if (v != ff && v != son[u]) dfs2(v, u, 0); if (son[u] != -1) dfs2(son[u], u, 1); add(u, ff), ans[u] = getans(); if (keep == 0) del(u, ff); } \u8fd9\u4e2a\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n\\log n)\\) \u7684\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a \u6bcf\u4e2a\u8282\u70b9\u7684\u8bbf\u95ee\uff0c\u662f\u7531\u5176\u4e0a\u9762\u7684\u8f7b\u5b50\u8282\u70b9\u5f15\u8d77\u7684\u3002 \u800c\u6839\u5230\u8282\u70b9\u7684\u8f7b\u5b50\u8282\u70b9\u4e2a\u6570\u662f \\(\\mathcal O(n\\log n)\\) \u7684\uff0c\u56e0\u6b64\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a\uff1a \\(\\mathcal O(n\\log n)\\) \u3002 \u4f8b\u9898 \u00b6 CF600E Lomsat gelral \u00b6 \u6a21\u677f\u9898\uff0c\u6b64\u9898\u4f5c\u8005\u5199\u51fa\u4e86\u4e24\u79cd\u4ee3\u7801\u3002 Solution 1 \u00b6 \u9898\u89e3\u533a\u7684\u5e38\u89c1\u7b97\u6cd5\u3002 \u8003\u8651\u4e0a\u9762\u7684\u7ecf\u5178\u5f62\u5f0f\uff0c\u6211\u4eec\u5728\u5b50\u6811\u7684\u52a0\u5165\u8d21\u732e\u548c\u5220\u9664\u65f6\uff0c\u66b4\u529b\u679a\u4e3e\u8fd9\u4e2a\u5b50\u6811\u3002 \u6ce8\u610f\u5230\u5f80\u4e0a\u8d70\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b50\u6811\u7684\u7b54\u6848\u8fd8\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\uff0c \u56e0\u6b64\u6211\u4eec\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u7684\u7ed3\u679c\uff0c\u76f4\u63a5\u6e05\u7a7a\u5373\u53ef\u3002 #include <bits/stdc++.h> using namespace std; constexpr int N = 1e5 + 10; using ll = long long; int n, col[N]; vector<int> g[N]; int dep[N], siz[N], son[N]; int dfn[N], rnk[N], idx; void dfs1(int u, int ff) { int mx = -1; siz[u] = 1, son[u] = -1; dfn[u] = ++idx, rnk[idx] = u; for (int v : g[u]) if (v != ff) { dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } } int cnt[N], mont; ll ans[N], wgq, res; void add(int u, int ff, int s, int Son) { cnt[col[u]] += s; if (cnt[col[u]] > wgq) wgq = cnt[col[u]], res = col[u]; else if (cnt[col[u]] == wgq) res += col[u]; for (int v : g[u]) if (v != ff && v != Son) add(v, u, s, Son); } auto getans() { return res; } void dfs2(int u, int ff, int keep) { for (int v : g[u]) if (v != ff && v != son[u]) dfs2(v, u, 0); if (son[u] != -1) dfs2(son[u], u, 1); add(u, ff, 1, son[u]), ans[u] = getans(); if (keep == 0) add(u, ff, -1, 0), wgq = res = 0; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; for (int i = 1; i <= n; ++i) cin >> col[i]; for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v), g[v].push_back(u); } dfs1(1, -1), dfs2(1, -1, 1); for (int i = 1; i <= n; ++i) cout << ans[i] << \" \"; return 0; } Solution 2 \u00b6 \u6808\u7edf\u8ba1\u7b54\u6848\u3002 \u6ce8\u610f\u5230\u6211\u4eec\u662f\u4e00\u4e2a\u6570\u4e00\u4e2a\u6570\u5904\u7406\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u679a\u4e3e\u5b50\u6811\u533a\u95f4\uff0c \u6211\u4eec\u6bcf\u52a0\u5165\u533a\u95f4\u7684\u4e00\u4e2a\u6570\uff0c\u5c31\u5728\u6808\u4e2d\u538b\u5165\u65e7\u7684\u7b54\u6848\u3002 \u6ce8\u610f\u5230\u52a0\u5165\u548c\u5220\u9664\u7684\u64cd\u4f5c\u4e00\u5b9a\u662f\u5bf9\u79f0\u5904\u7406\u7684\uff0c\u56e0\u6b64\uff0c\u7c7b\u4f3c\u53ef\u64a4\u5e76\u67e5\u96c6\uff0c \u5220\u9664\u7684\u65f6\u5019\u590d\u539f\u65e7\u7684\u7b54\u6848\u3001\u5f39\u6808\u5373\u53ef\u3002 #include <bits/stdc++.h> using namespace std; constexpr int N = 1e5 + 10; using ll = long long; int n, col[N]; vector<int> g[N]; int dep[N], siz[N], son[N]; int dfn[N], rnk[N], idx; void dfs1(int u, int ff) { int mx = -1; siz[u] = 1, son[u] = -1; dfn[u] = ++idx, rnk[idx] = u; for (int v : g[u]) if (v != ff) { dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } } int cnt[N]; ll ans[N]; vector<ll> wgq, res; void add(int i) { ++cnt[i]; if (cnt[i] < wgq.back()) wgq.push_back(wgq.back()), res.push_back(res.back()); else if (cnt[i] == wgq.back()) wgq.push_back(wgq.back()), res.push_back(res.back() + i); else wgq.push_back(cnt[i]), res.push_back(i); } void del(int k) { wgq.pop_back(), res.pop_back(); --cnt[k]; } ll getans() { return res.back(); } void dfs2(int u, int ff, int keep) { for (int v : g[u]) if (v != ff && v != son[u]) dfs2(v, u, 0); if (son[u] != -1) dfs2(son[u], u, 1); for (int v : g[u]) if (v != ff && v != son[u]) for (int i = dfn[v]; i <= dfn[v] + siz[v] - 1; ++i) add(col[rnk[i]]); add(col[u]), ans[u] = getans(); if (keep == 0) for (int i = dfn[u]; i <= dfn[u] + siz[u] - 1; ++i) del(col[rnk[i]]); } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; for (int i = 1; i <= n; ++i) cin >> col[i]; for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v), g[v].push_back(u); } wgq.push_back(0), res.push_back(0); dfs1(1, -1), dfs2(1, -1, 1); for (int i = 1; i <= n; ++i) cout << ans[i] << \" \"; return 0; } P4149 [IOI2011] Race \u00b6 \u542f\u53d1\u5f0f\u5408\u5e76\u601d\u8def\uff0c \\[ \\def\\dis#1{\\operatorname{dis}(#1)} \\dis{u}+\\dis{v}-2\\dis{\\mathit{LCA}}=k \\] \u4e2d\uff0c\u6700\u5c0f\u7684\uff0c \\[ \\def\\dep#1{\\operatorname{dep}(#1)} \\dep{u}+\\dep{v}-2\\dep{\\mathit{LCA}} \\] \u6211\u4eec\u56fa\u5b9a \\(\\mathit{LCA}\\) \uff08\u679a\u4e3e\uff09\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c \\[ \\def\\dis#1{\\operatorname{dis}(#1)} \\dis{u}+\\dis{v}=k+2\\dis{\\mathit{LCA}} \\] \u7684\u6700\u5c0f\uff0c \\[ \\def\\dep#1{\\operatorname{dep}(#1)} \\dep{u}+\\dep{v} \\] \u6211\u4eec\u904d\u5386\u5c0f\u5b50\u6811\u7684 \\(\\text{map}\\) \uff0c\u53bb\u5927\u5b50\u6811\u7684 \\(\\text{map}\\) \u67e5\u8be2\uff1b \u5176\u6b21\uff0c\u5c06\u5c0f\u5b50\u6811\u7684 \\(\\text{map}\\) \u52a0\u5165\u5927\u5b50\u6811\u7684 \\(\\text{map}\\) \u5373\u53ef\u3002 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 2e5 + 10; constexpr int INF = 1e9; // ----------------------------------------------------------------------------- int n, k; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> g[N]; void add(int u, int v, int w) { g[u].emplace_back(v, w); } void Add(int u, int v, int w) { add(u, v, w), add(v, u, w); } int ans = INF; map<int, int> mp[N]; #define get_no(x, y) (mp[x].count(y) ? mp[x][y] : INF) #define get(x, y) (mp[x][y] = get_no(x, y), mp[x][y]) void dfs(int u, int fa, int dis, int dep) { get(u, dis) = min(get(u, dis), dep); for (auto t : g[u]) { int v = t.v, w = t.w; if (v == fa) continue; dfs(v, u, dis + w, dep + 1); if (mp[v].size() > mp[u].size()) swap(mp[u], mp[v]); for (auto i : mp[v]) ans = min(ans, get_no(u, k - i.first + 2 * dis) + i.second - 2 * dep); for (auto i : mp[v]) get(u, i.first) = min(get(u, i.first), i.second); } } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> k; for (int i = 1; i < n; ++i) { int u, v, w; cin >> u >> v >> w; Add(u, v, w); } dfs(0, -1, 0, 0); cout << (ans >= n ? -1 : ans) << endl; return 0; }","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"graph/dsu-on-tree/#_1","text":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u901a\u5e38\u53ef\u4ee5\u7528\u81ea\u5e95\u5411\u4e0a / \u81ea\u9876\u5411\u4e0b\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5b8c\u6210\u3002 \u4f46\u662f\u76f8\u6bd4\u6765\u8bf4\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u4f1a\u66f4\u597d\u5b9e\u73b0\u4e00\u70b9\uff0c\u4f46\u7f3a\u70b9\u662f\u601d\u7ef4\u66f4\u591a\u3002","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"graph/dsu-on-tree/#_2","text":"\u542f\u53d1\u5f0f\u7b97\u6cd5\u662f\u57fa\u4e8e\u4eba\u7c7b\u7684\u7ecf\u9a8c\u548c\u76f4\u89c2\u611f\u89c9\uff0c\u5bf9\u7b97\u6cd5\u7684\u4f18\u5316\u3002 \u542f\u53d1\u5f0f\u5408\u5e76\u6700\u5e38\u89c1\u7684\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u3002 \u5bf9\u4e8e\u6811\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u7edf\u79f0\u4e3a\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u3002 \u5176\u4e2d\u6bd4\u8f83\u7279\u5b9a\u7684\u4e00\u7c7b\u6280\u5de7\u6210\u4e3a DSU on Tree\u3002 \u4e0b\u6587\u4e0d\u5206\u8fa8\u5b9a\u4e49\uff0c\u5168\u90fd\u6210\u4e3a\uff08\u6811\u4e0a\uff09\u542f\u53d1\u5f0f\u5408\u5e76\u3002","title":"\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"graph/dsu-on-tree/#_3","text":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7528\u4e8e\u79bb\u7ebf\u7684\u6c42\u89e3\u5b50\u6811\u7684\u95ee\u9898\uff0c\u4e0d\u5e26\u4fee\u6539\u3002 \u6709\u4e9b\u9898\u53ef\u4ee5\u7528\u6811\u4e0a\u83ab\u961f\u6216\u8005\u6811\u5957\u6811\u4e00\u7c7b\u7684\u5b9e\u73b0\uff0c\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u4e00\u822c\u5f88\u4f18\u3002 \u5176\u601d\u60f3\u5927\u6982\u662f\uff0c\u6211\u4eec\u65e0\u6cd5\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u4fe1\u606f\u3002 \u4e8e\u662f\u6211\u4eec\u5c06\u6700\u5927\u7684\u5b50\u6811\u7684\u4fe1\u606f\u4fdd\u7559\uff0c\u628a\u5176\u4ed6\u5b50\u6811\u7684\u4fe1\u606f\u6c42\u89e3\u5b8c\u5148\u6254\u6389\u5728\u7b97\u4e00\u904d\u52a0\u8fdb\u53bb\u3002 \u6211\u4eec\u904d\u5386\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c \u9012\u5f52\u904d\u5386\u8f7b\u513f\u5b50\uff0c\u4e0d\u4fdd\u7559\u8d21\u732e\uff1b \u9012\u5f52\u904d\u5386\u91cd\u513f\u5b50\uff0c\u4fdd\u7559\u8d21\u732e\uff1b \u518d\u904d\u5386\u8f7b\u513f\u5b50\uff0c\u5355\u72ec\u8ba1\u5165\u5176\u8d21\u732e\uff1b \u66f4\u65b0\u8be5\u8282\u70b9\u7684\u7b54\u6848\uff1b \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u4e0d\u4fdd\u7559\uff0c\u90a3\u4e48\u6d88\u9664\u8d21\u732e\u3002 \u5176\u4e2d\uff0c\u7b2c\u4e09\u6b65\u53ef\u4ee5\u6709\u591a\u79cd\u5b9e\u73b0\uff1a \u53ef\u4ee5\u76f4\u63a5\u8ba1\u5165\u8d21\u732e\u7684\uff0c\u7528\u7c7b\u4f3c\u4e0a\u9762\u5b50\u6811\u904d\u5386\u7684\u65b9\u6cd5\u5904\u7406\uff1b \u4e0d\u80fd\u76f4\u63a5\u8ba1\u5165\u8d21\u732e\u7684\uff0c\u5355\u72ec\u5199\u4e00\u4e2a\u9012\u5f52\u5b9e\u73b0\u3002 \u53ef\u4ee5\u53d1\u73b0\u6211\u8fd9\u91cc\u63d0\u5230\u7684\u4e24\u4e2a\uff0c\u5176\u5b9e\u672c\u8d28\u90fd\u662f\u7b2c\u4e8c\u4e2a\uff0c\u7b2c\u4e00\u4e2a\u5b9e\u73b0\u7b80\u5355\u800c\u5df2\u3002 \u603b\u7ed3\uff1a \u9996\u5148\u8fdb\u884c\u91cd\u94fe\u5256\u5206\uff1b \u5904\u7406\u8f7b\u513f\u5b50\u7684\u7b54\u6848\uff1b \u6e05\u7a7a\u8f7b\u513f\u5b50\u7684\u8d21\u732e\uff1b \u5904\u7406\u91cd\u513f\u5b50\u7684\u7b54\u6848\uff1b \u52a0\u5165\u8f7b\u513f\u5b50\u7684\u8d21\u732e\uff1b \u8ba1\u7b97\u8be5\u8282\u70b9\u7684\u7b54\u6848\u3002","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"graph/dsu-on-tree/#_4","text":"\u6ce8\u610f\u5230\u8fd9\u91cc\u4e0d\u9700\u8981\u94fe\u7684 DFS \u5e8f\u8fde\u7eed\u7684\u6027\u8d28\uff0c\u56e0\u6b64 DFN \u7684\u5904\u7406\u53ef\u4ee5\u653e\u5728\u7b2c\u4e00\u4e2a DFS \u4e2d\u3002 \u7b2c\u4e00\u4e2a DFS \u8bb0\u5f55\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\uff1a \u7236\u8282\u70b9\uff08 fa \uff09\u3001\u6df1\u5ea6\uff08 dep \uff09\u3001\u5b50\u6811\u5927\u5c0f\uff08 siz \uff09\u3001\u91cd\u5b50\u8282\u70b9\uff08 son \uff09\u3002 \u8282\u70b9\u7f16\u53f7 DFN\uff08 dfn \uff09\u3001DFS \u5e8f\u4e2d\u7684\u8282\u70b9\u7f16\u53f7\uff08 rnk \uff09\u3002 \u4e0d\u662f\u6bcf\u4e2a\u4fe1\u606f\u90fd\u5fc5\u987b\u7684\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801\uff0c int dep[N], siz[N], son[N]; int dfn[N], rnk[N], idx; void dfs1(int u, int ff) { int mx = -1; siz[u] = 1, son[u] = -1; dfn[u] = ++idx, rnk[idx] = u; for (int v : g[u]) if (v != ff) { dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } } \u7b2c\u4e8c\u4e2a DFS\uff0c\u6c42\u89e3\u7b54\u6848\uff0c\u4ee3\u7801\u5f62\u5982\uff0c void dfs2(int u, int ff, int keep) { for (int v : g[u]) if (v != ff && v != son[u]) dfs2(v, u, 0); if (son[u] != -1) dfs2(son[u], u, 1); add(u, ff), ans[u] = getans(); if (keep == 0) del(u, ff); } \u8fd9\u4e2a\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n\\log n)\\) \u7684\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a \u6bcf\u4e2a\u8282\u70b9\u7684\u8bbf\u95ee\uff0c\u662f\u7531\u5176\u4e0a\u9762\u7684\u8f7b\u5b50\u8282\u70b9\u5f15\u8d77\u7684\u3002 \u800c\u6839\u5230\u8282\u70b9\u7684\u8f7b\u5b50\u8282\u70b9\u4e2a\u6570\u662f \\(\\mathcal O(n\\log n)\\) \u7684\uff0c\u56e0\u6b64\uff0c\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a\uff1a \\(\\mathcal O(n\\log n)\\) \u3002","title":"\u5b9e\u73b0"},{"location":"graph/dsu-on-tree/#_5","text":"","title":"\u4f8b\u9898"},{"location":"graph/dsu-on-tree/#cf600e-lomsat-gelral","text":"\u6a21\u677f\u9898\uff0c\u6b64\u9898\u4f5c\u8005\u5199\u51fa\u4e86\u4e24\u79cd\u4ee3\u7801\u3002","title":"CF600E Lomsat gelral"},{"location":"graph/dsu-on-tree/#solution-1","text":"\u9898\u89e3\u533a\u7684\u5e38\u89c1\u7b97\u6cd5\u3002 \u8003\u8651\u4e0a\u9762\u7684\u7ecf\u5178\u5f62\u5f0f\uff0c\u6211\u4eec\u5728\u5b50\u6811\u7684\u52a0\u5165\u8d21\u732e\u548c\u5220\u9664\u65f6\uff0c\u66b4\u529b\u679a\u4e3e\u8fd9\u4e2a\u5b50\u6811\u3002 \u6ce8\u610f\u5230\u5f80\u4e0a\u8d70\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b50\u6811\u7684\u7b54\u6848\u8fd8\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\uff0c \u56e0\u6b64\u6211\u4eec\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u7684\u7ed3\u679c\uff0c\u76f4\u63a5\u6e05\u7a7a\u5373\u53ef\u3002 #include <bits/stdc++.h> using namespace std; constexpr int N = 1e5 + 10; using ll = long long; int n, col[N]; vector<int> g[N]; int dep[N], siz[N], son[N]; int dfn[N], rnk[N], idx; void dfs1(int u, int ff) { int mx = -1; siz[u] = 1, son[u] = -1; dfn[u] = ++idx, rnk[idx] = u; for (int v : g[u]) if (v != ff) { dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } } int cnt[N], mont; ll ans[N], wgq, res; void add(int u, int ff, int s, int Son) { cnt[col[u]] += s; if (cnt[col[u]] > wgq) wgq = cnt[col[u]], res = col[u]; else if (cnt[col[u]] == wgq) res += col[u]; for (int v : g[u]) if (v != ff && v != Son) add(v, u, s, Son); } auto getans() { return res; } void dfs2(int u, int ff, int keep) { for (int v : g[u]) if (v != ff && v != son[u]) dfs2(v, u, 0); if (son[u] != -1) dfs2(son[u], u, 1); add(u, ff, 1, son[u]), ans[u] = getans(); if (keep == 0) add(u, ff, -1, 0), wgq = res = 0; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; for (int i = 1; i <= n; ++i) cin >> col[i]; for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v), g[v].push_back(u); } dfs1(1, -1), dfs2(1, -1, 1); for (int i = 1; i <= n; ++i) cout << ans[i] << \" \"; return 0; }","title":"Solution 1"},{"location":"graph/dsu-on-tree/#solution-2","text":"\u6808\u7edf\u8ba1\u7b54\u6848\u3002 \u6ce8\u610f\u5230\u6211\u4eec\u662f\u4e00\u4e2a\u6570\u4e00\u4e2a\u6570\u5904\u7406\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u679a\u4e3e\u5b50\u6811\u533a\u95f4\uff0c \u6211\u4eec\u6bcf\u52a0\u5165\u533a\u95f4\u7684\u4e00\u4e2a\u6570\uff0c\u5c31\u5728\u6808\u4e2d\u538b\u5165\u65e7\u7684\u7b54\u6848\u3002 \u6ce8\u610f\u5230\u52a0\u5165\u548c\u5220\u9664\u7684\u64cd\u4f5c\u4e00\u5b9a\u662f\u5bf9\u79f0\u5904\u7406\u7684\uff0c\u56e0\u6b64\uff0c\u7c7b\u4f3c\u53ef\u64a4\u5e76\u67e5\u96c6\uff0c \u5220\u9664\u7684\u65f6\u5019\u590d\u539f\u65e7\u7684\u7b54\u6848\u3001\u5f39\u6808\u5373\u53ef\u3002 #include <bits/stdc++.h> using namespace std; constexpr int N = 1e5 + 10; using ll = long long; int n, col[N]; vector<int> g[N]; int dep[N], siz[N], son[N]; int dfn[N], rnk[N], idx; void dfs1(int u, int ff) { int mx = -1; siz[u] = 1, son[u] = -1; dfn[u] = ++idx, rnk[idx] = u; for (int v : g[u]) if (v != ff) { dep[v] = dep[u] + 1; dfs1(v, u), siz[u] += siz[v]; if (siz[v] > mx) mx = siz[v], son[u] = v; } } int cnt[N]; ll ans[N]; vector<ll> wgq, res; void add(int i) { ++cnt[i]; if (cnt[i] < wgq.back()) wgq.push_back(wgq.back()), res.push_back(res.back()); else if (cnt[i] == wgq.back()) wgq.push_back(wgq.back()), res.push_back(res.back() + i); else wgq.push_back(cnt[i]), res.push_back(i); } void del(int k) { wgq.pop_back(), res.pop_back(); --cnt[k]; } ll getans() { return res.back(); } void dfs2(int u, int ff, int keep) { for (int v : g[u]) if (v != ff && v != son[u]) dfs2(v, u, 0); if (son[u] != -1) dfs2(son[u], u, 1); for (int v : g[u]) if (v != ff && v != son[u]) for (int i = dfn[v]; i <= dfn[v] + siz[v] - 1; ++i) add(col[rnk[i]]); add(col[u]), ans[u] = getans(); if (keep == 0) for (int i = dfn[u]; i <= dfn[u] + siz[u] - 1; ++i) del(col[rnk[i]]); } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; for (int i = 1; i <= n; ++i) cin >> col[i]; for (int i = 1; i < n; ++i) { int u, v; cin >> u >> v; g[u].push_back(v), g[v].push_back(u); } wgq.push_back(0), res.push_back(0); dfs1(1, -1), dfs2(1, -1, 1); for (int i = 1; i <= n; ++i) cout << ans[i] << \" \"; return 0; }","title":"Solution 2"},{"location":"graph/dsu-on-tree/#p4149-ioi2011-race","text":"\u542f\u53d1\u5f0f\u5408\u5e76\u601d\u8def\uff0c \\[ \\def\\dis#1{\\operatorname{dis}(#1)} \\dis{u}+\\dis{v}-2\\dis{\\mathit{LCA}}=k \\] \u4e2d\uff0c\u6700\u5c0f\u7684\uff0c \\[ \\def\\dep#1{\\operatorname{dep}(#1)} \\dep{u}+\\dep{v}-2\\dep{\\mathit{LCA}} \\] \u6211\u4eec\u56fa\u5b9a \\(\\mathit{LCA}\\) \uff08\u679a\u4e3e\uff09\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c \\[ \\def\\dis#1{\\operatorname{dis}(#1)} \\dis{u}+\\dis{v}=k+2\\dis{\\mathit{LCA}} \\] \u7684\u6700\u5c0f\uff0c \\[ \\def\\dep#1{\\operatorname{dep}(#1)} \\dep{u}+\\dep{v} \\] \u6211\u4eec\u904d\u5386\u5c0f\u5b50\u6811\u7684 \\(\\text{map}\\) \uff0c\u53bb\u5927\u5b50\u6811\u7684 \\(\\text{map}\\) \u67e5\u8be2\uff1b \u5176\u6b21\uff0c\u5c06\u5c0f\u5b50\u6811\u7684 \\(\\text{map}\\) \u52a0\u5165\u5927\u5b50\u6811\u7684 \\(\\text{map}\\) \u5373\u53ef\u3002 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 2e5 + 10; constexpr int INF = 1e9; // ----------------------------------------------------------------------------- int n, k; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> g[N]; void add(int u, int v, int w) { g[u].emplace_back(v, w); } void Add(int u, int v, int w) { add(u, v, w), add(v, u, w); } int ans = INF; map<int, int> mp[N]; #define get_no(x, y) (mp[x].count(y) ? mp[x][y] : INF) #define get(x, y) (mp[x][y] = get_no(x, y), mp[x][y]) void dfs(int u, int fa, int dis, int dep) { get(u, dis) = min(get(u, dis), dep); for (auto t : g[u]) { int v = t.v, w = t.w; if (v == fa) continue; dfs(v, u, dis + w, dep + 1); if (mp[v].size() > mp[u].size()) swap(mp[u], mp[v]); for (auto i : mp[v]) ans = min(ans, get_no(u, k - i.first + 2 * dis) + i.second - 2 * dep); for (auto i : mp[v]) get(u, i.first) = min(get(u, i.first), i.second); } } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> k; for (int i = 1; i < n; ++i) { int u, v, w; cin >> u >> v >> w; Add(u, v, w); } dfs(0, -1, 0, 0); cout << (ans >= n ? -1 : ans) << endl; return 0; }","title":"P4149 [IOI2011] Race"},{"location":"graph/tree/","text":"\u6811\u8bba\u57fa\u7840 \u00b6 DFS\u5e8f\u3001\u65f6\u95f4\u6233\u548c\u6b27\u62c9\u5e8f \u00b6 \u4e0b\u6587\u56fe\u4f8b \u00b6 DFS \u5e8f\uff1a1 2 4 5 7 9 8 3 6. \u6b27\u62c9\u5e8f(2)\uff1a1 2 4 4 5 7 9 9 7 8 8 5 2 3 6 6 3 1. \u6b27\u62c9\u5e8f(1) \uff1a1 2 4 2 5 7 9 7 5 8 5 2 1 2 3 6 3 1. \u4e0b\u6587\u4e3e\u4f8b\u5747\u6307\u6b64\u56fe\u3002 DFS \u5e8f \u00b6 \u5468\u6240\u5468\u77e5\uff0cDFS \u4e3a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5176\u6846\u67b6\u5982\uff1a void dfs(int u, int fa) { for (int v : g[u]) if (v != fa) dfs(v, u); } \u800c DFS \u5e8f\u5c31\u8868\u793a\uff0cDFS \u904d\u5386\u8282\u70b9\u7684\u987a\u5e8f\u3002 \u6bd4\u5982\u7b2c 3 \u4e2a\u904d\u5386\u5230\u7684\u8282\u70b9\u4e3a Q\uff0c\u5219 DFS \u5e8f\u7684\u7b2c\u4e09\u4e2a\u5c31\u662f Q\u3002 \u5176\u6846\u67b6\u8868\u793a\u4e3a\uff1a void dfs1(int u, int fa) { em.push_back(u); for (int v : g[u]) if (v != fa) dfs(v, u); } \u4e3e\u4f8b\uff1a\u4e0a\u56fe\u7684 DFS \u5e8f\u5373\u4e3a\uff1a1 2 4 5 7 9 8 3 6. DFN \u5e8f \u00b6 \u4e00\u822c\u8ba4\u4e3a DFN \u5e8f\u4e0e DFS \u5e8f\u7b49\u4ef7\uff0c\u6216\u8005 DFN \u5e8f\u662f DFS \u5e8f\u7684\u9006\u3002 \u8fd9\u91cc\u91c7\u53d6\u7b2c\u4e8c\u79cd\u770b\u6cd5\u3002 \u4e5f\u5c31\u662f DFS \u5e8f\u7684\u7b2c \\(i\\) \u9879\uff08\u5e8f\u5217\u7684\u7b2c \\(i\\) \u4e2a\u5143\u7d20\uff09\u7684 DFN \u4e3a \\(i\\) \u3002 \u4e5f\u5c31\u662f\uff0cDFS \u5e8f\u662f\u904d\u5386\u7684\u987a\u5e8f\uff0c\u4e00\u4e2a\u5e8f\u5217\uff0c\u8bb0\u5f55\u7b2c \\(x\\) \u4e2a\u8bbf\u95ee\u7684\u662f\u4ec0\u4e48\u3002 \u800c DFN \u5e8f\u5219\u662f\u8bb0\u5f55\u7b2c \\(i\\) \u4e2a\u5143\u7d20\u4ec0\u4e48\u65f6\u5019\uff08 \\(x\\) \uff09\u8bbf\u95ee\u7684\u3002 \u6b27\u62c9\u5e8f (2) \u00b6 \u4e3a\u4ec0\u4e48\u540e\u9762\u6709\u4e2a (2)\uff1f\u770b\u4e0b\u4e00\u4e2a\uff0c\u6709 (1) \u4f60\u5c31\u77e5\u9053\u4e86 . \u901a\u5e38\u8ba4\u4e3a\u7684\u6b27\u62c9\u5e8f\u4e3a\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u5165\u6808\u3001\u51fa\u6808\u7684\u987a\u5e8f\u3002 \u7279\u6027\uff1a\u53f6\u5b50\u7ed3\u70b9\u56de\u88ab\u8bb0\u5f55\u4e24\u6b21\u3002 \u5176\u6846\u67b6\u8868\u793a\u4e3a\uff1a void dfs2(int u, int fa) { em.push_back(u); for (int v : g[u]) if (v != fa) dfs(v, u); em.push_back(u); } \u4e3e\u4f8b\uff1a\u4e0a\u56fe\u7684 \u6b27\u62c9\u5e8f \u5e8f\u5373\u4e3a\uff1a1 2 4 4 5 7 9 9 7 8 8 5 2 3 6 6 3 1. \u6b27\u62c9\u5e8f (1) \u00b6 \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\uff0c\u4f3c\u4e4e\u53ea\u6709\u5728 st \u8868\u6c42 LCA \u7684\u65f6\u5019\u80fd\u7528\u4e0a\uff08\uff09 \u5f53\u7136\u672c\u4eba\u6c34\u5e73\u4e0d\u591f \uff0c\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff08\uff09 \u56de\u52a0\u662f\u6211\u7ed9\u52a0\u7684\u5f62\u5bb9\u8bcd\uff0c\u4e4b\u6240\u4ee5\u53eb\u56de\u52a0\uff0c\u662f\u56e0\u4e3a\u5728 DFS \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u56de\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u4e5f\u8bb0\u5f55\u4e00\u6b21\u3002 \u7279\u6027\uff1a\u53f6\u5b50\u7ed3\u70b9\u904d\u5386\u5b8c\u76f4\u63a5\u56de\u5230\u7236\u4eb2\u8282\u70b9\uff0c\u4e0d\u91cd\u590d\u8bb0\u5f55\u3002 \u540c\u65f6\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7279\u6027\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u51fa\u6808\u7684\u65f6\u5019\uff0c\u4e0d\u8bb0\u5f55\uff0c\u56e0\u6b64\u53f6\u5b50\u8282\u70b9\u4e0d\u4f1a\u50cf\u6b27\u62c9\u5e8f\u90a3\u6837\u51fa\u73b0\u4e24\u6b21\u3002 void dfs3(int u, int fa) { em.push_back(u); for (int v : g[u]) { if (v != fa) dfs(v, u); em.push_back(u); } } \u4e3e\u4f8b\uff1a\u4e0a\u56fe\u7684 \u6b27\u62c9\u5e8f(1) \u5e8f\u5373\u4e3a\uff1a1 2 4 2 5 7 9 7 5 8 5 2 1 2 3 6 3 1. \u9644\uff1aDFS \u751f\u6210\u6811 \u00b6 \u89c1\uff1a https://oi-wiki.org/graph/scc/#dfs-%E7%94%9F%E6%88%90%E6%A0%91 \u3002 \u540e\u671f\u5982\u679c\u5199 Tarjan \u7684\u65f6\u5019\u518d\u5199\u3002 Reference \u00b6 [1] https://www.cnblogs.com/stxy-ferryman/p/7741970.html [2] https://zhuanlan.zhihu.com/p/467156796","title":"\u6811\u8bba\u57fa\u7840"},{"location":"graph/tree/#_1","text":"","title":"\u6811\u8bba\u57fa\u7840"},{"location":"graph/tree/#dfs","text":"","title":"DFS\u5e8f\u3001\u65f6\u95f4\u6233\u548c\u6b27\u62c9\u5e8f"},{"location":"graph/tree/#_2","text":"DFS \u5e8f\uff1a1 2 4 5 7 9 8 3 6. \u6b27\u62c9\u5e8f(2)\uff1a1 2 4 4 5 7 9 9 7 8 8 5 2 3 6 6 3 1. \u6b27\u62c9\u5e8f(1) \uff1a1 2 4 2 5 7 9 7 5 8 5 2 1 2 3 6 3 1. \u4e0b\u6587\u4e3e\u4f8b\u5747\u6307\u6b64\u56fe\u3002","title":"\u4e0b\u6587\u56fe\u4f8b"},{"location":"graph/tree/#dfs_1","text":"\u5468\u6240\u5468\u77e5\uff0cDFS \u4e3a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5176\u6846\u67b6\u5982\uff1a void dfs(int u, int fa) { for (int v : g[u]) if (v != fa) dfs(v, u); } \u800c DFS \u5e8f\u5c31\u8868\u793a\uff0cDFS \u904d\u5386\u8282\u70b9\u7684\u987a\u5e8f\u3002 \u6bd4\u5982\u7b2c 3 \u4e2a\u904d\u5386\u5230\u7684\u8282\u70b9\u4e3a Q\uff0c\u5219 DFS \u5e8f\u7684\u7b2c\u4e09\u4e2a\u5c31\u662f Q\u3002 \u5176\u6846\u67b6\u8868\u793a\u4e3a\uff1a void dfs1(int u, int fa) { em.push_back(u); for (int v : g[u]) if (v != fa) dfs(v, u); } \u4e3e\u4f8b\uff1a\u4e0a\u56fe\u7684 DFS \u5e8f\u5373\u4e3a\uff1a1 2 4 5 7 9 8 3 6.","title":"DFS \u5e8f"},{"location":"graph/tree/#dfn","text":"\u4e00\u822c\u8ba4\u4e3a DFN \u5e8f\u4e0e DFS \u5e8f\u7b49\u4ef7\uff0c\u6216\u8005 DFN \u5e8f\u662f DFS \u5e8f\u7684\u9006\u3002 \u8fd9\u91cc\u91c7\u53d6\u7b2c\u4e8c\u79cd\u770b\u6cd5\u3002 \u4e5f\u5c31\u662f DFS \u5e8f\u7684\u7b2c \\(i\\) \u9879\uff08\u5e8f\u5217\u7684\u7b2c \\(i\\) \u4e2a\u5143\u7d20\uff09\u7684 DFN \u4e3a \\(i\\) \u3002 \u4e5f\u5c31\u662f\uff0cDFS \u5e8f\u662f\u904d\u5386\u7684\u987a\u5e8f\uff0c\u4e00\u4e2a\u5e8f\u5217\uff0c\u8bb0\u5f55\u7b2c \\(x\\) \u4e2a\u8bbf\u95ee\u7684\u662f\u4ec0\u4e48\u3002 \u800c DFN \u5e8f\u5219\u662f\u8bb0\u5f55\u7b2c \\(i\\) \u4e2a\u5143\u7d20\u4ec0\u4e48\u65f6\u5019\uff08 \\(x\\) \uff09\u8bbf\u95ee\u7684\u3002","title":"DFN \u5e8f"},{"location":"graph/tree/#2","text":"\u4e3a\u4ec0\u4e48\u540e\u9762\u6709\u4e2a (2)\uff1f\u770b\u4e0b\u4e00\u4e2a\uff0c\u6709 (1) \u4f60\u5c31\u77e5\u9053\u4e86 . \u901a\u5e38\u8ba4\u4e3a\u7684\u6b27\u62c9\u5e8f\u4e3a\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u5165\u6808\u3001\u51fa\u6808\u7684\u987a\u5e8f\u3002 \u7279\u6027\uff1a\u53f6\u5b50\u7ed3\u70b9\u56de\u88ab\u8bb0\u5f55\u4e24\u6b21\u3002 \u5176\u6846\u67b6\u8868\u793a\u4e3a\uff1a void dfs2(int u, int fa) { em.push_back(u); for (int v : g[u]) if (v != fa) dfs(v, u); em.push_back(u); } \u4e3e\u4f8b\uff1a\u4e0a\u56fe\u7684 \u6b27\u62c9\u5e8f \u5e8f\u5373\u4e3a\uff1a1 2 4 4 5 7 9 9 7 8 8 5 2 3 6 6 3 1.","title":"\u6b27\u62c9\u5e8f (2)"},{"location":"graph/tree/#1","text":"\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\uff0c\u4f3c\u4e4e\u53ea\u6709\u5728 st \u8868\u6c42 LCA \u7684\u65f6\u5019\u80fd\u7528\u4e0a\uff08\uff09 \u5f53\u7136\u672c\u4eba\u6c34\u5e73\u4e0d\u591f \uff0c\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff08\uff09 \u56de\u52a0\u662f\u6211\u7ed9\u52a0\u7684\u5f62\u5bb9\u8bcd\uff0c\u4e4b\u6240\u4ee5\u53eb\u56de\u52a0\uff0c\u662f\u56e0\u4e3a\u5728 DFS \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u56de\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u4e5f\u8bb0\u5f55\u4e00\u6b21\u3002 \u7279\u6027\uff1a\u53f6\u5b50\u7ed3\u70b9\u904d\u5386\u5b8c\u76f4\u63a5\u56de\u5230\u7236\u4eb2\u8282\u70b9\uff0c\u4e0d\u91cd\u590d\u8bb0\u5f55\u3002 \u540c\u65f6\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7279\u6027\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u51fa\u6808\u7684\u65f6\u5019\uff0c\u4e0d\u8bb0\u5f55\uff0c\u56e0\u6b64\u53f6\u5b50\u8282\u70b9\u4e0d\u4f1a\u50cf\u6b27\u62c9\u5e8f\u90a3\u6837\u51fa\u73b0\u4e24\u6b21\u3002 void dfs3(int u, int fa) { em.push_back(u); for (int v : g[u]) { if (v != fa) dfs(v, u); em.push_back(u); } } \u4e3e\u4f8b\uff1a\u4e0a\u56fe\u7684 \u6b27\u62c9\u5e8f(1) \u5e8f\u5373\u4e3a\uff1a1 2 4 2 5 7 9 7 5 8 5 2 1 2 3 6 3 1.","title":"\u6b27\u62c9\u5e8f (1)"},{"location":"graph/tree/#dfs_2","text":"\u89c1\uff1a https://oi-wiki.org/graph/scc/#dfs-%E7%94%9F%E6%88%90%E6%A0%91 \u3002 \u540e\u671f\u5982\u679c\u5199 Tarjan \u7684\u65f6\u5019\u518d\u5199\u3002","title":"\u9644\uff1aDFS \u751f\u6210\u6811"},{"location":"graph/tree/#reference","text":"[1] https://www.cnblogs.com/stxy-ferryman/p/7741970.html [2] https://zhuanlan.zhihu.com/p/467156796","title":"Reference"},{"location":"graph/divide/point/","text":"\u70b9\u5206\u6cbb \u00b6 \u70b9\u5206\u6cbb\u9002\u5408\u5904\u7406\u5927\u89c4\u6a21\u7684\u6811\u4e0a\u8def\u5f84\u4fe1\u606f\u95ee\u9898\u3002 \u6d41\u7a0b \u00b6 \u6211\u4eec\u5c06\u4e00\u68f5\u6709\u6839\u6811\u4e0a\u7684\u8def\u5f84\u5206\u4e3a\u4e24\u79cd\uff1a \u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\uff08\u4ee5\u6839\u8282\u70b9\u4f5c\u4e3a LCA \u7684\uff09\uff1b \u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\uff08\u5b8c\u5168\u5728\u5b50\u6811\u5185\u7684\uff09\u3002 \u6211\u4eec\u6839\u636e\u8fd9\u4e24\u4e2a\uff0c\u5bf9\u6811\u8fdb\u884c\u5206\u6cbb\uff1a \u7edf\u8ba1\u7ecf\u8fc7\u6839\u7684\u8def\u5f84\u7684\u7b54\u6848\uff1b \u5220\u53bb\u6839\u8282\u70b9\uff0c\u5206\u6cbb\u5b50\u6811\u3002 \u8003\u8651\u590d\u6742\u5ea6\uff0c\u663e\u7136\u662f\u80fd\u88ab\u94fe\u5361\u6b7b\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u6bcf\u6b21\u5212\u5206\u7684\u5b50\u6811\u5c3d\u53ef\u80fd\u5e73\u8861\uff0c \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u9012\u5f52\u4e00\u4e2a\u6811\uff0c\u94a6\u5b9a\u8fd9\u4e2a\u5b50\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\uff1b \u5047\u8bbe\u6211\u4eec\u5904\u7406\u7ecf\u8fc7\u6839\u7684\u7b54\u6848\u5b58\u5728 \\(\\mathcal O(T(n))\\) \u7684\u505a\u6cd5\u3002 \u91cd\u5fc3\u53ef\u4ee5\u628a\u6811\u5206\u4e3a\u4e24\u4e2a\u4e0d\u8d85\u8fc7\u4e00\u534a\u7684\u5b50\u6811\uff0c\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(T(n)\\log n)\\) \u3002 \u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u5982\u4f55\u5904\u7406\u7ecf\u8fc7\u6839\u7684\u8def\u5f84\uff1f\u8fd9\u662f\u70b9\u5206\u6cbb\u7684\u6838\u5fc3\uff0c\u4e00\u822c\u4e5f\u662f\u6700\u96be\u7684\u70b9\u3002 \u5b9e\u73b0 \u00b6 \u627e\u51fa\u6811\u7684\u4e2d\u5fc3\u505a\u6839 getroot(); \u5bf9\u5f53\u524d\u6811\u7edf\u8ba1\u7b54\u6848 calc(); \u5206\u6cbb\u5404\u4e2a\u5b50\u6811\u9012\u5f52 divide(); \u7ec6\u8282\uff1a \u6211\u4eec\u7528 vis \u8868\u793a\u4e00\u4e2a\u70b9\u662f\u5426\u88ab\u5220\u6389\uff08\u6807\u8bb0\u6839\u7684\u5220\u9664\uff09\uff1b \u901a\u5e38\u5c06\u95ee\u9898\u79bb\u7ebf\u4e0b\u6765\u7edf\u4e00\u8ba1\u7b97\u3002 \u6811\u7684\u91cd\u5fc3 \u00b6 \u6709\u6027\u8d28\uff1a \u91cd\u5fc3\u7684\u6240\u6709\u5b50\u6811\u5927\u5c0f\u4e0d\u8d85\u8fc7\u6574\u68f5\u6811\u7684\u4e00\u534a\uff1b \u91cd\u5fc3\u7684\u6700\u5927\u5b50\u6811\u6700\u5c0f\u3002 \u6839\u636e\u4e0a\u9762\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5 \\(\\mathcal O(n)\\) \u7684\u627e\u91cd\u5fc3\u3002 \u6211\u4e00\u822c\u7528\u7b2c\u4e8c\u4e2a\uff1a int tot, siz[N]; int root, max_son[N]; void dfs(int u, int fa) { siz[u] = 1; max_son[u] = -1; for (auto t : g[u]) { int v = t.v; if (v == fa) continue; if (vis[v]) continue; dfs(v, u); max_son[u] = max(max_son[u], siz[v]); siz[u] += siz[v]; } max_son[u] = max(max_son[u], tot - siz[u]); if (root == -1 || max_son[u] < max_son[root]) root = u; } int get_root(int u) { tot = u == 1 ? n : siz[u]; root = -1; dfs(u, -1); return root; } \u70b9\u5206\u6cbb \u00b6 \u5f88\u7b80\u5355\u3002 void divide(int u) { vis[u] = true; calc(u); for (auto t : g[u]) { int v = t.v; if (vis[v]) continue; divide(get_root(v)); } } \u8ba1\u7b97\u7b54\u6848 \u00b6 \u6700\u96be\u7684\u90e8\u5206\u3002 \u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u3002 \u4e0b\u9762\u6211\u4eec\u7ed9\u51e0\u9053\u4f8b\u9898\u3002 \u4f8b\u9898 \u00b6 P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb 1 \u00b6 \u63a8\u8350\u4f7f\u7528 QOJ \u7684\u9898\u76ee\uff1a QOJ #329. \u70b9\u5206\u6cbb \u3002 \u5176\u4e2d calc \u51fd\u6570\u5982\u4e0b\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 bool ans[N]; int dis[N], cnt; void get_dis(int u, int fa, int val) { if (val > (int)1e7) // \u8d85\u8fc7\u4e86\u6700\u5927\u957f\u5ea6\uff0c\u65e0\u610f\u4e49 return; dis[++cnt] = val; // \u5c06\u957f\u5ea6\u8bb0\u5f55\u4e0b\u6765 for (auto t : g[u]) { int v = t.v; if (v == fa) continue; if (vis[v]) continue; get_dis(v, u, val + t.w); } } int mp[M]; void calc(int u) { mp[0] = 1; int mx = 0; for (auto t : g[u]) { int v = t.v; if (vis[v]) continue; cnt = 0; get_dis(v, u, t.w); // \u904d\u5386\u5b50\u6811\uff0c\u7edf\u8ba1\u957f\u5ea6 for (int i = 1; i <= cnt; ++i) for (int j = 0; j < m; ++j) if (q[j] >= dis[i]) ans[j] |= mp[q[j] - dis[i]]; // \u66f4\u65b0\u7b54\u6848 for (int i = 1; i <= cnt; ++i) mp[dis[i]] = true, mx = max(mx, dis[i]); // \u52a0\u5165\u5b50\u6811\u7684\u8d21\u732e } memset(mp, 0, sizeof(int) * (mx + 1)); // \u6e05\u9664\u64cd\u4f5c\uff0c\u6ce8\u610f\u6700\u5927\u662f\u503c\u57df } \u6211\u4eec\u7528 \\(\\text{map}\\) \u8868\u793a\u5728\u4e00\u68f5\u6811\u7684\u524d\u9762\u7684\u5b50\u6811\u4e2d\u51fa\u73b0\u7684\u8def\u5f84\u957f\u5ea6\u3002 \u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u5b50\u6811\uff0c\u5148\u66f4\u65b0\u7b54\u6848\uff0c\u518d\u52a0\u5165\u8fd9\u4e2a\u5b50\u6811\u7684\u8d21\u732e\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u51fa\u73b0\u540c\u4e00\u9897\u5b50\u6811\u7528\u540c\u4e00\u9897\u5b50\u6811\u7684\u4fe1\u606f\u7684\u60c5\u51b5\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(nm\\log n)\\) \u3002 CF161D Distance in Tree \u00b6 \u548c\u4e0a\u9762\u4e00\u6837\uff0c\u53ea\u662f\u8ba1\u6570\u3002 \u8fd9\u9053\u9898\u6570\u636e\u8303\u56f4\u5c0f\uff0c\u6240\u4ee5\u6734\u7d20\u6811\u4e0a DP \u4f3c\u4e4e\u4e5f\u53ef\u4ee5\u89e3\u51b3\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 ll ans; int dis[N], cnt; void get_dis(int u, int fa, int dep) { if (dep > 500) return; dis[++cnt] = dep; for (int v : g[u]) { if (v == fa) continue; if (vis[v]) continue; get_dis(v, u, dep + 1); } } int mp[1010]; void calc(int u) { mp[0] = 1; cnt = 0; for (int v : g[u]) { if (vis[v]) continue; int st = cnt + 1; get_dis(v, u, 1); for (int i = st; i <= cnt; ++i) if (k >= dis[i]) ans += mp[k - dis[i]]; // \u8fd9\u91cc\u8ba1\u6570 for (int i = st; i <= cnt; ++i) ++mp[dis[i]]; } for (int i = 1; i <= cnt; ++i) --mp[dis[i]]; } P4178 Tree \u00b6 \u6ce8\u610f\u5230\u8981\u6c42 \\(\\le K\\) \u800c\u4e0d\u662f \\(=K\\) \uff0c\u89c2\u5bdf\u70b9\u5206\u6811\u677f\u5b50\u9898\uff0c \u6211\u4eec\u53d1\u73b0 mp \u6570\u7ec4\u7684\u524d\u7f00\u548c\u5c31\u662f \\(\\le K\\) \u7684\u7b54\u6848\uff0c\u56e0\u6b64\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002 \u56e0\u4e3a\u53ea\u9700\u8981\u7ef4\u62a4\u5355\u70b9\u4fee\u6539\u524d\u7f00\u67e5\u8be2\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u5f88\u5feb\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 namespace ds { inline constexpr int hole(int k) { return k + (k >> 10); } ll s[hole(V)]; uint64_t Tag, tag[hole(V)]; void modify(int x, int v) { for (++x; x < V; x += x & -x) { if (tag[hole(x)] != Tag) s[hole(x)] = 0; s[hole(x)] += v; tag[hole(x)] = Tag; } } ll sum(int x) { ll r = 0; for (++x; x; x &= x - 1) if (tag[hole(x)] == Tag) r += s[hole(x)]; return r; } void clear() { ++Tag; } } ll ans; int dis[N], cnt; void get_dis(int u, int fa, int val) { if (val > k) return; dis[++cnt] = val; for (auto t : g[u]) { int v = t.v; if (v == fa) continue; if (vis[v]) continue; get_dis(v, u, val + t.w); } } void calc(int u) { ds::modify(0, 1); cnt = 0; for (auto t : g[u]) { int v = t.v; if (vis[v]) continue; int st = cnt + 1; get_dis(v, u, t.w); for (int i = st; i <= cnt; ++i) if (k >= dis[i]) ans += ds::sum(k - dis[i]); for (int i = st; i <= cnt; ++i) ds::modify(dis[i], 1); } ds::clear(); } P4149 [IOI2011] Race \u00b6 \u7ef4\u62a4 \\(\\operatorname{dis}u+\\operatorname{dis}v=k\\) \u4e2d\uff0c \\(\\operatorname{dep}u+\\operatorname{dep}v\\) \u6700\u5c0f\u503c\u3002 \u7ef4\u62a4\u4e00\u4e2a \\(\\text{map}\\) \uff0c\u8bb0\u5f55\u6620\u5c04\uff0c \\[ \\text{map}:\\operatorname{dis}u\\to\\operatorname{dep}v \\] \u6bcf\u6b21\u52a0\u5165\uff0c \\[ \\def\\dis{\\operatorname{dis}} \\def\\dep{\\operatorname{dep}} \\begin{aligned} \\text{map}(\\dis v)&\\overset{\\min}{\\longleftarrow}\\dep v\\\\ ans&\\longleftarrow\\dep v+\\text{map}(k-\\dis v) \\end{aligned} \\] \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 2e5 + 10; constexpr int M = 1e6 + 10; constexpr int INF = 1e9; // ----------------------------------------------------------------------------- int n, k; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> g[N]; void add(int u, int v, int w) { g[u].emplace_back(v, w); } void Add(int u, int v, int w) { add(u, v, w), add(v, u, w); } int get_root(int); // ----------------------------------------------------------------------------- int mp[M]; int vis[N], dis[N], dep[N]; int cnt, ans = INF; void init(int u, int fa, int is, int ep) { if (is > k) return; ++cnt; dis[cnt] = is, dep[cnt] = ep; for (auto t : g[u]) { if (t.v == fa || vis[t.v]) continue; init(t.v, u, is + t.w, ep + 1); } } void calc(int u) { mp[0] = cnt = 0; for (auto t : g[u]) { int v = t.v, w = t.w; if (vis[v]) continue; int st = cnt + 1; init(v, u, w, 1); for (int i = st; i <= cnt; ++i) ans = min(ans, mp[k - dis[i]] + dep[i]); for (int i = st; i <= cnt; ++i) mp[dis[i]] = min(mp[dis[i]], dep[i]); } for (int i = 1; i <= cnt; ++i) mp[dis[i]] = INF; } void solve(int u) { vis[u] = 1, calc(u); for (auto t : g[u]) { if (vis[t.v]) continue; solve(get_root(t.v)); } } // ----------------------------------------------------------------------------- int siz[N], max_son[N]; int tot, root; void dfs(int u, int fa) { siz[u] = 1, max_son[u] = 0; for (auto t : g[u]) { int v = t.v; if (v == fa || vis[v]) continue; dfs(v, u); siz[u] += siz[v]; max_son[u] = max(max_son[u], siz[v]); } max_son[u] = max(max_son[u], tot - siz[u]); if (max_son[u] < max_son[root]) root = u; } int get_root(int u) { tot = siz[u], root = 0; return dfs(u, -1), root; } // ----------------------------------------------------------------------------- signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> k; memset(mp, 0x3f, sizeof mp); for (int i = 1; i < n; ++i) { int u, v, w; cin >> u >> v >> w; Add(u + 1, v + 1, w); } max_son[0] = n + 1; siz[1] = n; solve(get_root(1)); cout << (ans >= n ? -1 : ans) << endl; return 0; } \u5f53\u7136\u8fd9\u9053\u9898\u8fd8\u53ef\u4ee5\u542f\u53d1\u65f6\u5408\u5e76\u6765\u505a\u3002","title":"\u70b9\u5206\u6cbb"},{"location":"graph/divide/point/#_1","text":"\u70b9\u5206\u6cbb\u9002\u5408\u5904\u7406\u5927\u89c4\u6a21\u7684\u6811\u4e0a\u8def\u5f84\u4fe1\u606f\u95ee\u9898\u3002","title":"\u70b9\u5206\u6cbb"},{"location":"graph/divide/point/#_2","text":"\u6211\u4eec\u5c06\u4e00\u68f5\u6709\u6839\u6811\u4e0a\u7684\u8def\u5f84\u5206\u4e3a\u4e24\u79cd\uff1a \u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\uff08\u4ee5\u6839\u8282\u70b9\u4f5c\u4e3a LCA \u7684\uff09\uff1b \u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\uff08\u5b8c\u5168\u5728\u5b50\u6811\u5185\u7684\uff09\u3002 \u6211\u4eec\u6839\u636e\u8fd9\u4e24\u4e2a\uff0c\u5bf9\u6811\u8fdb\u884c\u5206\u6cbb\uff1a \u7edf\u8ba1\u7ecf\u8fc7\u6839\u7684\u8def\u5f84\u7684\u7b54\u6848\uff1b \u5220\u53bb\u6839\u8282\u70b9\uff0c\u5206\u6cbb\u5b50\u6811\u3002 \u8003\u8651\u590d\u6742\u5ea6\uff0c\u663e\u7136\u662f\u80fd\u88ab\u94fe\u5361\u6b7b\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u6bcf\u6b21\u5212\u5206\u7684\u5b50\u6811\u5c3d\u53ef\u80fd\u5e73\u8861\uff0c \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u9012\u5f52\u4e00\u4e2a\u6811\uff0c\u94a6\u5b9a\u8fd9\u4e2a\u5b50\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\uff1b \u5047\u8bbe\u6211\u4eec\u5904\u7406\u7ecf\u8fc7\u6839\u7684\u7b54\u6848\u5b58\u5728 \\(\\mathcal O(T(n))\\) \u7684\u505a\u6cd5\u3002 \u91cd\u5fc3\u53ef\u4ee5\u628a\u6811\u5206\u4e3a\u4e24\u4e2a\u4e0d\u8d85\u8fc7\u4e00\u534a\u7684\u5b50\u6811\uff0c\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(T(n)\\log n)\\) \u3002 \u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u5982\u4f55\u5904\u7406\u7ecf\u8fc7\u6839\u7684\u8def\u5f84\uff1f\u8fd9\u662f\u70b9\u5206\u6cbb\u7684\u6838\u5fc3\uff0c\u4e00\u822c\u4e5f\u662f\u6700\u96be\u7684\u70b9\u3002","title":"\u6d41\u7a0b"},{"location":"graph/divide/point/#_3","text":"\u627e\u51fa\u6811\u7684\u4e2d\u5fc3\u505a\u6839 getroot(); \u5bf9\u5f53\u524d\u6811\u7edf\u8ba1\u7b54\u6848 calc(); \u5206\u6cbb\u5404\u4e2a\u5b50\u6811\u9012\u5f52 divide(); \u7ec6\u8282\uff1a \u6211\u4eec\u7528 vis \u8868\u793a\u4e00\u4e2a\u70b9\u662f\u5426\u88ab\u5220\u6389\uff08\u6807\u8bb0\u6839\u7684\u5220\u9664\uff09\uff1b \u901a\u5e38\u5c06\u95ee\u9898\u79bb\u7ebf\u4e0b\u6765\u7edf\u4e00\u8ba1\u7b97\u3002","title":"\u5b9e\u73b0"},{"location":"graph/divide/point/#_4","text":"\u6709\u6027\u8d28\uff1a \u91cd\u5fc3\u7684\u6240\u6709\u5b50\u6811\u5927\u5c0f\u4e0d\u8d85\u8fc7\u6574\u68f5\u6811\u7684\u4e00\u534a\uff1b \u91cd\u5fc3\u7684\u6700\u5927\u5b50\u6811\u6700\u5c0f\u3002 \u6839\u636e\u4e0a\u9762\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5 \\(\\mathcal O(n)\\) \u7684\u627e\u91cd\u5fc3\u3002 \u6211\u4e00\u822c\u7528\u7b2c\u4e8c\u4e2a\uff1a int tot, siz[N]; int root, max_son[N]; void dfs(int u, int fa) { siz[u] = 1; max_son[u] = -1; for (auto t : g[u]) { int v = t.v; if (v == fa) continue; if (vis[v]) continue; dfs(v, u); max_son[u] = max(max_son[u], siz[v]); siz[u] += siz[v]; } max_son[u] = max(max_son[u], tot - siz[u]); if (root == -1 || max_son[u] < max_son[root]) root = u; } int get_root(int u) { tot = u == 1 ? n : siz[u]; root = -1; dfs(u, -1); return root; }","title":"\u6811\u7684\u91cd\u5fc3"},{"location":"graph/divide/point/#_5","text":"\u5f88\u7b80\u5355\u3002 void divide(int u) { vis[u] = true; calc(u); for (auto t : g[u]) { int v = t.v; if (vis[v]) continue; divide(get_root(v)); } }","title":"\u70b9\u5206\u6cbb"},{"location":"graph/divide/point/#_6","text":"\u6700\u96be\u7684\u90e8\u5206\u3002 \u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u3002 \u4e0b\u9762\u6211\u4eec\u7ed9\u51e0\u9053\u4f8b\u9898\u3002","title":"\u8ba1\u7b97\u7b54\u6848"},{"location":"graph/divide/point/#_7","text":"","title":"\u4f8b\u9898"},{"location":"graph/divide/point/#p3806-1","text":"\u63a8\u8350\u4f7f\u7528 QOJ \u7684\u9898\u76ee\uff1a QOJ #329. \u70b9\u5206\u6cbb \u3002 \u5176\u4e2d calc \u51fd\u6570\u5982\u4e0b\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 bool ans[N]; int dis[N], cnt; void get_dis(int u, int fa, int val) { if (val > (int)1e7) // \u8d85\u8fc7\u4e86\u6700\u5927\u957f\u5ea6\uff0c\u65e0\u610f\u4e49 return; dis[++cnt] = val; // \u5c06\u957f\u5ea6\u8bb0\u5f55\u4e0b\u6765 for (auto t : g[u]) { int v = t.v; if (v == fa) continue; if (vis[v]) continue; get_dis(v, u, val + t.w); } } int mp[M]; void calc(int u) { mp[0] = 1; int mx = 0; for (auto t : g[u]) { int v = t.v; if (vis[v]) continue; cnt = 0; get_dis(v, u, t.w); // \u904d\u5386\u5b50\u6811\uff0c\u7edf\u8ba1\u957f\u5ea6 for (int i = 1; i <= cnt; ++i) for (int j = 0; j < m; ++j) if (q[j] >= dis[i]) ans[j] |= mp[q[j] - dis[i]]; // \u66f4\u65b0\u7b54\u6848 for (int i = 1; i <= cnt; ++i) mp[dis[i]] = true, mx = max(mx, dis[i]); // \u52a0\u5165\u5b50\u6811\u7684\u8d21\u732e } memset(mp, 0, sizeof(int) * (mx + 1)); // \u6e05\u9664\u64cd\u4f5c\uff0c\u6ce8\u610f\u6700\u5927\u662f\u503c\u57df } \u6211\u4eec\u7528 \\(\\text{map}\\) \u8868\u793a\u5728\u4e00\u68f5\u6811\u7684\u524d\u9762\u7684\u5b50\u6811\u4e2d\u51fa\u73b0\u7684\u8def\u5f84\u957f\u5ea6\u3002 \u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u5b50\u6811\uff0c\u5148\u66f4\u65b0\u7b54\u6848\uff0c\u518d\u52a0\u5165\u8fd9\u4e2a\u5b50\u6811\u7684\u8d21\u732e\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u51fa\u73b0\u540c\u4e00\u9897\u5b50\u6811\u7528\u540c\u4e00\u9897\u5b50\u6811\u7684\u4fe1\u606f\u7684\u60c5\u51b5\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(nm\\log n)\\) \u3002","title":"P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb 1"},{"location":"graph/divide/point/#cf161d-distance-in-tree","text":"\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u53ea\u662f\u8ba1\u6570\u3002 \u8fd9\u9053\u9898\u6570\u636e\u8303\u56f4\u5c0f\uff0c\u6240\u4ee5\u6734\u7d20\u6811\u4e0a DP \u4f3c\u4e4e\u4e5f\u53ef\u4ee5\u89e3\u51b3\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 ll ans; int dis[N], cnt; void get_dis(int u, int fa, int dep) { if (dep > 500) return; dis[++cnt] = dep; for (int v : g[u]) { if (v == fa) continue; if (vis[v]) continue; get_dis(v, u, dep + 1); } } int mp[1010]; void calc(int u) { mp[0] = 1; cnt = 0; for (int v : g[u]) { if (vis[v]) continue; int st = cnt + 1; get_dis(v, u, 1); for (int i = st; i <= cnt; ++i) if (k >= dis[i]) ans += mp[k - dis[i]]; // \u8fd9\u91cc\u8ba1\u6570 for (int i = st; i <= cnt; ++i) ++mp[dis[i]]; } for (int i = 1; i <= cnt; ++i) --mp[dis[i]]; }","title":"CF161D Distance in Tree"},{"location":"graph/divide/point/#p4178-tree","text":"\u6ce8\u610f\u5230\u8981\u6c42 \\(\\le K\\) \u800c\u4e0d\u662f \\(=K\\) \uff0c\u89c2\u5bdf\u70b9\u5206\u6811\u677f\u5b50\u9898\uff0c \u6211\u4eec\u53d1\u73b0 mp \u6570\u7ec4\u7684\u524d\u7f00\u548c\u5c31\u662f \\(\\le K\\) \u7684\u7b54\u6848\uff0c\u56e0\u6b64\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002 \u56e0\u4e3a\u53ea\u9700\u8981\u7ef4\u62a4\u5355\u70b9\u4fee\u6539\u524d\u7f00\u67e5\u8be2\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u5f88\u5feb\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 namespace ds { inline constexpr int hole(int k) { return k + (k >> 10); } ll s[hole(V)]; uint64_t Tag, tag[hole(V)]; void modify(int x, int v) { for (++x; x < V; x += x & -x) { if (tag[hole(x)] != Tag) s[hole(x)] = 0; s[hole(x)] += v; tag[hole(x)] = Tag; } } ll sum(int x) { ll r = 0; for (++x; x; x &= x - 1) if (tag[hole(x)] == Tag) r += s[hole(x)]; return r; } void clear() { ++Tag; } } ll ans; int dis[N], cnt; void get_dis(int u, int fa, int val) { if (val > k) return; dis[++cnt] = val; for (auto t : g[u]) { int v = t.v; if (v == fa) continue; if (vis[v]) continue; get_dis(v, u, val + t.w); } } void calc(int u) { ds::modify(0, 1); cnt = 0; for (auto t : g[u]) { int v = t.v; if (vis[v]) continue; int st = cnt + 1; get_dis(v, u, t.w); for (int i = st; i <= cnt; ++i) if (k >= dis[i]) ans += ds::sum(k - dis[i]); for (int i = st; i <= cnt; ++i) ds::modify(dis[i], 1); } ds::clear(); }","title":"P4178 Tree"},{"location":"graph/divide/point/#p4149-ioi2011-race","text":"\u7ef4\u62a4 \\(\\operatorname{dis}u+\\operatorname{dis}v=k\\) \u4e2d\uff0c \\(\\operatorname{dep}u+\\operatorname{dep}v\\) \u6700\u5c0f\u503c\u3002 \u7ef4\u62a4\u4e00\u4e2a \\(\\text{map}\\) \uff0c\u8bb0\u5f55\u6620\u5c04\uff0c \\[ \\text{map}:\\operatorname{dis}u\\to\\operatorname{dep}v \\] \u6bcf\u6b21\u52a0\u5165\uff0c \\[ \\def\\dis{\\operatorname{dis}} \\def\\dep{\\operatorname{dep}} \\begin{aligned} \\text{map}(\\dis v)&\\overset{\\min}{\\longleftarrow}\\dep v\\\\ ans&\\longleftarrow\\dep v+\\text{map}(k-\\dis v) \\end{aligned} \\] \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 #include <bits/stdc++.h> using namespace std; #define endl \"\\n\" constexpr int N = 2e5 + 10; constexpr int M = 1e6 + 10; constexpr int INF = 1e9; // ----------------------------------------------------------------------------- int n, k; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> g[N]; void add(int u, int v, int w) { g[u].emplace_back(v, w); } void Add(int u, int v, int w) { add(u, v, w), add(v, u, w); } int get_root(int); // ----------------------------------------------------------------------------- int mp[M]; int vis[N], dis[N], dep[N]; int cnt, ans = INF; void init(int u, int fa, int is, int ep) { if (is > k) return; ++cnt; dis[cnt] = is, dep[cnt] = ep; for (auto t : g[u]) { if (t.v == fa || vis[t.v]) continue; init(t.v, u, is + t.w, ep + 1); } } void calc(int u) { mp[0] = cnt = 0; for (auto t : g[u]) { int v = t.v, w = t.w; if (vis[v]) continue; int st = cnt + 1; init(v, u, w, 1); for (int i = st; i <= cnt; ++i) ans = min(ans, mp[k - dis[i]] + dep[i]); for (int i = st; i <= cnt; ++i) mp[dis[i]] = min(mp[dis[i]], dep[i]); } for (int i = 1; i <= cnt; ++i) mp[dis[i]] = INF; } void solve(int u) { vis[u] = 1, calc(u); for (auto t : g[u]) { if (vis[t.v]) continue; solve(get_root(t.v)); } } // ----------------------------------------------------------------------------- int siz[N], max_son[N]; int tot, root; void dfs(int u, int fa) { siz[u] = 1, max_son[u] = 0; for (auto t : g[u]) { int v = t.v; if (v == fa || vis[v]) continue; dfs(v, u); siz[u] += siz[v]; max_son[u] = max(max_son[u], siz[v]); } max_son[u] = max(max_son[u], tot - siz[u]); if (max_son[u] < max_son[root]) root = u; } int get_root(int u) { tot = siz[u], root = 0; return dfs(u, -1), root; } // ----------------------------------------------------------------------------- signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n >> k; memset(mp, 0x3f, sizeof mp); for (int i = 1; i < n; ++i) { int u, v, w; cin >> u >> v >> w; Add(u + 1, v + 1, w); } max_son[0] = n + 1; siz[1] = n; solve(get_root(1)); cout << (ans >= n ? -1 : ans) << endl; return 0; } \u5f53\u7136\u8fd9\u9053\u9898\u8fd8\u53ef\u4ee5\u542f\u53d1\u65f6\u5408\u5e76\u6765\u505a\u3002","title":"P4149 [IOI2011] Race"},{"location":"graph/lca/","text":"\u6700\u8fd1\u516c\u5171\u7956\u5148 \u00b6 \u5b9a\u4e49 \u00b6 \u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff0cLowest Common Ancestor\uff09\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u3002 \u4e00\u4e2a\u96c6\u5408 \\(S\\) \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \\(\\text{LCA}(S)=\\text{LCA}(s_1,s_2,\\dots,s_k)\\) \u5b9a\u4e49\u4e3a\uff1a \u8fd9\u4e2a\u96c6\u5408\u4e2d\u6240\u6709\u8282\u70b9\uff0c\u5176\u7956\u5148\u7684\u4ea4\u96c6\u4e2d\uff0c\u79bb\u6839\u6700\u8fdc\u7684\u90a3\u4e2a\u3002 \u6027\u8d28 \u00b6 \u5728\u6570\u503c\u7684\u5173\u7cfb\u4e0a\uff1a \\(\\text{LCA}(\\{u\\})=u\\) \uff1b \\(\\text{LCA}(A\\cup B)=\\text{LCA}\\{\\text{LCA}(A),\\text{LCA}(B)\\}\\) \uff1b \\(d(u,v)=h(u)+h(v)-2\\text{LCA}\\{u,v\\}\\) \u3002 \u5728\u5f62\u6001\u7684\u5173\u7cfb\u4e0a\uff1a \\(u\\) \u662f \\(v\\) \u7684\u7956\u5148\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(\\text{LCA}\\{u,v\\}=u\\) \uff1b \u4e24\u4e2a\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e00\u5b9a\u5728\u8fd9\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u3002 \u7b97\u6cd5 \u00b6 \u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u96c6\u5408\u4e0d\u65ad\u62c6\u5206\uff0c\u6700\u7ec8\u5c06\u95ee\u9898\u62c6\u5206\u4e3a\uff1a\u6c42\u4efb\u610f\u4e24\u4e2a\u70b9 \\(u,v\\) \u7684 LCA\u3002 \u6734\u7d20\u7b97\u6cd5 \u00b6 \u8bbe \\(c\\) \u8868\u793a\u8282\u70b9 \\(u,v\\) \u7684 LCA\uff0c\u8003\u8651\u5230 \\(c\\) \u6df1\u5ea6\u4e00\u5b9a\u6bd4 \\(u,v\\) \u90fd\u8981\u5c0f\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u628a \\(u,v\\) \u4e2d\u6bd4\u8f83\u6df1\u7684\u90a3\u4e00\u4e2a\u5f80\u4e0a\u8df3\uff0c\u6700\u7ec8\u5f97\u5230 \\(u',v'\\) \u3002 \u5373\uff0c\u4ece\u4e24\u4e2a\u70b9\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0a\u8df3\uff0c\u8df3\u5230\u540c\u4e00\u9ad8\u5ea6\u540e\u518d\u4e00\u8d77\u8df3\u3002 \u4f18\u5316\u7b97\u6cd5 \u00b6 \u5f88\u591a\uff0c\u6211\u4eec\u5728\u6b64\u5217\u4e3e\uff1a \u7b97\u6cd5 \u9884\u5904\u7406\u590d\u6742\u5ea6 \u67e5\u8be2\u590d\u6742\u5ea6 \u7279\u70b9 \u500d\u589e \\(\\mathcal O(n\\log n)\\) \\(\\mathcal O(\\log n)\\) \u8dd1\u6ee1 \\(\\log\\) \u6b27\u62c9\u5e8f \\(\\mathcal O(n\\log n)\\) \\(\\mathcal O(1)\\) \u5e38\u6570\u8f83\u5927 DFS \u5e8f \\(\\mathcal O(n\\log n)\\) \\(\\mathcal O(1)\\) \u5e38\u6570\u8f83\u5c0f \u6811\u94fe\u5256\u5206 \\(\\mathcal O(n)\\) \\(\\mathcal O(\\log n)\\) \u5e38\u6570\u5f88\u5c0f \u8fd8\u6709\u4e00\u4e9b\u5947\u5999\u7684\uff0c\u4f8b\u5982 Tarjan\u3001\u56db\u6bdb\u5b50\u3001\u00b11 RMQ \u7b49\uff0c\u6682\u65f6\u4e0d\u5199\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8be2\u95ee\u91cf\u5f88\u5927\u7684\u65f6\u5019\u7528 DFS \u5e8f\uff0c\u5426\u5219\u7528\u6811\u94fe\u5256\u5206\u3002 \u5f53\u6c42 LCA \u4e0d\u662f\u590d\u6742\u5ea6\u74f6\u9888\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u500d\u589e\uff08\u597d\u5199\uff09\u3002 \u6211\u4eec\u5f00\u59cb\u8be6\u7ec6\u8bb2\u89e3\u6bcf\u4e00\u4e2a\u3002","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"graph/lca/#_1","text":"","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"graph/lca/#_2","text":"\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff0cLowest Common Ancestor\uff09\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u3002 \u4e00\u4e2a\u96c6\u5408 \\(S\\) \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \\(\\text{LCA}(S)=\\text{LCA}(s_1,s_2,\\dots,s_k)\\) \u5b9a\u4e49\u4e3a\uff1a \u8fd9\u4e2a\u96c6\u5408\u4e2d\u6240\u6709\u8282\u70b9\uff0c\u5176\u7956\u5148\u7684\u4ea4\u96c6\u4e2d\uff0c\u79bb\u6839\u6700\u8fdc\u7684\u90a3\u4e2a\u3002","title":"\u5b9a\u4e49"},{"location":"graph/lca/#_3","text":"\u5728\u6570\u503c\u7684\u5173\u7cfb\u4e0a\uff1a \\(\\text{LCA}(\\{u\\})=u\\) \uff1b \\(\\text{LCA}(A\\cup B)=\\text{LCA}\\{\\text{LCA}(A),\\text{LCA}(B)\\}\\) \uff1b \\(d(u,v)=h(u)+h(v)-2\\text{LCA}\\{u,v\\}\\) \u3002 \u5728\u5f62\u6001\u7684\u5173\u7cfb\u4e0a\uff1a \\(u\\) \u662f \\(v\\) \u7684\u7956\u5148\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(\\text{LCA}\\{u,v\\}=u\\) \uff1b \u4e24\u4e2a\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e00\u5b9a\u5728\u8fd9\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u3002","title":"\u6027\u8d28"},{"location":"graph/lca/#_4","text":"\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u96c6\u5408\u4e0d\u65ad\u62c6\u5206\uff0c\u6700\u7ec8\u5c06\u95ee\u9898\u62c6\u5206\u4e3a\uff1a\u6c42\u4efb\u610f\u4e24\u4e2a\u70b9 \\(u,v\\) \u7684 LCA\u3002","title":"\u7b97\u6cd5"},{"location":"graph/lca/#_5","text":"\u8bbe \\(c\\) \u8868\u793a\u8282\u70b9 \\(u,v\\) \u7684 LCA\uff0c\u8003\u8651\u5230 \\(c\\) \u6df1\u5ea6\u4e00\u5b9a\u6bd4 \\(u,v\\) \u90fd\u8981\u5c0f\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u628a \\(u,v\\) \u4e2d\u6bd4\u8f83\u6df1\u7684\u90a3\u4e00\u4e2a\u5f80\u4e0a\u8df3\uff0c\u6700\u7ec8\u5f97\u5230 \\(u',v'\\) \u3002 \u5373\uff0c\u4ece\u4e24\u4e2a\u70b9\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0a\u8df3\uff0c\u8df3\u5230\u540c\u4e00\u9ad8\u5ea6\u540e\u518d\u4e00\u8d77\u8df3\u3002","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"graph/lca/#_6","text":"\u5f88\u591a\uff0c\u6211\u4eec\u5728\u6b64\u5217\u4e3e\uff1a \u7b97\u6cd5 \u9884\u5904\u7406\u590d\u6742\u5ea6 \u67e5\u8be2\u590d\u6742\u5ea6 \u7279\u70b9 \u500d\u589e \\(\\mathcal O(n\\log n)\\) \\(\\mathcal O(\\log n)\\) \u8dd1\u6ee1 \\(\\log\\) \u6b27\u62c9\u5e8f \\(\\mathcal O(n\\log n)\\) \\(\\mathcal O(1)\\) \u5e38\u6570\u8f83\u5927 DFS \u5e8f \\(\\mathcal O(n\\log n)\\) \\(\\mathcal O(1)\\) \u5e38\u6570\u8f83\u5c0f \u6811\u94fe\u5256\u5206 \\(\\mathcal O(n)\\) \\(\\mathcal O(\\log n)\\) \u5e38\u6570\u5f88\u5c0f \u8fd8\u6709\u4e00\u4e9b\u5947\u5999\u7684\uff0c\u4f8b\u5982 Tarjan\u3001\u56db\u6bdb\u5b50\u3001\u00b11 RMQ \u7b49\uff0c\u6682\u65f6\u4e0d\u5199\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8be2\u95ee\u91cf\u5f88\u5927\u7684\u65f6\u5019\u7528 DFS \u5e8f\uff0c\u5426\u5219\u7528\u6811\u94fe\u5256\u5206\u3002 \u5f53\u6c42 LCA \u4e0d\u662f\u590d\u6742\u5ea6\u74f6\u9888\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u500d\u589e\uff08\u597d\u5199\uff09\u3002 \u6211\u4eec\u5f00\u59cb\u8be6\u7ec6\u8bb2\u89e3\u6bcf\u4e00\u4e2a\u3002","title":"\u4f18\u5316\u7b97\u6cd5"},{"location":"graph/lca/binary/","text":"\u500d\u589e LCA \u00b6 \u601d\u60f3 \u00b6 \u8bb0 \\(f(u,k)\\) \u8868\u793a \\(u\\) \u5411\u4e0a \\(2^k\\) \u7ea7\u7236\u4eb2\uff0c\u7136\u540e\u5c31\u53ef\u4ee5 \\(\\mathcal O(n\\log n)\\) \u9884\u5904\u7406\u3002 \u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4ece\u5927\u5230\u5c0f\u679a\u4e3e \\(k\\) \uff0c \u5148\u5c06\u6df1\u5ea6\u5927\u7684\u70b9\u5f80\u4e0a\u8df3\uff0c\u76f4\u5230\u6df1\u5ea6\u76f8\u7b49\uff1b \u5c06\u4e24\u4e2a\u70b9\u4e00\u8d77\u5f80\u4e0a\u8df3\uff0c\u4ee4\u4e24\u70b9\u4e0d\u6c47\u5408\uff0c\u6700\u540e\u5728\u8df3\u4e00\u6b65\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int fa[20][N], dep[N]; void build(int u, int ff) { for (int k = 1; k < 20; ++k) fa[k][u] = fa[k - 1][fa[k - 1][u]]; for (int v : g[u]) { if (v != ff) { fa[0][v] = u; dep[v] = dep[u] + 1; build(v, u); } } } void build(int u) { dep[u] = 1; build(u, -1); } int lca(int x, int y) { if (dep[x] < dep[y]) swap(x, y); for (int k = 19; k >= 0; --k) if (dep[fa[k][x]] >= dep[y]) x = fa[k][x]; if (x == y) return x; for (int k = 19; k >= 0; --k) if (fa[k][x] != fa[k][y]) x = fa[k][x], y = fa[k][y]; return fa[0][x]; } \u4f18\u5316 \u00b6 \u7c7b\u4f3c ST \u8868\uff0c\u6211\u4eec\u628a\u7b2c \\(2\\) \u7ef4 \\(k\\) \u63d0\u524d\uff0c\u4ee5\u51cf\u5c11 cache miss \u6b21\u6570\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u6548\u7387\u3002 \u4e0a\u9762\u4ee3\u7801\u5df2\u7ecf\u4f53\u73b0\u4e86\uff0c\u7565\u3002 \u62d3\u5c55 \u00b6 \u5728 LCA \u7684\u540c\u65f6\uff0c\u8fd8\u53ef\u4ee5\u540c\u6b65\u8bb0\u5f55\u4e00\u4e9b\u5176\u4ed6\u7684\u4e1c\u897f\u3002 \u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u8bb0\u5f55\u4e86\u5b50\u6811\u4e2d\u7684\u6700\u5927\u8282\u70b9\u7f16\u53f7\uff0c\u8fd9\u7c7b\u7b97\u6cd5\u7edf\u79f0\u6811\u4e0a\u500d\u589e\u3002 P10113 [GESP202312 \u516b\u7ea7] \u5927\u91cf\u7684\u5de5\u4f5c\u6c9f\u901a \u4ee5\u524d\u5199\u7684\u4ee3\u7801\uff0c\u4e0d\u597d\u770b\u3002 int n, f[N]; int dep[N], mxj[N]; int lt[N][35]; void init(int u, int fa) { dep[u] = dep[fa] + 1; mxj[u] = max(u, mxj[fa]); for (int k = 0; k <= 30; ++k) lt[u][k + 1] = lt[lt[u][k]][k]; for (int v : g[u]) if (v != fa) lt[v][0] = u, init(v, u); } int lca(int x, int y) { if (dep[x] < dep[y]) swap(x, y); for (int k = 30; ~k; --k) if (dep[lt[x][k]] >= dep[y]) x = lt[x][k]; if (x == y) return x; for (int k = 30; ~k; --k) if (lt[x][k] != lt[y][k]) x = lt[x][k], y = lt[y][k]; return lt[x][0]; }","title":"\u500d\u589e LCA"},{"location":"graph/lca/binary/#lca","text":"","title":"\u500d\u589e LCA"},{"location":"graph/lca/binary/#_1","text":"\u8bb0 \\(f(u,k)\\) \u8868\u793a \\(u\\) \u5411\u4e0a \\(2^k\\) \u7ea7\u7236\u4eb2\uff0c\u7136\u540e\u5c31\u53ef\u4ee5 \\(\\mathcal O(n\\log n)\\) \u9884\u5904\u7406\u3002 \u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4ece\u5927\u5230\u5c0f\u679a\u4e3e \\(k\\) \uff0c \u5148\u5c06\u6df1\u5ea6\u5927\u7684\u70b9\u5f80\u4e0a\u8df3\uff0c\u76f4\u5230\u6df1\u5ea6\u76f8\u7b49\uff1b \u5c06\u4e24\u4e2a\u70b9\u4e00\u8d77\u5f80\u4e0a\u8df3\uff0c\u4ee4\u4e24\u70b9\u4e0d\u6c47\u5408\uff0c\u6700\u540e\u5728\u8df3\u4e00\u6b65\u5373\u53ef\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int fa[20][N], dep[N]; void build(int u, int ff) { for (int k = 1; k < 20; ++k) fa[k][u] = fa[k - 1][fa[k - 1][u]]; for (int v : g[u]) { if (v != ff) { fa[0][v] = u; dep[v] = dep[u] + 1; build(v, u); } } } void build(int u) { dep[u] = 1; build(u, -1); } int lca(int x, int y) { if (dep[x] < dep[y]) swap(x, y); for (int k = 19; k >= 0; --k) if (dep[fa[k][x]] >= dep[y]) x = fa[k][x]; if (x == y) return x; for (int k = 19; k >= 0; --k) if (fa[k][x] != fa[k][y]) x = fa[k][x], y = fa[k][y]; return fa[0][x]; }","title":"\u601d\u60f3"},{"location":"graph/lca/binary/#_2","text":"\u7c7b\u4f3c ST \u8868\uff0c\u6211\u4eec\u628a\u7b2c \\(2\\) \u7ef4 \\(k\\) \u63d0\u524d\uff0c\u4ee5\u51cf\u5c11 cache miss \u6b21\u6570\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u6548\u7387\u3002 \u4e0a\u9762\u4ee3\u7801\u5df2\u7ecf\u4f53\u73b0\u4e86\uff0c\u7565\u3002","title":"\u4f18\u5316"},{"location":"graph/lca/binary/#_3","text":"\u5728 LCA \u7684\u540c\u65f6\uff0c\u8fd8\u53ef\u4ee5\u540c\u6b65\u8bb0\u5f55\u4e00\u4e9b\u5176\u4ed6\u7684\u4e1c\u897f\u3002 \u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u8bb0\u5f55\u4e86\u5b50\u6811\u4e2d\u7684\u6700\u5927\u8282\u70b9\u7f16\u53f7\uff0c\u8fd9\u7c7b\u7b97\u6cd5\u7edf\u79f0\u6811\u4e0a\u500d\u589e\u3002 P10113 [GESP202312 \u516b\u7ea7] \u5927\u91cf\u7684\u5de5\u4f5c\u6c9f\u901a \u4ee5\u524d\u5199\u7684\u4ee3\u7801\uff0c\u4e0d\u597d\u770b\u3002 int n, f[N]; int dep[N], mxj[N]; int lt[N][35]; void init(int u, int fa) { dep[u] = dep[fa] + 1; mxj[u] = max(u, mxj[fa]); for (int k = 0; k <= 30; ++k) lt[u][k + 1] = lt[lt[u][k]][k]; for (int v : g[u]) if (v != fa) lt[v][0] = u, init(v, u); } int lca(int x, int y) { if (dep[x] < dep[y]) swap(x, y); for (int k = 30; ~k; --k) if (dep[lt[x][k]] >= dep[y]) x = lt[x][k]; if (x == y) return x; for (int k = 30; ~k; --k) if (lt[x][k] != lt[y][k]) x = lt[x][k], y = lt[y][k]; return lt[x][0]; }","title":"\u62d3\u5c55"},{"location":"graph/lca/dfs/","text":"DFS \u5e8f LCA \u00b6 DFS \u5e8f \u00b6 DFS \u5e8f\u6307\u7684\u662f\uff0cDFS \u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u8282\u70b9\u7684\u5e8f\u5217\u3002 DFN \u65f6\u95f4\u6233\u5bf9\u5e94\u4e3a\u4e00\u4e2a\u8282\u70b9\u4ec0\u4e48\u65f6\u5019\u88ab\u8bbf\u95ee\u7684\u3002 \u8fc7\u7a0b \u00b6 \u8003\u8651\u6709\u70b9 \\(u,v\\) \u7684 LCA\uff0c\u6211\u4eec\u94a6\u5b9a \\(\\operatorname{dfn}(u)\\le\\operatorname{dfn}(v)\\) \u3002 \u6709\u6027\u8d28\uff1aLCA \u4e00\u5b9a\u662f DFS \u5e8f\u4e0a \\([\\operatorname{dfn}(u)+1,\\operatorname{dfn}(v)]\\) \u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u7684\u7236\u4eb2\u3002 \u8003\u8651\u7406\u89e3\u8fd9\u4e2a\u6027\u8d28\uff0c \u6211\u4eec\u77e5\u9053\u5728 DFS \u5e8f\u4e0a\u9762\uff0c\u7236\u4eb2\u4e00\u5b9a\u5148\u4e8e\u5b69\u5b50\u904d\u5386\u3002 \u82e5 \\(u\\) \u4e3a \\(v\\) \u7684\u7956\u5148\uff0c\u90a3\u4e48\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5c31\u662f \\(u\\) \u5230 \\(v\\) \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u5176\u7236\u4eb2\u5c31\u662f \\(u\\) \uff0c\u6b63\u786e\u3002 \u82e5 \\(u\\) \u4e0d\u4e3a \\(v\\) \u7684\u7956\u5148\uff0c\u90a3\u4e48\u53ea\u6709\u4ece \\(u\\) \u7684\u5b50\u6811\u56de\u5230 LCA \u540e\u4e0b\u53bb\u7684\u8def\u5f84\uff08\u6216\u8005\u4e2d\u95f4\u7ecf\u8fc7\u7684\u8def\u5f84\uff09\u624d\u4f1a\u88ab\u8bb0\u5f55\uff0c\u90a3\u4e48\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u53ef\u4ee5\u770b\u6210\u4ece LCA \u5230 \\(v\\) \u7684\u8def\u5f84\u4e0a\u7684\u513f\u5b50\uff0c\u4e5f\u6b63\u786e\u3002","title":"DFS \u5e8f LCA"},{"location":"graph/lca/dfs/#dfs-lca","text":"","title":"DFS \u5e8f LCA"},{"location":"graph/lca/dfs/#dfs","text":"DFS \u5e8f\u6307\u7684\u662f\uff0cDFS \u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u8282\u70b9\u7684\u5e8f\u5217\u3002 DFN \u65f6\u95f4\u6233\u5bf9\u5e94\u4e3a\u4e00\u4e2a\u8282\u70b9\u4ec0\u4e48\u65f6\u5019\u88ab\u8bbf\u95ee\u7684\u3002","title":"DFS \u5e8f"},{"location":"graph/lca/dfs/#_1","text":"\u8003\u8651\u6709\u70b9 \\(u,v\\) \u7684 LCA\uff0c\u6211\u4eec\u94a6\u5b9a \\(\\operatorname{dfn}(u)\\le\\operatorname{dfn}(v)\\) \u3002 \u6709\u6027\u8d28\uff1aLCA \u4e00\u5b9a\u662f DFS \u5e8f\u4e0a \\([\\operatorname{dfn}(u)+1,\\operatorname{dfn}(v)]\\) \u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u7684\u7236\u4eb2\u3002 \u8003\u8651\u7406\u89e3\u8fd9\u4e2a\u6027\u8d28\uff0c \u6211\u4eec\u77e5\u9053\u5728 DFS \u5e8f\u4e0a\u9762\uff0c\u7236\u4eb2\u4e00\u5b9a\u5148\u4e8e\u5b69\u5b50\u904d\u5386\u3002 \u82e5 \\(u\\) \u4e3a \\(v\\) \u7684\u7956\u5148\uff0c\u90a3\u4e48\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5c31\u662f \\(u\\) \u5230 \\(v\\) \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u5176\u7236\u4eb2\u5c31\u662f \\(u\\) \uff0c\u6b63\u786e\u3002 \u82e5 \\(u\\) \u4e0d\u4e3a \\(v\\) \u7684\u7956\u5148\uff0c\u90a3\u4e48\u53ea\u6709\u4ece \\(u\\) \u7684\u5b50\u6811\u56de\u5230 LCA \u540e\u4e0b\u53bb\u7684\u8def\u5f84\uff08\u6216\u8005\u4e2d\u95f4\u7ecf\u8fc7\u7684\u8def\u5f84\uff09\u624d\u4f1a\u88ab\u8bb0\u5f55\uff0c\u90a3\u4e48\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u53ef\u4ee5\u770b\u6210\u4ece LCA \u5230 \\(v\\) \u7684\u8def\u5f84\u4e0a\u7684\u513f\u5b50\uff0c\u4e5f\u6b63\u786e\u3002","title":"\u8fc7\u7a0b"},{"location":"graph/shortest-path/","text":"\u6700\u77ed\u8def\u7b80\u4ecb \u00b6 \u5b9a\u4e49 \u00b6 \u5355\u6e90\u6700\u77ed\u8def\uff1a\u4ece\u4e00\u4e2a\u70b9 \\(q\\) \u51fa\u53d1\uff0c\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u3002 \u5168\u6e90\u6700\u77ed\u8def\uff1a\u4efb\u610f\u4e24\u70b9\u89c1\u6700\u77ed\u8def\u3002 \u7b97\u6cd5\u5bf9\u6bd4 \u00b6 \u7b97\u6cd5 Floyd Johnson Bellman\u2013Ford SPFA Dijkstra \u7c7b\u578b \u5168\u6e90 \u5168\u6e90 \u5355\u6e90 \u5355\u6e90 \u5355\u6e90 \u4f5c\u7528\u4e8e \u4efb\u610f\u56fe \u4efb\u610f\u56fe \u4efb\u610f\u56fe \u4efb\u610f\u56fe \u975e\u8d1f\u6743\u56fe \u68c0\u6d4b\u8d1f\u73af \u80fd \u80fd \u80fd \u80fd \u4e0d\u80fd \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^3)\\) \\(\\mathcal{O}(nm \\log m)\\) \\(\\mathcal{O}(nm)\\) \\(\\mathcal{O}(m)\\) \uff0d \\(\\mathcal{O}(nm)\\) \\(\\mathcal O(m\\log m)\\) - \\(\\mathcal O(n^2)\\) \u603b\u7ed3\uff1a \u6709\u8d1f\u73af\u4f18\u5148\u7528 SPFA\uff0c\u5373\u4f7f\u5979\u88ab\u5361\u4e5f\u6bd4 BF \u5feb\u4e00\u70b9\u3002 \u591a\u6e90\u7528 Floyd\uff0c\u56e0\u4e3a\u4e0d\u4f1a Johnson\u3002 \u5982\u679c\u662f DAG \u4e5f\u53ef\u4ee5\u8dd1\u62d3\u6251\uff0c\u901f\u5ea6\u66f4\u5feb\u3002","title":"\u6700\u77ed\u8def\u7b80\u4ecb"},{"location":"graph/shortest-path/#_1","text":"","title":"\u6700\u77ed\u8def\u7b80\u4ecb"},{"location":"graph/shortest-path/#_2","text":"\u5355\u6e90\u6700\u77ed\u8def\uff1a\u4ece\u4e00\u4e2a\u70b9 \\(q\\) \u51fa\u53d1\uff0c\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u3002 \u5168\u6e90\u6700\u77ed\u8def\uff1a\u4efb\u610f\u4e24\u70b9\u89c1\u6700\u77ed\u8def\u3002","title":"\u5b9a\u4e49"},{"location":"graph/shortest-path/#_3","text":"\u7b97\u6cd5 Floyd Johnson Bellman\u2013Ford SPFA Dijkstra \u7c7b\u578b \u5168\u6e90 \u5168\u6e90 \u5355\u6e90 \u5355\u6e90 \u5355\u6e90 \u4f5c\u7528\u4e8e \u4efb\u610f\u56fe \u4efb\u610f\u56fe \u4efb\u610f\u56fe \u4efb\u610f\u56fe \u975e\u8d1f\u6743\u56fe \u68c0\u6d4b\u8d1f\u73af \u80fd \u80fd \u80fd \u80fd \u4e0d\u80fd \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^3)\\) \\(\\mathcal{O}(nm \\log m)\\) \\(\\mathcal{O}(nm)\\) \\(\\mathcal{O}(m)\\) \uff0d \\(\\mathcal{O}(nm)\\) \\(\\mathcal O(m\\log m)\\) - \\(\\mathcal O(n^2)\\) \u603b\u7ed3\uff1a \u6709\u8d1f\u73af\u4f18\u5148\u7528 SPFA\uff0c\u5373\u4f7f\u5979\u88ab\u5361\u4e5f\u6bd4 BF \u5feb\u4e00\u70b9\u3002 \u591a\u6e90\u7528 Floyd\uff0c\u56e0\u4e3a\u4e0d\u4f1a Johnson\u3002 \u5982\u679c\u662f DAG \u4e5f\u53ef\u4ee5\u8dd1\u62d3\u6251\uff0c\u901f\u5ea6\u66f4\u5feb\u3002","title":"\u7b97\u6cd5\u5bf9\u6bd4"},{"location":"graph/shortest-path/apsp/","text":"\u5168\u6e90\u6700\u77ed\u8def \u00b6 All Pairs Shortest Path Problem (APSP)\u3002 Floyd-Warshall \u00b6 \u4e00\u4e2a\u5f88\u5b9e\u7528\u7684\u5168\u6e90\u6700\u77ed\u8def\u89e3\u6cd5\uff0c\u7279\u70b9\u662f\u597d\u5199\uff0c\u5bb9\u6613\u62d3\u5c55\u3002 \u601d\u60f3 \u00b6 \u6211\u4eec\u8bbe \\(f(k,i,j)\\) \u8868\u793a\u8003\u8651\u524d \\(k\\) \u4e2a\u70b9\uff0c \\(i\\to j\\) \u7684\u6700\u77ed\u8def\u3002 \u9996\u5148\u8003\u8651 \\(k=0\\) \u7684\u521d\u59cb\u72b6\u6001\uff0c\u5bb9\u6613\u77e5\u9053\uff0c \u6709 \\(f(0,x,x)=0\\) \u8868\u793a\u76f8\u540c\u7684\u70b9\uff1b \u82e5 \\(u\\to v\\) \uff0c\u5219 \\(f(0,u,v)=w\\) \u8868\u793a\u6709\u8fde\u8fb9\u3002 \u8003\u8651\u52a0\u5165\u70b9 \\(k\\) \u7684\u8d21\u732e\uff0c\u6211\u4eec\u77e5\u9053 \\(k\\) \u53ef\u80fd\u4f1a\u66f4\u65b0\u4e00\u4e9b\u70b9\u7684\u8ddd\u79bb\uff0c \\[ f(k,i,j)=\\min\\{f(k-1,i,j),f(k-1,i,k)+f(k-1,j,k)\\} \\] \u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002 \u6211\u4eec\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\uff0c\u6ce8\u610f\u8981\u5148\u679a\u4e3e \\(k\\) \uff01 \u6734\u7d20\u5b9e\u73b0 \u00b6 \u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\uff0c \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 for (int k = 1; k <= n; ++k) for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]); \u9488\u5bf9\u7a00\u758f\u56fe\u7684\u5e38\u6570\u4f18\u5316 \u00b6 \u6ce8\u610f\u5230\u5982\u679c dis[i][k] == INF \u90a3\u4e48\u6ca1\u5fc5\u8981\u8f6c\u79fb\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 for (int k = 1; k <= n; ++k) for (int i = 1; i <= n; ++i) { int r = dis[i][k]; if (r == 0x3f3f3f3f) continue; for (int j = 1; j <= n; ++j) { if (i == j || k == j) continue; if (dis[k][j] == 0x3f3f3f3f) continue; dis[i][j] = min(dis[i][j], r + dis[k][j]); } } \u8fd9\u4e2a\u4f18\u5316\u5728\u7a20\u5bc6\u56fe\u4e2d\u6548\u679c\u4e0d\u5927\u3002 IJK / IKJ Algorithm \u00b6 \u6211\u4eec\u77e5\u9053 Floyd-Warshall \u7b97\u6cd5\u9700\u8981 \\(k\\) \u5148\u904d\u5386\uff0c \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4ea4\u6362\u987a\u5e8f\uff0c\u6709\u6027\u8d28\uff1a \u904d\u5386\u987a\u5e8f IJK\uff0c\u8dd1\u4e09\u6b21\u5373\u53ef\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002 \u904d\u5386\u987a\u5e8f IKJ\uff0c\u8dd1\u4e24\u6b21\u5373\u53ef\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002 \u8bc1\u660e\u4e0d\u4f1a\uff0c\u8be6\u89c1\uff1a https://arxiv.org/abs/1904.01210 \u3002 Johnson \u00b6 \u5f15\u5165 \u00b6 \u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u8dd1 \\(n\\) \u6b21 Dijkstra \u7b97\u6cd5\uff0c\u590d\u6742\u5ea6\u662f \\(\\mathcal O(nm\\log m)\\) \u3002 \u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u590d\u6742\u5ea6\u5728\u7a00\u758f\u56fe\u4e0a\u9762\u4f18\u4e8e Floyd-Warshall \u7b97\u6cd5\u3002 \u7528 Fibonacci \u5806\u5b9e\u73b0\uff0c\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(n^2\\log n+nm)\\) \uff0c\u5373\u4f7f\u5728\u7a20\u5bc6\u56fe\u4e0a\u4e5f\u6bd4\u8f83\u597d\u3002 \u4f46\u662f\uff0c\u95ee\u9898\u662f Dijkstra \u4e0d\u652f\u6301\u8d1f\u6743\u8fb9\uff0c\u5982\u679c\u8dd1 \\(n\\) \u6b21 Bellman-Ford \u53cd\u800c\u590d\u6742\u5ea6\u66f4\u4e0d\u597d\u4e86\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u8003\u8651\u6539\u9020\u56fe\uff0c\u5c06\u8d1f\u6743\u6d88\u9664\u7684\u540c\u65f6\uff0c\u6c42\u51fa\u6b63\u786e\u7684\u6700\u77ed\u8def\u3002 \u8fc7\u7a0b \u00b6 \u52bf\u80fd\u51fd\u6570 \u00b6 \u5efa\u8d85\u7ea7\u6e90\u70b9 \\(0\\) \uff0c\u4e0e\u6240\u6709\u70b9\u8fde\u8fb9\u6743\u4e3a \\(0\\) \u7684\u8fb9\u3002 \u6211\u4eec\u6784\u9020\u52bf\u80fd\u51fd\u6570 \\(h(x)\\) \u8868\u793a\uff0c\u4ece \\(0\\) \u53f7\u70b9\u5230\u70b9 \\(x\\) \u7684\u6700\u77ed\u8def\u3002 \u5bb9\u6613\u53d1\u73b0\u6c42\u52bf\u80fd\u51fd\u6570\u7684\u8fc7\u7a0b\u4e0d\u662f\u590d\u6742\u5ea6\u74f6\u9888\uff0c\u56e0\u6b64\u4f7f\u7528 SPFA \u5373\u53ef\u3002 \u6539\u9020\u8fb9\u6743 \u00b6 \u6211\u4eec\u5148\u8bbe\u8bb0\u53f7\uff0c \u8bbe \\(w(u,v)\\) \u8868\u793a\u539f\u56fe\u4e2d\uff0c \\(u,v\\) \u4e24\u70b9\u95f4\u7684\u8fb9\u6743 \\(w\\) \uff1b \u8bbe \\(w'(u,v)\\) \u4e3a\u6784\u9020\u7684\u56fe\u4e2d\uff0c \\(u,v\\) \u4e24\u70b9\u95f4\u7684\u8fb9\u6743 \\(w\\) \uff1b \u8bbe \\(d(s,t)\\) \u8868\u793a\u539f\u56fe\u4e2d\uff0c \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u662f\u6211\u4eec\u8981\u6c42\u7684\uff1b \u8bbe \\(d'(s,t)\\) \u4e3a\u6784\u9020\u7684\u56fe\u4e2d\uff0c \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 \u6211\u4eec\u4ee4\uff0c \\[ w'(u,v)=w(u,v)+h(u)-h(v) \\] \u6709\u6027\u8d28\uff1a\u65b0\u56fe\u4e2d\u7684\u8fb9\u6743\u4e00\u5b9a\u975e\u8d1f\u3002 \u8fb9\u6743\u975e\u8d1f\u7684\u8bc1\u660e \u6839\u636e\u677e\u5f1b\u7684\u539f\u7406\uff0c\u4e00\u5b9a\u6709\uff0c \\[ h(v)\\le h(u)+w(u,v) \\] \u5f97\u8bc1\u3002 \u7b54\u6848\u7edf\u8ba1 \u00b6 \u6709\u6027\u8d28\uff0c \\[ d'(s,t)=d(s,t)+h(s)-h(t) \\] \u6b63\u786e\u6027\u7684\u8bc1\u660e \u4e0d\u8003\u8651\u6700\u77ed\u7684\u8981\u6c42\uff0c\u6211\u4eec\u5047\u8bbe\u5b58\u5728\u8def\u5f84 \\(s\\to t\\) \uff0c\u8def\u5f84\u5f62\u5982\uff0c \\[ s\\to p_1\\to p_2\\dots\\to p_k\\to t \\] \u90a3\u4e48\uff0c\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\u8868\u793a\u4e3a\uff0c \\[ w'(s,p_1)+w'(p_1,p_2)+\\dots+w'(p_k,t) \\] \u76f4\u63a5\u5c55\u5f00\uff0c \\[ [w(s,p_1)+h(s)-h(p_1)]+[w(p_1,p_2)+h(p_1)-h(p_2)]+\\dots+[w(p_k,t)+h(p_k)-h(t)] \\] \u5316\u7b80\u5373\uff0c \\[ w(s,p_1)+w(p_1,p_2)+\\dots+w(p_k,t)+h(s)-h(t) \\] \u6211\u4eec\u53d1\u73b0\u8def\u5f84\u9644\u52a0\u503c \\(h(s)-h(t)\\) \u53ea\u4e0e\u8d77\u70b9\u548c\u7ec8\u70b9\u6709\u5173\uff0c\u4e0e\u8def\u5f84\u65e0\u5173\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u76f4\u63a5\u627e\u5230 \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u5f84\uff0c\u518d\u6d88\u9664\u6389\u9644\u52a0\u503c\uff0c\u4e00\u5b9a\u662f\u6b63\u786e\u7684\u3002 \u5b9e\u73b0 \u00b6 \u53ef\u4ee5\u4f7f\u7528\u9b54\u6cd5\u5e73\u677f\u7535\u89c6\uff08 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int h[N]; int dis[N][N]; int st[N], vis[N]; int cnt[N]; bool SPFA(int s, int *d) { memset(cnt, 0, sizeof(int) * (n + 1)); memset(st, 0, sizeof(int) * (n + 1)); memset(d, 0x3f, sizeof(int) * (n + 1)); d[s] = 0; st[s] = 1; queue<int> q; q.push(s); while (!q.empty()) { int u = q.front(); q.pop(); st[u] = 0; for (auto t : g[u]) { int v = t.v, w = t.w; if (d[v] > d[u] + w) { d[v] = d[u] + w; cnt[v] = cnt[u] + 1; if (cnt[v] > n) return true; if (!st[v]) { q.push(v); st[v] = 1; } } } } return false; } void Dijkstra(int s, int *d) { memset(vis, 0, sizeof(int) * (n + 1)); memset(d, 0x3f, sizeof(int) * (n + 1)); pqueue<pair<int, int>, greater<pair<int, int>>> heap; heap.push({0, s}); d[s] = 0; while (!heap.empty()) { int u = heap.top().second; heap.pop(); if (vis[u]) continue; vis[u] = 1; for (auto t : g[u]) { int v = t.v, w = t.w; if (d[v] > d[u] + w) { d[v] = d[u] + w; heap.push({d[v], v}); } } } } bool Johnson() { for (int i = 1; i <= n; ++i) g[0].emplace_back(i, 0); if (SPFA(0, h)) return true; for (int i = 1; i <= n; ++i) for (auto &t : g[i]) t.w += h[i] - h[t.v]; for (int i = 1; i <= n; ++i) { Dijkstra(i, dis[i]); for (int j = 1; j <= n; ++j) dis[i][j] += h[j] - h[i]; } return false; } \u4f20\u9012\u95ed\u5305 \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u65e0\u6743\u56fe \\(G\\) \u53ca\u82e5\u5e72\u6761\u8fb9\uff0c\u5224\u65ad\u4efb\u610f\u4e24\u70b9\u662f\u5426\u8054\u901a\u3002 \u53ef\u4ee5\u6309\u7167 Floyd \u7684\u601d\u8def\uff0c\u6362\u4e3a 0/1 \u8fb9\u6743\u3001\u5148 bitand \u518d bitor \u8fd0\u7b97\u5373\u53ef\u3002 \u4f7f\u7528 bitset \u4f18\u5316\u53ef\u4ee5\u8f7b\u677e\u505a\u5230 \\(\\mathcal O(n^3/\\omega)\\) \u3002 \u5b9e\u73b0 \u00b6 void Main() { n = read<int>(); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) a[i][j] = read<bool>(); for (int k = 1; k <= n; ++k) for (int i = 1; i <= n; ++i) if (a[i][k]) a[i] |= a[k]; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cout << a[i][j] << \" \\n\"[j == n]; }","title":"\u5168\u6e90\u6700\u77ed\u8def"},{"location":"graph/shortest-path/apsp/#_1","text":"All Pairs Shortest Path Problem (APSP)\u3002","title":"\u5168\u6e90\u6700\u77ed\u8def"},{"location":"graph/shortest-path/apsp/#floyd-warshall","text":"\u4e00\u4e2a\u5f88\u5b9e\u7528\u7684\u5168\u6e90\u6700\u77ed\u8def\u89e3\u6cd5\uff0c\u7279\u70b9\u662f\u597d\u5199\uff0c\u5bb9\u6613\u62d3\u5c55\u3002","title":"Floyd-Warshall"},{"location":"graph/shortest-path/apsp/#_2","text":"\u6211\u4eec\u8bbe \\(f(k,i,j)\\) \u8868\u793a\u8003\u8651\u524d \\(k\\) \u4e2a\u70b9\uff0c \\(i\\to j\\) \u7684\u6700\u77ed\u8def\u3002 \u9996\u5148\u8003\u8651 \\(k=0\\) \u7684\u521d\u59cb\u72b6\u6001\uff0c\u5bb9\u6613\u77e5\u9053\uff0c \u6709 \\(f(0,x,x)=0\\) \u8868\u793a\u76f8\u540c\u7684\u70b9\uff1b \u82e5 \\(u\\to v\\) \uff0c\u5219 \\(f(0,u,v)=w\\) \u8868\u793a\u6709\u8fde\u8fb9\u3002 \u8003\u8651\u52a0\u5165\u70b9 \\(k\\) \u7684\u8d21\u732e\uff0c\u6211\u4eec\u77e5\u9053 \\(k\\) \u53ef\u80fd\u4f1a\u66f4\u65b0\u4e00\u4e9b\u70b9\u7684\u8ddd\u79bb\uff0c \\[ f(k,i,j)=\\min\\{f(k-1,i,j),f(k-1,i,k)+f(k-1,j,k)\\} \\] \u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002 \u6211\u4eec\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\uff0c\u6ce8\u610f\u8981\u5148\u679a\u4e3e \\(k\\) \uff01","title":"\u601d\u60f3"},{"location":"graph/shortest-path/apsp/#_3","text":"\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\uff0c \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 for (int k = 1; k <= n; ++k) for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);","title":"\u6734\u7d20\u5b9e\u73b0"},{"location":"graph/shortest-path/apsp/#_4","text":"\u6ce8\u610f\u5230\u5982\u679c dis[i][k] == INF \u90a3\u4e48\u6ca1\u5fc5\u8981\u8f6c\u79fb\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 for (int k = 1; k <= n; ++k) for (int i = 1; i <= n; ++i) { int r = dis[i][k]; if (r == 0x3f3f3f3f) continue; for (int j = 1; j <= n; ++j) { if (i == j || k == j) continue; if (dis[k][j] == 0x3f3f3f3f) continue; dis[i][j] = min(dis[i][j], r + dis[k][j]); } } \u8fd9\u4e2a\u4f18\u5316\u5728\u7a20\u5bc6\u56fe\u4e2d\u6548\u679c\u4e0d\u5927\u3002","title":"\u9488\u5bf9\u7a00\u758f\u56fe\u7684\u5e38\u6570\u4f18\u5316"},{"location":"graph/shortest-path/apsp/#ijk-ikj-algorithm","text":"\u6211\u4eec\u77e5\u9053 Floyd-Warshall \u7b97\u6cd5\u9700\u8981 \\(k\\) \u5148\u904d\u5386\uff0c \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4ea4\u6362\u987a\u5e8f\uff0c\u6709\u6027\u8d28\uff1a \u904d\u5386\u987a\u5e8f IJK\uff0c\u8dd1\u4e09\u6b21\u5373\u53ef\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002 \u904d\u5386\u987a\u5e8f IKJ\uff0c\u8dd1\u4e24\u6b21\u5373\u53ef\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002 \u8bc1\u660e\u4e0d\u4f1a\uff0c\u8be6\u89c1\uff1a https://arxiv.org/abs/1904.01210 \u3002","title":"IJK / IKJ Algorithm"},{"location":"graph/shortest-path/apsp/#johnson","text":"","title":"Johnson"},{"location":"graph/shortest-path/apsp/#_5","text":"\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u8dd1 \\(n\\) \u6b21 Dijkstra \u7b97\u6cd5\uff0c\u590d\u6742\u5ea6\u662f \\(\\mathcal O(nm\\log m)\\) \u3002 \u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u590d\u6742\u5ea6\u5728\u7a00\u758f\u56fe\u4e0a\u9762\u4f18\u4e8e Floyd-Warshall \u7b97\u6cd5\u3002 \u7528 Fibonacci \u5806\u5b9e\u73b0\uff0c\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(n^2\\log n+nm)\\) \uff0c\u5373\u4f7f\u5728\u7a20\u5bc6\u56fe\u4e0a\u4e5f\u6bd4\u8f83\u597d\u3002 \u4f46\u662f\uff0c\u95ee\u9898\u662f Dijkstra \u4e0d\u652f\u6301\u8d1f\u6743\u8fb9\uff0c\u5982\u679c\u8dd1 \\(n\\) \u6b21 Bellman-Ford \u53cd\u800c\u590d\u6742\u5ea6\u66f4\u4e0d\u597d\u4e86\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u8003\u8651\u6539\u9020\u56fe\uff0c\u5c06\u8d1f\u6743\u6d88\u9664\u7684\u540c\u65f6\uff0c\u6c42\u51fa\u6b63\u786e\u7684\u6700\u77ed\u8def\u3002","title":"\u5f15\u5165"},{"location":"graph/shortest-path/apsp/#_6","text":"","title":"\u8fc7\u7a0b"},{"location":"graph/shortest-path/apsp/#_7","text":"\u5efa\u8d85\u7ea7\u6e90\u70b9 \\(0\\) \uff0c\u4e0e\u6240\u6709\u70b9\u8fde\u8fb9\u6743\u4e3a \\(0\\) \u7684\u8fb9\u3002 \u6211\u4eec\u6784\u9020\u52bf\u80fd\u51fd\u6570 \\(h(x)\\) \u8868\u793a\uff0c\u4ece \\(0\\) \u53f7\u70b9\u5230\u70b9 \\(x\\) \u7684\u6700\u77ed\u8def\u3002 \u5bb9\u6613\u53d1\u73b0\u6c42\u52bf\u80fd\u51fd\u6570\u7684\u8fc7\u7a0b\u4e0d\u662f\u590d\u6742\u5ea6\u74f6\u9888\uff0c\u56e0\u6b64\u4f7f\u7528 SPFA \u5373\u53ef\u3002","title":"\u52bf\u80fd\u51fd\u6570"},{"location":"graph/shortest-path/apsp/#_8","text":"\u6211\u4eec\u5148\u8bbe\u8bb0\u53f7\uff0c \u8bbe \\(w(u,v)\\) \u8868\u793a\u539f\u56fe\u4e2d\uff0c \\(u,v\\) \u4e24\u70b9\u95f4\u7684\u8fb9\u6743 \\(w\\) \uff1b \u8bbe \\(w'(u,v)\\) \u4e3a\u6784\u9020\u7684\u56fe\u4e2d\uff0c \\(u,v\\) \u4e24\u70b9\u95f4\u7684\u8fb9\u6743 \\(w\\) \uff1b \u8bbe \\(d(s,t)\\) \u8868\u793a\u539f\u56fe\u4e2d\uff0c \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u662f\u6211\u4eec\u8981\u6c42\u7684\uff1b \u8bbe \\(d'(s,t)\\) \u4e3a\u6784\u9020\u7684\u56fe\u4e2d\uff0c \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 \u6211\u4eec\u4ee4\uff0c \\[ w'(u,v)=w(u,v)+h(u)-h(v) \\] \u6709\u6027\u8d28\uff1a\u65b0\u56fe\u4e2d\u7684\u8fb9\u6743\u4e00\u5b9a\u975e\u8d1f\u3002 \u8fb9\u6743\u975e\u8d1f\u7684\u8bc1\u660e \u6839\u636e\u677e\u5f1b\u7684\u539f\u7406\uff0c\u4e00\u5b9a\u6709\uff0c \\[ h(v)\\le h(u)+w(u,v) \\] \u5f97\u8bc1\u3002","title":"\u6539\u9020\u8fb9\u6743"},{"location":"graph/shortest-path/apsp/#_9","text":"\u6709\u6027\u8d28\uff0c \\[ d'(s,t)=d(s,t)+h(s)-h(t) \\] \u6b63\u786e\u6027\u7684\u8bc1\u660e \u4e0d\u8003\u8651\u6700\u77ed\u7684\u8981\u6c42\uff0c\u6211\u4eec\u5047\u8bbe\u5b58\u5728\u8def\u5f84 \\(s\\to t\\) \uff0c\u8def\u5f84\u5f62\u5982\uff0c \\[ s\\to p_1\\to p_2\\dots\\to p_k\\to t \\] \u90a3\u4e48\uff0c\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\u8868\u793a\u4e3a\uff0c \\[ w'(s,p_1)+w'(p_1,p_2)+\\dots+w'(p_k,t) \\] \u76f4\u63a5\u5c55\u5f00\uff0c \\[ [w(s,p_1)+h(s)-h(p_1)]+[w(p_1,p_2)+h(p_1)-h(p_2)]+\\dots+[w(p_k,t)+h(p_k)-h(t)] \\] \u5316\u7b80\u5373\uff0c \\[ w(s,p_1)+w(p_1,p_2)+\\dots+w(p_k,t)+h(s)-h(t) \\] \u6211\u4eec\u53d1\u73b0\u8def\u5f84\u9644\u52a0\u503c \\(h(s)-h(t)\\) \u53ea\u4e0e\u8d77\u70b9\u548c\u7ec8\u70b9\u6709\u5173\uff0c\u4e0e\u8def\u5f84\u65e0\u5173\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u76f4\u63a5\u627e\u5230 \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u5f84\uff0c\u518d\u6d88\u9664\u6389\u9644\u52a0\u503c\uff0c\u4e00\u5b9a\u662f\u6b63\u786e\u7684\u3002","title":"\u7b54\u6848\u7edf\u8ba1"},{"location":"graph/shortest-path/apsp/#_10","text":"\u53ef\u4ee5\u4f7f\u7528\u9b54\u6cd5\u5e73\u677f\u7535\u89c6\uff08 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int h[N]; int dis[N][N]; int st[N], vis[N]; int cnt[N]; bool SPFA(int s, int *d) { memset(cnt, 0, sizeof(int) * (n + 1)); memset(st, 0, sizeof(int) * (n + 1)); memset(d, 0x3f, sizeof(int) * (n + 1)); d[s] = 0; st[s] = 1; queue<int> q; q.push(s); while (!q.empty()) { int u = q.front(); q.pop(); st[u] = 0; for (auto t : g[u]) { int v = t.v, w = t.w; if (d[v] > d[u] + w) { d[v] = d[u] + w; cnt[v] = cnt[u] + 1; if (cnt[v] > n) return true; if (!st[v]) { q.push(v); st[v] = 1; } } } } return false; } void Dijkstra(int s, int *d) { memset(vis, 0, sizeof(int) * (n + 1)); memset(d, 0x3f, sizeof(int) * (n + 1)); pqueue<pair<int, int>, greater<pair<int, int>>> heap; heap.push({0, s}); d[s] = 0; while (!heap.empty()) { int u = heap.top().second; heap.pop(); if (vis[u]) continue; vis[u] = 1; for (auto t : g[u]) { int v = t.v, w = t.w; if (d[v] > d[u] + w) { d[v] = d[u] + w; heap.push({d[v], v}); } } } } bool Johnson() { for (int i = 1; i <= n; ++i) g[0].emplace_back(i, 0); if (SPFA(0, h)) return true; for (int i = 1; i <= n; ++i) for (auto &t : g[i]) t.w += h[i] - h[t.v]; for (int i = 1; i <= n; ++i) { Dijkstra(i, dis[i]); for (int j = 1; j <= n; ++j) dis[i][j] += h[j] - h[i]; } return false; }","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/apsp/#_11","text":"","title":"\u4f20\u9012\u95ed\u5305"},{"location":"graph/shortest-path/apsp/#_12","text":"\u7ed9\u5b9a\u65e0\u6743\u56fe \\(G\\) \u53ca\u82e5\u5e72\u6761\u8fb9\uff0c\u5224\u65ad\u4efb\u610f\u4e24\u70b9\u662f\u5426\u8054\u901a\u3002 \u53ef\u4ee5\u6309\u7167 Floyd \u7684\u601d\u8def\uff0c\u6362\u4e3a 0/1 \u8fb9\u6743\u3001\u5148 bitand \u518d bitor \u8fd0\u7b97\u5373\u53ef\u3002 \u4f7f\u7528 bitset \u4f18\u5316\u53ef\u4ee5\u8f7b\u677e\u505a\u5230 \\(\\mathcal O(n^3/\\omega)\\) \u3002","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"graph/shortest-path/apsp/#_13","text":"void Main() { n = read<int>(); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) a[i][j] = read<bool>(); for (int k = 1; k <= n; ++k) for (int i = 1; i <= n; ++i) if (a[i][k]) a[i] |= a[k]; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cout << a[i][j] << \" \\n\"[j == n]; }","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/diff/","text":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u00b6 \u5b9a\u4e49 \u00b6 \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u662f\u4e00\u79cd\u7279\u6b8a\u7684 \\(n\\) \u5143\u4e00\u6b21\u4e0d\u7b49\u5f0f\u7ec4\uff1a \u5305\u542b \\(n\\) \u4e2a\u53d8\u91cf \\(x_1,x_2,\\dots,x_n\\) \uff1b \u5305\u542b \\(m\\) \u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u5f62\u5982 \\(x_i-x_j \\le c_k\\) \uff0c\u5176\u4e2d \\(1 \\le i, j \\le n, i \\neq j\\) \u3002 \u6211\u4eec\u88ab\u8981\u6c42\u6c42\u4e00\u7ec4\u89e3\uff0c\u6216\u8005\u5224\u65ad\u65e0\u89e3\u3002 \u601d\u60f3 \u00b6 \u5982\u56fe\uff1a \u6700\u539f\u59cb\u7684\u7ea6\u675f\u6761\u4ef6\u5f62\u5982 \\(x_i-x_j \\le c_k\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7b49\u4ef7\u53d8\u5f62\u4e3a \\(x_i\\leq x_j+c_k\\) \uff0c\u6ce8\u610f\u5230\u8fd9\u4e0e \u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f \u975e\u5e38\u76f8\u4f3c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u6574\u4e2a\u4e0d\u7b49\u5f0f\u7ec4\u770b\u505a\u4e00\u4e2a\u56fe\uff0c\u5728\u56fe\u4e0a\u8dd1\u6700\u77ed\u8def\uff1a \u5bf9\u4e8e \\(x_i-x_j \\le c_k\\) \uff1a \u5c06\u53d8\u91cf \\(x_i,x_j\\) \u770b\u4e3a\u8282\u70b9\uff0c\u5c06 \\(c_k\\) \u770b\u4e3a\u8fb9\u6743\uff0c \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\uff1a\u4ece \\(j\\) \u5411 \\(i\\) \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a \\(c_k\\) \u7684\u8fb9\u3002 \u6b64\u65f6\u5f53\u6211\u4eec\u5728\u56fe\u4e0a\u8dd1\u51fa\u6700\u77ed\u8def\u7684\u7ed3\u679c \\(\\mathit{dis}_k\\) \u5373\u4e3a \\(x_k\\) \u7684\u4e00\u4e2a\u7279\u89e3\uff0c\u8bb0\u4e3a \\(\\{a_1,a_2,\\dots,a_n\\}\\) \u3002 \u5bb9\u6613\u77e5\u9053\uff0c\u901a\u89e3\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\(\\{a_1+d,a_2+d,\\dots,a_n+d\\}\\) \u4e5f\u662f\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u5dee\u540e \\(d\\) \u6070\u597d\u88ab\u6d88\u6389\u3002 \u6211\u4eec\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9 \\(\\mathit{rt}\\) \u5e76\u4ece \\(\\mathit{rt}\\) \u5f00\u59cb\u8dd1\u6700\u77ed\u8def\uff0c\u6ce8\u610f\u5230\u8fb9\u6743\u6709\u53ef\u80fd\u975e\u8d1f\uff0c\u4e8e\u662f\u6211\u4eec\u8dd1 SPFA\u3002 \u5982\u679c\u6211\u4eec\u88ab\u8981\u6c42\u5224\u65ad\u662f\u5426\u5b58\u5728\u89e3\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6808\u4f18\u5316\u7684 Bellman\u2013Ford\u3002 \u5e38\u89c1\u5957\u8def \u00b6 \u6211\u4eec\u7684\u539f\u578b\u5f62\u5f0f\u4e3a \\(x_i-x_j\\le c_k\\) \uff0c\u7136\u800c\u5927\u90e8\u5206\u65f6\u5019\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u5e76\u4e0d\u662f\u8fd9\u4e2a\u5f62\u5f0f\uff08\u6709\u53ef\u80fd\u66f4\u52a0\u590d\u6742\uff09\u3002 \u4e8e\u662f\u6211\u4eec\u9700\u8981\u8f6c\u6362\uff1a \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 \\(x_i-x_j\\le c\\) \\(x_i-x_j\\le c\\) add(j, i, c) \\(x_i-x_j\\ge c\\) \\(x_j-x_i\\le -c\\) add(i, j, -c) \\(x_i-x_j=c\\) \\(x_i-x_j\\le c,x_i-x_j\\ge c\\) add(j, i, c), add(i, j, -c) \\(x_i=x_j\\) \\(x_i-x_j\\le 0,x_i-x_j\\ge 0\\) add(j, i, 0), add(i, j, 0) \u5e38\u89c1\u5b89\u6392\u4f4d\u7f6e\u95ee\u9898\uff0c\u53ef\u80fd\u9700\u8981\u6ce8\u610f \\(x_i-x_{i-1}\\ge1\\) \u8fd9\u79cd\u5751\u70b9\u3002 \u793a\u4f8b\u4ee3\u7801 \u00b6 Note int n; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> G[N]; void merge(int a, int b, int x) { // D(a) <= D(b) + x G[b].emplace_back(a, x); } int solve(int root) { vector<int> dis(n + 1, 1e18); vector<int> vis(n + 1, 0); vector<int> len(n + 1, 0); dis[root] = 0; vis[root] = 1; len[root] = 0; queue<int> q; q.push(root); while (!q.empty()) { int u = q.front(); q.pop(); vis[u] = 0; for (auto t : G[u]) { int v = t.v, w = t.w; if (dis[v] <= dis[u] + w) continue; dis[v] = dis[u] + w; len[v] = len[u] + 1; if (len[v] > n) return -1; if (!vis[v]) { q.push(v); vis[v] = 1; } } } int res = dis[n] - dis[1]; return res > 1e10 ? -2 : res; } void Main() { int l, d; cin >> n >> l >> d; merge(1, 0, 0); for (int i = 2; i <= n; ++i) { // D(i - 1) <= D(i) - 1 // D(i) <= D(0) - 0 merge(i, 0, 0); merge(i - 1, i, -1); } while (l--) { int a, b, x; cin >> a >> b >> x; // D(b) - D(a) <= x // D(b) <= D(a) + x merge(b, a, x); } while (d--) { int a, b, x; cin >> a >> b >> x; // D(b) - D(a) >= x // D(a) <= D(b) - x merge(a, b, -x); } if (solve(0) == -1) cout << \"-1\" << endl; else cout << solve(1) << endl; return; } \u7ec3\u4e60\u9898 \u00b6 \u89c1\uff1a https://www.luogu.com.cn/training/418255","title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf"},{"location":"graph/shortest-path/diff/#_1","text":"","title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf"},{"location":"graph/shortest-path/diff/#_2","text":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u662f\u4e00\u79cd\u7279\u6b8a\u7684 \\(n\\) \u5143\u4e00\u6b21\u4e0d\u7b49\u5f0f\u7ec4\uff1a \u5305\u542b \\(n\\) \u4e2a\u53d8\u91cf \\(x_1,x_2,\\dots,x_n\\) \uff1b \u5305\u542b \\(m\\) \u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u5f62\u5982 \\(x_i-x_j \\le c_k\\) \uff0c\u5176\u4e2d \\(1 \\le i, j \\le n, i \\neq j\\) \u3002 \u6211\u4eec\u88ab\u8981\u6c42\u6c42\u4e00\u7ec4\u89e3\uff0c\u6216\u8005\u5224\u65ad\u65e0\u89e3\u3002","title":"\u5b9a\u4e49"},{"location":"graph/shortest-path/diff/#_3","text":"\u5982\u56fe\uff1a \u6700\u539f\u59cb\u7684\u7ea6\u675f\u6761\u4ef6\u5f62\u5982 \\(x_i-x_j \\le c_k\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7b49\u4ef7\u53d8\u5f62\u4e3a \\(x_i\\leq x_j+c_k\\) \uff0c\u6ce8\u610f\u5230\u8fd9\u4e0e \u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f \u975e\u5e38\u76f8\u4f3c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u6574\u4e2a\u4e0d\u7b49\u5f0f\u7ec4\u770b\u505a\u4e00\u4e2a\u56fe\uff0c\u5728\u56fe\u4e0a\u8dd1\u6700\u77ed\u8def\uff1a \u5bf9\u4e8e \\(x_i-x_j \\le c_k\\) \uff1a \u5c06\u53d8\u91cf \\(x_i,x_j\\) \u770b\u4e3a\u8282\u70b9\uff0c\u5c06 \\(c_k\\) \u770b\u4e3a\u8fb9\u6743\uff0c \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\uff1a\u4ece \\(j\\) \u5411 \\(i\\) \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a \\(c_k\\) \u7684\u8fb9\u3002 \u6b64\u65f6\u5f53\u6211\u4eec\u5728\u56fe\u4e0a\u8dd1\u51fa\u6700\u77ed\u8def\u7684\u7ed3\u679c \\(\\mathit{dis}_k\\) \u5373\u4e3a \\(x_k\\) \u7684\u4e00\u4e2a\u7279\u89e3\uff0c\u8bb0\u4e3a \\(\\{a_1,a_2,\\dots,a_n\\}\\) \u3002 \u5bb9\u6613\u77e5\u9053\uff0c\u901a\u89e3\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\(\\{a_1+d,a_2+d,\\dots,a_n+d\\}\\) \u4e5f\u662f\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u5dee\u540e \\(d\\) \u6070\u597d\u88ab\u6d88\u6389\u3002 \u6211\u4eec\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9 \\(\\mathit{rt}\\) \u5e76\u4ece \\(\\mathit{rt}\\) \u5f00\u59cb\u8dd1\u6700\u77ed\u8def\uff0c\u6ce8\u610f\u5230\u8fb9\u6743\u6709\u53ef\u80fd\u975e\u8d1f\uff0c\u4e8e\u662f\u6211\u4eec\u8dd1 SPFA\u3002 \u5982\u679c\u6211\u4eec\u88ab\u8981\u6c42\u5224\u65ad\u662f\u5426\u5b58\u5728\u89e3\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6808\u4f18\u5316\u7684 Bellman\u2013Ford\u3002","title":"\u601d\u60f3"},{"location":"graph/shortest-path/diff/#_4","text":"\u6211\u4eec\u7684\u539f\u578b\u5f62\u5f0f\u4e3a \\(x_i-x_j\\le c_k\\) \uff0c\u7136\u800c\u5927\u90e8\u5206\u65f6\u5019\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u5e76\u4e0d\u662f\u8fd9\u4e2a\u5f62\u5f0f\uff08\u6709\u53ef\u80fd\u66f4\u52a0\u590d\u6742\uff09\u3002 \u4e8e\u662f\u6211\u4eec\u9700\u8981\u8f6c\u6362\uff1a \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 \\(x_i-x_j\\le c\\) \\(x_i-x_j\\le c\\) add(j, i, c) \\(x_i-x_j\\ge c\\) \\(x_j-x_i\\le -c\\) add(i, j, -c) \\(x_i-x_j=c\\) \\(x_i-x_j\\le c,x_i-x_j\\ge c\\) add(j, i, c), add(i, j, -c) \\(x_i=x_j\\) \\(x_i-x_j\\le 0,x_i-x_j\\ge 0\\) add(j, i, 0), add(i, j, 0) \u5e38\u89c1\u5b89\u6392\u4f4d\u7f6e\u95ee\u9898\uff0c\u53ef\u80fd\u9700\u8981\u6ce8\u610f \\(x_i-x_{i-1}\\ge1\\) \u8fd9\u79cd\u5751\u70b9\u3002","title":"\u5e38\u89c1\u5957\u8def"},{"location":"graph/shortest-path/diff/#_5","text":"Note int n; struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> G[N]; void merge(int a, int b, int x) { // D(a) <= D(b) + x G[b].emplace_back(a, x); } int solve(int root) { vector<int> dis(n + 1, 1e18); vector<int> vis(n + 1, 0); vector<int> len(n + 1, 0); dis[root] = 0; vis[root] = 1; len[root] = 0; queue<int> q; q.push(root); while (!q.empty()) { int u = q.front(); q.pop(); vis[u] = 0; for (auto t : G[u]) { int v = t.v, w = t.w; if (dis[v] <= dis[u] + w) continue; dis[v] = dis[u] + w; len[v] = len[u] + 1; if (len[v] > n) return -1; if (!vis[v]) { q.push(v); vis[v] = 1; } } } int res = dis[n] - dis[1]; return res > 1e10 ? -2 : res; } void Main() { int l, d; cin >> n >> l >> d; merge(1, 0, 0); for (int i = 2; i <= n; ++i) { // D(i - 1) <= D(i) - 1 // D(i) <= D(0) - 0 merge(i, 0, 0); merge(i - 1, i, -1); } while (l--) { int a, b, x; cin >> a >> b >> x; // D(b) - D(a) <= x // D(b) <= D(a) + x merge(b, a, x); } while (d--) { int a, b, x; cin >> a >> b >> x; // D(b) - D(a) >= x // D(a) <= D(b) - x merge(a, b, -x); } if (solve(0) == -1) cout << \"-1\" << endl; else cout << solve(1) << endl; return; }","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"graph/shortest-path/diff/#_6","text":"\u89c1\uff1a https://www.luogu.com.cn/training/418255","title":"\u7ec3\u4e60\u9898"},{"location":"graph/shortest-path/other/","text":"\u5176\u4ed6\u6700\u77ed\u8def\u7b97\u6cd5 \u00b6 \u5bf9\u4e8e DAG\uff1a\u62d3\u6251\u6392\u5e8f \u00b6 \u601d\u60f3 \u00b6 \u6bcf\u6b21\u5220\u53bb\u5165\u8fb9\u7684\u65f6\u5019\uff0c\u66f4\u65b0\u6700\u77ed\u8def\u5373\u53ef\uff0c\u8fd9\u6837\u53ef\u4ee5\u8bbf\u95ee\u5230\u6bcf\u4e00\u4e2a\u8def\u5f84\uff0c\u6b63\u786e\u6027\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u5f52\u7eb3\u6cd5\u8bc1\u660e\u3002 \u5b9e\u73b0 \u00b6 \u5bf9\u4e8e\u5e38\u6570\u8fb9\u6743\uff1aBFS \u00b6 \u601d\u60f3 \u00b6 \u6b63\u786e\u6027\u5bb9\u6613\u8bc1\u660e\uff0cBFS \u6700\u5148\u626b\u5230\u7684\u70b9\u4e00\u5b9a\u662f\u8ddd\u79bb\u8fd1\u7684\uff0c\u8fd9\u5c31\u662f BFS \u7684\u5206\u5c42\u6027\u3002 \u5b9e\u73b0 \u00b6 \u5bf9\u4e8e \\(0 / 1\\) \u8fb9\u6743\uff1a\u53cc\u7aef\u961f\u5217 BFS \u00b6 \u601d\u60f3 \u00b6 \u6bcf\u6b21\u9047\u5230\u8fb9\u6743\u4e3a \\(0\\) \u7684\u70b9\u653e\u5165\u961f\u5217\u524d\u7aef\u3001\u8fb9\u6743\u4e3a \\(1\\) \u7684\u70b9\u653e\u5165\u540e\u7aef\uff0c\u4ece\u524d\u7aef\u53d6\u8fdb\u884c BFS\u3002 \u6b63\u786e\u6027\uff1a\u653e\u5165\u524d\u7aef\u7c7b\u4f3c\u4e8e\uff0c\u5c06\u8ddd\u79bb\u4e3a \\(0\\) \u7684\u70b9\u8fde\u4e3a\u4e00\u5757\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u6700\u77ed\u8def\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5757\u90fd\u786e\u5b9a\u4e86\u3002 \u5b9e\u73b0 \u00b6 Note struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> G[N]; int dis[N]; int get_dis(int W) { memset(dis, 0x3f, sizeof(int) * (n + 1)); deque<int> q; q.push_back(1); dis[1] = 0; while (!q.empty()) { int u = q.front(); q.pop_front(); for (auto t : G[u]) { int v = t.v, w = t.w > W; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; if (w == 0) q.push_front(v); else q.push_back(v); } } } return dis[n]; }","title":"\u5176\u4ed6\u6700\u77ed\u8def\u7b97\u6cd5"},{"location":"graph/shortest-path/other/#_1","text":"","title":"\u5176\u4ed6\u6700\u77ed\u8def\u7b97\u6cd5"},{"location":"graph/shortest-path/other/#dag","text":"","title":"\u5bf9\u4e8e DAG\uff1a\u62d3\u6251\u6392\u5e8f"},{"location":"graph/shortest-path/other/#_2","text":"\u6bcf\u6b21\u5220\u53bb\u5165\u8fb9\u7684\u65f6\u5019\uff0c\u66f4\u65b0\u6700\u77ed\u8def\u5373\u53ef\uff0c\u8fd9\u6837\u53ef\u4ee5\u8bbf\u95ee\u5230\u6bcf\u4e00\u4e2a\u8def\u5f84\uff0c\u6b63\u786e\u6027\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u5f52\u7eb3\u6cd5\u8bc1\u660e\u3002","title":"\u601d\u60f3"},{"location":"graph/shortest-path/other/#_3","text":"","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/other/#bfs","text":"","title":"\u5bf9\u4e8e\u5e38\u6570\u8fb9\u6743\uff1aBFS"},{"location":"graph/shortest-path/other/#_4","text":"\u6b63\u786e\u6027\u5bb9\u6613\u8bc1\u660e\uff0cBFS \u6700\u5148\u626b\u5230\u7684\u70b9\u4e00\u5b9a\u662f\u8ddd\u79bb\u8fd1\u7684\uff0c\u8fd9\u5c31\u662f BFS \u7684\u5206\u5c42\u6027\u3002","title":"\u601d\u60f3"},{"location":"graph/shortest-path/other/#_5","text":"","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/other/#0-1-bfs","text":"","title":"\u5bf9\u4e8e \\(0 / 1\\) \u8fb9\u6743\uff1a\u53cc\u7aef\u961f\u5217 BFS"},{"location":"graph/shortest-path/other/#_6","text":"\u6bcf\u6b21\u9047\u5230\u8fb9\u6743\u4e3a \\(0\\) \u7684\u70b9\u653e\u5165\u961f\u5217\u524d\u7aef\u3001\u8fb9\u6743\u4e3a \\(1\\) \u7684\u70b9\u653e\u5165\u540e\u7aef\uff0c\u4ece\u524d\u7aef\u53d6\u8fdb\u884c BFS\u3002 \u6b63\u786e\u6027\uff1a\u653e\u5165\u524d\u7aef\u7c7b\u4f3c\u4e8e\uff0c\u5c06\u8ddd\u79bb\u4e3a \\(0\\) \u7684\u70b9\u8fde\u4e3a\u4e00\u5757\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u6700\u77ed\u8def\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5757\u90fd\u786e\u5b9a\u4e86\u3002","title":"\u601d\u60f3"},{"location":"graph/shortest-path/other/#_7","text":"Note struct edge { int v, w; edge() = default; edge(int v, int w): v(v), w(w) {} }; vector<edge> G[N]; int dis[N]; int get_dis(int W) { memset(dis, 0x3f, sizeof(int) * (n + 1)); deque<int> q; q.push_back(1); dis[1] = 0; while (!q.empty()) { int u = q.front(); q.pop_front(); for (auto t : G[u]) { int v = t.v, w = t.w > W; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; if (w == 0) q.push_front(v); else q.push_back(v); } } } return dis[n]; }","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/sssp/","text":"\u5355\u6e90\u6700\u77ed\u8def \u00b6 Single Source Shortest Path Problem (SSSP)\u3002 Dijkstra \u00b6 \u8be5\u7b97\u6cd5\uff0cDijkstra\uff08/\u02c8dikstr\u0251/ \u6216 /\u02c8d\u025bikstr\u0251/\uff09\u662f\u4e00\u79cd\u6c42\u89e3\u975e\u8d1f\u6743\u56fe\u4e0a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002 \u6734\u7d20\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(n^2)\\) \uff0c\u5806\u4f18\u5316\u4e3a \\(\\mathcal O(m\\log m)\\) \uff0c\u4f7f\u7528 Fibonacci \u5806\uff08\u652f\u6301 \\(\\mathcal O(1)\\) \u63d2\u5165\uff09\u53ef\u4ee5\u505a\u5230 \\(\\mathcal O(n\\log n+m)\\) \u3002 \u6734\u7d20\u7b97\u6cd5 \u00b6 \u8bbe\u4e24\u4e2a\u96c6\u5408\uff1a\u300c\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u96c6\u5408 \\(S\\) \u300d\u548c\u300c\u672a\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u96c6\u5408 \\(T\\) \u300d\u3002 \u6bcf\u6b21\u4ece \\(T\\) \u4e2d\u9009\u53d6\u4e00\u4e2a\u6700\u8fd1\u7684\uff0c\u52a0\u5165\u96c6\u5408 \\(S\\) \u5e76\u677e\u5f1b\uff0c\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u3002\u76f4\u5230 \\(T\\) \u96c6\u5408\u4e3a\u7a7a\u3002 \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int dis[N], vis[N]; int get_u() { int t = -1; for (int i = 1; i <= n; ++i) { if (vis[i]) continue; if (t == -1 || dis[i] < dis[t]) t = i; } return t; } void dijkstra(int s) { memset(dis, 0x3f, sizeof dis); dis[s] = 0; for (int step = 0; step < n; ++step) { int u = get_u(); vis[u] = true; for (auto t : g[u]) { int v = t.v, w = t.w; dis[v] = min(dis[v], dis[u] + w); } } } \u5806\u4f18\u5316 \u00b6 \u6bcf\u6210\u529f\u677e\u5f1b\u4e00\u6761\u8fb9 \\((u,v)\\) \uff0c\u5c31\u5c06 \\(v\\) \u63d2\u5165\u5806\u4e2d\uff0c \u5982\u679c \\(v\\) \u5df2\u7ecf\u5728\u5806\u4e2d\uff0c\u76f4\u63a5\u4fee\u6539\u76f8\u5e94\u5143\u7d20\u7684\u6743\u503c\u5373\u53ef\uff0c\u6bcf\u6b21\u67e5\u627e\u64cd\u4f5c\u76f4\u63a5\u53d6\u5806\u9876\u7ed3\u70b9\u5373\u53ef\u3002 \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int dis[N], vis[N]; void dijkstra(int s) { memset(dis, 0x3f, sizeof(int) * (n + 1)); pqueue<pair<int, int>, greater<pair<int, int>>> heap; dis[s] = 0; heap.push({0, s}); while (!heap.empty()) { int u = heap.top().second; heap.pop(); if (vis[u]) continue; vis[u] = 1; for (auto t : g[u]) { int v = t.v, w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; heap.push({dis[v], v}); } } } } \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u9996\u5148\uff0c\u6734\u7d20\u7b97\u6cd5\u663e\u7136\u5c31\u662f \\(\\mathcal O(n^2+m)\\) \u7684\u3002 \u8003\u8651\u5206\u6790\u5806\u4f18\u5316\u7248\u672c\u7684\u590d\u6742\u5ea6\uff0c\u6709\u7ed3\u8bba\uff1a\u4f18\u5148\u961f\u5217\u4e2d\u5b58\u5728\u7684\u5143\u7d20\u4e2a\u6570\u5728 \\(\\mathcal O(m)\\) \uff0c\u5355\u6b21\u662f\u5355 \\(\\log\\) \u7684\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(m\\log m)\\) \u3002 \u5b9e\u73b0 \u590d\u6742\u5ea6 \u9002\u7528\u60c5\u666f \u6734\u7d20\u7b97\u6cd5 \\(\\mathcal O(n^2+m)\\) \u6570\u636e\u91cf\u5c0f \u4f18\u5148\u961f\u5217\u4f18\u5316 \\(\\mathcal O(m\\log m)\\) \u7a00\u758f\u56fe\uff0c\u8fb9\u6570\u4e3a \\(\\mathcal O(n)\\) \u7b49\u7ea7\u7684 Fibonacci \u5806\u4f18\u5316 \\(\\mathcal O(n\\log n+m)\\) \u7a20\u5bc6\u56fe\uff0c\u8fb9\u6570\u4e3a \\(\\mathcal O(n^2)\\) \u7b49\u7ea7\u7684 \u4e00\u822c\u6765\u8bf4\uff0c\u6700\u540e\u4e00\u4e2a\u4e25\u683c\u66f4\u4f18\uff0c\u4f46\u662f\u6570\u636e\u91cf\u5c0f\u7684\u65f6\u5019\u8dd1\u5f97\u4e0d\u4e00\u5b9a\u5feb\u3002 \u8bf4\u53e5\u95f2\u8bdd\uff0cDijkstra \u4e5f\u53ef\u4ee5\u9b54\u6539\u540e\u7528\u4e8e\u8d1f\u6743\u56fe\uff0c\u8be6\u89c1 Johnson \u7b97\u6cd5\u3002 Bellman\u2013Ford \u00b6 \u601d\u60f3 \u00b6 \u6211\u4eec\u79f0\u677e\u5f1b\u4e3a\u64cd\u4f5c\uff1a \\[ \\text{dis}(v)=\\min\\{\\text{dis}(v),\\text{dis}(u)+w(u,v)\\} \\] \u6211\u4eec\u79f0\u5bf9\u4e00\u4e2a\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\uff08\u5171 \\(m\\) \u6761\uff09\u8fdb\u884c\u4e00\u904d\u677e\u5f1b\uff0c\u4e3a\u4e00\u8f6e\u677e\u5f1b\u3002 \u6709\u6027\u8d28\uff1a\u8fdb\u884c \\(n\\) \u8f6e\u677e\u5f1b\u4ee5\u540e\uff0c\u4e00\u5b9a\u80fd\u627e\u5230\u6700\u77ed\u8def\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\u3002 \u8bc1\u660e\uff1a\u4e00\u6b21\u677e\u5f1b\u4f1a\u4f7f\u627e\u5230\u7684\u6700\u77ed\u8def\u5f84 \\(+1\\) \uff0c\u90a3\u4e48 \\(n\\) \u8f6e\u5c31\u53ef\u4ee5\u627e\u5b8c\u4e86\u3002 \u6709\u5e38\u6570\u4f18\u5316\uff1a\u627e\u4e0d\u5230\u677e\u5f1b\u4e86\uff0c\u8868\u793a\u4e00\u5b9a\u627e\u5b8c\u4e86\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u53ef\u4ee5\u505c\u6b62\u3002 \u6709\u6027\u8d28\uff1a\u82e5 \\(n\\) \u8f6e\u4e4b\u540e\u4f9d\u7136\u53ef\u4ee5\u677e\u5f1b\uff0c\u90a3\u4e48 \u56fe\u4e2d \\(s\\) \u6240\u5728\u7684\u8fde\u901a\u5757 \u4e00\u5b9a\u5b58\u5728\u8d1f\u73af\u3002 \u53ef\u4ee5\u7528\u6765\u5224\u65ad\u8d1f\u73af\uff08\u5efa\u8d85\u7ea7\u6e90\u70b9\u5411\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a \\(0\\) \uff0c\u53ef\u4ee5\u5224\u65ad\u5168\u5c40\uff09\u3002 \u5b9e\u73b0 \u00b6 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 struct edge { int u, v, w; }; vector<edge> g; int dis[N]; bool bf(int s, int k = n) { memset(dis, 0x3f, sizeof dis); dis[s] = 0; for (int step = 1; step <= n; ++step) { bool flag = false; for (auto t : g) { int u = t.u, v = t.v; if (dis[u] == 0x3f3f3f3f) continue; int w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; flag = true; } } if (!flag) return false; } return true; } \u901a\u8fc7\u4f20\u5165\u51fd\u6570\u7684 \\(k\\) \u53c2\u6570\uff0c\u53ef\u4ee5\u5b9e\u73b0\u627e\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u6700\u77ed\u8def\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u4e3a \\(\\mathcal O(nm)\\) \u3002 \u4f18\u5316 \u00b6 \u6700\u5e38\u89c1\u7684\u4f18\u5316\u5c31\u662f SPFA\uff0c\u5373 Bellman-Ford \u7684\u961f\u5217\u4f18\u5316\u7248\u3002 \u961f\u5217\u4f18\u5316\u7c7b\u4f3c BFS\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 DFS \u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u4e8e\u6bd4\u8f83\u5feb\u7684\u5224\u65ad\u8d1f\u73af\u3002 \u4f46\u662f\u76ee\u524d\u5927\u90e8\u5206 Bellman-Ford \u7684\u4f18\u5316\u90fd\u53ef\u80fd\u4f1a\u88ab\u5361\uff0c\u4e14\u901f\u5ea6\u4e5f\u5feb\u4e0d\u4e86\u591a\u5c11\uff0c\u56e0\u6b64\u4e0d\u8bb2\u3002 \u62d3\u5c55\uff1aBellman-Ford \u7684\u5176\u4ed6\u4f18\u5316\uff08\u6458\u81ea OI-Wiki\uff09 \u9664\u4e86\u961f\u5217\u4f18\u5316\uff08SPFA\uff09\u4e4b\u5916\uff0cBellman\u2013Ford \u8fd8\u6709\u5176\u4ed6\u5f62\u5f0f\u7684\u4f18\u5316\uff0c\u8fd9\u4e9b\u4f18\u5316\u5728\u90e8\u5206\u56fe\u4e0a\u6548\u679c\u660e\u663e\uff0c\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u56fe\u4e0a\uff0c\u6700\u574f\u590d\u6742\u5ea6\u53ef\u80fd\u8fbe\u5230\u6307\u6570\u7ea7\u3002 \u5806\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u5806\uff0c\u4e0e Dijkstra \u7684\u533a\u522b\u662f\u5141\u8bb8\u4e00\u4e2a\u70b9\u591a\u6b21\u5165\u961f\u3002\u5728\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u53ef\u80fd\u88ab\u5361\u6210\u6307\u6570\u7ea7\u590d\u6742\u5ea6\u3002 \u6808\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u6808\uff08\u5373\u5c06\u539f\u6765\u7684 BFS \u8fc7\u7a0b\u53d8\u6210 DFS\uff09\uff0c\u5728\u5bfb\u627e\u8d1f\u73af\u65f6\u53ef\u80fd\u5177\u6709\u66f4\u9ad8\u6548\u7387\uff0c\u4f46\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u4e3a\u6307\u6570\u7ea7\u3002 LLL \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u5185\u8ddd\u79bb\u5e73\u5747\u503c\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 SLF \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 D\u00b4Esopo\u2013Pape \u7b97\u6cd5\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u4e4b\u524d\u6ca1\u6709\u5165\u961f\uff0c\u5219\u5c06\u5176\u63d2\u5165\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 \u66f4\u591a\u4f18\u5316\u4ee5\u53ca\u9488\u5bf9\u8fd9\u4e9b\u4f18\u5316\u7684 Hack \u65b9\u6cd5\uff0c\u53ef\u4ee5\u770b fstqwq \u5728\u77e5\u4e4e\u4e0a\u7684\u56de\u7b54 \u3002 SPFA \u00b6 \u961f\u5217\u4f18\u5316 \u00b6 \u5373 Shortest Path Faster Algorithm\u3002 \u539f\u7406\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6bcf\u6b21\u677e\u5f1b\u90a3\u4e48\u591a\uff0c\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab\u677e\u5f1b\u7684\u8282\u70b9\u6240\u8fde\u63a5\u7684\u8fb9\u624d\u80fd\u7ee7\u7eed\u677e\u5f1b\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u5404\u79cd\u65b9\u6cd5\u6765\u7ef4\u62a4\u53ef\u80fd\u4f1a\u5f15\u8d77\u677e\u5f1b\u7684\u8282\u70b9\uff0c\u4f8b\u5982 BFS\uff08\u961f\u5217\u4f18\u5316\uff09\u548c DFS\u3002 \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int dis[N], vis[N]; void spfa(int s, int k = n) { memset(dis, 0x3f, sizeof dis); dis[s] = 0; vis[s] = 1; queue<int> q; q.push(s); while (!q.empty()) { int u = q.front(); q.pop(); vis[u] = 0; for (auto t : g[u]) { int v = t.v, w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; if (!vis[v]) { q.push(v); vis[v] = 1; } } } } } \u867d\u7136\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b SPFA \u8dd1\u5f97\u5f88\u5feb\uff0c\u4f46\u5176\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(nm)\\) \u7684\u3002 \u4f46\u662f\uff0cSPFA \u603b\u8fd8\u662f\u6bd4 Bellman-Ford \u5feb\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b58\u5728\u8d1f\u6743\u8fb9\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651 SPFA\u3002 \u5224\u65ad\u8d1f\u73af \u00b6 \u6ce8\u610f\u5230\u6211\u4eec\u5728\u7528\u961f\u5217\u5b9e\u73b0\u677e\u5f1b\u7684\u65f6\u5019\uff0c\u6bcf\u6761\u8fb9\u677e\u5f1b\u7684\u6b21\u6570\u4e0d\u80fd\u76f4\u63a5\u77e5\u9053\u4e86\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u76f4\u63a5\u53bb\u8bb0\u5f55\u6700\u77ed\u8def\u7684\u957f\u5ea6\uff0c\u5728\u677e\u5f1b\u7684\u65f6\u5019\u4fee\u6539\uff0c\u5982\u679c \\(\\ge n\\) \u4e86\u5c31\u5b58\u5728\u8d1f\u73af\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int dis[N], vis[N]; int len[N]; bool check(int s) { memset(vis, 0, sizeof(int) * (n + 1)); memset(dis, 0x3f, sizeof(int) * (n + 1)); dis[s] = 0; vis[s] = 1; queue<int> q; q.push(s); len[s] = 0; while (!q.empty()) { int u = q.front(); q.pop(); vis[u] = 0; for (auto t : g[u]) { int v = t.v, w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; len[v] = len[u] + 1; if (len[v] >= n) return true; if (!vis[v]) { q.push(v); vis[v] = 1; } } } } return false; } DFS \u7248 SPFA \u00b6 \u901a\u5e38\u7528\u4e8e\u5224\u8d1f\u73af\uff0c\u590d\u6742\u5ea6\u4f9d\u7136\u4e0d\u5bf9\u3002 \u6b64\u5904\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u51fa\u73b0\u5728\u6700\u77ed\u8def\u4e2d\u4e24\u6b21\u3002 \u56e0\u4e3a DFS \u6808\u4e2d\u53ea\u6709\u7956\u5148\uff0c\u4f46\u662f BFS \u961f\u5217\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u6027\u8d28\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 PS\uff1a\u677f\u5b50\u9898\u88ab\u5361\u4e86\u3002 int dis[N], vis[N]; bool dfs(int u) { if (vis[u]) return true; vis[u] = 1; for (auto t : g[u]) { int v = t.v, w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; if (dfs(v)) return true; } } vis[u] = 0; return false; } bool check(int s) { memset(vis, 0, sizeof(int) * (n + 1)); memset(dis, 0x3f, sizeof(int) * (n + 1)); dis[s] = 0; return dfs(s); }","title":"\u5355\u6e90\u6700\u77ed\u8def"},{"location":"graph/shortest-path/sssp/#_1","text":"Single Source Shortest Path Problem (SSSP)\u3002","title":"\u5355\u6e90\u6700\u77ed\u8def"},{"location":"graph/shortest-path/sssp/#dijkstra","text":"\u8be5\u7b97\u6cd5\uff0cDijkstra\uff08/\u02c8dikstr\u0251/ \u6216 /\u02c8d\u025bikstr\u0251/\uff09\u662f\u4e00\u79cd\u6c42\u89e3\u975e\u8d1f\u6743\u56fe\u4e0a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002 \u6734\u7d20\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(n^2)\\) \uff0c\u5806\u4f18\u5316\u4e3a \\(\\mathcal O(m\\log m)\\) \uff0c\u4f7f\u7528 Fibonacci \u5806\uff08\u652f\u6301 \\(\\mathcal O(1)\\) \u63d2\u5165\uff09\u53ef\u4ee5\u505a\u5230 \\(\\mathcal O(n\\log n+m)\\) \u3002","title":"Dijkstra"},{"location":"graph/shortest-path/sssp/#_2","text":"\u8bbe\u4e24\u4e2a\u96c6\u5408\uff1a\u300c\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u96c6\u5408 \\(S\\) \u300d\u548c\u300c\u672a\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u96c6\u5408 \\(T\\) \u300d\u3002 \u6bcf\u6b21\u4ece \\(T\\) \u4e2d\u9009\u53d6\u4e00\u4e2a\u6700\u8fd1\u7684\uff0c\u52a0\u5165\u96c6\u5408 \\(S\\) \u5e76\u677e\u5f1b\uff0c\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u3002\u76f4\u5230 \\(T\\) \u96c6\u5408\u4e3a\u7a7a\u3002 \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int dis[N], vis[N]; int get_u() { int t = -1; for (int i = 1; i <= n; ++i) { if (vis[i]) continue; if (t == -1 || dis[i] < dis[t]) t = i; } return t; } void dijkstra(int s) { memset(dis, 0x3f, sizeof dis); dis[s] = 0; for (int step = 0; step < n; ++step) { int u = get_u(); vis[u] = true; for (auto t : g[u]) { int v = t.v, w = t.w; dis[v] = min(dis[v], dis[u] + w); } } }","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"graph/shortest-path/sssp/#_3","text":"\u6bcf\u6210\u529f\u677e\u5f1b\u4e00\u6761\u8fb9 \\((u,v)\\) \uff0c\u5c31\u5c06 \\(v\\) \u63d2\u5165\u5806\u4e2d\uff0c \u5982\u679c \\(v\\) \u5df2\u7ecf\u5728\u5806\u4e2d\uff0c\u76f4\u63a5\u4fee\u6539\u76f8\u5e94\u5143\u7d20\u7684\u6743\u503c\u5373\u53ef\uff0c\u6bcf\u6b21\u67e5\u627e\u64cd\u4f5c\u76f4\u63a5\u53d6\u5806\u9876\u7ed3\u70b9\u5373\u53ef\u3002 \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int dis[N], vis[N]; void dijkstra(int s) { memset(dis, 0x3f, sizeof(int) * (n + 1)); pqueue<pair<int, int>, greater<pair<int, int>>> heap; dis[s] = 0; heap.push({0, s}); while (!heap.empty()) { int u = heap.top().second; heap.pop(); if (vis[u]) continue; vis[u] = 1; for (auto t : g[u]) { int v = t.v, w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; heap.push({dis[v], v}); } } } }","title":"\u5806\u4f18\u5316"},{"location":"graph/shortest-path/sssp/#_4","text":"\u9996\u5148\uff0c\u6734\u7d20\u7b97\u6cd5\u663e\u7136\u5c31\u662f \\(\\mathcal O(n^2+m)\\) \u7684\u3002 \u8003\u8651\u5206\u6790\u5806\u4f18\u5316\u7248\u672c\u7684\u590d\u6742\u5ea6\uff0c\u6709\u7ed3\u8bba\uff1a\u4f18\u5148\u961f\u5217\u4e2d\u5b58\u5728\u7684\u5143\u7d20\u4e2a\u6570\u5728 \\(\\mathcal O(m)\\) \uff0c\u5355\u6b21\u662f\u5355 \\(\\log\\) \u7684\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(m\\log m)\\) \u3002 \u5b9e\u73b0 \u590d\u6742\u5ea6 \u9002\u7528\u60c5\u666f \u6734\u7d20\u7b97\u6cd5 \\(\\mathcal O(n^2+m)\\) \u6570\u636e\u91cf\u5c0f \u4f18\u5148\u961f\u5217\u4f18\u5316 \\(\\mathcal O(m\\log m)\\) \u7a00\u758f\u56fe\uff0c\u8fb9\u6570\u4e3a \\(\\mathcal O(n)\\) \u7b49\u7ea7\u7684 Fibonacci \u5806\u4f18\u5316 \\(\\mathcal O(n\\log n+m)\\) \u7a20\u5bc6\u56fe\uff0c\u8fb9\u6570\u4e3a \\(\\mathcal O(n^2)\\) \u7b49\u7ea7\u7684 \u4e00\u822c\u6765\u8bf4\uff0c\u6700\u540e\u4e00\u4e2a\u4e25\u683c\u66f4\u4f18\uff0c\u4f46\u662f\u6570\u636e\u91cf\u5c0f\u7684\u65f6\u5019\u8dd1\u5f97\u4e0d\u4e00\u5b9a\u5feb\u3002 \u8bf4\u53e5\u95f2\u8bdd\uff0cDijkstra \u4e5f\u53ef\u4ee5\u9b54\u6539\u540e\u7528\u4e8e\u8d1f\u6743\u56fe\uff0c\u8be6\u89c1 Johnson \u7b97\u6cd5\u3002","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"graph/shortest-path/sssp/#bellmanford","text":"","title":"Bellman\u2013Ford"},{"location":"graph/shortest-path/sssp/#_5","text":"\u6211\u4eec\u79f0\u677e\u5f1b\u4e3a\u64cd\u4f5c\uff1a \\[ \\text{dis}(v)=\\min\\{\\text{dis}(v),\\text{dis}(u)+w(u,v)\\} \\] \u6211\u4eec\u79f0\u5bf9\u4e00\u4e2a\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\uff08\u5171 \\(m\\) \u6761\uff09\u8fdb\u884c\u4e00\u904d\u677e\u5f1b\uff0c\u4e3a\u4e00\u8f6e\u677e\u5f1b\u3002 \u6709\u6027\u8d28\uff1a\u8fdb\u884c \\(n\\) \u8f6e\u677e\u5f1b\u4ee5\u540e\uff0c\u4e00\u5b9a\u80fd\u627e\u5230\u6700\u77ed\u8def\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\u3002 \u8bc1\u660e\uff1a\u4e00\u6b21\u677e\u5f1b\u4f1a\u4f7f\u627e\u5230\u7684\u6700\u77ed\u8def\u5f84 \\(+1\\) \uff0c\u90a3\u4e48 \\(n\\) \u8f6e\u5c31\u53ef\u4ee5\u627e\u5b8c\u4e86\u3002 \u6709\u5e38\u6570\u4f18\u5316\uff1a\u627e\u4e0d\u5230\u677e\u5f1b\u4e86\uff0c\u8868\u793a\u4e00\u5b9a\u627e\u5b8c\u4e86\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u53ef\u4ee5\u505c\u6b62\u3002 \u6709\u6027\u8d28\uff1a\u82e5 \\(n\\) \u8f6e\u4e4b\u540e\u4f9d\u7136\u53ef\u4ee5\u677e\u5f1b\uff0c\u90a3\u4e48 \u56fe\u4e2d \\(s\\) \u6240\u5728\u7684\u8fde\u901a\u5757 \u4e00\u5b9a\u5b58\u5728\u8d1f\u73af\u3002 \u53ef\u4ee5\u7528\u6765\u5224\u65ad\u8d1f\u73af\uff08\u5efa\u8d85\u7ea7\u6e90\u70b9\u5411\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a \\(0\\) \uff0c\u53ef\u4ee5\u5224\u65ad\u5168\u5c40\uff09\u3002","title":"\u601d\u60f3"},{"location":"graph/shortest-path/sssp/#_6","text":"\u70b9\u51fb\u67e5\u770b\u4ee3\u7801 struct edge { int u, v, w; }; vector<edge> g; int dis[N]; bool bf(int s, int k = n) { memset(dis, 0x3f, sizeof dis); dis[s] = 0; for (int step = 1; step <= n; ++step) { bool flag = false; for (auto t : g) { int u = t.u, v = t.v; if (dis[u] == 0x3f3f3f3f) continue; int w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; flag = true; } } if (!flag) return false; } return true; } \u901a\u8fc7\u4f20\u5165\u51fd\u6570\u7684 \\(k\\) \u53c2\u6570\uff0c\u53ef\u4ee5\u5b9e\u73b0\u627e\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u6700\u77ed\u8def\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u4e3a \\(\\mathcal O(nm)\\) \u3002","title":"\u5b9e\u73b0"},{"location":"graph/shortest-path/sssp/#_7","text":"\u6700\u5e38\u89c1\u7684\u4f18\u5316\u5c31\u662f SPFA\uff0c\u5373 Bellman-Ford \u7684\u961f\u5217\u4f18\u5316\u7248\u3002 \u961f\u5217\u4f18\u5316\u7c7b\u4f3c BFS\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 DFS \u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u4e8e\u6bd4\u8f83\u5feb\u7684\u5224\u65ad\u8d1f\u73af\u3002 \u4f46\u662f\u76ee\u524d\u5927\u90e8\u5206 Bellman-Ford \u7684\u4f18\u5316\u90fd\u53ef\u80fd\u4f1a\u88ab\u5361\uff0c\u4e14\u901f\u5ea6\u4e5f\u5feb\u4e0d\u4e86\u591a\u5c11\uff0c\u56e0\u6b64\u4e0d\u8bb2\u3002 \u62d3\u5c55\uff1aBellman-Ford \u7684\u5176\u4ed6\u4f18\u5316\uff08\u6458\u81ea OI-Wiki\uff09 \u9664\u4e86\u961f\u5217\u4f18\u5316\uff08SPFA\uff09\u4e4b\u5916\uff0cBellman\u2013Ford \u8fd8\u6709\u5176\u4ed6\u5f62\u5f0f\u7684\u4f18\u5316\uff0c\u8fd9\u4e9b\u4f18\u5316\u5728\u90e8\u5206\u56fe\u4e0a\u6548\u679c\u660e\u663e\uff0c\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u56fe\u4e0a\uff0c\u6700\u574f\u590d\u6742\u5ea6\u53ef\u80fd\u8fbe\u5230\u6307\u6570\u7ea7\u3002 \u5806\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u5806\uff0c\u4e0e Dijkstra \u7684\u533a\u522b\u662f\u5141\u8bb8\u4e00\u4e2a\u70b9\u591a\u6b21\u5165\u961f\u3002\u5728\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u53ef\u80fd\u88ab\u5361\u6210\u6307\u6570\u7ea7\u590d\u6742\u5ea6\u3002 \u6808\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u6808\uff08\u5373\u5c06\u539f\u6765\u7684 BFS \u8fc7\u7a0b\u53d8\u6210 DFS\uff09\uff0c\u5728\u5bfb\u627e\u8d1f\u73af\u65f6\u53ef\u80fd\u5177\u6709\u66f4\u9ad8\u6548\u7387\uff0c\u4f46\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u4e3a\u6307\u6570\u7ea7\u3002 LLL \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u5185\u8ddd\u79bb\u5e73\u5747\u503c\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 SLF \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 D\u00b4Esopo\u2013Pape \u7b97\u6cd5\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u4e4b\u524d\u6ca1\u6709\u5165\u961f\uff0c\u5219\u5c06\u5176\u63d2\u5165\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 \u66f4\u591a\u4f18\u5316\u4ee5\u53ca\u9488\u5bf9\u8fd9\u4e9b\u4f18\u5316\u7684 Hack \u65b9\u6cd5\uff0c\u53ef\u4ee5\u770b fstqwq \u5728\u77e5\u4e4e\u4e0a\u7684\u56de\u7b54 \u3002","title":"\u4f18\u5316"},{"location":"graph/shortest-path/sssp/#spfa","text":"","title":"SPFA"},{"location":"graph/shortest-path/sssp/#_8","text":"\u5373 Shortest Path Faster Algorithm\u3002 \u539f\u7406\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6bcf\u6b21\u677e\u5f1b\u90a3\u4e48\u591a\uff0c\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab\u677e\u5f1b\u7684\u8282\u70b9\u6240\u8fde\u63a5\u7684\u8fb9\u624d\u80fd\u7ee7\u7eed\u677e\u5f1b\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u5404\u79cd\u65b9\u6cd5\u6765\u7ef4\u62a4\u53ef\u80fd\u4f1a\u5f15\u8d77\u677e\u5f1b\u7684\u8282\u70b9\uff0c\u4f8b\u5982 BFS\uff08\u961f\u5217\u4f18\u5316\uff09\u548c DFS\u3002 \u4ee3\u7801\uff1a \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int dis[N], vis[N]; void spfa(int s, int k = n) { memset(dis, 0x3f, sizeof dis); dis[s] = 0; vis[s] = 1; queue<int> q; q.push(s); while (!q.empty()) { int u = q.front(); q.pop(); vis[u] = 0; for (auto t : g[u]) { int v = t.v, w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; if (!vis[v]) { q.push(v); vis[v] = 1; } } } } } \u867d\u7136\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b SPFA \u8dd1\u5f97\u5f88\u5feb\uff0c\u4f46\u5176\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(nm)\\) \u7684\u3002 \u4f46\u662f\uff0cSPFA \u603b\u8fd8\u662f\u6bd4 Bellman-Ford \u5feb\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b58\u5728\u8d1f\u6743\u8fb9\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651 SPFA\u3002","title":"\u961f\u5217\u4f18\u5316"},{"location":"graph/shortest-path/sssp/#_9","text":"\u6ce8\u610f\u5230\u6211\u4eec\u5728\u7528\u961f\u5217\u5b9e\u73b0\u677e\u5f1b\u7684\u65f6\u5019\uff0c\u6bcf\u6761\u8fb9\u677e\u5f1b\u7684\u6b21\u6570\u4e0d\u80fd\u76f4\u63a5\u77e5\u9053\u4e86\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u76f4\u63a5\u53bb\u8bb0\u5f55\u6700\u77ed\u8def\u7684\u957f\u5ea6\uff0c\u5728\u677e\u5f1b\u7684\u65f6\u5019\u4fee\u6539\uff0c\u5982\u679c \\(\\ge n\\) \u4e86\u5c31\u5b58\u5728\u8d1f\u73af\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 int dis[N], vis[N]; int len[N]; bool check(int s) { memset(vis, 0, sizeof(int) * (n + 1)); memset(dis, 0x3f, sizeof(int) * (n + 1)); dis[s] = 0; vis[s] = 1; queue<int> q; q.push(s); len[s] = 0; while (!q.empty()) { int u = q.front(); q.pop(); vis[u] = 0; for (auto t : g[u]) { int v = t.v, w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; len[v] = len[u] + 1; if (len[v] >= n) return true; if (!vis[v]) { q.push(v); vis[v] = 1; } } } } return false; }","title":"\u5224\u65ad\u8d1f\u73af"},{"location":"graph/shortest-path/sssp/#dfs-spfa","text":"\u901a\u5e38\u7528\u4e8e\u5224\u8d1f\u73af\uff0c\u590d\u6742\u5ea6\u4f9d\u7136\u4e0d\u5bf9\u3002 \u6b64\u5904\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u51fa\u73b0\u5728\u6700\u77ed\u8def\u4e2d\u4e24\u6b21\u3002 \u56e0\u4e3a DFS \u6808\u4e2d\u53ea\u6709\u7956\u5148\uff0c\u4f46\u662f BFS \u961f\u5217\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u6027\u8d28\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 PS\uff1a\u677f\u5b50\u9898\u88ab\u5361\u4e86\u3002 int dis[N], vis[N]; bool dfs(int u) { if (vis[u]) return true; vis[u] = 1; for (auto t : g[u]) { int v = t.v, w = t.w; if (dis[v] > dis[u] + w) { dis[v] = dis[u] + w; if (dfs(v)) return true; } } vis[u] = 0; return false; } bool check(int s) { memset(vis, 0, sizeof(int) * (n + 1)); memset(dis, 0x3f, sizeof(int) * (n + 1)); dis[s] = 0; return dfs(s); }","title":"DFS \u7248 SPFA"},{"location":"graph/spanning-tree/kruskal/","text":"Kruskal \u91cd\u6784\u6811 \u00b6 \u6700\u5927\u751f\u6210\u6811\u5c06\u90e8\u5206\u5185\u5bb9\u5012\u7f6e\u5373\u53ef \u56de\u987e\uff1aKruskal \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(m \\log m)\\) \u66f4\u9002\u5408\u7a00\u758f\u56fe \u7b97\u6cd5\u601d\u60f3 \u00b6 \u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u4e00\u6761\u8fb9\u4e24\u4fa7\u4e0d\u8fde\u901a\uff0c\u5219\u52a0\u5165\u8fd9\u6761\u8fb9 \u4ee3\u7801 \u00b6 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 const int N = 200010; int f[N]; struct Edge { int a, b, w; bool operator<(const Edge &W) const { return w < W.w; } } g[N]; int find(int x) { return x == f[x] ? x : find(f[x]); } int main() { int n = rr, m = rr; int a, b, w; for (int i = 0; i < m; ++i) a = rr, b = rr, w = rr, g[i] = {a, b, w}; sort(g, g + m); for (int i = 1; i <= n; ++i) f[i] = i; int res = 0, cnt = 0; for (int i = 0; i < m; ++i) { int a = find(g[i].a), b = find(g[i].b), w = g[i].w; if (a != b) f[a] = b, res += w, ++cnt; } cnt < n - 1 ? printf(\"impossible\\n\") : printf(\"%d\\n\", res); return 0; } Kruskal \u91cd\u6784\u6811 \u00b6 \u7b97\u6cd5\u601d\u60f3 \u00b6 \u5728\u6784\u5efa\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0c\u8bbe\u73b0\u5728\u679a\u4e3e\u5230\u4e86\u4e00\u6761\u8981\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9 \\((u, v, w)\\) \uff1a \u5219\u5728 Kruskal \u91cd\u6784\u6811\u4e2d\uff0c\u6784\u5efa\u4e00\u4e2a\u70b9\u6743\u4e3a \\(w\\) \u7684\u865a\u70b9\uff0c\u7f16\u53f7\u4e3a \\(t\\) \uff0c\u540c\u65f6\u8fde\u8fb9 \\((u, t)\\) \u3001 \\((v, t)\\) \u3002 \u4e3b\u8981\u6027\u8d28 \u00b6 \u91cd\u6784\u6811\u662f\u4e00\u68f5\uff3b\u4e8c\u53c9\u6811\uff3d\uff1b \uff3b\u5b50\u8282\u70b9\u7684\u70b9\u6743\uff3d\u5c0f\u4e8e\uff3b\u7236\u8282\u70b9\u7684\u70b9\u6743\uff3d\uff08\u5373\u5927\u6839\u5806\uff09\uff1b \u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff3b\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743\uff3d\u7b49\u4e8e\u91cd\u6784\u6811\u4e0a\uff3b\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743\uff3d\uff08\u5373\u4e3a\u91cd\u6784\u6811\u4e0a\u4e24\u70b9 LCA \u7684\u70b9\u6743\uff09\u3002 \u7ed3\u8bba\u8bc1\u660e \u00b6 \u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4e24\u70b9\u95f4\u6700\u5927\u8fb9\u6743\u7b49\u4e8e\u91cd\u6784\u6811\u4e0a\u4e24\u70b9 LCA \u7684\u70b9\u6743\uff0c\u8bc1\u660e\uff1a \u540e\u52a0\u5165\u7684\u8fb9\u6743\u4e00\u5b9a\u5c0f\u4e8e\u5148\u52a0\u5165\u7684\u8fb9\u6743\uff0c\u6240\u4ee5\u91cd\u6784\u6811\u4e00\u5b9a\u81ea\u4e0a\u5230\u4e0b\u70b9\u6743\u4e0d\u51cf\uff1b \u4e24\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8def\u5f84\u7684\u6240\u6709\u8fb9\u4e00\u5b9a\u90fd\u5728\u91cd\u6784\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\uff1b \u6240\u4ee5\u4e24\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4e4b\u95f4\u7684\u6700\u957f\u8fb9\u6743\u4e00\u5b9a\u662f\u91cd\u6784\u6811\u4e0a\u4e24\u70b9 LCA \u7684\u70b9\u6743\u3002 \u5982\u56fe\uff1a \u5176\u4e2d\u7ea2\u8272\u7684\u70b9\u8868\u793a\u865a\u70b9\uff0c\u4e2d\u95f4\u7684\u6570\u5b57\u8868\u793a\u5176\u70b9\u6743\uff1b\u767d\u8272\u7684\u70b9\u8868\u793a\u539f\u6709\u7684\u70b9\u3002 \u4ee3\u7801 \u00b6 // INPUT GRAPH const int N = 2e5 + 10; const int M = 2e5 + 10; // NEW GRAPH const int NN = N + M; const int MM = M + M; // 4LCA const int K = 20; // NODE, EDGE, QUERY int n, m, q; // INPUT GRAPH struct e { int u, v, w; bool operator<(const e &t) const { return w < t.w; } } g[M]; // UNOIN int f[NN]; int find(int x) { return x == f[x] ? x : f[x] = find(f[x]); } // NEW GRAPH int d[NN], cnt; int h[NN], e[MM], ne[MM], idx; // 4LCA int depth[NN]; int up[NN][K]; // ADD TO NEW GRAPH inline void _add(int u, int v) { e[idx] = v; ne[idx] = h[u]; h[u] = idx++; } void add(int a, int b, int w) { d[++cnt] = w; f[a] = f[b] = cnt; _add(a, cnt), _add(cnt, a); _add(b, cnt), _add(cnt, b); } // LCA INIT void init(int u, int fa) { depth[u] = depth[fa] + 1; for (int i = 1; i < K; ++i) up[u][i] = up[up[u][i - 1]][i - 1]; for (int i = h[u]; i != -1; i = ne[i]) { int v = e[i]; if (v == fa) continue; up[v][0] = u, init(v, u); } } // KRUSKAL int kruskal() { sort(g + 1, g + 1 + m); for (int i = 1; i <= n * 2; ++i) f[i] = i; cnt = n; memset(h, -1, sizeof h); int res = 0; for (int i = 1; i <= m; ++i) { int u = find(g[i].u), v = find(g[i].v), &w = g[i].w; if (u == v) continue; res += w, add(u, v, w); } init(cnt, 0); return res; } // LCA int lca(int x, int y) { if (depth[x] < depth[y]) swap(x, y); for (int i = K - 1; i >= 0; --i) { if (depth[up[x][i]] >= depth[y]) x = up[x][i]; if (x == y) return x; } for (int i = K - 1; i >= 0; --i) if (up[x][i] != up[y][i]) x = up[x][i], y = up[y][i]; return up[x][0]; } int main() { n = rr, m = rr; int a, b, w; for (int i = 1; i <= m; ++i) a = rr, b = rr, w = rr, g[i] = {a, b, w}; q = rr; int res = kruskal(); while (q--) printf(\"%d\\n\", d[lca(rr, rr)]); return 0; } Reference \u00b6 [1] https://www.luogu.com.cn/blog/lizbaka/kruskal-chong-gou-shu [2] https://blog.csdn.net/m0_61735576/article/details/124804973","title":"Kruskal \u91cd\u6784\u6811"},{"location":"graph/spanning-tree/kruskal/#kruskal","text":"\u6700\u5927\u751f\u6210\u6811\u5c06\u90e8\u5206\u5185\u5bb9\u5012\u7f6e\u5373\u53ef","title":"Kruskal \u91cd\u6784\u6811"},{"location":"graph/spanning-tree/kruskal/#kruskal_1","text":"","title":"\u56de\u987e\uff1aKruskal"},{"location":"graph/spanning-tree/kruskal/#_1","text":"\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(m \\log m)\\) \u66f4\u9002\u5408\u7a00\u758f\u56fe","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"graph/spanning-tree/kruskal/#_2","text":"\u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u4e00\u6761\u8fb9\u4e24\u4fa7\u4e0d\u8fde\u901a\uff0c\u5219\u52a0\u5165\u8fd9\u6761\u8fb9","title":"\u7b97\u6cd5\u601d\u60f3"},{"location":"graph/spanning-tree/kruskal/#_3","text":"\u70b9\u51fb\u67e5\u770b\u4ee3\u7801 const int N = 200010; int f[N]; struct Edge { int a, b, w; bool operator<(const Edge &W) const { return w < W.w; } } g[N]; int find(int x) { return x == f[x] ? x : find(f[x]); } int main() { int n = rr, m = rr; int a, b, w; for (int i = 0; i < m; ++i) a = rr, b = rr, w = rr, g[i] = {a, b, w}; sort(g, g + m); for (int i = 1; i <= n; ++i) f[i] = i; int res = 0, cnt = 0; for (int i = 0; i < m; ++i) { int a = find(g[i].a), b = find(g[i].b), w = g[i].w; if (a != b) f[a] = b, res += w, ++cnt; } cnt < n - 1 ? printf(\"impossible\\n\") : printf(\"%d\\n\", res); return 0; }","title":"\u4ee3\u7801"},{"location":"graph/spanning-tree/kruskal/#kruskal_2","text":"","title":"Kruskal \u91cd\u6784\u6811"},{"location":"graph/spanning-tree/kruskal/#_4","text":"\u5728\u6784\u5efa\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0c\u8bbe\u73b0\u5728\u679a\u4e3e\u5230\u4e86\u4e00\u6761\u8981\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9 \\((u, v, w)\\) \uff1a \u5219\u5728 Kruskal \u91cd\u6784\u6811\u4e2d\uff0c\u6784\u5efa\u4e00\u4e2a\u70b9\u6743\u4e3a \\(w\\) \u7684\u865a\u70b9\uff0c\u7f16\u53f7\u4e3a \\(t\\) \uff0c\u540c\u65f6\u8fde\u8fb9 \\((u, t)\\) \u3001 \\((v, t)\\) \u3002","title":"\u7b97\u6cd5\u601d\u60f3"},{"location":"graph/spanning-tree/kruskal/#_5","text":"\u91cd\u6784\u6811\u662f\u4e00\u68f5\uff3b\u4e8c\u53c9\u6811\uff3d\uff1b \uff3b\u5b50\u8282\u70b9\u7684\u70b9\u6743\uff3d\u5c0f\u4e8e\uff3b\u7236\u8282\u70b9\u7684\u70b9\u6743\uff3d\uff08\u5373\u5927\u6839\u5806\uff09\uff1b \u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff3b\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743\uff3d\u7b49\u4e8e\u91cd\u6784\u6811\u4e0a\uff3b\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743\uff3d\uff08\u5373\u4e3a\u91cd\u6784\u6811\u4e0a\u4e24\u70b9 LCA \u7684\u70b9\u6743\uff09\u3002","title":"\u4e3b\u8981\u6027\u8d28"},{"location":"graph/spanning-tree/kruskal/#_6","text":"\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4e24\u70b9\u95f4\u6700\u5927\u8fb9\u6743\u7b49\u4e8e\u91cd\u6784\u6811\u4e0a\u4e24\u70b9 LCA \u7684\u70b9\u6743\uff0c\u8bc1\u660e\uff1a \u540e\u52a0\u5165\u7684\u8fb9\u6743\u4e00\u5b9a\u5c0f\u4e8e\u5148\u52a0\u5165\u7684\u8fb9\u6743\uff0c\u6240\u4ee5\u91cd\u6784\u6811\u4e00\u5b9a\u81ea\u4e0a\u5230\u4e0b\u70b9\u6743\u4e0d\u51cf\uff1b \u4e24\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8def\u5f84\u7684\u6240\u6709\u8fb9\u4e00\u5b9a\u90fd\u5728\u91cd\u6784\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\uff1b \u6240\u4ee5\u4e24\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u4e4b\u95f4\u7684\u6700\u957f\u8fb9\u6743\u4e00\u5b9a\u662f\u91cd\u6784\u6811\u4e0a\u4e24\u70b9 LCA \u7684\u70b9\u6743\u3002 \u5982\u56fe\uff1a \u5176\u4e2d\u7ea2\u8272\u7684\u70b9\u8868\u793a\u865a\u70b9\uff0c\u4e2d\u95f4\u7684\u6570\u5b57\u8868\u793a\u5176\u70b9\u6743\uff1b\u767d\u8272\u7684\u70b9\u8868\u793a\u539f\u6709\u7684\u70b9\u3002","title":"\u7ed3\u8bba\u8bc1\u660e"},{"location":"graph/spanning-tree/kruskal/#_7","text":"// INPUT GRAPH const int N = 2e5 + 10; const int M = 2e5 + 10; // NEW GRAPH const int NN = N + M; const int MM = M + M; // 4LCA const int K = 20; // NODE, EDGE, QUERY int n, m, q; // INPUT GRAPH struct e { int u, v, w; bool operator<(const e &t) const { return w < t.w; } } g[M]; // UNOIN int f[NN]; int find(int x) { return x == f[x] ? x : f[x] = find(f[x]); } // NEW GRAPH int d[NN], cnt; int h[NN], e[MM], ne[MM], idx; // 4LCA int depth[NN]; int up[NN][K]; // ADD TO NEW GRAPH inline void _add(int u, int v) { e[idx] = v; ne[idx] = h[u]; h[u] = idx++; } void add(int a, int b, int w) { d[++cnt] = w; f[a] = f[b] = cnt; _add(a, cnt), _add(cnt, a); _add(b, cnt), _add(cnt, b); } // LCA INIT void init(int u, int fa) { depth[u] = depth[fa] + 1; for (int i = 1; i < K; ++i) up[u][i] = up[up[u][i - 1]][i - 1]; for (int i = h[u]; i != -1; i = ne[i]) { int v = e[i]; if (v == fa) continue; up[v][0] = u, init(v, u); } } // KRUSKAL int kruskal() { sort(g + 1, g + 1 + m); for (int i = 1; i <= n * 2; ++i) f[i] = i; cnt = n; memset(h, -1, sizeof h); int res = 0; for (int i = 1; i <= m; ++i) { int u = find(g[i].u), v = find(g[i].v), &w = g[i].w; if (u == v) continue; res += w, add(u, v, w); } init(cnt, 0); return res; } // LCA int lca(int x, int y) { if (depth[x] < depth[y]) swap(x, y); for (int i = K - 1; i >= 0; --i) { if (depth[up[x][i]] >= depth[y]) x = up[x][i]; if (x == y) return x; } for (int i = K - 1; i >= 0; --i) if (up[x][i] != up[y][i]) x = up[x][i], y = up[y][i]; return up[x][0]; } int main() { n = rr, m = rr; int a, b, w; for (int i = 1; i <= m; ++i) a = rr, b = rr, w = rr, g[i] = {a, b, w}; q = rr; int res = kruskal(); while (q--) printf(\"%d\\n\", d[lca(rr, rr)]); return 0; }","title":"\u4ee3\u7801"},{"location":"graph/spanning-tree/kruskal/#reference","text":"[1] https://www.luogu.com.cn/blog/lizbaka/kruskal-chong-gou-shu [2] https://blog.csdn.net/m0_61735576/article/details/124804973","title":"Reference"},{"location":"graph/spanning-tree/mst/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u672c\u6587\u4ec5\u5bf9\u4e8e\u65e0\u5411\u8fde\u901a\u56fe\u3002 \u751f\u6210\u6811\uff0cSpanning Tree\uff08ST\uff09\uff0c\u5728\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\u7684\u56fe\u4e2d\u9009\u53d6 \\(n-1\\) \u6761\u8fb9\uff0c\u6784\u6210\u4e00\u68f5\u6811\u3002 \u6700\u5c0f\u751f\u6210\u6811\uff0cMinimum Spanning Tree\uff08MST\uff09\uff0c\u901a\u5e38\u662f\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002 \u7b97\u6cd5\u5206\u7c7b\uff1a \u7b97\u6cd5 Prim Prim \u5806\u4f18\u5316 Kruskal \u601d\u60f3 \u52a0\u70b9 \u52a0\u70b9 \u52a0\u8fb9 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal O(n^2+m)\\) \\(\\mathcal O(m \\log n)\\) \\(\\mathcal O(m\\log m)\\) \u5b9e\u9645\u5e94\u7528\u4e2d\uff0cKruskal \u5f80\u5f80\u66f4\u597d\u4e9b\u3001\u4e14\u66f4\u5feb\u3002\u5373\u4f7f\u662f\u5bf9\u4e8e\u7a20\u5bc6\u56fe\uff0cPrim \u7684\u7406\u8bba\u590d\u6742\u5ea6\u66f4\u4f18\uff0cKruskal \u4e5f\u4e0d\u4e00\u5b9a\u8dd1\u7684\u6162\u3002 \u5982\u679c\u4e0d\u662f\u660e\u663e\u5361\u4e00\u4e2a\u7b97\u6cd5\u7684\uff0c\u53ef\u4ee5 Kruskal \u89e3\u51b3\u3002 Kruskal \u00b6 \u601d\u60f3\uff1a\u52a0\u8fb9\uff0c\u8d2a\u5fc3\u9009\u62e9\u3002 \u601d\u8def\u4e3a\uff0c\u5c06\u6240\u6709\u8fb9 \\((u,v,w)\\) \u6309\u6743\u503c \\(w\\) \u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u904d\u5386\uff0c\u5982\u679c\u4e24\u4fa7\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u5c31\u5c06\u8fd9\u6761\u8fb9\u52a0\u5165\u751f\u6210\u6811\u4e2d\u3002\u6700\u7ec8\u4e00\u5b9a\u4f1a\u9009\u51fa \\(n-1\\) \u6761\u8fb9\uff0c\u4e14\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002 \u8bc1\u660e\uff1a\u7565\uff0c\u89c1 OI-Wiki \u3002 Prim \u00b6 \u601d\u60f3\uff1a\u52a0\u70b9\uff0c\u8d2a\u5fc3\u9009\u62e9\u3002 \u601d\u8def\u4e3a\uff0c\u6bcf\u6b21\u9009\u62e9\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5e76\u7528\u65b0\u7684\u8fb9\u66f4\u65b0\u5176\u4ed6\u7ed3\u70b9\u7684\u8ddd\u79bb\u3002 \u548c Dijkstra \u7b97\u6cd5\u7c7b\u4f3c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5806\u4f18\u5316\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(\\mathcal O(n^2+m)\\) \uff0c\u5806\u4f18\u5316 \\(\\mathcal O((n+m) \\log n)\\) \u3002 \u4ee3\u7801 \u00b6 struct edge { int u, v, w; }; bool operator <(const edge &a, const edge &b) { return a.w < b.w; } struct graph_vector { vector<edge> e; graph_vector() { e.clear(); } graph_vector(int m) { e.resize(m); } }; struct graph_array { vector<vector<int>> e; graph_array() { e.clear(); } graph_array(int n) { e.resize(n + 1, vector<int>(n + 1, INF)); } }; struct graph_list { vector<int> h, e, w, ne; int idx; graph_list() { idx = 0; } graph_list(int n, int m) { h.resize(n + 1); idx = 0; e.resize(m + 1), ne.resize(m + 1), w.resize(m + 1); } void add(int u, int v, int s) { ++idx; e[idx] = v; w[idx] = s; ne[idx] = h[u]; h[u] = idx; } void Add(int u, int v, int w) { add(u, v, w); add(v, u, w); } }; struct dsu { vector<int> f; dsu(int n) { f.resize(n + 1); iota(f.begin(), f.end(), 0); } int find(int x) { return x == f[x] ? x : f[x] = find(f[x]); } bool merge(int a, int b) { a = find(a), b = find(b); return a == b ? 0 : (f[find(a)] = f[find(b)], 1); } }; struct { int mst(int n, graph_vector &g) { sort(g.e.begin(), g.e.end()); int res = 0, cnt = 0; dsu d(n); for (auto &i: g.e) { int u = i.u, v = i.v; if (!d.merge(u, v)) continue; res += i.w, ++cnt; if (cnt == n - 1) return res; } return -1; } int mst(int n, graph_array &g) { vector<int> dis(n + 1), vis(n + 1); fill(dis.begin(), dis.end(), INF); int res = 0; rep(i, n) { int t = -1; gor(j, 1, n + 1) if (!vis[j] && (t == -1 || dis[j] < dis[t])) t = j; if (i && dis[t] == INF) return -1; if (i) res += dis[t]; gor(j, 1, n + 1) dis[j] = min(dis[j], g.e[t][j]); vis[t] = 1; } return res; } int mst(int n, graph_list &g) { vector<int> dis(n + 1), vis(n + 1); fill(dis.begin(), dis.end(), INF); priority_queue<pii, vector<pii>, greater<pii>> heap; heap.push({0, 1}); dis[1] = 0; int res = 0, cnt = 0; while (heap.size()) { int u = heap.top().second, d = heap.top().first; heap.pop(); if (vis[u]) continue; res += d; vis[u] = 1, ++cnt; for (int i = g.h[u]; i; i = g.ne[i]) { int v = g.e[i], w = g.w[i]; if (w < dis[v]) dis[v] = w, heap.push({w, v}); } } return cnt == n ? res : -1; } } mst;","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"graph/spanning-tree/mst/#_1","text":"\u672c\u6587\u4ec5\u5bf9\u4e8e\u65e0\u5411\u8fde\u901a\u56fe\u3002 \u751f\u6210\u6811\uff0cSpanning Tree\uff08ST\uff09\uff0c\u5728\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\u7684\u56fe\u4e2d\u9009\u53d6 \\(n-1\\) \u6761\u8fb9\uff0c\u6784\u6210\u4e00\u68f5\u6811\u3002 \u6700\u5c0f\u751f\u6210\u6811\uff0cMinimum Spanning Tree\uff08MST\uff09\uff0c\u901a\u5e38\u662f\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002 \u7b97\u6cd5\u5206\u7c7b\uff1a \u7b97\u6cd5 Prim Prim \u5806\u4f18\u5316 Kruskal \u601d\u60f3 \u52a0\u70b9 \u52a0\u70b9 \u52a0\u8fb9 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal O(n^2+m)\\) \\(\\mathcal O(m \\log n)\\) \\(\\mathcal O(m\\log m)\\) \u5b9e\u9645\u5e94\u7528\u4e2d\uff0cKruskal \u5f80\u5f80\u66f4\u597d\u4e9b\u3001\u4e14\u66f4\u5feb\u3002\u5373\u4f7f\u662f\u5bf9\u4e8e\u7a20\u5bc6\u56fe\uff0cPrim \u7684\u7406\u8bba\u590d\u6742\u5ea6\u66f4\u4f18\uff0cKruskal \u4e5f\u4e0d\u4e00\u5b9a\u8dd1\u7684\u6162\u3002 \u5982\u679c\u4e0d\u662f\u660e\u663e\u5361\u4e00\u4e2a\u7b97\u6cd5\u7684\uff0c\u53ef\u4ee5 Kruskal \u89e3\u51b3\u3002","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"graph/spanning-tree/mst/#kruskal","text":"\u601d\u60f3\uff1a\u52a0\u8fb9\uff0c\u8d2a\u5fc3\u9009\u62e9\u3002 \u601d\u8def\u4e3a\uff0c\u5c06\u6240\u6709\u8fb9 \\((u,v,w)\\) \u6309\u6743\u503c \\(w\\) \u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u904d\u5386\uff0c\u5982\u679c\u4e24\u4fa7\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u5c31\u5c06\u8fd9\u6761\u8fb9\u52a0\u5165\u751f\u6210\u6811\u4e2d\u3002\u6700\u7ec8\u4e00\u5b9a\u4f1a\u9009\u51fa \\(n-1\\) \u6761\u8fb9\uff0c\u4e14\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002 \u8bc1\u660e\uff1a\u7565\uff0c\u89c1 OI-Wiki \u3002","title":"Kruskal"},{"location":"graph/spanning-tree/mst/#prim","text":"\u601d\u60f3\uff1a\u52a0\u70b9\uff0c\u8d2a\u5fc3\u9009\u62e9\u3002 \u601d\u8def\u4e3a\uff0c\u6bcf\u6b21\u9009\u62e9\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5e76\u7528\u65b0\u7684\u8fb9\u66f4\u65b0\u5176\u4ed6\u7ed3\u70b9\u7684\u8ddd\u79bb\u3002 \u548c Dijkstra \u7b97\u6cd5\u7c7b\u4f3c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5806\u4f18\u5316\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(\\mathcal O(n^2+m)\\) \uff0c\u5806\u4f18\u5316 \\(\\mathcal O((n+m) \\log n)\\) \u3002","title":"Prim"},{"location":"graph/spanning-tree/mst/#_2","text":"struct edge { int u, v, w; }; bool operator <(const edge &a, const edge &b) { return a.w < b.w; } struct graph_vector { vector<edge> e; graph_vector() { e.clear(); } graph_vector(int m) { e.resize(m); } }; struct graph_array { vector<vector<int>> e; graph_array() { e.clear(); } graph_array(int n) { e.resize(n + 1, vector<int>(n + 1, INF)); } }; struct graph_list { vector<int> h, e, w, ne; int idx; graph_list() { idx = 0; } graph_list(int n, int m) { h.resize(n + 1); idx = 0; e.resize(m + 1), ne.resize(m + 1), w.resize(m + 1); } void add(int u, int v, int s) { ++idx; e[idx] = v; w[idx] = s; ne[idx] = h[u]; h[u] = idx; } void Add(int u, int v, int w) { add(u, v, w); add(v, u, w); } }; struct dsu { vector<int> f; dsu(int n) { f.resize(n + 1); iota(f.begin(), f.end(), 0); } int find(int x) { return x == f[x] ? x : f[x] = find(f[x]); } bool merge(int a, int b) { a = find(a), b = find(b); return a == b ? 0 : (f[find(a)] = f[find(b)], 1); } }; struct { int mst(int n, graph_vector &g) { sort(g.e.begin(), g.e.end()); int res = 0, cnt = 0; dsu d(n); for (auto &i: g.e) { int u = i.u, v = i.v; if (!d.merge(u, v)) continue; res += i.w, ++cnt; if (cnt == n - 1) return res; } return -1; } int mst(int n, graph_array &g) { vector<int> dis(n + 1), vis(n + 1); fill(dis.begin(), dis.end(), INF); int res = 0; rep(i, n) { int t = -1; gor(j, 1, n + 1) if (!vis[j] && (t == -1 || dis[j] < dis[t])) t = j; if (i && dis[t] == INF) return -1; if (i) res += dis[t]; gor(j, 1, n + 1) dis[j] = min(dis[j], g.e[t][j]); vis[t] = 1; } return res; } int mst(int n, graph_list &g) { vector<int> dis(n + 1), vis(n + 1); fill(dis.begin(), dis.end(), INF); priority_queue<pii, vector<pii>, greater<pii>> heap; heap.push({0, 1}); dis[1] = 0; int res = 0, cnt = 0; while (heap.size()) { int u = heap.top().second, d = heap.top().first; heap.pop(); if (vis[u]) continue; res += d; vis[u] = 1, ++cnt; for (int i = g.h[u]; i; i = g.ne[i]) { int v = g.e[i], w = g.w[i]; if (w < dis[v]) dis[v] = w, heap.push({w, v}); } } return cnt == n ? res : -1; } } mst;","title":"\u4ee3\u7801"},{"location":"intro/discussion/","text":"\u8ba8\u8bba\u4ea4\u6d41 \u00b6 \u6b22\u8fce\u52a0\u4f5c\u8005 QQ \u8ba8\u8bba\uff1a2125773894\u3002 \u53e6\u5916\u4f60\uff08\u66f4\u65b0\u4e8e 2024 \u5e74 8 \u6708\uff09\u53ef\u4ee5\u5728\u6d1b\u8c37 HL\u00bd LA \u7fa4\u627e\u5230\u6211\uff01","title":"\u8ba8\u8bba\u4ea4\u6d41"},{"location":"intro/discussion/#_1","text":"\u6b22\u8fce\u52a0\u4f5c\u8005 QQ \u8ba8\u8bba\uff1a2125773894\u3002 \u53e6\u5916\u4f60\uff08\u66f4\u65b0\u4e8e 2024 \u5e74 8 \u6708\uff09\u53ef\u4ee5\u5728\u6d1b\u8c37 HL\u00bd LA \u7fa4\u627e\u5230\u6211\uff01","title":"\u8ba8\u8bba\u4ea4\u6d41"},{"location":"intro/format/","text":"\u683c\u5f0f\u624b\u518c \u00b6 \u8bf7\u53c2\u8003 OI Wiki \u683c\u5f0f\u624b\u518c \u3002 \u672c\u535a\u5ba2\u683c\u5f0f\u53ef\u4ee5\u66f4\u52a0\u968f\u5fc3\u6240\u6b32\uff08\u5927\u96fe\uff09\u3002 \u76ee\u6807\u662f\u8ba9\u4eba\u770b\u61c2\u7684\u540c\u65f6\uff0c\u5c3d\u53ef\u80fd\u7684\u7f8e\u89c2\u5373\u53ef\u3002","title":"\u683c\u5f0f\u624b\u518c"},{"location":"intro/format/#_1","text":"\u8bf7\u53c2\u8003 OI Wiki \u683c\u5f0f\u624b\u518c \u3002 \u672c\u535a\u5ba2\u683c\u5f0f\u53ef\u4ee5\u66f4\u52a0\u968f\u5fc3\u6240\u6b32\uff08\u5927\u96fe\uff09\u3002 \u76ee\u6807\u662f\u8ba9\u4eba\u770b\u61c2\u7684\u540c\u65f6\uff0c\u5c3d\u53ef\u80fd\u7684\u7f8e\u89c2\u5373\u53ef\u3002","title":"\u683c\u5f0f\u624b\u518c"},{"location":"intro/setting/","text":"\u4e3b\u9898\u8bbe\u7f6e \u00b6 \u989c\u8272\u4e3b\u9898 \u00b6 \u914d\u8272\u65b9\u6848 \u00b6 \u6839\u636e\u6d4f\u89c8\u5668\u4e0e\u7cfb\u7edf\u8bbe\u7f6e\u81ea\u52a8\u5207\u6362\u660e\u6697\u4e3b\u9898\uff0c\u4e5f\u53ef\u624b\u52a8\u5207\u6362\u3002 Default Slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorScheme = this.dataset.mdColorScheme; localStorage.setItem(\"data-md-color-scheme\",this.dataset.mdColorScheme); }) }) \u4e3b\u8272 \u00b6 \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272\u3002 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) \u8f85\u52a9\u8272 \u00b6 \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272\u3002 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) button[data-md-color-accent]> code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } button[data-md-color-primary] > code { background-color: var(--md-code-bg-color); color: var(--md-primary-fg-color); } button[data-md-color-primary='white'] > code { background-color: var(--md-primary-bg-color); color: var(--md-primary-fg-color); } button[data-md-color-accent],button[data-md-color-primary],button[data-md-color-scheme]{ width: 8.4rem; margin-bottom: .4rem; padding: 2.4rem .4rem .4rem; transition: background-color .25s,opacity .25s; border-radius: .2rem; color: #fff; font-size: .8rem; text-align: left; cursor: pointer; } button[data-md-color-accent]{ background-color: var(--md-accent-fg-color); } button[data-md-color-primary]{ background-color: var(--md-primary-fg-color); } button[data-md-color-scheme='default']{ background-color: hsla(0, 0%, 100%, 1); } button[data-md-color-scheme='slate']{ background-color: var(--md-default-bg-color); } button[data-md-color-accent]:hover, button[data-md-color-primary]:hover { opacity: .75; }","title":"\u4e3b\u9898\u8bbe\u7f6e"},{"location":"intro/setting/#_1","text":"","title":"\u4e3b\u9898\u8bbe\u7f6e"},{"location":"intro/setting/#_2","text":"","title":"\u989c\u8272\u4e3b\u9898"},{"location":"intro/setting/#_3","text":"\u6839\u636e\u6d4f\u89c8\u5668\u4e0e\u7cfb\u7edf\u8bbe\u7f6e\u81ea\u52a8\u5207\u6362\u660e\u6697\u4e3b\u9898\uff0c\u4e5f\u53ef\u624b\u52a8\u5207\u6362\u3002 Default Slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorScheme = this.dataset.mdColorScheme; localStorage.setItem(\"data-md-color-scheme\",this.dataset.mdColorScheme); }) })","title":"\u914d\u8272\u65b9\u6848"},{"location":"intro/setting/#_4","text":"\u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272\u3002 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","title":"\u4e3b\u8272"},{"location":"intro/setting/#_5","text":"\u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272\u3002 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) button[data-md-color-accent]> code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } button[data-md-color-primary] > code { background-color: var(--md-code-bg-color); color: var(--md-primary-fg-color); } button[data-md-color-primary='white'] > code { background-color: var(--md-primary-bg-color); color: var(--md-primary-fg-color); } button[data-md-color-accent],button[data-md-color-primary],button[data-md-color-scheme]{ width: 8.4rem; margin-bottom: .4rem; padding: 2.4rem .4rem .4rem; transition: background-color .25s,opacity .25s; border-radius: .2rem; color: #fff; font-size: .8rem; text-align: left; cursor: pointer; } button[data-md-color-accent]{ background-color: var(--md-accent-fg-color); } button[data-md-color-primary]{ background-color: var(--md-primary-fg-color); } button[data-md-color-scheme='default']{ background-color: hsla(0, 0%, 100%, 1); } button[data-md-color-scheme='slate']{ background-color: var(--md-default-bg-color); } button[data-md-color-accent]:hover, button[data-md-color-primary]:hover { opacity: .75; }","title":"\u8f85\u52a9\u8272"},{"location":"intro/usage/","text":"\u5982\u4f55\u4f7f\u7528 \u00b6 \u7b80\u4ecb \u00b6 RainPPR's Blog \u7531\u4e24\u4e2a\u59ca\u59b9\u9879\u76ee\u6784\u6210\uff1a RainPPR's Blog \uff1aOI \u76f8\u5173\u5185\u5bb9\u3002 RainPPR's WHK Blog \uff1aWHK \u76f8\u5173\u5185\u5bb9\u3002 \u5982\u4f55\u627e\u5230\u6587\u7ae0\u76f8\u5173\u8d44\u6e90 \u00b6 \u5173\u6ce8\u4f5c\u8005\uff1a \u6d1b\u8c37\u8d26\u53f7\uff1a RainPPR (uid: 371511) \u3002 Github \u4e0a\u7684\u5176\u4ed6\u7b14\u8bb0\uff1a RainPPR/MYOI \u3002 \u535a\u5ba2\u56ed\uff1a RainPPR \u3002 \u2026\u2026","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"intro/usage/#_1","text":"","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"intro/usage/#_2","text":"RainPPR's Blog \u7531\u4e24\u4e2a\u59ca\u59b9\u9879\u76ee\u6784\u6210\uff1a RainPPR's Blog \uff1aOI \u76f8\u5173\u5185\u5bb9\u3002 RainPPR's WHK Blog \uff1aWHK \u76f8\u5173\u5185\u5bb9\u3002","title":"\u7b80\u4ecb"},{"location":"intro/usage/#_3","text":"\u5173\u6ce8\u4f5c\u8005\uff1a \u6d1b\u8c37\u8d26\u53f7\uff1a RainPPR (uid: 371511) \u3002 Github \u4e0a\u7684\u5176\u4ed6\u7b14\u8bb0\uff1a RainPPR/MYOI \u3002 \u535a\u5ba2\u56ed\uff1a RainPPR \u3002 \u2026\u2026","title":"\u5982\u4f55\u627e\u5230\u6587\u7ae0\u76f8\u5173\u8d44\u6e90"},{"location":"math/linear-algebra/gauss/","text":"\u9ad8\u65af\u6d88\u5143 \u00b6 \u5f15\u5165 \u00b6 \u6d88\u5143\u6cd5 \u00b6 \u6d88\u5143\u6cd5\u662f\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u7684\u4e00\u65b9\u7a0b\u7684\u672a\u77e5\u6570\u7528\u542b\u6709\u53e6\u4e00\u672a\u77e5\u6570\u7684\u4ee3\u6570\u5f0f\u8868\u793a\uff0c\u5e76\u5c06\u5176\u5e26\u5165\u5230\u53e6\u4e00\u65b9\u7a0b\u4e2d\uff0c\u8fd9\u5c31\u6d88\u53bb\u4e86\u4e00\u672a\u77e5\u6570\uff0c\u5f97\u5230\u4e00\u89e3\uff1b\u6216\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u7684\u4e00\u65b9\u7a0b\u500d\u4e58\u67d0\u4e2a\u5e38\u6570\u52a0\u5230\u53e6\u5916\u4e00\u65b9\u7a0b\u4e2d\u53bb\uff0c\u4e5f\u53ef\u8fbe\u5230\u6d88\u53bb\u4e00\u672a\u77e5\u6570\u7684\u76ee\u7684\u3002\u6d88\u5143\u6cd5\u4e3b\u8981\u7528\u4e8e\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002 \u589e\u5e7f\u77e9\u9635 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u672a\u77e5\u6570\u524d\u7684\u7cfb\u6570\u6784\u6210\u7cfb\u6570\u77e9\u9635\uff0c\u5982\u679c\u5728\u7cfb\u6570\u77e9\u9635\u53f3\u7aef\u8865\u4e0a\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u5e38\u6570\u9879\u5219\u6784\u6210\u589e\u5e7f\u77e9\u9635\u3002\u5373\u4e3a\u65b9\u7a0b\u7ec4\u7cfb\u6570\u77e9\u9635 \\(A\\) \u4e0e\u5e38\u6570\u5217 \\(b\\) \u7684\u5e76\u751f\u6210\u7684\u65b0\u77e9\u9635\uff0c\u8868\u793a\u4e3a \\((A | b)\\) \u3002 \u5e94\u7528\u521d\u7b49\u884c\u53d8\u6362\uff0c\u53ef\u4ee5\u5c06\u7ebf\u6027\u65b9\u7a0b\u7ec4\u5bf9\u5e94\u7684\u589e\u5e7f\u77e9\u9635\u5148\u8f6c\u5316\u4e3a\u884c\u9636\u68af\u5f62\u77e9\u9635\uff0c\u518d\u8f6c\u5316\u4e3a\u884c\u6700\u7b80\u5f62\u77e9\u9635\uff0c\u8fdb\u800c\u5b8c\u6210\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002\u8fd9\u4e2a\u65b9\u6cd5\u53eb\u505a\u6d88\u5143\u6cd5\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u800c\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u662f\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u8fdb\u884c\u7684\u6d88\u5143\u7b97\u6cd5\u3002 \u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u53d8\u6362\u5316\u4e3a\u884c\u6700\u7b80\u5f62\uff0c\u5373\u662f\u5229\u7528\u4e86\u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u601d\u60f3\u7406\u5ff5\uff0c\u7701\u7565\u4e86\u53d8\u91cf\u800c\u7528\u53d8\u91cf\u7684\u7cfb\u6570\u4f4d\u7f6e\u8868\u793a\u53d8\u91cf\uff0c\u589e\u5e7f\u77e9\u9635\u4e2d\u7528\u7ad6\u7ebf\u9694\u5f00\u4e86\u7cfb\u6570\u77e9\u9635\u548c\u5e38\u6570\u5217\uff0c\u4ee3\u8868\u4e86\u7b49\u4e8e\u7b26\u53f7\u3002 \u4f8b\u5982\u65b9\u7a0b \\[\\begin{cases} 4x+y&=100 \\\\ x-y&=100 \\end{cases}\\] \u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[ \\left(\\begin{matrix} 4 & 1 \\\\ 1 & -1 \\end{matrix} \\middle| \\begin{matrix} 100 \\\\ 100 \\end{matrix} \\right) \\] \u884c\u6700\u7b80\u5f62\u77e9\u9635 \u00b6 \u5728\u9636\u68af\u5f62\u77e9\u9635\u4e2d\uff0c\u82e5\u5176\u5404\u884c\u7684\u7b2c\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\u5747\u4e3a \\(1\\) \uff0c\u4e14\u6240\u5728\u5217\u7684\u5176\u4ed6\u5143\u7d20\u90fd\u4e3a \\(0\\) \uff0c\u5c31\u79f0\u8be5\u77e9\u9635\u4e3a\u884c\u6700\u7b80\u5f62\u77e9\u9635\u3002 \u6d88\u5143\u6cd5\u7406\u8bba\u7684\u6838\u5fc3 \u00b6 \u8003\u8651\u5c06\u6d88\u5143\u6cd5\u7684\u601d\u60f3\u5f15\u5165 \\(n\\) \u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u8bba\uff1a \u4e24\u65b9\u7a0b\u4e92\u6362\uff0c\u89e3\u4e0d\u53d8\uff1b \u4e00\u65b9\u7a0b\u4e58\u4ee5\u975e\u96f6\u6570 \\(k\\) \uff0c\u89e3\u4e0d\u53d8\uff1b \u4e00\u65b9\u7a0b\u52a0\u4e0a\u53e6\u4e00\u65b9\u7a0b\u7684 \\(k\\) \u500d\uff0c\u89e3\u4e0d\u53d8\u3002 \u521d\u7b49\u53d8\u6362 \u00b6 \u5bf9\u4e8e\u77e9\u9635 \\(A\\) \uff0c\u53ef\u4ee5\u8fdb\u884c\uff3b\u521d\u7b49\u884c\u53d8\u6362\uff3d\u548c\uff3b\u521d\u7b49\u5217\u53d8\u6362\uff3d\uff0c\u7edf\u79f0\u4e3a\u521d\u7b49\u53d8\u6362\uff08\u521d\u7b49\u884c\u5217\u53d8\u6362\uff09\u3002\u521d\u7b49\u884c\u53d8\u6362\u4e0e\u521d\u7b49\u5217\u53d8\u6362\u4e00\u6837\uff0c\u90fd\u6709 \\(3\\) \u79cd\uff1a\u5bf9\u6362\uff08switching\uff09\u3001\u500d\u4e58\uff08multiplication\uff09\u3001\u500d\u52a0\uff08addition\uff09\u3002 \u521d\u7b49\u884c\u53d8\u6362\uff08\u5217\u540c\u884c\uff09 \u5bf9\u5e94\u5230\u65b9\u7a0b\u7ec4\u91cc\u7684\u63cf\u8ff0 \u5bf9\u6362\uff1a\u7b2c \\(i\\) \uff0c \\(j\\) \u884c\u4e92\u6362 \u4e24\u65b9\u7a0b\u4e92\u6362\uff0c\u89e3\u4e0d\u53d8 \u500d\u4e58\uff1a\u7b2c \\(i\\) \u884c\u4e58\u975e\u96f6\u6570 \\(k\\) \u4e00\u65b9\u7a0b\u4e58\u4ee5\u975e\u96f6\u6570 \\(k\\) \uff0c\u89e3\u4e0d\u53d8 \u500d\u52a0\uff1a\u7b2c \\(j\\) \u884c\u4e58 \\(k\\) \u52a0\u5230\u7b2c \\(i\\) \u884c \u4e00\u65b9\u7a0b\u52a0\u4e0a\u53e6\u4e00\u65b9\u7a0b\u7684 \\(k\\) \u500d\uff0c\u89e3\u4e0d\u53d8 \u5728\u521d\u7b49\u53d8\u6362\u4e2d\uff0c\u5bf9\u6362\u53ef\u4ee5\u901a\u8fc7\u500d\u4e58\u548c\u500d\u52a0\u5b9e\u73b0\uff0c\u800c\u500d\u52a0\u4e0d\u80fd\u901a\u8fc7\u500d\u4e58\u548c\u5bf9\u6362\u5b9e\u73b0\u3002\u56e0\u6b64\uff0c\u76f8\u8f83\u5bf9\u6362\u800c\u8a00\uff0c\u500d\u4e58\u548c\u500d\u52a0\u662f\u66f4\u4e3a\u672c\u8d28\u7684\u64cd\u4f5c\u3002\u5bf9\u6362\u64cd\u4f5c\u662f\u4e3a\u4e86\u5728\u6d88\u5143\u6cd5\u4e2d\uff0c\u4fdd\u8bc1\u6d88\u5143\u7684\u6709\u5e8f\uff0c\u800c\u5f15\u5165\u7684\u8f85\u52a9\u64cd\u4f5c\u3002 \u9ad8\u65af\u6d88\u5143\u6cd5\uff08\u4eba\u5de5\uff09 \u00b6 \u7406\u8bba\u57fa\u7840 \u00b6 \u5fb7\u56fd\u6570\u5b66\u5bb6\u9ad8\u65af\u5bf9\u6d88\u5143\u6cd5\u8fdb\u884c\u4e86\u601d\u8003\u5206\u6790\uff0c\u5f97\u51fa\u4e86\u5982\u4e0b\u7ed3\u8bba\uff1a \u5728\u6d88\u5143\u6cd5\u4e2d\uff0c\u53c2\u4e0e\u8ba1\u7b97\u548c\u53d1\u751f\u6539\u53d8\u7684\u662f\u65b9\u7a0b\u4e2d\u5404\u53d8\u91cf\u7684\u7cfb\u6570\uff1b \u5404\u53d8\u91cf\u5e76\u672a\u53c2\u4e0e\u8ba1\u7b97\uff0c\u4e14\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff1b \u53ef\u4ee5\u5229\u7528\u7cfb\u6570\u7684\u4f4d\u7f6e\u8868\u793a\u53d8\u91cf\uff0c\u4ece\u800c\u7701\u7565\u53d8\u91cf\uff1b \u5728\u8ba1\u7b97\u4e2d\u5c06\u53d8\u91cf\u7b80\u5316\u7701\u7565\uff0c\u65b9\u7a0b\u7684\u89e3\u4e0d\u53d8\u3002 \u9ad8\u65af\u5728\u8fd9\u4e9b\u7ed3\u8bba\u7684\u57fa\u7840\u4e0a\uff0c\u63d0\u51fa\u4e86\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u9996\u5148\u5c06\u65b9\u7a0b\u7684\u589e\u5e7f\u77e9\u9635\u5229\u7528\u884c\u521d\u7b49\u53d8\u6362\u5316\u4e3a\u884c\u6700\u7b80\u5f62\uff0c\u7136\u540e\u4ee5\u7ebf\u6027\u65e0\u5173\u4e3a\u51c6\u5219\u5bf9\u81ea\u7531\u672a\u77e5\u91cf\u8d4b\u503c\uff0c\u6700\u540e\u5217\u51fa\u8868\u8fbe\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002 \u6807\u51c6\u5f62\u5f0f \u00b6 \u5df2\u77e5 \\(n\\) \u5143\u7ebf\u6027\u4e00\u6b21\u65b9\u7a0b\u7ec4\u3002 \\[ \\begin{cases} a_{1, 1} x_1 + a_{1, 2} x_2 + \\dots + a_{1, n} x_n = b_1 \\\\ a_{2, 1} x_1 + a_{2, 2} x_2 + \\dots + a_{2, n} x_n = b_2 \\\\ \\dots \\\\ a_{n,1} x_1 + a_{n, 2} x_2 + \\dots + a_{n, n} x_n = b_n \\end{cases} \\] \u6c42\u65b9\u7a0b\u7ec4\u7684\u89e3\u7684\u60c5\u51b5\u3002 \u65b9\u6cd5\u53ca\u6b65\u9aa4 \u00b6 \u9ad8\u65af\u6d88\u5143\u6cd5\u5728\u5c06\u589e\u5e7f\u77e9\u9635\u5316\u4e3a\u6700\u7b80\u5f62\u540e\u5bf9\u4e8e\u81ea\u7531\u672a\u77e5\u91cf\u7684\u8d4b\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u9ad8\u65af\u6d88\u5143\u6cd5\u5212\u5206\u4e3a\u4e94\u6b65\u9aa4\uff0c\u4ece\u800c\u63d0\u51fa\u4e94\u6b65\u9aa4\u6cd5\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u884c\u53d8\u6362\u4e3a\u884c\u6700\u7b80\u5f62\uff1b \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1b \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff1b \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf\uff1b \u5217\u8868\u793a\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002 \u4e0b\u9762\u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\u3002 \u8fc7\u7a0b \u00b6 \u4f8b\uff1a\u5229\u7528\u9ad8\u65af\u6d88\u5143\u6cd5\u4e94\u6b65\u9aa4\u6cd5\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \\[ \\begin{cases} 2x_1+5x_3+6x_4&=9 \\\\ x_3+x_4&=-4 \\\\ 2x_3+2x_4&=-8 \\end{cases} \\] \u5316\u4e3a\u884c\u6700\u7b80\u5f62\u77e9\u9635\uff1a \u5177\u4f53\u65b9\u6cd5\uff1a\u540e\u9762\u8bb2\uff08\u5efa\u8bae\u5148\u770b\u5b8c\u8fd9\u4e9b\u5185\u5bb9\u518d\u5f80\u4e0b\u8fdb\u884c\uff09\u3002 \u539f\u59cb\u77e9\u9635 \\[ \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 2 & 2 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ -8 \\end{matrix} \\right) \\] \u5c06\u7b2c\u4e8c\u884c\u7684 \\(2\\) \u500d\u52a0\u5230\u7b2c\u4e09\u884c \\[ \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\] \u5c06\u7b2c\u4e00\u884c\u4e58\u4ee5 \\(\\dfrac{1}{2}\\) \\[ \\left(\\begin{matrix} 1 & 0 & 2.5 & 3 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 4.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\] \u5c06\u7b2c\u4e8c\u884c\u7684 \\(2.5\\) \u500d\u52a0\u5230\u7b2c\u4e00\u884c \\[ \\left(\\begin{matrix} 1 & 0 & 0 & 0.5 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 14.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\] \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \u5728\u884c\u6700\u7b80\u5f62\u77e9\u9635\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u4e4b\u91cd\u65b0\u4e66\u5199\u4e3a\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u5f62\u5f0f\uff0c\u5373\u5c06\u884c\u6700\u7b80\u5f62\u4e2d\u5404\u4f4d\u7f6e\u7684\u7cfb\u6570\u91cd\u65b0\u8d4b\u4e88\u53d8\u91cf\uff0c\u4e2d\u95f4\u7684\u7ad6\u7ebf\u8fd8\u539f\u4e3a\u7b49\u53f7\u3002 \\[ \\begin{cases} x_1+0.5x_4 &= 14.5\\\\ x_3+x_4 &= -4 \\\\ \\end{cases} \\] \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff1a \u5bf9\u4e8e\u6240\u8fd8\u539f\u7684\u7ebf\u6027\u65b9\u7a0b\u7ec4\u800c\u8a00\uff0c\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u6bcf\u4e2a\u65b9\u7a0b\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u7528\u5176\u4ed6\u91cf\u8868\u8fbe\u51fa\u6765\uff1b\u5373\u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u7a0b\uff0c\u4ec5\u5c06\u7b2c\u4e00\u4e2a\u53d8\u91cf\u653e\u5728\u65b9\u7a0b\u5de6\u8fb9\uff0c\u5176\u4ed6\u6240\u6709\u91cf\u90fd\u653e\u5728\u65b9\u7a0b\u53f3\u8fb9\u3002 \\[ \\begin{cases} x_1 = -0.5x_4+14.5\\notag \\\\ x_3 = -x_4-4\\notag \\end{cases} \\] \u203b\u56e0\u4e3a\u662f\u884c\u6700\u7b80\u5f62\u77e9\u9635\uff0c\u6240\u4ee5\u6bcf\u4e2a\u65b9\u7a0b\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf\u7684\u7cfb\u6570\u4e00\u5b9a\u662f \\(1\\) \u3002 \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf\uff1a \u7b2c \\(3\\) \u6b65\u4e2d\uff0c\u6c42\u89e3\u51fa\u53d8\u91cf \\(x_1\\) \u548c \\(x_3\\) \uff0c\u4ece\u800c\u8bf4\u660e\u4e86\u65b9\u7a0b\u5269\u4f59\u7684\u53d8\u91cf \\(x_2\\) \u548c \\(x_4\\) \u4e0d\u53d7\u65b9\u7a0b\u7ec4\u7684\u7ea6\u675f\uff0c\u662f\u81ea\u7531\u672a\u77e5\u91cf\uff0c\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff0c\u6240\u4ee5\u9700\u8981\u5728\u7b2c \\(3\\) \u6b65\u9aa4\u89e3\u5f97\u57fa\u7840\u4e0a\u8fdb\u884c\u89e3\u5f97\u8865\u5145\uff0c\u5373 \\(x_2 = x_2\\) \uff0c \\(x_4 = x_4\\) \u3002 \\[ \\begin{cases} x_1 = -0.5x_4+14.5 \\\\ x_2 = x_2 \\\\ x_3 = -x_4-4 \\\\ x_4 = x_4 \\end{cases} \\] \u8868\u793a\u65b9\u7a0b\u7ec4\u7684\u901a\u89e3\uff1a \u5728\u7b2c \\(4\\) \u6b65\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u89e3\u8868\u8fbe\u4e3a\u5217\u5411\u91cf\u7ec4\u5408\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u540c\u65f6\u7531\u4e8e \\(x_2\\) \u548c \\(x_4\\) \u662f\u81ea\u7531\u672a\u77e5\u91cf\uff0c\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff0c\u6240\u4ee5\u5728\u89e3\u5f97\u53f3\u8fb9\uff0c\u4ee4\u4e8c\u8005\u5206\u522b\u4e3a\u4efb\u610f\u5e38\u6570 \\(C_1\\) \u548c \\(C_2\\) \uff0c\u5373\u5b9e\u73b0\u4e86\u5bf9\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002 \\[ \\begin{aligned} \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\end{pmatrix} &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} x_2+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} x_4 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\\\ &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} C_1+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} C_2 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\end{aligned} \\] \u203b\u7528 \\(C_1\\) \u3001 \\(C_2\\) \u3001 \\(C_3\\) \u3001 \\(\\dots\\) \u8868\u793a\u4efb\u610f\u5e38\u6570\u3002 \u9ad8\u65af\u6d88\u5143\u6cd5\uff08\u8ba1\u7b97\u673a\uff09 \u00b6 \u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u6700\u96be\u7684\u4e00\u6b65\u5176\u5b9e\u662f\u7b2c \\(1\\) \u6b65\uff1a\u5316\u4e3a\u884c\u6700\u7b80\u5f62\u77e9\u9635\u3002\u5982\u679c\u662f\u624b\u5de5\u8ba1\u7b97\u7684\u8bdd\uff0c\u4f9d\u6b21\u8003\u8651\u6bcf\u4e00\u5217\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u8fd9\u4e00\u5217\u975e\u96f6\u7684\u4e14\u524d\u9762\u5747\u4e3a \\(0\\) \u7684\u884c\uff0c\u5c06\u8fd9\u4e00\u884c\u5168\u90e8\u9664\u4ee5\u8fd9\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u7a0b\u5e8f\u5c31\u9700\u8981\u8003\u8651\u6548\u7387\u4ee5\u53ca\u9664\u6cd5\u7684\u7cbe\u5ea6\u4e86\uff0c\u5177\u4f53\u601d\u60f3\u662f\u5c06\u524d\u9762\u5df2\u7ecf\u6709\u975e\u96f6\u7684\u6570\u7684\u884c\u56fa\u5b9a\u5728\u6700\u524d\u9762\uff0c\u5373 \\(1 \\sim r\\) \u7684\u4f4d\u7f6e\u56fa\u5b9a\u3001\u540e\u9762\u4e0d\u518d\u8003\u8651\u3002 \u65b9\u6cd5 \u00b6 \u521d\u59cb\u65f6 \\(r = 0\\) \uff0c\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u5217\uff1a \u627e\u5230\u8fd9\u4e00\u5217\u7edd\u5bf9\u503c\u6700\u5927\u7684\u884c\uff08\u4e0b\u9762\u505a\u9664\u6cd5\u7684\u65f6\u5019\uff0c\u5206\u5b50\u5927\uff0c\u53ef\u4ee5\u51cf\u5c0f\u7cbe\u5ea6\u8bef\u5dee\uff09\uff1b \\(\\in [r + 1, n]\\) \u628a\u8fd9\u4e00\u884c\u6362\u5230\u7b2c \\(r + 1\\) \u884c \u5c06\u8fd9\u4e00\u884c\u7684\u6bcf\u4e2a\u6570\u540c\u65f6\u9664\u4ee5\u8fd9\u4e00\u4e2a\u975e\u96f6\u7684\u6570\uff1b\u5982\u679c\u6ca1\u6709\u975e\u96f6\u7684\u6570\u5219\u8868\u793a\u6ca1\u6709\u552f\u4e00\u89e3\uff08\u53d6\u51b3\u4e8e\u884c\u6700\u7b80\u5f62\u77e9\u9635\u7684\u53f3\u4fa7\u662f\u5426\u975e\u96f6\uff0c\u6240\u4ee5\u5982\u679c\u8981\u786e\u5b9a\u662f\u65e0\u7a77\u89e3\u8fd8\u662f\u65e0\u89e3\uff0c\u5c31\u9700\u8981\u7ee7\u7eed\u7b97\uff0c\u5728\u6c42\u51fa\u884c\u6700\u7b80\u5f62\u77e9\u9635\u540e\u518d\u5224\u65ad\uff09 \u628a\u8fd9\u4e00\u5217\uff0c\u9664\u4e86\u7b2c\u4e00\u4e2a\u6570\uff0c\u5168\u90fd\u6d88\u6210\u96f6\uff1b\u5373\u6309\u6bd4\u4f8b\u51cf\u53bb \u56fa\u5b9a\u8fd9\u4e2a\u65b9\u7a0b\uff0c\u4ee5\u540e\u4e0d\u518d\u8003\u8651\uff1b\u5373 \\(r = r + 1\\) \u89e3\u7684\u60c5\u51b5\u5224\u65ad \u00b6 \u5b8c\u7f8e\u9636\u68af\u578b\uff1a\u552f\u4e00\u89e3\uff1b \u5373\u7b2c \\(i\\) \u884c\uff0c\u7b2c\u4e00\u4e2a\u975e\u96f6\u5728\u7b2c \\(i\\) \u4e2a\u3002 \u5de6\u8fb9\u6ca1\u6709\u672a\u77e5\u6570\uff0c\u53f3\u8fb9\u7cfb\u6570\u975e\u96f6\uff1a\u65e0\u89e3\uff1b \u5373 \\(r + 1 \\sim n\\) \u884c\u4e2d\uff0c\u6709\u53f3\u4fa7\u975e\u96f6\u7684\u65b9\u7a0b\u3002 \u5426\u5219\uff1a\u65e0\u7a77\u7ec4\u89e3\u3002 \u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5 \u00b6 \u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\uff0c\u662f\u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u53e6\u4e00\u4e2a\u7248\u672c\uff0c\u5176\u65b9\u6cd5\u4e0e\u9ad8\u65af\u6d88\u53bb\u6cd5\u76f8\u540c\uff1b\u552f\u4e00\u76f8\u5f02\u4e4b\u5904\u5c31\u662f\u8fd9\u7b97\u6cd5\u4ea7\u751f\u51fa\u6765\u7684\u77e9\u9635\u662f\u4e00\u4e2a\u7b80\u5316\u884c\u68af\u9635\u5f0f\uff0c\u800c\u4e0d\u662f\u9ad8\u65af\u6d88\u5143\u6cd5\u4e2d\u7684\u884c\u68af\u9635\u5f0f\u3002\u76f8\u6bd4\u8d77\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u6b64\u7b97\u6cd5\u7684\u6548\u7387\u6bd4\u8f83\u4f4e\uff0c\u5374\u53ef\u628a\u65b9\u7a0b\u7ec4\u7684\u89e3\u7528\u77e9\u9635\u4e00\u6b21\u8fc7\u8868\u793a\u51fa\u6765\u3002 \u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\u5c31\u662f\u5c06\u4e0b\u9762\u7684\u65b9\u7a0b\u7684\u500d\u6570\u4e5f\u51cf\u5230\u4e0a\u9762\u5df2\u7ecf\u8003\u8651\u8fc7\u7684\u65b9\u7a0b\u4e2d\uff08\u6709\u56de\u4ee3\uff0c\u800c\u666e\u901a\u9ad8\u65af\u6d88\u5143\u6cd5\u65e0\u56de\u4ee3\uff09\uff0c\u4f7f\u4e0a\u9762\u7684\u65b9\u7a0b\u7684\u8be5\u5217\u4e5f\u53d8\u4e3a \\(0\\) \uff1b\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u7528\u5f53\u524d\u9009\u4e2d\u7684\u65b9\u7a0b\u53bb\u6d88\u6389\u5176\u4ed6\u65b9\u7a0b\u7684\u65f6\u5019\uff0c\u662f\u5426\u6d88\u53bb\u5176\u4e0a\u9762\u5df2\u7ecf\u7b97\u8fc7\u7684\u65b9\u7a0b\u3002 \u7528\u9ad8\u65af\u6d88\u5143\u6cd5\u548c\u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\u7b97\u51fa\u6765\u7684\u884c\u6700\u7b80\u5f62\u77e9\u9635\u6709\u5982\u4e0b\u533a\u522b\uff1a \u9ad8\u65af\u6d88\u5143\u6cd5 \\[ \\left(\\begin{matrix} 1 & * & * & * \\\\ 0 & 1 & * & * \\\\ 0 & 0 & 1 & * \\\\ 0 & 0 & 0 & 1 \\end{matrix} \\middle| \\begin{matrix} * \\\\ * \\\\ * \\\\ * \\end{matrix}\\right) \\] \u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5 \\[ \\left(\\begin{matrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{matrix} \\middle| \\begin{matrix} * \\\\ * \\\\ * \\\\ * \\end{matrix} \\right) \\] \u5177\u4f53\u7684\u5185\u5bb9\u53ef\u4ee5\u89c1\uff1a https://www.cnblogs.com/mk-oi/p/14290455.html \uff1b \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u8bf4\u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\u4e0d\u53ef\u5224\u65e0\u89e3\u548c\u65e0\u7a77\u89e3\uff0c\u4f46\u6211\u5b9e\u6d4b\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u4e3a\u4e86\u4ee3\u7801\u7b80\u4fbf\uff0c\u4e0b\u6587\u7684\u4ee3\u7801\u4f7f\u7528\u7684\u90fd\u662f\u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\uff0c\u800c\u4e0d\u662f\u666e\u901a\u7684\u9ad8\u65af\u6d88\u5143\u6cd5\u3002 P3389 \u9ad8\u65af\u6d88\u5143\u6cd5 \u00b6 \\(n \\times n\\) \u7684\u77e9\u9635\uff0c\u4ec5\u9700\u8f93\u51fa\u552f\u4e00\u89e3\u6216\u65e0\u552f\u4e00\u89e3\u3002 \u4ee3\u7801 const int N = 110; double a[N][N], b[N]; int main() { int n = rr; for (int i = 1; i <= n; ++i) { for (int j = 1; j <= n; ++j) a[i][j] = rr; b[i] = rr; } for (int i = 1; i <= n; ++i) { int r = 0; for (int j = i; j <= n; ++j) if (fabs(a[j][i]) > fabs(a[r][i])) r = j; if (a[r][i] == 0) printf(\"No Solution\\n\"), exit(0); const double t = a[r][i]; for (int j = 1; j <= n; ++j) swap(a[i][j], a[r][j]), a[i][j] /= t; swap(b[i], b[r]), b[i] /= t; for (int j = 1; j <= n; ++j) { if (i == j || a[j][i] == 0) continue; const double c = a[j][i]; for (int k = i; k <= n; ++k) a[j][k] -= c * a[i][k]; b[j] -= c * b[i]; } } for (int i = 1; i <= n; ++i) printf(\"%.2lf\\n\", b[i]); return 0; } P2455 \u7ebf\u6027\u65b9\u7a0b\u7ec4 \u00b6 \\(n \\times n\\) \u7684\u77e9\u9635\uff0c\u9700\u8981\u5224\u65ad\u89e3\u7684\u4e09\u79cd\u60c5\u51b5\u3002 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std; using db = long double; constexpr db eps = 1e-8; #define abs(x) ((x) < 0 ? -(x) : (x)) struct matrix { int n; vector<db> b; vector<vector<db>> a; void input() { cin >> n; b.resize(n + 1); a.resize(n + 1, vector<db>(n + 1)); for (int i = 1; i <= n; ++i) { for (int j = 1; j <= n; ++j) cin >> a[i][j]; cin >> b[i]; } } int best_row(int row, int col) { int mi = 0; double cm = -1; for (int i = row; i <= n; ++i) if (abs(a[i][col]) > cm) cm = abs(a[i][col]), mi = i; return mi; } void clear_row(int row, int col) { double t = a[row][col]; b[row] /= t; for (int i = 1; i <= n; ++i) a[row][i] /= t; } void clear_matrix(int row, int col) { for (int i = 1; i <= n; ++i) { if (i == row || a[i][col] == 0) continue; double t = a[i][col]; b[i] -= t * b[row]; for (int j = 1; j <= n; ++j) a[i][j] -= t * a[row][j]; } } vector<db> gauss(int &opc) { opc = 1; int row = 1; for (int col = 1; col <= n; ++col) { int mi = best_row(row, col); if (abs(a[mi][col]) < eps) continue; swap(a[row], a[mi]), swap(b[row], b[mi]); clear_row(row, col); clear_matrix(row++, col); } if (row == n + 1) return b; for (; row <= n; ++row) if (abs(b[row]) > eps) return (opc = -1, vector<db>()); return (opc = 0, vector<db>()); } }; void print(vector<db> q) { for (int i = 1; i < q.size(); ++i) cout << \"x\" << i << \"=\" << q[i] << endl; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); matrix x; x.input(); int c; vector<db> res = x.gauss(c); if (c != 1) cout << c << endl; else print(res); return 0; } Reference \u00b6 [1] https://oi-wiki.org/math/linear-algebra/matrix/ [2] https://oi-wiki.org/math/linear-algebra/elementary-operations/ [3] https://oi-wiki.org/math/numerical/gauss/ [4] https://www.cnblogs.com/mk-oi/p/14290455.html","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"math/linear-algebra/gauss/#_1","text":"","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"math/linear-algebra/gauss/#_2","text":"","title":"\u5f15\u5165"},{"location":"math/linear-algebra/gauss/#_3","text":"\u6d88\u5143\u6cd5\u662f\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u7684\u4e00\u65b9\u7a0b\u7684\u672a\u77e5\u6570\u7528\u542b\u6709\u53e6\u4e00\u672a\u77e5\u6570\u7684\u4ee3\u6570\u5f0f\u8868\u793a\uff0c\u5e76\u5c06\u5176\u5e26\u5165\u5230\u53e6\u4e00\u65b9\u7a0b\u4e2d\uff0c\u8fd9\u5c31\u6d88\u53bb\u4e86\u4e00\u672a\u77e5\u6570\uff0c\u5f97\u5230\u4e00\u89e3\uff1b\u6216\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u7684\u4e00\u65b9\u7a0b\u500d\u4e58\u67d0\u4e2a\u5e38\u6570\u52a0\u5230\u53e6\u5916\u4e00\u65b9\u7a0b\u4e2d\u53bb\uff0c\u4e5f\u53ef\u8fbe\u5230\u6d88\u53bb\u4e00\u672a\u77e5\u6570\u7684\u76ee\u7684\u3002\u6d88\u5143\u6cd5\u4e3b\u8981\u7528\u4e8e\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002","title":"\u6d88\u5143\u6cd5"},{"location":"math/linear-algebra/gauss/#_4","text":"\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u672a\u77e5\u6570\u524d\u7684\u7cfb\u6570\u6784\u6210\u7cfb\u6570\u77e9\u9635\uff0c\u5982\u679c\u5728\u7cfb\u6570\u77e9\u9635\u53f3\u7aef\u8865\u4e0a\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u5e38\u6570\u9879\u5219\u6784\u6210\u589e\u5e7f\u77e9\u9635\u3002\u5373\u4e3a\u65b9\u7a0b\u7ec4\u7cfb\u6570\u77e9\u9635 \\(A\\) \u4e0e\u5e38\u6570\u5217 \\(b\\) \u7684\u5e76\u751f\u6210\u7684\u65b0\u77e9\u9635\uff0c\u8868\u793a\u4e3a \\((A | b)\\) \u3002 \u5e94\u7528\u521d\u7b49\u884c\u53d8\u6362\uff0c\u53ef\u4ee5\u5c06\u7ebf\u6027\u65b9\u7a0b\u7ec4\u5bf9\u5e94\u7684\u589e\u5e7f\u77e9\u9635\u5148\u8f6c\u5316\u4e3a\u884c\u9636\u68af\u5f62\u77e9\u9635\uff0c\u518d\u8f6c\u5316\u4e3a\u884c\u6700\u7b80\u5f62\u77e9\u9635\uff0c\u8fdb\u800c\u5b8c\u6210\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002\u8fd9\u4e2a\u65b9\u6cd5\u53eb\u505a\u6d88\u5143\u6cd5\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u800c\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u662f\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u8fdb\u884c\u7684\u6d88\u5143\u7b97\u6cd5\u3002 \u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u53d8\u6362\u5316\u4e3a\u884c\u6700\u7b80\u5f62\uff0c\u5373\u662f\u5229\u7528\u4e86\u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u601d\u60f3\u7406\u5ff5\uff0c\u7701\u7565\u4e86\u53d8\u91cf\u800c\u7528\u53d8\u91cf\u7684\u7cfb\u6570\u4f4d\u7f6e\u8868\u793a\u53d8\u91cf\uff0c\u589e\u5e7f\u77e9\u9635\u4e2d\u7528\u7ad6\u7ebf\u9694\u5f00\u4e86\u7cfb\u6570\u77e9\u9635\u548c\u5e38\u6570\u5217\uff0c\u4ee3\u8868\u4e86\u7b49\u4e8e\u7b26\u53f7\u3002 \u4f8b\u5982\u65b9\u7a0b \\[\\begin{cases} 4x+y&=100 \\\\ x-y&=100 \\end{cases}\\] \u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[ \\left(\\begin{matrix} 4 & 1 \\\\ 1 & -1 \\end{matrix} \\middle| \\begin{matrix} 100 \\\\ 100 \\end{matrix} \\right) \\]","title":"\u589e\u5e7f\u77e9\u9635"},{"location":"math/linear-algebra/gauss/#_5","text":"\u5728\u9636\u68af\u5f62\u77e9\u9635\u4e2d\uff0c\u82e5\u5176\u5404\u884c\u7684\u7b2c\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\u5747\u4e3a \\(1\\) \uff0c\u4e14\u6240\u5728\u5217\u7684\u5176\u4ed6\u5143\u7d20\u90fd\u4e3a \\(0\\) \uff0c\u5c31\u79f0\u8be5\u77e9\u9635\u4e3a\u884c\u6700\u7b80\u5f62\u77e9\u9635\u3002","title":"\u884c\u6700\u7b80\u5f62\u77e9\u9635"},{"location":"math/linear-algebra/gauss/#_6","text":"\u8003\u8651\u5c06\u6d88\u5143\u6cd5\u7684\u601d\u60f3\u5f15\u5165 \\(n\\) \u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u8bba\uff1a \u4e24\u65b9\u7a0b\u4e92\u6362\uff0c\u89e3\u4e0d\u53d8\uff1b \u4e00\u65b9\u7a0b\u4e58\u4ee5\u975e\u96f6\u6570 \\(k\\) \uff0c\u89e3\u4e0d\u53d8\uff1b \u4e00\u65b9\u7a0b\u52a0\u4e0a\u53e6\u4e00\u65b9\u7a0b\u7684 \\(k\\) \u500d\uff0c\u89e3\u4e0d\u53d8\u3002","title":"\u6d88\u5143\u6cd5\u7406\u8bba\u7684\u6838\u5fc3"},{"location":"math/linear-algebra/gauss/#_7","text":"\u5bf9\u4e8e\u77e9\u9635 \\(A\\) \uff0c\u53ef\u4ee5\u8fdb\u884c\uff3b\u521d\u7b49\u884c\u53d8\u6362\uff3d\u548c\uff3b\u521d\u7b49\u5217\u53d8\u6362\uff3d\uff0c\u7edf\u79f0\u4e3a\u521d\u7b49\u53d8\u6362\uff08\u521d\u7b49\u884c\u5217\u53d8\u6362\uff09\u3002\u521d\u7b49\u884c\u53d8\u6362\u4e0e\u521d\u7b49\u5217\u53d8\u6362\u4e00\u6837\uff0c\u90fd\u6709 \\(3\\) \u79cd\uff1a\u5bf9\u6362\uff08switching\uff09\u3001\u500d\u4e58\uff08multiplication\uff09\u3001\u500d\u52a0\uff08addition\uff09\u3002 \u521d\u7b49\u884c\u53d8\u6362\uff08\u5217\u540c\u884c\uff09 \u5bf9\u5e94\u5230\u65b9\u7a0b\u7ec4\u91cc\u7684\u63cf\u8ff0 \u5bf9\u6362\uff1a\u7b2c \\(i\\) \uff0c \\(j\\) \u884c\u4e92\u6362 \u4e24\u65b9\u7a0b\u4e92\u6362\uff0c\u89e3\u4e0d\u53d8 \u500d\u4e58\uff1a\u7b2c \\(i\\) \u884c\u4e58\u975e\u96f6\u6570 \\(k\\) \u4e00\u65b9\u7a0b\u4e58\u4ee5\u975e\u96f6\u6570 \\(k\\) \uff0c\u89e3\u4e0d\u53d8 \u500d\u52a0\uff1a\u7b2c \\(j\\) \u884c\u4e58 \\(k\\) \u52a0\u5230\u7b2c \\(i\\) \u884c \u4e00\u65b9\u7a0b\u52a0\u4e0a\u53e6\u4e00\u65b9\u7a0b\u7684 \\(k\\) \u500d\uff0c\u89e3\u4e0d\u53d8 \u5728\u521d\u7b49\u53d8\u6362\u4e2d\uff0c\u5bf9\u6362\u53ef\u4ee5\u901a\u8fc7\u500d\u4e58\u548c\u500d\u52a0\u5b9e\u73b0\uff0c\u800c\u500d\u52a0\u4e0d\u80fd\u901a\u8fc7\u500d\u4e58\u548c\u5bf9\u6362\u5b9e\u73b0\u3002\u56e0\u6b64\uff0c\u76f8\u8f83\u5bf9\u6362\u800c\u8a00\uff0c\u500d\u4e58\u548c\u500d\u52a0\u662f\u66f4\u4e3a\u672c\u8d28\u7684\u64cd\u4f5c\u3002\u5bf9\u6362\u64cd\u4f5c\u662f\u4e3a\u4e86\u5728\u6d88\u5143\u6cd5\u4e2d\uff0c\u4fdd\u8bc1\u6d88\u5143\u7684\u6709\u5e8f\uff0c\u800c\u5f15\u5165\u7684\u8f85\u52a9\u64cd\u4f5c\u3002","title":"\u521d\u7b49\u53d8\u6362"},{"location":"math/linear-algebra/gauss/#_8","text":"","title":"\u9ad8\u65af\u6d88\u5143\u6cd5\uff08\u4eba\u5de5\uff09"},{"location":"math/linear-algebra/gauss/#_9","text":"\u5fb7\u56fd\u6570\u5b66\u5bb6\u9ad8\u65af\u5bf9\u6d88\u5143\u6cd5\u8fdb\u884c\u4e86\u601d\u8003\u5206\u6790\uff0c\u5f97\u51fa\u4e86\u5982\u4e0b\u7ed3\u8bba\uff1a \u5728\u6d88\u5143\u6cd5\u4e2d\uff0c\u53c2\u4e0e\u8ba1\u7b97\u548c\u53d1\u751f\u6539\u53d8\u7684\u662f\u65b9\u7a0b\u4e2d\u5404\u53d8\u91cf\u7684\u7cfb\u6570\uff1b \u5404\u53d8\u91cf\u5e76\u672a\u53c2\u4e0e\u8ba1\u7b97\uff0c\u4e14\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff1b \u53ef\u4ee5\u5229\u7528\u7cfb\u6570\u7684\u4f4d\u7f6e\u8868\u793a\u53d8\u91cf\uff0c\u4ece\u800c\u7701\u7565\u53d8\u91cf\uff1b \u5728\u8ba1\u7b97\u4e2d\u5c06\u53d8\u91cf\u7b80\u5316\u7701\u7565\uff0c\u65b9\u7a0b\u7684\u89e3\u4e0d\u53d8\u3002 \u9ad8\u65af\u5728\u8fd9\u4e9b\u7ed3\u8bba\u7684\u57fa\u7840\u4e0a\uff0c\u63d0\u51fa\u4e86\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u9996\u5148\u5c06\u65b9\u7a0b\u7684\u589e\u5e7f\u77e9\u9635\u5229\u7528\u884c\u521d\u7b49\u53d8\u6362\u5316\u4e3a\u884c\u6700\u7b80\u5f62\uff0c\u7136\u540e\u4ee5\u7ebf\u6027\u65e0\u5173\u4e3a\u51c6\u5219\u5bf9\u81ea\u7531\u672a\u77e5\u91cf\u8d4b\u503c\uff0c\u6700\u540e\u5217\u51fa\u8868\u8fbe\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002","title":"\u7406\u8bba\u57fa\u7840"},{"location":"math/linear-algebra/gauss/#_10","text":"\u5df2\u77e5 \\(n\\) \u5143\u7ebf\u6027\u4e00\u6b21\u65b9\u7a0b\u7ec4\u3002 \\[ \\begin{cases} a_{1, 1} x_1 + a_{1, 2} x_2 + \\dots + a_{1, n} x_n = b_1 \\\\ a_{2, 1} x_1 + a_{2, 2} x_2 + \\dots + a_{2, n} x_n = b_2 \\\\ \\dots \\\\ a_{n,1} x_1 + a_{n, 2} x_2 + \\dots + a_{n, n} x_n = b_n \\end{cases} \\] \u6c42\u65b9\u7a0b\u7ec4\u7684\u89e3\u7684\u60c5\u51b5\u3002","title":"\u6807\u51c6\u5f62\u5f0f"},{"location":"math/linear-algebra/gauss/#_11","text":"\u9ad8\u65af\u6d88\u5143\u6cd5\u5728\u5c06\u589e\u5e7f\u77e9\u9635\u5316\u4e3a\u6700\u7b80\u5f62\u540e\u5bf9\u4e8e\u81ea\u7531\u672a\u77e5\u91cf\u7684\u8d4b\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u9ad8\u65af\u6d88\u5143\u6cd5\u5212\u5206\u4e3a\u4e94\u6b65\u9aa4\uff0c\u4ece\u800c\u63d0\u51fa\u4e94\u6b65\u9aa4\u6cd5\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u884c\u53d8\u6362\u4e3a\u884c\u6700\u7b80\u5f62\uff1b \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1b \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff1b \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf\uff1b \u5217\u8868\u793a\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002 \u4e0b\u9762\u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\u3002","title":"\u65b9\u6cd5\u53ca\u6b65\u9aa4"},{"location":"math/linear-algebra/gauss/#_12","text":"\u4f8b\uff1a\u5229\u7528\u9ad8\u65af\u6d88\u5143\u6cd5\u4e94\u6b65\u9aa4\u6cd5\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \\[ \\begin{cases} 2x_1+5x_3+6x_4&=9 \\\\ x_3+x_4&=-4 \\\\ 2x_3+2x_4&=-8 \\end{cases} \\] \u5316\u4e3a\u884c\u6700\u7b80\u5f62\u77e9\u9635\uff1a \u5177\u4f53\u65b9\u6cd5\uff1a\u540e\u9762\u8bb2\uff08\u5efa\u8bae\u5148\u770b\u5b8c\u8fd9\u4e9b\u5185\u5bb9\u518d\u5f80\u4e0b\u8fdb\u884c\uff09\u3002 \u539f\u59cb\u77e9\u9635 \\[ \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 2 & 2 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ -8 \\end{matrix} \\right) \\] \u5c06\u7b2c\u4e8c\u884c\u7684 \\(2\\) \u500d\u52a0\u5230\u7b2c\u4e09\u884c \\[ \\left(\\begin{matrix} 2 & 0 & 5 & 6 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 9 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\] \u5c06\u7b2c\u4e00\u884c\u4e58\u4ee5 \\(\\dfrac{1}{2}\\) \\[ \\left(\\begin{matrix} 1 & 0 & 2.5 & 3 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 4.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\] \u5c06\u7b2c\u4e8c\u884c\u7684 \\(2.5\\) \u500d\u52a0\u5230\u7b2c\u4e00\u884c \\[ \\left(\\begin{matrix} 1 & 0 & 0 & 0.5 \\\\ 0 & 0 & 1 & 1 \\\\ 0 & 0 & 0 & 0 \\end{matrix} \\middle| \\begin{matrix} 14.5 \\\\ -4 \\\\ 0 \\end{matrix} \\right) \\] \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \u5728\u884c\u6700\u7b80\u5f62\u77e9\u9635\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u4e4b\u91cd\u65b0\u4e66\u5199\u4e3a\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u5f62\u5f0f\uff0c\u5373\u5c06\u884c\u6700\u7b80\u5f62\u4e2d\u5404\u4f4d\u7f6e\u7684\u7cfb\u6570\u91cd\u65b0\u8d4b\u4e88\u53d8\u91cf\uff0c\u4e2d\u95f4\u7684\u7ad6\u7ebf\u8fd8\u539f\u4e3a\u7b49\u53f7\u3002 \\[ \\begin{cases} x_1+0.5x_4 &= 14.5\\\\ x_3+x_4 &= -4 \\\\ \\end{cases} \\] \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff1a \u5bf9\u4e8e\u6240\u8fd8\u539f\u7684\u7ebf\u6027\u65b9\u7a0b\u7ec4\u800c\u8a00\uff0c\u5c06\u65b9\u7a0b\u7ec4\u4e2d\u6bcf\u4e2a\u65b9\u7a0b\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u7528\u5176\u4ed6\u91cf\u8868\u8fbe\u51fa\u6765\uff1b\u5373\u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u7a0b\uff0c\u4ec5\u5c06\u7b2c\u4e00\u4e2a\u53d8\u91cf\u653e\u5728\u65b9\u7a0b\u5de6\u8fb9\uff0c\u5176\u4ed6\u6240\u6709\u91cf\u90fd\u653e\u5728\u65b9\u7a0b\u53f3\u8fb9\u3002 \\[ \\begin{cases} x_1 = -0.5x_4+14.5\\notag \\\\ x_3 = -x_4-4\\notag \\end{cases} \\] \u203b\u56e0\u4e3a\u662f\u884c\u6700\u7b80\u5f62\u77e9\u9635\uff0c\u6240\u4ee5\u6bcf\u4e2a\u65b9\u7a0b\u7684\u7b2c\u4e00\u4e2a\u53d8\u91cf\u7684\u7cfb\u6570\u4e00\u5b9a\u662f \\(1\\) \u3002 \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf\uff1a \u7b2c \\(3\\) \u6b65\u4e2d\uff0c\u6c42\u89e3\u51fa\u53d8\u91cf \\(x_1\\) \u548c \\(x_3\\) \uff0c\u4ece\u800c\u8bf4\u660e\u4e86\u65b9\u7a0b\u5269\u4f59\u7684\u53d8\u91cf \\(x_2\\) \u548c \\(x_4\\) \u4e0d\u53d7\u65b9\u7a0b\u7ec4\u7684\u7ea6\u675f\uff0c\u662f\u81ea\u7531\u672a\u77e5\u91cf\uff0c\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff0c\u6240\u4ee5\u9700\u8981\u5728\u7b2c \\(3\\) \u6b65\u9aa4\u89e3\u5f97\u57fa\u7840\u4e0a\u8fdb\u884c\u89e3\u5f97\u8865\u5145\uff0c\u5373 \\(x_2 = x_2\\) \uff0c \\(x_4 = x_4\\) \u3002 \\[ \\begin{cases} x_1 = -0.5x_4+14.5 \\\\ x_2 = x_2 \\\\ x_3 = -x_4-4 \\\\ x_4 = x_4 \\end{cases} \\] \u8868\u793a\u65b9\u7a0b\u7ec4\u7684\u901a\u89e3\uff1a \u5728\u7b2c \\(4\\) \u6b65\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u89e3\u8868\u8fbe\u4e3a\u5217\u5411\u91cf\u7ec4\u5408\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u540c\u65f6\u7531\u4e8e \\(x_2\\) \u548c \\(x_4\\) \u662f\u81ea\u7531\u672a\u77e5\u91cf\uff0c\u53ef\u4ee5\u53d6\u4efb\u610f\u503c\uff0c\u6240\u4ee5\u5728\u89e3\u5f97\u53f3\u8fb9\uff0c\u4ee4\u4e8c\u8005\u5206\u522b\u4e3a\u4efb\u610f\u5e38\u6570 \\(C_1\\) \u548c \\(C_2\\) \uff0c\u5373\u5b9e\u73b0\u4e86\u5bf9\u65b9\u7a0b\u7ec4\u7684\u6c42\u89e3\u3002 \\[ \\begin{aligned} \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\end{pmatrix} &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} x_2+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} x_4 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\\\ &= \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{pmatrix} C_1+ \\begin{pmatrix} -0.5 \\\\ 0 \\\\ -1 \\\\ 1 \\end{pmatrix} C_2 + \\begin{pmatrix} 14.5 \\\\ 0 \\\\ -4 \\\\ 0 \\end{pmatrix} \\end{aligned} \\] \u203b\u7528 \\(C_1\\) \u3001 \\(C_2\\) \u3001 \\(C_3\\) \u3001 \\(\\dots\\) \u8868\u793a\u4efb\u610f\u5e38\u6570\u3002","title":"\u8fc7\u7a0b"},{"location":"math/linear-algebra/gauss/#_13","text":"\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u6700\u96be\u7684\u4e00\u6b65\u5176\u5b9e\u662f\u7b2c \\(1\\) \u6b65\uff1a\u5316\u4e3a\u884c\u6700\u7b80\u5f62\u77e9\u9635\u3002\u5982\u679c\u662f\u624b\u5de5\u8ba1\u7b97\u7684\u8bdd\uff0c\u4f9d\u6b21\u8003\u8651\u6bcf\u4e00\u5217\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u8fd9\u4e00\u5217\u975e\u96f6\u7684\u4e14\u524d\u9762\u5747\u4e3a \\(0\\) \u7684\u884c\uff0c\u5c06\u8fd9\u4e00\u884c\u5168\u90e8\u9664\u4ee5\u8fd9\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u7a0b\u5e8f\u5c31\u9700\u8981\u8003\u8651\u6548\u7387\u4ee5\u53ca\u9664\u6cd5\u7684\u7cbe\u5ea6\u4e86\uff0c\u5177\u4f53\u601d\u60f3\u662f\u5c06\u524d\u9762\u5df2\u7ecf\u6709\u975e\u96f6\u7684\u6570\u7684\u884c\u56fa\u5b9a\u5728\u6700\u524d\u9762\uff0c\u5373 \\(1 \\sim r\\) \u7684\u4f4d\u7f6e\u56fa\u5b9a\u3001\u540e\u9762\u4e0d\u518d\u8003\u8651\u3002","title":"\u9ad8\u65af\u6d88\u5143\u6cd5\uff08\u8ba1\u7b97\u673a\uff09"},{"location":"math/linear-algebra/gauss/#_14","text":"\u521d\u59cb\u65f6 \\(r = 0\\) \uff0c\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u5217\uff1a \u627e\u5230\u8fd9\u4e00\u5217\u7edd\u5bf9\u503c\u6700\u5927\u7684\u884c\uff08\u4e0b\u9762\u505a\u9664\u6cd5\u7684\u65f6\u5019\uff0c\u5206\u5b50\u5927\uff0c\u53ef\u4ee5\u51cf\u5c0f\u7cbe\u5ea6\u8bef\u5dee\uff09\uff1b \\(\\in [r + 1, n]\\) \u628a\u8fd9\u4e00\u884c\u6362\u5230\u7b2c \\(r + 1\\) \u884c \u5c06\u8fd9\u4e00\u884c\u7684\u6bcf\u4e2a\u6570\u540c\u65f6\u9664\u4ee5\u8fd9\u4e00\u4e2a\u975e\u96f6\u7684\u6570\uff1b\u5982\u679c\u6ca1\u6709\u975e\u96f6\u7684\u6570\u5219\u8868\u793a\u6ca1\u6709\u552f\u4e00\u89e3\uff08\u53d6\u51b3\u4e8e\u884c\u6700\u7b80\u5f62\u77e9\u9635\u7684\u53f3\u4fa7\u662f\u5426\u975e\u96f6\uff0c\u6240\u4ee5\u5982\u679c\u8981\u786e\u5b9a\u662f\u65e0\u7a77\u89e3\u8fd8\u662f\u65e0\u89e3\uff0c\u5c31\u9700\u8981\u7ee7\u7eed\u7b97\uff0c\u5728\u6c42\u51fa\u884c\u6700\u7b80\u5f62\u77e9\u9635\u540e\u518d\u5224\u65ad\uff09 \u628a\u8fd9\u4e00\u5217\uff0c\u9664\u4e86\u7b2c\u4e00\u4e2a\u6570\uff0c\u5168\u90fd\u6d88\u6210\u96f6\uff1b\u5373\u6309\u6bd4\u4f8b\u51cf\u53bb \u56fa\u5b9a\u8fd9\u4e2a\u65b9\u7a0b\uff0c\u4ee5\u540e\u4e0d\u518d\u8003\u8651\uff1b\u5373 \\(r = r + 1\\)","title":"\u65b9\u6cd5"},{"location":"math/linear-algebra/gauss/#_15","text":"\u5b8c\u7f8e\u9636\u68af\u578b\uff1a\u552f\u4e00\u89e3\uff1b \u5373\u7b2c \\(i\\) \u884c\uff0c\u7b2c\u4e00\u4e2a\u975e\u96f6\u5728\u7b2c \\(i\\) \u4e2a\u3002 \u5de6\u8fb9\u6ca1\u6709\u672a\u77e5\u6570\uff0c\u53f3\u8fb9\u7cfb\u6570\u975e\u96f6\uff1a\u65e0\u89e3\uff1b \u5373 \\(r + 1 \\sim n\\) \u884c\u4e2d\uff0c\u6709\u53f3\u4fa7\u975e\u96f6\u7684\u65b9\u7a0b\u3002 \u5426\u5219\uff1a\u65e0\u7a77\u7ec4\u89e3\u3002","title":"\u89e3\u7684\u60c5\u51b5\u5224\u65ad"},{"location":"math/linear-algebra/gauss/#-","text":"\u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\uff0c\u662f\u9ad8\u65af\u6d88\u5143\u6cd5\u7684\u53e6\u4e00\u4e2a\u7248\u672c\uff0c\u5176\u65b9\u6cd5\u4e0e\u9ad8\u65af\u6d88\u53bb\u6cd5\u76f8\u540c\uff1b\u552f\u4e00\u76f8\u5f02\u4e4b\u5904\u5c31\u662f\u8fd9\u7b97\u6cd5\u4ea7\u751f\u51fa\u6765\u7684\u77e9\u9635\u662f\u4e00\u4e2a\u7b80\u5316\u884c\u68af\u9635\u5f0f\uff0c\u800c\u4e0d\u662f\u9ad8\u65af\u6d88\u5143\u6cd5\u4e2d\u7684\u884c\u68af\u9635\u5f0f\u3002\u76f8\u6bd4\u8d77\u9ad8\u65af\u6d88\u5143\u6cd5\uff0c\u6b64\u7b97\u6cd5\u7684\u6548\u7387\u6bd4\u8f83\u4f4e\uff0c\u5374\u53ef\u628a\u65b9\u7a0b\u7ec4\u7684\u89e3\u7528\u77e9\u9635\u4e00\u6b21\u8fc7\u8868\u793a\u51fa\u6765\u3002 \u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\u5c31\u662f\u5c06\u4e0b\u9762\u7684\u65b9\u7a0b\u7684\u500d\u6570\u4e5f\u51cf\u5230\u4e0a\u9762\u5df2\u7ecf\u8003\u8651\u8fc7\u7684\u65b9\u7a0b\u4e2d\uff08\u6709\u56de\u4ee3\uff0c\u800c\u666e\u901a\u9ad8\u65af\u6d88\u5143\u6cd5\u65e0\u56de\u4ee3\uff09\uff0c\u4f7f\u4e0a\u9762\u7684\u65b9\u7a0b\u7684\u8be5\u5217\u4e5f\u53d8\u4e3a \\(0\\) \uff1b\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u7528\u5f53\u524d\u9009\u4e2d\u7684\u65b9\u7a0b\u53bb\u6d88\u6389\u5176\u4ed6\u65b9\u7a0b\u7684\u65f6\u5019\uff0c\u662f\u5426\u6d88\u53bb\u5176\u4e0a\u9762\u5df2\u7ecf\u7b97\u8fc7\u7684\u65b9\u7a0b\u3002 \u7528\u9ad8\u65af\u6d88\u5143\u6cd5\u548c\u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\u7b97\u51fa\u6765\u7684\u884c\u6700\u7b80\u5f62\u77e9\u9635\u6709\u5982\u4e0b\u533a\u522b\uff1a \u9ad8\u65af\u6d88\u5143\u6cd5 \\[ \\left(\\begin{matrix} 1 & * & * & * \\\\ 0 & 1 & * & * \\\\ 0 & 0 & 1 & * \\\\ 0 & 0 & 0 & 1 \\end{matrix} \\middle| \\begin{matrix} * \\\\ * \\\\ * \\\\ * \\end{matrix}\\right) \\] \u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5 \\[ \\left(\\begin{matrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{matrix} \\middle| \\begin{matrix} * \\\\ * \\\\ * \\\\ * \\end{matrix} \\right) \\] \u5177\u4f53\u7684\u5185\u5bb9\u53ef\u4ee5\u89c1\uff1a https://www.cnblogs.com/mk-oi/p/14290455.html \uff1b \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u8bf4\u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\u4e0d\u53ef\u5224\u65e0\u89e3\u548c\u65e0\u7a77\u89e3\uff0c\u4f46\u6211\u5b9e\u6d4b\u4e5f\u662f\u53ef\u4ee5\u7684\u3002","title":"\u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5"},{"location":"math/linear-algebra/gauss/#_16","text":"\u4e3a\u4e86\u4ee3\u7801\u7b80\u4fbf\uff0c\u4e0b\u6587\u7684\u4ee3\u7801\u4f7f\u7528\u7684\u90fd\u662f\u9ad8\u65af-\u7ea6\u65e6\u6d88\u5143\u6cd5\uff0c\u800c\u4e0d\u662f\u666e\u901a\u7684\u9ad8\u65af\u6d88\u5143\u6cd5\u3002","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"math/linear-algebra/gauss/#p3389","text":"\\(n \\times n\\) \u7684\u77e9\u9635\uff0c\u4ec5\u9700\u8f93\u51fa\u552f\u4e00\u89e3\u6216\u65e0\u552f\u4e00\u89e3\u3002 \u4ee3\u7801 const int N = 110; double a[N][N], b[N]; int main() { int n = rr; for (int i = 1; i <= n; ++i) { for (int j = 1; j <= n; ++j) a[i][j] = rr; b[i] = rr; } for (int i = 1; i <= n; ++i) { int r = 0; for (int j = i; j <= n; ++j) if (fabs(a[j][i]) > fabs(a[r][i])) r = j; if (a[r][i] == 0) printf(\"No Solution\\n\"), exit(0); const double t = a[r][i]; for (int j = 1; j <= n; ++j) swap(a[i][j], a[r][j]), a[i][j] /= t; swap(b[i], b[r]), b[i] /= t; for (int j = 1; j <= n; ++j) { if (i == j || a[j][i] == 0) continue; const double c = a[j][i]; for (int k = i; k <= n; ++k) a[j][k] -= c * a[i][k]; b[j] -= c * b[i]; } } for (int i = 1; i <= n; ++i) printf(\"%.2lf\\n\", b[i]); return 0; }","title":"P3389 \u9ad8\u65af\u6d88\u5143\u6cd5"},{"location":"math/linear-algebra/gauss/#p2455","text":"\\(n \\times n\\) \u7684\u77e9\u9635\uff0c\u9700\u8981\u5224\u65ad\u89e3\u7684\u4e09\u79cd\u60c5\u51b5\u3002 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std; using db = long double; constexpr db eps = 1e-8; #define abs(x) ((x) < 0 ? -(x) : (x)) struct matrix { int n; vector<db> b; vector<vector<db>> a; void input() { cin >> n; b.resize(n + 1); a.resize(n + 1, vector<db>(n + 1)); for (int i = 1; i <= n; ++i) { for (int j = 1; j <= n; ++j) cin >> a[i][j]; cin >> b[i]; } } int best_row(int row, int col) { int mi = 0; double cm = -1; for (int i = row; i <= n; ++i) if (abs(a[i][col]) > cm) cm = abs(a[i][col]), mi = i; return mi; } void clear_row(int row, int col) { double t = a[row][col]; b[row] /= t; for (int i = 1; i <= n; ++i) a[row][i] /= t; } void clear_matrix(int row, int col) { for (int i = 1; i <= n; ++i) { if (i == row || a[i][col] == 0) continue; double t = a[i][col]; b[i] -= t * b[row]; for (int j = 1; j <= n; ++j) a[i][j] -= t * a[row][j]; } } vector<db> gauss(int &opc) { opc = 1; int row = 1; for (int col = 1; col <= n; ++col) { int mi = best_row(row, col); if (abs(a[mi][col]) < eps) continue; swap(a[row], a[mi]), swap(b[row], b[mi]); clear_row(row, col); clear_matrix(row++, col); } if (row == n + 1) return b; for (; row <= n; ++row) if (abs(b[row]) > eps) return (opc = -1, vector<db>()); return (opc = 0, vector<db>()); } }; void print(vector<db> q) { for (int i = 1; i < q.size(); ++i) cout << \"x\" << i << \"=\" << q[i] << endl; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); matrix x; x.input(); int c; vector<db> res = x.gauss(c); if (c != 1) cout << c << endl; else print(res); return 0; }","title":"P2455 \u7ebf\u6027\u65b9\u7a0b\u7ec4"},{"location":"math/linear-algebra/gauss/#reference","text":"[1] https://oi-wiki.org/math/linear-algebra/matrix/ [2] https://oi-wiki.org/math/linear-algebra/elementary-operations/ [3] https://oi-wiki.org/math/numerical/gauss/ [4] https://www.cnblogs.com/mk-oi/p/14290455.html","title":"Reference"},{"location":"math/linear-algebra/matrix/","text":"\u77e9\u9635 \u00b6 \u5f15\u5165 \u00b6 \u77e9\u9635 \u00b6 \u4e00\u822c\u7528\u5706\u62ec\u53f7\u6216\u65b9\u62ec\u53f7\u8868\u793a\u77e9\u9635\uff0c\u5f62\u5982\uff1a \\[ A = \\begin{pmatrix} a_{11} & \\cdots & a_{1n} \\\\ \\vdots & \\ddots & \\vdots \\\\ a_{m1} & \\cdots & a_{mn} \\end{pmatrix} \\] \u77e9\u9635\u6709\u884c\u6570\u548c\u5217\u6570\uff0c\u7b80\u79f0 \\(N\\times M\\) \u7684\u77e9\u9635\u3002 \u77e9\u9635\u8868\u793a\u7ebf\u6027\u65b9\u7a0b\u7ec4 \u00b6 \u4f8b\u5982\uff0c\u5c06\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \\[ \\left\\{\\begin{matrix} 7x_1+8x_2+9x_3=13 \\\\ 4x_1+5x_2+6x_3=12 \\\\ x_1+2x_2+3x_3=11 \\end{matrix}\\right. \\] \u5199\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\uff08\u5c06\u7cfb\u6570\u62bd\u51fa\u6765\uff09\uff1a \\[ \\begin{pmatrix} 7 & 8 & 9 \\\\ 4 & 5 & 6 \\\\ 1 & 2 & 3 \\end{pmatrix}\\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{pmatrix}=\\begin{pmatrix} 13 \\\\ 12 \\\\ 11 \\end{pmatrix} \\] \u7b80\u8bb0\u4e3a\uff1a \\(Ax = b\\) \uff0c\u5176\u4e2d\uff0c \\[ {\\sf \u7cfb\u6570\u77e9\u9635}\\ A = \\begin{pmatrix} 7 & 8 & 9 \\\\ 4 & 5 & 6 \\\\ 1 & 2 & 3 \\end{pmatrix}{\\sf \uff1b\u672a\u77e5\u91cf}\\ x = \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{pmatrix}{\\sf \uff1b\u5e38\u6570\u9879}\\ b = \\begin{pmatrix} 13 \\\\ 12 \\\\ 11 \\end{pmatrix} \\] \u5176\u672c\u8d28\u662f\uff1a\u77e9\u9635 \\(A\\) \uff08\u7cfb\u6570\u77e9\u9635\uff09\u5de6\u4e58\u4e00\u4e2a\u5217\u5411\u91cf \\(x\\) \uff08\u672a\u77e5\u91cf\uff09\u7b49\u4e0e\u4e00\u4e2a\u5217\u5411\u91cf \\(b\\) \uff08\u5e38\u6570\u9879\uff09\u3002 \u8fd0\u7b97 \u00b6 \u77e9\u9635\u7684\u7ebf\u6027\u8fd0\u7b97 \u00b6 \u77e9\u9635\u7684\u7ebf\u6027\u8fd0\u7b97\u5206\u4e3a\u52a0\u51cf\u6cd5\u4e0e\u6570\u4e58\uff0c\u5b83\u4eec\u5747\u4e3a\u9010\u4e2a\u5143\u7d20\u8fdb\u884c\uff1b \u53ea\u6709\u540c\u578b\uff08\u89c4\u683c\u4e3a \\(n \\times m\\) \u4e0e \\(n \\times m\\) \u7684\uff09\u77e9\u9635\u4e4b\u95f4\u53ef\u4ee5\u5bf9\u5e94\u76f8\u52a0\u51cf\u3002 \u4f8b\u5982\uff1a \\[ \\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix} + \\begin{pmatrix} 5 & 6 \\\\ 7 & 8 \\end{pmatrix} = \\begin{pmatrix} 1+5 & 2+6 \\\\ 3 +7 & 4+8 \\end{pmatrix} = \\begin{pmatrix} 6 & 8 \\\\ 10 & 12 \\end{pmatrix} \\] \u4f8b\u5982\uff1a \\[ 3 \\times \\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix} = \\begin{pmatrix} 3 \\times 1 & 3 \\times 2 \\\\ 3 \\times 3 & 3 \\times 4 \\end{pmatrix} = \\begin{pmatrix} 3 & 6 \\\\ 9 & 12 \\end{pmatrix} \\] \u77e9\u9635\u7684\u8f6c\u7f6e \u00b6 \u77e9\u9635\u7684\u8f6c\u7f6e\uff0c\u5c31\u662f\u5728\u77e9\u9635\u7684\u53f3\u4e0a\u89d2\u5199\u4e0a\u8f6c\u7f6e\u300c \\(\\text{T}\\) \u300d\u8bb0\u53f7\uff0c\u8868\u793a\u5c06\u77e9\u9635\u7684\u884c\u4e0e\u5217\u4e92\u6362\u3002 \u4f8b\u5982\uff1a \\[ \\begin{pmatrix} 1 & 2 & 3 \\\\ 3 & 4 & 5 \\end{pmatrix}^\\text{T}=\\begin{pmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 3 & 5 \\end{pmatrix} \\] \u5411\u91cf\u5185\u79ef \u00b6 \u5bf9\u5e94\u76f8\u4e58\u518d\u76f8\u52a0\u3002 \u4f8b\u5982\uff1a \\[ \\begin{pmatrix} 1 & 2 & 3 \\end{pmatrix} \\times \\begin{pmatrix} 4 & 5 & 6 \\end{pmatrix} = 1 \\times 4 + 2 \\times 5 + 3 \\times 6 = 52 \\] \u77e9\u9635\u4e58\u6cd5 \u00b6 \u6734\u7d20\u77e9\u9635\u4e58\u6cd5 \u00b6 \u8bbe \\(A\\) \u4e3a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u4e3a \\(m \\times r\\) \u7684\u77e9\u9635\uff0c\u5373\u524d\u4e00\u77e9\u9635\u5217\u6570\u7b49\u4e8e\u540e\u4e00\u77e9\u9635\u884c\u6570\uff1b \u8bbe\u77e9\u9635 \\(C = A \\times B\\) \uff0c\u5219 \\(\\displaystyle C_{i, j} = \\sum_{k = 1}^m A_{i, k} B_{k, j}\\) \u3002 \u4e58\u79ef\u77e9\u9635\u4e2d\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u6570\u6070\u597d\u662f\u4e58\u6570\u77e9\u9635 \\(A\\) \u7b2c \\(i\\) \u4e2a\u884c\u5411\u91cf\u4e0e\u4e58\u6570\u77e9\u9635 \\(B\\) \u7b2c \\(j\\) \u4e2a\u5217\u5411\u91cf\u7684\u5185\u79ef\uff0c\u53e3\u8bc0\u4e3a \u5de6\u884c\u53f3\u5217 \u3002 \u6f14\u793a\u7f51\u7ad9\uff1a https://rainppr.github.io/matrixmultiplication/ . \u77e9\u9635\u4e58\u5411\u91cf \u00b6 \u5c06\u5411\u91cf\u8c03\u8f6c\uff0c\u5148\u76f8\u4e58\u518d\u76f8\u52a0\u3002 \u4f8b\u5982\uff1a \\[ \\begin{pmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{pmatrix}\\begin{pmatrix} 3 \\\\ 6 \\\\ 9 \\end{pmatrix}=\\begin{pmatrix} 1 \\times 3 + 2 \\times 6 + 3 \\times 9 \\\\ 4 \\times 3 + 5 \\times 6 + 6 \\times 9 \\end{pmatrix}=\\begin{pmatrix} 42 \\\\ 96 \\end{pmatrix} \\] \u5355\u4f4d\u77e9\u9635 \\(I\\) \u00b6 \u5355\u4f4d\u77e9\u9635 \\(I\\) \uff1a\u4e00\u4e2a\u65b9\u9635\uff08\u884c\u6570 \\(=\\) \u5217\u6570\uff09\uff0c \u53ea\u6709\u4e3b\u5bf9\u89d2\u7ebf\uff08\u5de6\u4e0a\u3001\u53f3\u5de6\u4e0b\uff09\u5143\u7d20\u4e3a \\(1\\) \uff0c\u5176\u4ed6\u90fd\u4e3a \\(0\\) \u3002 \u5355\u4f4d\u77e9\u9635\u4e58\u4efb\u4f55\u77e9\u9635\u90fd\u5f97\u8be5\u77e9\u9635\uff08\u5c31\u50cf \\(1\\) \u4e00\u6837\uff09\uff0c\u5373 \\(IA = AI = A\\) \u3002 \u4e3e\u4f8b\uff1a \\[ \\begin{pmatrix} 1 & 2 & 3 & 4 \\\\ 4 & 5 & 6 & 7 \\\\ 7 & 8 & 9 & 0 \\end{pmatrix} \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 1 & 2 & 3 & 4 \\\\ 4 & 5 & 6 & 7 \\\\ 7 & 8 & 9 & 0 \\end{pmatrix} \\] \u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5 \u00b6 \u8003\u8651\u5c06\u539f\u516c\u5f0f\u63a8\u5e7f\uff0c\u5373\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\uff1a\u5bf9\u4e8e\u77e9\u9635 \\(A_{n \\times m}\\) \u548c \\(B_{m \\times r}\\) \uff1a \u6709 \\(C_{ij} = A \\times B = \\bigoplus\\limits_{k = 1}^m \\, (A_{ik} \\otimes B_{kj})\\) \uff0c\u6211\u4eec\u5c06\u5176\u6210\u4e3a \\((\\otimes, \\; \\oplus)\\) \u7684\u77e9\u9635\u4e58\u6cd5\u3002 \u5f53\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u65f6\uff0c\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff1a \\(\\oplus\\) \u5177\u6709\u4ea4\u6362\u5f8b\uff1b \\(\\otimes\\) \u5177\u6709\u7ed3\u5408\u5f8b\u548c\u4ea4\u6362\u5f8b\uff1b \\(\\otimes\\) \u5bf9 \\(\\oplus\\) \u5b58\u5728\u5206\u914d\u5f8b\uff0c\u5373\u6ee1\u8db3 \\((a \\oplus b) \\otimes c = (a \\otimes c) \\oplus (b \\otimes c)\\) \u3002 \u5e38\u89c1\u7684\u77e9\u9635\u4e58\u6cd5\u5f62\u5f0f\u6709 \\((\\pm, \\; \\max)\\) \u3001 \\((\\pm, \\; \\min)\\) \u3001 \\((\\land, \\; \\lor)\\) \u3002 \u6027\u8d28\u548c\u7528\u9014 \u00b6 \u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4e0d\u6ee1\u8db3\u4e00\u822c\u7684\u4ea4\u6362\u5f8b\uff0c\u5373 \\(A \\times B \\neq B \\times A\\) \u3002 \u7279\u6b8a\u7684\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u4ea4\u6362\u5f8b\uff1a \u5bf9\u77e9\u9635\u52a0\u6cd5\u6709\u7ed3\u5408\u5f8b\uff0c\u5373 \\((A + B)C = AC + BC\\) \uff0c \\(C(A + B) = CA + CB\\) \uff1b \u5bf9\u6570\u4e58\u6709\u7ed3\u5408\u5f8b\uff0c\u5373 \\(k(AB) = (kA)B = A(kB)\\) \u3002 \u5229\u7528\u7ed3\u5408\u5f8b\uff0c\u77e9\u9635\u4e58\u6cd5\u53ef\u4ee5\u5229\u7528\u5feb\u901f\u5e42\u7684\u601d\u60f3\u6765\u4f18\u5316\uff1b \u7531\u4e8e\u7ebf\u6027\u9012\u63a8\u5f0f\u53ef\u4ee5\u8868\u793a\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\uff0c\u4e5f\u901a\u5e38\u7528\u77e9\u9635\u5feb\u901f\u5e42\u6765\u6c42\u7ebf\u6027\u9012\u63a8\u6570\u5217\u7684\u67d0\u4e00\u9879\u3002 \u8be6\u89c1\uff1a https://www.cnblogs.com/RainPPR/p/matrix-dp.html \u4ee3\u7801\u5b9e\u73b0 \u00b6 const int N = 110; // \u77e9\u9635\u7684\u6700\u5927\u5927\u5c0f const int MOD = 1e9 + 7; // \u53d6\u6a21 struct matrix { int n, m, a[N][N]; // \u521d\u59cb\u77e9\u9635 matrix() { memset(a, 0, sizeof a); } matrix(int _n, int _m) { n = _n, m = _m, memset(a, 0, sizeof a); } // \u5355\u4f4d\u77e9\u9635 matrix(int _n) { n = m = _n; for (int i = 1; i <= n; ++i) a[i][i] = 1; } // \u5b9a\u4e49\u77e9\u9635 matrix(int _n, int _m, const int t[N][N]) { n = _n, m = _m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) a[i][j] = t[i][j]; } // \u77e9\u9635\u4e58\u6cd5 matrix operator*(const matrix &b) const { matrix res; res.n = n, res.m = b.m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= b.m; ++j) for (int k = 1; k <= m; ++k) res.a[i][j] = (res.a[i][j] + a[i][k] * b.a[k][j] % MOD) % MOD; return res; } }; // \u77e9\u9635\u5feb\u901f\u5e42 matrix pow(const int &n, matrix a, int k) { matrix res(n); while (k) { if (k & 1) res = res * a; k >>= 1, a = a * a; } return res; } \u77e9\u9635\u4e58\u6cd5\u7684\u4f18\u5316 \u00b6 \u672c\u6587\u4e0d\u8ba8\u8bba\u5947\u602a\u7684\u4f18\u5316\u3002 \u5faa\u73af\u7f6e\u6362\uff1a\u7f13\u5b58\u4f18\u5316 \u00b6 \u6211\u4eec\u524d\u9762\u7684\u77e9\u9635\u4e58\u6cd5\uff0c\u5faa\u73af\u987a\u5e8f\u662f \\(i,j,k\\) \u3002 \u4f46\u662f\u6211\u4eec\u5982\u679c\u6362\u6210 \\(i,k,j\\) \u8fd9\u4e2a\u987a\u5e8f\u5c31\u4f1a\u5feb\u5f88\u591a\u5f88\u591a\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f \u8003\u8651\u6211\u4eec\u5faa\u73af\u4e2d \\(a_i,b_k\\) \u4e24\u884c\u7684\u8bbf\u95ee\u90fd\u662f\u8fde\u7eed\u7684\uff0c\u7f13\u5b58\u4f1a\u88ab\u5145\u5206\u5229\u7528\uff0c \u5176\u4ed6\u4f18\u5316 \u00b6 \u5982\u679c\u4e00\u4e2a\u4f4d\u7f6e\u662f \\(0\\) \uff0c\u7279\u5224\u9000\u51fa\u3002 \u5728\u7a00\u758f\u77e9\u9635\u4e2d\u6709\u5947\u6548\uff0c\u4f46\u662f\u7a20\u5bc6\u7684\u5c31\u4e00\u70b9\u7528\u6ca1\u6709\u3002 \u5495\u5495\u5495 Reference \u00b6 [1] http://www.gaosan.com/gaokao/414210.html [2] https://oi-wiki.org/math/linear-algebra/matrix/ [3] http://matrixmultiplication.xyz/","title":"\u77e9\u9635"},{"location":"math/linear-algebra/matrix/#_1","text":"","title":"\u77e9\u9635"},{"location":"math/linear-algebra/matrix/#_2","text":"","title":"\u5f15\u5165"},{"location":"math/linear-algebra/matrix/#_3","text":"\u4e00\u822c\u7528\u5706\u62ec\u53f7\u6216\u65b9\u62ec\u53f7\u8868\u793a\u77e9\u9635\uff0c\u5f62\u5982\uff1a \\[ A = \\begin{pmatrix} a_{11} & \\cdots & a_{1n} \\\\ \\vdots & \\ddots & \\vdots \\\\ a_{m1} & \\cdots & a_{mn} \\end{pmatrix} \\] \u77e9\u9635\u6709\u884c\u6570\u548c\u5217\u6570\uff0c\u7b80\u79f0 \\(N\\times M\\) \u7684\u77e9\u9635\u3002","title":"\u77e9\u9635"},{"location":"math/linear-algebra/matrix/#_4","text":"\u4f8b\u5982\uff0c\u5c06\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1a \\[ \\left\\{\\begin{matrix} 7x_1+8x_2+9x_3=13 \\\\ 4x_1+5x_2+6x_3=12 \\\\ x_1+2x_2+3x_3=11 \\end{matrix}\\right. \\] \u5199\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\uff08\u5c06\u7cfb\u6570\u62bd\u51fa\u6765\uff09\uff1a \\[ \\begin{pmatrix} 7 & 8 & 9 \\\\ 4 & 5 & 6 \\\\ 1 & 2 & 3 \\end{pmatrix}\\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{pmatrix}=\\begin{pmatrix} 13 \\\\ 12 \\\\ 11 \\end{pmatrix} \\] \u7b80\u8bb0\u4e3a\uff1a \\(Ax = b\\) \uff0c\u5176\u4e2d\uff0c \\[ {\\sf \u7cfb\u6570\u77e9\u9635}\\ A = \\begin{pmatrix} 7 & 8 & 9 \\\\ 4 & 5 & 6 \\\\ 1 & 2 & 3 \\end{pmatrix}{\\sf \uff1b\u672a\u77e5\u91cf}\\ x = \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{pmatrix}{\\sf \uff1b\u5e38\u6570\u9879}\\ b = \\begin{pmatrix} 13 \\\\ 12 \\\\ 11 \\end{pmatrix} \\] \u5176\u672c\u8d28\u662f\uff1a\u77e9\u9635 \\(A\\) \uff08\u7cfb\u6570\u77e9\u9635\uff09\u5de6\u4e58\u4e00\u4e2a\u5217\u5411\u91cf \\(x\\) \uff08\u672a\u77e5\u91cf\uff09\u7b49\u4e0e\u4e00\u4e2a\u5217\u5411\u91cf \\(b\\) \uff08\u5e38\u6570\u9879\uff09\u3002","title":"\u77e9\u9635\u8868\u793a\u7ebf\u6027\u65b9\u7a0b\u7ec4"},{"location":"math/linear-algebra/matrix/#_5","text":"","title":"\u8fd0\u7b97"},{"location":"math/linear-algebra/matrix/#_6","text":"\u77e9\u9635\u7684\u7ebf\u6027\u8fd0\u7b97\u5206\u4e3a\u52a0\u51cf\u6cd5\u4e0e\u6570\u4e58\uff0c\u5b83\u4eec\u5747\u4e3a\u9010\u4e2a\u5143\u7d20\u8fdb\u884c\uff1b \u53ea\u6709\u540c\u578b\uff08\u89c4\u683c\u4e3a \\(n \\times m\\) \u4e0e \\(n \\times m\\) \u7684\uff09\u77e9\u9635\u4e4b\u95f4\u53ef\u4ee5\u5bf9\u5e94\u76f8\u52a0\u51cf\u3002 \u4f8b\u5982\uff1a \\[ \\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix} + \\begin{pmatrix} 5 & 6 \\\\ 7 & 8 \\end{pmatrix} = \\begin{pmatrix} 1+5 & 2+6 \\\\ 3 +7 & 4+8 \\end{pmatrix} = \\begin{pmatrix} 6 & 8 \\\\ 10 & 12 \\end{pmatrix} \\] \u4f8b\u5982\uff1a \\[ 3 \\times \\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix} = \\begin{pmatrix} 3 \\times 1 & 3 \\times 2 \\\\ 3 \\times 3 & 3 \\times 4 \\end{pmatrix} = \\begin{pmatrix} 3 & 6 \\\\ 9 & 12 \\end{pmatrix} \\]","title":"\u77e9\u9635\u7684\u7ebf\u6027\u8fd0\u7b97"},{"location":"math/linear-algebra/matrix/#_7","text":"\u77e9\u9635\u7684\u8f6c\u7f6e\uff0c\u5c31\u662f\u5728\u77e9\u9635\u7684\u53f3\u4e0a\u89d2\u5199\u4e0a\u8f6c\u7f6e\u300c \\(\\text{T}\\) \u300d\u8bb0\u53f7\uff0c\u8868\u793a\u5c06\u77e9\u9635\u7684\u884c\u4e0e\u5217\u4e92\u6362\u3002 \u4f8b\u5982\uff1a \\[ \\begin{pmatrix} 1 & 2 & 3 \\\\ 3 & 4 & 5 \\end{pmatrix}^\\text{T}=\\begin{pmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 3 & 5 \\end{pmatrix} \\]","title":"\u77e9\u9635\u7684\u8f6c\u7f6e"},{"location":"math/linear-algebra/matrix/#_8","text":"\u5bf9\u5e94\u76f8\u4e58\u518d\u76f8\u52a0\u3002 \u4f8b\u5982\uff1a \\[ \\begin{pmatrix} 1 & 2 & 3 \\end{pmatrix} \\times \\begin{pmatrix} 4 & 5 & 6 \\end{pmatrix} = 1 \\times 4 + 2 \\times 5 + 3 \\times 6 = 52 \\]","title":"\u5411\u91cf\u5185\u79ef"},{"location":"math/linear-algebra/matrix/#_9","text":"","title":"\u77e9\u9635\u4e58\u6cd5"},{"location":"math/linear-algebra/matrix/#_10","text":"\u8bbe \\(A\\) \u4e3a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u4e3a \\(m \\times r\\) \u7684\u77e9\u9635\uff0c\u5373\u524d\u4e00\u77e9\u9635\u5217\u6570\u7b49\u4e8e\u540e\u4e00\u77e9\u9635\u884c\u6570\uff1b \u8bbe\u77e9\u9635 \\(C = A \\times B\\) \uff0c\u5219 \\(\\displaystyle C_{i, j} = \\sum_{k = 1}^m A_{i, k} B_{k, j}\\) \u3002 \u4e58\u79ef\u77e9\u9635\u4e2d\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u6570\u6070\u597d\u662f\u4e58\u6570\u77e9\u9635 \\(A\\) \u7b2c \\(i\\) \u4e2a\u884c\u5411\u91cf\u4e0e\u4e58\u6570\u77e9\u9635 \\(B\\) \u7b2c \\(j\\) \u4e2a\u5217\u5411\u91cf\u7684\u5185\u79ef\uff0c\u53e3\u8bc0\u4e3a \u5de6\u884c\u53f3\u5217 \u3002 \u6f14\u793a\u7f51\u7ad9\uff1a https://rainppr.github.io/matrixmultiplication/ .","title":"\u6734\u7d20\u77e9\u9635\u4e58\u6cd5"},{"location":"math/linear-algebra/matrix/#_11","text":"\u5c06\u5411\u91cf\u8c03\u8f6c\uff0c\u5148\u76f8\u4e58\u518d\u76f8\u52a0\u3002 \u4f8b\u5982\uff1a \\[ \\begin{pmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\end{pmatrix}\\begin{pmatrix} 3 \\\\ 6 \\\\ 9 \\end{pmatrix}=\\begin{pmatrix} 1 \\times 3 + 2 \\times 6 + 3 \\times 9 \\\\ 4 \\times 3 + 5 \\times 6 + 6 \\times 9 \\end{pmatrix}=\\begin{pmatrix} 42 \\\\ 96 \\end{pmatrix} \\]","title":"\u77e9\u9635\u4e58\u5411\u91cf"},{"location":"math/linear-algebra/matrix/#i","text":"\u5355\u4f4d\u77e9\u9635 \\(I\\) \uff1a\u4e00\u4e2a\u65b9\u9635\uff08\u884c\u6570 \\(=\\) \u5217\u6570\uff09\uff0c \u53ea\u6709\u4e3b\u5bf9\u89d2\u7ebf\uff08\u5de6\u4e0a\u3001\u53f3\u5de6\u4e0b\uff09\u5143\u7d20\u4e3a \\(1\\) \uff0c\u5176\u4ed6\u90fd\u4e3a \\(0\\) \u3002 \u5355\u4f4d\u77e9\u9635\u4e58\u4efb\u4f55\u77e9\u9635\u90fd\u5f97\u8be5\u77e9\u9635\uff08\u5c31\u50cf \\(1\\) \u4e00\u6837\uff09\uff0c\u5373 \\(IA = AI = A\\) \u3002 \u4e3e\u4f8b\uff1a \\[ \\begin{pmatrix} 1 & 2 & 3 & 4 \\\\ 4 & 5 & 6 & 7 \\\\ 7 & 8 & 9 & 0 \\end{pmatrix} \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 1 & 2 & 3 & 4 \\\\ 4 & 5 & 6 & 7 \\\\ 7 & 8 & 9 & 0 \\end{pmatrix} \\]","title":"\u5355\u4f4d\u77e9\u9635 \\(I\\)"},{"location":"math/linear-algebra/matrix/#_12","text":"\u8003\u8651\u5c06\u539f\u516c\u5f0f\u63a8\u5e7f\uff0c\u5373\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\uff1a\u5bf9\u4e8e\u77e9\u9635 \\(A_{n \\times m}\\) \u548c \\(B_{m \\times r}\\) \uff1a \u6709 \\(C_{ij} = A \\times B = \\bigoplus\\limits_{k = 1}^m \\, (A_{ik} \\otimes B_{kj})\\) \uff0c\u6211\u4eec\u5c06\u5176\u6210\u4e3a \\((\\otimes, \\; \\oplus)\\) \u7684\u77e9\u9635\u4e58\u6cd5\u3002 \u5f53\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u65f6\uff0c\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff1a \\(\\oplus\\) \u5177\u6709\u4ea4\u6362\u5f8b\uff1b \\(\\otimes\\) \u5177\u6709\u7ed3\u5408\u5f8b\u548c\u4ea4\u6362\u5f8b\uff1b \\(\\otimes\\) \u5bf9 \\(\\oplus\\) \u5b58\u5728\u5206\u914d\u5f8b\uff0c\u5373\u6ee1\u8db3 \\((a \\oplus b) \\otimes c = (a \\otimes c) \\oplus (b \\otimes c)\\) \u3002 \u5e38\u89c1\u7684\u77e9\u9635\u4e58\u6cd5\u5f62\u5f0f\u6709 \\((\\pm, \\; \\max)\\) \u3001 \\((\\pm, \\; \\min)\\) \u3001 \\((\\land, \\; \\lor)\\) \u3002","title":"\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5"},{"location":"math/linear-algebra/matrix/#_13","text":"\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4e0d\u6ee1\u8db3\u4e00\u822c\u7684\u4ea4\u6362\u5f8b\uff0c\u5373 \\(A \\times B \\neq B \\times A\\) \u3002 \u7279\u6b8a\u7684\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u4ea4\u6362\u5f8b\uff1a \u5bf9\u77e9\u9635\u52a0\u6cd5\u6709\u7ed3\u5408\u5f8b\uff0c\u5373 \\((A + B)C = AC + BC\\) \uff0c \\(C(A + B) = CA + CB\\) \uff1b \u5bf9\u6570\u4e58\u6709\u7ed3\u5408\u5f8b\uff0c\u5373 \\(k(AB) = (kA)B = A(kB)\\) \u3002 \u5229\u7528\u7ed3\u5408\u5f8b\uff0c\u77e9\u9635\u4e58\u6cd5\u53ef\u4ee5\u5229\u7528\u5feb\u901f\u5e42\u7684\u601d\u60f3\u6765\u4f18\u5316\uff1b \u7531\u4e8e\u7ebf\u6027\u9012\u63a8\u5f0f\u53ef\u4ee5\u8868\u793a\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\uff0c\u4e5f\u901a\u5e38\u7528\u77e9\u9635\u5feb\u901f\u5e42\u6765\u6c42\u7ebf\u6027\u9012\u63a8\u6570\u5217\u7684\u67d0\u4e00\u9879\u3002 \u8be6\u89c1\uff1a https://www.cnblogs.com/RainPPR/p/matrix-dp.html","title":"\u6027\u8d28\u548c\u7528\u9014"},{"location":"math/linear-algebra/matrix/#_14","text":"const int N = 110; // \u77e9\u9635\u7684\u6700\u5927\u5927\u5c0f const int MOD = 1e9 + 7; // \u53d6\u6a21 struct matrix { int n, m, a[N][N]; // \u521d\u59cb\u77e9\u9635 matrix() { memset(a, 0, sizeof a); } matrix(int _n, int _m) { n = _n, m = _m, memset(a, 0, sizeof a); } // \u5355\u4f4d\u77e9\u9635 matrix(int _n) { n = m = _n; for (int i = 1; i <= n; ++i) a[i][i] = 1; } // \u5b9a\u4e49\u77e9\u9635 matrix(int _n, int _m, const int t[N][N]) { n = _n, m = _m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) a[i][j] = t[i][j]; } // \u77e9\u9635\u4e58\u6cd5 matrix operator*(const matrix &b) const { matrix res; res.n = n, res.m = b.m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= b.m; ++j) for (int k = 1; k <= m; ++k) res.a[i][j] = (res.a[i][j] + a[i][k] * b.a[k][j] % MOD) % MOD; return res; } }; // \u77e9\u9635\u5feb\u901f\u5e42 matrix pow(const int &n, matrix a, int k) { matrix res(n); while (k) { if (k & 1) res = res * a; k >>= 1, a = a * a; } return res; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"math/linear-algebra/matrix/#_15","text":"\u672c\u6587\u4e0d\u8ba8\u8bba\u5947\u602a\u7684\u4f18\u5316\u3002","title":"\u77e9\u9635\u4e58\u6cd5\u7684\u4f18\u5316"},{"location":"math/linear-algebra/matrix/#_16","text":"\u6211\u4eec\u524d\u9762\u7684\u77e9\u9635\u4e58\u6cd5\uff0c\u5faa\u73af\u987a\u5e8f\u662f \\(i,j,k\\) \u3002 \u4f46\u662f\u6211\u4eec\u5982\u679c\u6362\u6210 \\(i,k,j\\) \u8fd9\u4e2a\u987a\u5e8f\u5c31\u4f1a\u5feb\u5f88\u591a\u5f88\u591a\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f \u8003\u8651\u6211\u4eec\u5faa\u73af\u4e2d \\(a_i,b_k\\) \u4e24\u884c\u7684\u8bbf\u95ee\u90fd\u662f\u8fde\u7eed\u7684\uff0c\u7f13\u5b58\u4f1a\u88ab\u5145\u5206\u5229\u7528\uff0c","title":"\u5faa\u73af\u7f6e\u6362\uff1a\u7f13\u5b58\u4f18\u5316"},{"location":"math/linear-algebra/matrix/#_17","text":"\u5982\u679c\u4e00\u4e2a\u4f4d\u7f6e\u662f \\(0\\) \uff0c\u7279\u5224\u9000\u51fa\u3002 \u5728\u7a00\u758f\u77e9\u9635\u4e2d\u6709\u5947\u6548\uff0c\u4f46\u662f\u7a20\u5bc6\u7684\u5c31\u4e00\u70b9\u7528\u6ca1\u6709\u3002 \u5495\u5495\u5495","title":"\u5176\u4ed6\u4f18\u5316"},{"location":"math/linear-algebra/matrix/#reference","text":"[1] http://www.gaosan.com/gaokao/414210.html [2] https://oi-wiki.org/math/linear-algebra/matrix/ [3] http://matrixmultiplication.xyz/","title":"Reference"},{"location":"math/linear-algebra/vector/","text":"\u5e73\u9762\u5411\u91cf \u00b6 \u6709\u5411\u7ebf\u6bb5 \u00b6 \u5e26\u6709\u65b9\u5411\u7684\u7ebf\u6bb5\u79f0\u4e3a\u6709\u5411\u7ebf\u6bb5\u3002\u6709\u5411\u7ebf\u6bb5\u7684\u4e09\u8981\u7d20\u4e3a\uff1a\u8d77\u70b9\u3001\u65b9\u5411\u3001\u957f\u5ea6\u3002 \u6839\u636e\u521d\u7b49\u51e0\u4f55\uff0c\u90a3\u4e48\u53ea\u8981\u77e5\u9053\u8fd9\u4e09\u8981\u7d20\uff0c\u8fd9\u4e2a\u6709\u5411\u7ebf\u6bb5\u5c31\u5df2\u7ecf\u88ab\u786e\u5b9a\u4e86\uff0c\u4e5f\u5c31\u662f\u7ec8\u70b9\u53ef\u77e5\u3002 \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u601d\u8003\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u77e5\u9053\u8d77\u70b9\u3001\u91cd\u70b9\uff0c\u5c31\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u4e2a\u6709\u5411\u7ebf\u6bb5\u3002 \u4e00\u4e2a\u6709\u5411\u7ebf\u6bb5\u7531\u5176\u4e24\u4e2a\u7aef\u70b9\u8868\u793a\uff0c\u8bb0\u4e3a \\(\\overrightarrow{AB}\\) \u6216 \\(\\bm{a}\\) \uff0c\u540c\u65f6\u6211\u4eec\u8bb0\u5176\u957f\u5ea6\uff0c \u79f0\u4e3a\u5411\u91cf\u7684\u6a21 \u3002 \u5411\u91cf \u00b6 \u5411\u91cf\uff08vector\uff09\u53c8\u79f0\u6b27\u51e0\u91cc\u5f97\u5411\u91cf\uff08Euclidean vector\uff09\u3002 \u76ee\u524d\u6ca1\u6709\u51c6\u786e\u800c\u7edf\u4e00\u7684\u4e2d\u6587\u7ffb\u8bd1\uff0c\u5728\u7269\u7406\u3001\u5de5\u7a0b\u4e2d\u901a\u79f0\u77e2\u91cf\u3002 \u4e00\u822c\u6307\u4e00\u4e2a\u540c\u65f6\u5177\u6709\u5927\u5c0f\u548c\u65b9\u5411\uff0c\u4e14\u6ee1\u8db3\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\u7684\u51e0\u4f55\u5bf9\u8c61\u3002 \u5411\u91cf\u662f\u6570\u5b66\u3001\u7269\u7406\u5b66\u548c\u5de5\u7a0b\u79d1\u5b66\u7b49\u591a\u4e2a\u81ea\u7136\u79d1\u5b66\u4e2d\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u4e0e\u5411\u91cf\u76f8\u5bf9\u7684\u6982\u5ff5\u79f0\u6807\u91cf\u3001\u7eaf\u91cf\u3001\u6570\u91cf\uff0c\u5373\uff1a \u53ea\u6709\u5927\u5c0f\u3001\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u6ca1\u6709\u65b9\u5411\uff08\u7535\u6d41\u662f\u7279\u4f8b\uff09\u3001\u4e0d\u6ee1\u8db3\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\u7684\u91cf\u3002 \u56fa\u5b9a\u5411\u91cf \uff1a\u5c24\u5176\u5728\u7269\u7406\u5b66\u9886\u57df\uff0c\u6709\u4e9b\u5411\u91cf\u4f1a\u4e0e\u8d77\u70b9\u6709\u5173\uff08\u529b\u4e0e\u5176\u7684\u4f5c\u7528\u70b9\u6709\u5173\uff0c\u8d28\u70b9\u8fd0\u52a8\u901f\u5ea6\u4e0e\u8be5\u8d28\u70b9\u7684\u4f4d\u7f6e\u6709\u5173\uff09\uff0c\u56e0\u800c\u5047\u8bbe\u5411\u91cf\u6709\u786e\u5b9a\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u5f53\u8d77\u70b9\u548c\u7ec8\u70b9\u6539\u53d8\u540e\uff0c\u6784\u6210\u7684\u5411\u91cf\u5c31\u4e0d\u518d\u662f\u539f\u6765\u7684\u5411\u91cf\u3002\u8fd9\u6837\u7684\u5411\u91cf\u4e5f\u88ab\u79f0\u4e3a\u56fa\u5b9a\u5411\u91cf\u3002 \u81ea\u7531\u5411\u91cf \uff1a\u5411\u91cf\u7684\u4f4d\u7f6e\u53ef\u81ea\u7531\u79fb\u52a8\u3002\u5728\u53e6\u4e00\u4e9b\u65f6\u5019\uff0c\u7531\u4e8e\u5411\u91cf\u7684\u5171\u6027\u90fd\u5177\u6709\u5927\u5c0f\u548c\u65b9\u5411\uff0c\u4f1a\u8ba4\u4e3a\u5411\u91cf\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5e76\u4e0d\u90a3\u4e48\u91cd\u8981\u3002\u4e24\u4e2a\u8d77\u70b9\u4e0d\u4e00\u6837\u7684\u5411\u91cf\uff0c\u53ea\u8981\u5927\u5c0f\u76f8\u7b49\uff0c\u65b9\u5411\u76f8\u540c\uff0c\u5c31\u53ef\u4ee5\u79f0\u4e3a\u662f\u540c\u4e00\u4e2a\u5411\u91cf\u3002\u8fd9\u6837\u7684\u5411\u91cf\u88ab\u79f0\u4e3a\u81ea\u7531\u5411\u91cf\u3002\u5728\u6570\u5b66\u4e2d\uff0c\u4e00\u822c\u53ea\u7814\u7a76\u81ea\u7531\u5411\u91cf\uff0c\u5e76\u4e14\u6570\u5b66\u4e2d\u6240\u6307\u7684\u5411\u91cf\u5c31\u662f\u6307\u81ea\u7531\u5411\u91cf\u3002\u4e5f\u5c31\u662f\u53ea\u8981\u5927\u5c0f\u4ee5\u53ca\u65b9\u5411\u4e00\u6837\uff0c\u5373\u53ef\u89c6\u4e3a\u540c\u4e00\u5411\u91cf\uff0c\u4e0e\u5411\u91cf\u7684\u8d77\u59cb\u70b9\u5e76\u65e0\u5173\u7cfb\u3002 \u7279\u6b8a\u7684\u5411\u91cf\uff1a\u9047\u5230\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\uff08\u5982\u8868\u793a\u78c1\u573a\u7684\u78c1\u611f\u5e94\u5f3a\u5ea6\uff09\u9700\u8981\u8868\u793a\u4e0e\u8bb0\u8f7d\u7eb8\u9762\u5782\u76f4\u7684\u5411\u91cf\uff0c\u5219\u4f1a\u4f7f\u7528\u5706\u5708\u4e2d\u6253\u53c9\u6216\u6253\u70b9\u7684\u65b9\u5f0f\u6765\u8868\u793a\uff08\u5982\u53f3\u56fe\uff09\u3002\u5706\u5708\u4e2d\u5e26\u70b9\u7684\u8bb0\u53f7\uff08\u2299\uff09\u8868\u793a\u7531\u7eb8\u4e0b\u65b9\u6307\u5411\u7eb8\u4e0a\u65b9\u7684\u5411\u91cf\uff0c\u800c\u5706\u5708\u4e2d\u5e26\u53c9\u7684\u8bb0\u53f7\uff08\u2297\uff09\u5219\u8868\u793a\u7531\u7eb8\u7684\u4e0a\u65b9\u6307\u5411\u7eb8\u4e0b\u65b9\u7684\u5411\u91cf\u3002\u7531\u4e8e\u8fd9\u79cd\u8bb0\u53f7\u4e0d\u8868\u793a\u5411\u91cf\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u5fc5\u987b\u65f6\u9700\u8981\u5728\u65c1\u8fb9\u6216\u5176\u5b83\u5730\u65b9\u53e6\u5916\u6ce8\u660e\u3002 \u4e0b\u6587\u4e3a\u9ad8\u4e2d\u6570\u5b66\u4e2d\u5b9a\u4e49\u7684\u5411\u91cf\u3002 \u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u4e0b\u6587\u7684\u5411\u91cf\u5747\u6307 \u81ea\u7531\u5411\u91cf \uff0c\u5927\u90e8\u5206\u90fd\u662f \u5e73\u9762\u5411\u91cf \u3002 \u65e2\u6709\u5927\u5c0f\u53c8\u6709\u65b9\u5411\u7684\u91cf\u79f0\u4e3a\u5411\u91cf\u3002\u8fd9\u4e2a\u5b9a\u4e49\u5f88\u62bd\u8c61\uff0c\u6211\u4eec\u9010\u4e2a\u5206\u89e3\u3002 \u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u6709\u5411\u7ebf\u6bb5\uff0c\u4f46\u662f\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5927\u90e8\u5206\u65f6\u5019\uff0c\u5411\u91cf\u7684\u4f4d\u7f6e\u5e76\u4e0d\u91cd\u8981\u3002 \u4e8e\u662f\u6211\u4eec\u5c06\u6709\u5411\u7ebf\u6bb5\u7684\u8d77\u70b9\u4e0d\u56fa\u5b9a\uff0c\u5c06\u4e00\u4e2a\u6709\u5411\u7ebf\u6bb5\u62bd\u8c61\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u968f\u610f\u79fb\u52a8\u7684\u91cf\u3002 \u6b64\u65f6\uff0c\u4f60\u4e5f\u8bb8\u53d1\u73b0\u4e86\u3002\u6709\u5411\u7ebf\u6bb5\u5176\u5b9e\u53ef\u4ee5\u518d\u6b21\u8868\u793a\u4e3a\uff0c\u8d77\u70b9\u548c\u4e00\u4e2a\u5411\u91cf\u3002 \u6211\u4eec\u901a\u5e38\u628a\u5411\u91cf\u8868\u793a\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5185\uff0c\u6ca1\u6709\u8bf4\u660e\u7684\u60c5\u51b5\u4e0b\uff0c\u8d77\u70b9\u901a\u5e38\u6807\u5728\u5750\u6807\u8f74\u539f\u70b9\u3002 \u6211\u4eec\u53d6\u8fd9\u4e2a\u5411\u91cf\u5728\u6a2a\u3001\u7eb5\u5750\u6807\u4e0a\u5ef6\u4f38\u7684\u957f\u5ea6\u4f5c\u4e3a\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u5411\u91cf\u8bb0\u4e3a \\((a,b)\\) \u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u51fa\u4e86\u5411\u91cf\u7684\u51e0\u4f55\u610f\u4e49\uff0c\u5373\u5411\u91cf \\((a,b)\\) \u8868\u793a\u5411\u53f3\u8d70 \\(a\\) \u3001\u5411\u4e0a\u8d70 \\(b\\) \u7684\u4f4d\u79fb\u3002 \u5df2\u77e5\u4e24\u70b9 \\(A(a,b),B(c,d)\\) \uff0c\u6613\u8bc1 \\(\\overrightarrow{AB}=(c-a,d-b)\\) \u3002 \u5411\u91cf\u7684\u6a21 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u5411\u91cf \\(\\vec a\\) \uff0c\u6709\u5411\u7ebf\u6bb5 \\(\\vec a\\) \u7684\u957f\u5ea6\u79f0\u4e3a\u5411\u91cf\u7684\u6a21\uff0c\u5373\u4e3a\u8fd9\u4e2a\u5411\u91cf\u7684\u5927\u5c0f\u3002 \u7b26\u53f7\u8868\u793a\u4e3a \\(|\\bm a|\\) \u6216 \\(|\\overrightarrow{AB}|\\) \uff0c\u6839\u636e\u52fe\u80a1\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053 \\(|\\vec a|=|(x,y)|=\\sqrt{x^2+y^2}\\) \u3002 \u7279\u6b8a\u7684\u5411\u91cf \u00b6 \u96f6\u5411\u91cf \uff1a\u6a21\u4e3a \\(0\\) \u7684\u5411\u91cf\uff0c\u96f6\u5411\u91cf\u7684\u65b9\u5411\u4efb\u610f\uff08\u4e0d\u8fc7\u5176\u5b9e\u662f\u65e0\u610f\u4e49\uff09\u3002\u4e00\u822c\u8bb0\u4e3a\uff1a \\(\\vec 0\\) \u3002 \u5355\u4f4d\u5411\u91cf \uff1a\u6a21\u4e3a \\(1\\) \u7684\u5411\u91cf\u79f0\u4e3a\u5355\u4f4d\u5411\u91cf\u3002\u4e00\u822c\u8bb0\u4e3a \\(\\bm e\\) \uff0c\u6700\u5e38\u89c1\u7684\u5355\u4f4d\u5411\u91cf\u5c31\u662f\u57fa\u5411\u91cf\u3002 \u57fa\u5411\u91cf \uff1a \\(\\bm i=(1,0)\\) \u8868\u793a \\(x\\) \u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\uff0c \\(\\bm j=(0,1)\\) \u8868\u793a \\(y\\) \u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\u3002 \u5e73\u884c\u5411\u91cf \uff1a\u65b9\u5411\u76f8\u540c\u6216\u76f8\u53cd\u7684\u4e24\u4e2a\u975e\u96f6\u5411\u91cf\uff0c\u89c4\u5b9a\u96f6\u5411\u91cf\u4e0e\u4efb\u4f55\u5411\u91cf\u5e73\u884c\u3002\u8bb0\u4f5c\uff1a \\(\\bm x\\parallel\\bm y\\) \u3002 \u5171\u7ebf\u5411\u91cf \uff1a\u4efb\u4e00\u7ec4\u5e73\u884c\u5411\u91cf\u90fd\u53ef\u4ee5\u5e73\u79fb\u5230\u540c\u4e00\u76f4\u7ebf\u4e0a\uff0c\u6240\u4ee5\u5e73\u884c\u5411\u91cf\u53c8\u53eb\u5171\u7ebf\u5411\u91cf\u3002 \u76f8\u7b49\u5411\u91cf \uff1a\u6a21\u76f8\u7b49\u4e14\u65b9\u5411\u76f8\u540c\u7684\u5411\u91cf\u3002 \u76f8\u53cd\u5411\u91cf \uff1a\u6a21\u76f8\u7b49\u4e14\u65b9\u5411\u76f8\u53cd\u7684\u5411\u91cf\u3002 \u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97 \u00b6 \u5411\u91cf\u6570\u4e58 \u00b6 \u6211\u4eec\u89c4\u5b9a\u5b9e\u6570 \\(\\lambda\\) \u4e0e\u5411\u91cf \\(\\bm a\\) \u7684\u79ef\u4e3a\u4e00\u4e2a\u5411\u91cf\uff0c\u79f0\u4e3a\u5411\u91cf\u7684\u6570\u4e58\u8fd0\u7b97\uff0c\u8bb0\u4f5c \\(\\lambda\\vec a\\) \u3002 \u6211\u4eec\u5b9a\u4e49 \\(\\lambda\\bm a=\\lambda(x,y)=(\\lambda x,\\lambda y)\\) \u3002\u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u5411\u91cf\u6570\u4e58\u5e38\u7528\u7684\u7ed3\u8bba\uff1a \\(|\\lambda\\bm a|=|\\lambda||\\bm a|\\) \uff1b \u5f53 \\(\\lambda >0\\) \u65f6\uff0c \\(\\lambda\\bm a\\) \u4e0e \\(\\bm a\\) \u540c\u5411\uff1b \u5f53 \\(\\lambda =0\\) \u65f6\uff0c \\(\\lambda \\bm a=\\vec 0\\) \uff1b \u5f53 \\(\\lambda<0\\) \u65f6\uff0c \\(\\lambda \\bm a\\) \u4e0e \\(\\bm a\\) \u65b9\u5411\u76f8\u53cd\u3002 \u6839\u636e\u6570\u4e58\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u5f97\u51fa\u5411\u91cf\u7684\u6570\u4e58\u6ee1\u8db3\u4ea4\u6362\u5f8b\u3001\u7ed3\u5408\u5f8b\u3001\u5206\u914d\u5f8b\u7b49\uff0c\u5373\uff0c \\[ \\lambda(\\mu\\bm a)=(\\lambda\\mu)\\bm a\\\\ \\lambda(\\bm a+\\bm b)=\\lambda\\bm a+\\lambda\\bm b\\\\ (\\lambda+\\mu)\\bm a=\\lambda\\bm a+\\mu\\bm a\\\\ (-\\lambda)\\bm a=-(\\lambda\\bm a)=\\lambda(-\\bm a) \\] \u5411\u91cf\u52a0\u6cd5 \u00b6 \u6ce8\u610f\uff0c\u5411\u91cf\u7684\u6570\u4e58\u672c\u8d28\u4e0a\u4e5f\u5c5e\u4e8e\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\uff0c\u4e0d\u8fc7\u6211\u628a\u4ed6\u4eec\u5206\u5f00\uff0c\u65b9\u4fbf\u7406\u89e3\u3002 \u4e0b\u9762\u8ba8\u8bba\u5411\u91cf\u7684\u52a0\u6cd5\uff0c\u7c7b\u6bd4\u7684\uff0c\u5411\u91cf\u7684\u51cf\u6cd5\u53ef\u4ee5\u4ece\u516c\u5f0f\u5165\u624b\u7406\u89e3\u3002 \u7c7b\u6bd4\u7269\u7406\u4e2d\u7684\u4f4d\u79fb\uff0c\u4ece \\(A\\) \u7ecf \\(B\\) \u5230 \\(C\\) \uff0c\u90a3\u4e48\u7ecf\u8fc7\u7684\u4f4d\u79fb\u7b49\u4ef7\u4e8e\u76f4\u63a5\u4ece \\(A\\) \u5230 \\(C\\) \u3002 \u7b26\u53f7\u8868\u793a\u5373\uff1a \\(\\overrightarrow{AB}+\\overrightarrow{BC}=\\overrightarrow{AC}\\) \uff0c\u5176\u5b9e\u8fd9\u4e2a\u4e5f\u5c31\u662f\u4e09\u89d2\u5f62\u6cd5\u5219\u6240\u8868\u8ff0\u7684\u3002 \u5411\u91cf\u51cf\u6cd5\u7c7b\u4f3c\uff1a \\(\\overrightarrow{OA}-\\overrightarrow{OB}=\\overrightarrow{OA}+\\overrightarrow{BO}=\\overrightarrow{BA}\\) \uff0c\u540e\u9762\u7528\u5230\u4e86\u4ea4\u6362\u5f8b\u3002 \u540c\u65f6\uff0c\u6ce8\u610f\u5230\u529b\u7684\u5408\u6210\u6cd5\u5219\uff08\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\uff09\uff0c\u540c\u6837\u4e5f\u53ef\u4ee5\u770b\u505a\u5411\u91cf\u7684\u76f8\u52a0\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\u5411\u91cf\u76f8\u52a0\u7684\u4e24\u4e2a\u8fd0\u7b97\u6cd5\u5219\uff0c\u5373\u4e09\u89d2\u5f62\u6cd5\u5219\u3001\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\uff1a \u4e09\u89d2\u5f62\u6cd5\u5219\uff1a\u9996\u5c3e\u987a\u6b21\u76f8\u8fde\uff0c\u548c\u4e3a\u4ece\u7b2c\u4e00\u4e2a\u5411\u91cf\u7684\u8d77\u70b9\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5411\u91cf\u7684\u7ec8\u70b9\uff1b \u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\uff1a\u5411\u91cf\u5171\u8d77\u70b9\uff0c\u548c\u4e3a\u4ee5\u8fd9\u4e24\u4e2a\u5411\u91cf\u4e3a\u90bb\u8fb9\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u5bf9\u89d2\u7ebf\uff0c \u8d77\u70b9\u4e3a\u4e24\u4e2a\u5411\u91cf\u5171\u6709\u7684\u8d77\u70b9\uff0c\u65b9\u5411\u6cbf\u5e73\u884c\u56db\u8fb9\u5f62\u5bf9\u89d2\u7ebf\u65b9\u5411\u3002 \u8fd9\u6837\uff0c\u5411\u91cf\u7684\u52a0\u6cd5\u5c31\u5177\u6709\u4e86\u51e0\u4f55\u610f\u4e49\u3002\u5e76\u4e14\u5411\u91cf\u7684\u52a0\u6cd5\u6ee1\u8db3\u4ea4\u6362\u5f8b\u4e0e\u7ed3\u5408\u5f8b\u3002 \u7136\u540e\u4ece\u51e0\u4f55\u7684\u89d2\u5ea6\u53ef\u4ee5\u63a8\u51fa\u4e00\u4e9b\u516c\u5f0f\uff0c\u5176\u4e2d\u4e09\u89d2\u5f62\u6cd5\u5219\u7684\u516c\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u4e0b\uff1a \\[ (x_1,y_1)+(x_2,y_2)=(x_1+x_2,y_1+y_2) \\] \u5411\u91cf\u52a0\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\u548c\u4ea4\u6362\u5f8b\uff0c\u753b\u56fe\u7406\u89e3\u5373\u53ef\u3002 \u5411\u91cf\u52a0\u6cd5\u53ef\u4ee5\u5bfc\u51fa\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c \\[ ||\\bm a|-|\\bm b||\\le|\\bm a+\\bm b|\\le|\\bm a|+|\\bm b| \\] \u5f53\u4e14\u4ec5\u5f53\u4e24\u5411\u91cf\u65b9\u5411\u76f8\u540c\uff08\u6ce8\u610f\u4e0d\u662f\u5e73\u884c\uff09\uff0c\u53d6\u7b49\u3002 \u5411\u91cf\u7684\u70b9\u79ef \u00b6 \u58f0\u660e \u00b6 \u5bf9\u4e8e\u5411\u91cf\u7684\u4e58\u6cd5\uff1a \u7269\u7406 \u6570\u5b66 \u76f4\u8bd1 \u4fd7\u79f0 \u6807\u91cf\u79ef \u6570\u91cf\u79ef \u5185\u79ef \u70b9\u79ef \u77e2\u91cf\u79ef \u5411\u91cf\u79ef \u5916\u79ef \u53c9\u79ef \u7269\u7406\u548c\u6570\u5b66\u4e0a\u7684\u7528\u8bed\u91c7\u7528\u4e86\u610f\u8bd1\u7684\u65b9\u6cd5\uff0c\u5206\u522b\u8868\u793a\u8fd0\u7b97\u7684\u7ed3\u679c\u4e3a\u6807\u91cf\u548c\u77e2\u91cf\u3002 \u5728\u6570\u5b66\u5b66\u79d1\uff0c\u901a\u5e38\u4e5f\u53ef\u4ee5\u7ffb\u8bd1\u6210\u300c\u5185\u79ef\u300d\u548c\u300c\u5916\u79ef\u300d\uff0c\u662f\u4e24\u4e2a\u540d\u8bcd\u7684\u76f4\u8bd1\u3002 \u800c\u300c\u70b9\u79ef\u300d\u548c\u300c\u53c9\u79ef\u300d\u662f\u6839\u636e\u8fd0\u7b97\u7b26\u53f7\u5f97\u6765\u7684\u4fd7\u79f0\uff0c\u8fd9\u79cd\u4fd7\u79f0\u4e5f\u5f88\u5e38\u89c1\u3002 \u5b9a\u4e49 \u00b6 \u70b9\u79ef\u7684\u6982\u5ff5\u5bf9\u4e8e\u4efb\u610f\u7ef4\u6570\u7684\u5411\u91cf\u90fd\u9002\u7528 \u3002 \u5df2\u77e5\u4e24\u4e2a\u5411\u91cf \\(\\bm a,\\bm b\\) \uff0c\u5b83\u4eec\u7684\u5939\u89d2\u4e3a \\(\\theta\\) \uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u70b9\u79ef\u4e3a\uff1a \\[ \\bm a \\cdot \\bm b=|\\bm a||\\bm b|\\cos \\theta \\] \u5176\u4e2d\uff0c\u6211\u4eec\u79f0 \\(|\\bm a|\\cos \\theta\\) \u4e3a \\(\\bm a\\) \u5728 \\(\\bm b\\) \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u3002 \u5176\u4e2d\uff0c \\(\\theta\\in[0,\\pi]\\) \uff0c\u4f46\u662f\u76f4\u7ebf\u7684\u5939\u89d2 \\(\\theta\\in[0,\\pi)\\) \uff0c\u56e0\u4e3a\u76f8\u53cd\u5411\u91cf\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002 \u610f\u4e49 \u00b6 \u70b9\u79ef\u7684\u51e0\u4f55\u610f\u4e49\u5373\u4e3a\uff1a\u70b9\u79ef \\(\\bm a \\cdot \\bm b\\) \u7b49\u4e8e \\(\\bm a\\) \u7684\u6a21\u4e0e \\(\\bm b\\) \u5728 \\(\\bm a\\) \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u7684\u4e58\u79ef\u3002 \u53e6\u5916\uff0c\u6211\u4eec\u5b9a\u4e49\u5411\u91cf\u70b9\u79ef\u6570\u503c\u4e0a\u8868\u793a\u4e3a\uff08\u7b80\u8bb0\u4e3a\u5148\u76f8\u4e58\u518d\u76f8\u52a0\uff09\uff1a \\[ (x_1,y_1)\\cdot(x_2,y_2)=x_1x_2+y_1y_2 \\] \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u79cd\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u5e76\u4e0d\u5c5e\u4e8e\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\u3002 \u5411\u91cf\u4e0e\u96f6\u5411\u91cf\u70b9\u79ef\uff0c\u7ed3\u679c\u4e3a \\(\\vec0\\) \u3002\u5728\u4e0d\u5f15\u8d77\u6df7\u6dc6\u7684\u60c5\u51b5\u4e0b\uff0c\u70b9\u79ef\u7684\u70b9\u53f7\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\u3002 \u6027\u8d28 \u00b6 \u5411\u91cf\u70b9\u4e58\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff1a \\[ \\bm a\\cdot\\bm b=\\bm b\\cdot\\bm a=|\\bm a|\\cdot|\\bm b|\\cdot\\cos\\theta \\] \u5411\u91cf\u70b9\u4e58\u5bf9\u6570\u4e58\u6709\u7ed3\u5408\u5f8b\uff1a \\[ (\\lambda\\bm a)\\cdot\\bm b=\\lambda(\\bm a\\cdot\\bm b)=\\bm a\\cdot(\\lambda\\bm b) \\] \u5411\u91cf\u70b9\u4e58\u5bf9\u5411\u91cf\u52a0\u6cd5\u6709\u5206\u914d\u7387\uff1a \\[ (\\bm a+\\bm b)\\cdot\\bm c=\\bm a\\cdot\\bm c+\\bm b\\cdot\\bm c \\] \u4f46\u662f\u5411\u91cf\u70b9\u4e58\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c \\[ (\\bm a\\cdot\\bm b)\\cdot\\bm c\\neq\\bm a\\cdot(\\bm b\\cdot\\bm c) \\] \u6ce8\u610f\u5230\u5411\u91cf\u8fd0\u7b97\u5177\u6709\u5927\u90e8\u5206\u7684\u6570\u5b57\u8fd0\u7b97\u7684\u6027\u8d28\uff08\u9664\u4e86\u9664\u6cd5\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f53\u505a\u5b57\u6bcd\u8ba1\u7b97\u3002 \u53ef\u4ee5\u5f97\u5230\uff0c\u82e5 \\(\\bm b\\neq\\bm c\\) \uff0c \\(\\bm a\\cdot\\bm b=\\bm a\\cdot\\bm c\\) \u7684\u5145\u8981\u6761\u4ef6\u662f \\(\\bm a\\perp(\\bm b-\\bm c)\\) \uff0c \\[ \\bm a\\cdot\\bm b=\\bm a\\cdot\\bm c\\\\ \\bm a\\cdot(\\bm b-\\bm c)=\\vec0 \\] \u5373\uff0c \\[ \\bm a\\perp(\\bm b-\\bm c) \\] \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c \\[ |\\bm a+\\bm b|^2-|\\bm a-\\bm b|^2=4\\bm a\\cdot\\bm b\\\\ \\bm a\\cdot\\bm b={1\\over4}\\left(|\\bm a+\\bm b|^2-|\\bm a-\\bm b|^2\\right) \\] \u5373\u6781\u5316\u6052\u7b49\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u901a\u8fc7\u6c42\u5939\u89d2\u7684\u65b9\u5f0f\u5f97\u51fa\u4e24\u5411\u91cf\u70b9\u79ef\u3002 \u540c\u65f6\uff0c\u5e38\u7528\u7684\uff0c \\[ \\begin{aligned} |\\bm a+\\bm b|&=\\lambda\\\\ (\\bm a+\\bm b)\\cdot(\\bm a+\\bm b)&=\\lambda^2\\\\ |\\bm a|^2+2\\bm a\\cdot\\bm b+|\\bm b|^2&=\\lambda^2 \\end{aligned} \\] \u5373\uff0c \\[ |\\bm a|^2+2\\bm a\\cdot\\bm b+|\\bm b|^2=|\\bm a+\\bm b|^2\\\\ \\bm a\\cdot\\bm b={1\\over2}\\left(|\\bm a+\\bm b|^2-|\\bm a|^2-|\\bm b|^2\\right)\\\\ \\] \u603b\u7ed3\u4e00\u4e0b\uff0c\u4e0a\u9762\u4e24\u4e2a\u5f0f\u5b50\uff0c \\[ \\bm a\\cdot\\bm b={1\\over4}\\left(|\\bm a+\\bm b|^2-|\\bm a-\\bm b|^2\\right)\\\\ \\bm a\\cdot\\bm b={1\\over2}\\left(|\\bm a+\\bm b|^2-|\\bm a|^2-|\\bm b|^2\\right)\\\\ \\] \u518d\u7ed3\u5408\u70b9\u4e58\u7684\u5b9a\u4e49\uff0c \\[ \\bm a\\cdot\\bm b=|\\bm a|\\cdot|\\bm b|\\cdot\\cos\\theta\\\\ \\cos\\theta={\\bm a\\cdot\\bm b\\over|\\bm a|\\cdot|\\bm b|} \\] \u5c31\u53ef\u4ee5\u6c42\u51fa\u5411\u91cf\u5939\u89d2\u3002 \u7279\u6b8a\u7684\uff0c \\[ \\theta=0\\,(\\cos\\theta=1),\\,\\bm a\\cdot\\bm b=|\\bm a|\\cdot|\\bm b|\\\\ \\theta=\\pi\\,(\\cos\\theta=-1),\\,\\bm a\\cdot\\bm b=-|\\bm a|\\cdot|\\bm b|\\\\ \\theta=\\pi/2\\,(\\cos\\theta=0),\\,\\bm a\\cdot\\bm b=0\\\\ \\bm a\\cdot\\bm a=|\\bm a|^2,\\,|\\bm a|=\\sqrt{\\bm a\\cdot\\bm a}\\\\ \\] \u5176\u4e2d\uff0c\u7b2c\u4e09\u6761\u5373\uff0c\u5782\u76f4\u5411\u91cf\u5411\u91cf\u70b9\u79ef\u7b49\u4e8e\u96f6\u3002 \u6839\u636e \\(\\cos 90^\\circ=0\\) \uff0c \\(\\bm a \\perp \\bm b \\iff \\bm a\\cdot \\bm b=0\\) \u3002 \u67ef\u897f\u4e0d\u7b49\u5f0f\u5411\u91cf\u5f62\u5f0f \u00b6 \\[ |\\bm a\\cdot\\bm b|\\le|\\bm a|\\cdot|\\bm b| \\] \u5f53\u4e14\u4ec5\u5f53\u4e24\u5411\u91cf\u5171\u7ebf\uff0c\u53d6\u7b49\u3002 \u636e\u6b64\uff0c\u53ef\u4ee5\u5224\u65ad\u4e24\u5411\u91cf\u5171\u7ebf\uff1a \u4e24\u4e2a\u975e\u96f6\u5411\u91cf \\(\\bm a\\) \u4e0e \\(\\bm b\\) \u5171\u7ebf\uff0c\u7b49\u4ef7\u4e8e\uff0c\u6709\u552f\u4e00\u5b9e\u6570 \\(\\lambda\\) \uff0c\u4f7f\u5f97 \\(\\bm b=\\lambda \\bm a\\) \u3002 \u7531\u6570\u4e58\u7684\u5b9a\u4e49\u77e5\uff0c\u5bf9\u4e8e\u975e\u96f6\u5411\u91cf \\(\\bm a\\) \uff0c\u5982\u679c\u5b58\u5728\u5b9e\u6570 \\(\\lambda\\) \uff0c\u4f7f\u5f97 \\(\\bm b=\\lambda \\bm a\\) \uff0c\u90a3\u4e48 \\(\\bm a \\parallel \\bm b\\) \u3002 \u6570\u503c\u4e0a\uff0c\u6709\u5224\u522b\u5f0f \\(\\bm a = \\lambda \\bm b \\iff |\\bm a\\cdot \\bm b|=|\\bm a||\\bm b|\\) \u3002 \u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u5e94\u7528 \u00b6 \u5e73\u9762\u5411\u91cf\u57fa\u672c\u5b9a\u7406 \u00b6 \u57fa\u5e95 \\(\\bm e_1,\\bm e_2\\) \u4e0d\u5171\u7ebf\uff0c\u5bf9\u4e8e\u5e73\u9762\u5185\u4efb\u4e00\u5411\u91cf \\(\\bm a\\) \uff0c\u5b58\u5728\u552f\u4e00\u5b9e\u6570 \\(x,y\\) \u4f7f\u5f97 \\(\\bm a=x\\bm e_1+y\\bm e_2\\) \u3002 \u5f62\u5f0f\u5316\u7684\uff0c\u5e73\u9762\u5185\u7684\u4efb\u4e00\u5411\u91cf\u90fd\u53ef\u4ee5\u552f\u4e00\u7684\u8868\u793a\u4e3a\u4e24\u4e2a\u4e0d\u5171\u7ebf\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\u3002 \u5b58\u5728\u6027\u7684\u8bc1\u660e\uff1a\u611f\u6027\u7406\u89e3\uff08\u96fe \u552f\u4e00\u6027\u7684\u8bc1\u660e\uff0c\u53cd\u8bc1\uff1a\u5047\u8bbe\u5b58\u5728\u4e24\u7ec4\u5b9e\u6570 \\(\\langle x_1,y_1\\rangle\\) \u3001 \\(\\langle x_2,y_2\\rangle\\) \uff0c \\[ \\bm a=x_1\\bm e_1+y_1\\bm e_2=x_2\\bm e_1+y_2\\bm e_2\\\\ \\bm e_1(x_1-x_2)=\\bm e_2(y_2-y_1) \\] \u56e0\u4e3a \\(x_1\\neq x_2,y_1\\neq y_2\\) \uff0c\u5219 \\(\\bm e_1,\\bm e_2\\) \u5171\u7ebf\uff0c\u4e0e\u6761\u4ef6\u4e0d\u7b26\uff0c\u56e0\u6b64\u5b58\u5728\u552f\u4e00\u6027\u3002 \u8003\u8651\u6784\u9020\u6027\u7684\u8bc1\u660e\uff0c \u82e5\uff0c \\[ \\bm a\\cdot\\bm e_1=a_1,\\,\\bm a\\cdot\\bm e_2=a_2\\\\ \\langle\\bm e_1,\\bm e_2\\rangle=\\theta \\] \u8bbe\uff0c \\(\\bm a=x\\bm e_1+y\\bm e_2\\) \uff0c\u7528 \\(a_1,a_2,\\theta\\) \u8868\u793a \\(\\bm a\\) \u3002 \u8003\u8651\uff0c \\[ \\bm e_1\\bm e_2=\\cos\\theta\\\\ \\bm a\\cdot\\bm e_1=x+y\\bm e_1\\bm e_2=a_1\\\\ \\bm a\\cdot\\bm e_2=y+x\\bm e_1\\bm e_2=a_2 \\] \u5217\u51fa\u65b9\u7a0b\u7ec4\uff0c \\[ \\begin{cases} x+y\\cos\\theta=a_1\\\\ y+x\\cos\\theta=a_2 \\end{cases} \\] \u89e3\u5f97\uff0c \\[ \\left\\{\\begin{aligned} x={a_1-a_2\\cos\\theta\\over\\sin^2\\theta}\\\\ y={a_2-a_1\\cos\\theta\\over\\sin^2\\theta} \\end{aligned}\\right. \\] \u8fd9\u4e2a\u601d\u60f3\u5f88\u91cd\u8981\uff0c\u5e38\u7528\u4e00\u4e2a\u5f88\u5947\u602a\u7684\u5f0f\u5b50\uff0c\u53bb\u70b9\u4e58\u4e24\u4e2a\u4e0d\u5171\u7ebf\u5411\u91cf\u3002 \u7ebf\u6bb5\u4e2d\u70b9 \u00b6 \u8bbe \\(A(x_1,y_1)\\) \u3001 \\(B(x_2,y_2)\\) \u4e3a\u4e00\u5e73\u9762\u5185\u4e24\u70b9\u3002 \u8bbe \\(C(x,y)\\) \u4e3a\u7ebf\u6bb5 \\(AB\\) \u4e2d\u70b9\uff0c\u5219 \\(\\overrightarrow{AC}=\\overrightarrow{CB}\\) \uff1a \\[ x-x_1=x_2-x\\\\ y-y_1=y_2-y \\] \u6700\u7ec8\u89e3\u5f97\uff0c \\[ C\\left({x_1+x_2\\over2},{y_1+y_2\\over2}\\right) \\] \u5373\u4e2d\u70b9\u5750\u6807\u3002 \u7ebf\u6bb5\u957f\u5ea6 \u00b6 \u8bbe \\(A(x_1,y_1)\\) \u3001 \\(B(x_2,y_2)\\) \u4e3a\u4e00\u5e73\u9762\u5185\u4e24\u70b9\uff0c\u5219\uff0c \\[ |\\overrightarrow{AB}|=\\sqrt{\\overrightarrow{AB}\\cdot\\overrightarrow{AB}}=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} \\] \u5219\u7ebf\u6bb5 \\(AB\\) \uff0c \\[ |AB|=|\\overrightarrow{AB}|=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} \\] \u5373\u7ebf\u6bb5\u957f\u5ea6\u3002 \u4e09\u70b9\u5171\u7ebf \u00b6 \u5bf9\u4e8e\u7ebf\u6bb5 \\(AB\\) \u53ca\u4e00\u70b9 \\(Q\\) \uff0c\u82e5\u5b58\u5728\u4e00\u70b9 \\(O\\) \u6ee1\u8db3\uff0c \\[ \\overrightarrow{OQ}=\\lambda\\overrightarrow{OA}+(1-\\lambda)\\overrightarrow{OB} \\] \u5219 \\(Q\\) \u5728\u76f4\u7ebf \\(AB\\) \u4e0a\uff0c\u5373 \\(A,B,Q\\) \u4e09\u70b9\u5171\u7ebf\u3002 \u7c7b\u4f3c\u7684\uff0c\u82e5 \\(C\\) \u662f\u7ebf\u6bb5 \\(AB\\) \u4e2d\u70b9\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u4e00\u70b9 \\(O\\) \uff0c\u6709\uff0c \\[ \\overrightarrow{OC}={1\\over2}\\overrightarrow{OA}+{1\\over2}\\overrightarrow{OB} \\] \u89e3\u4e09\u89d2\u5f62 \u00b6 \u4e09\u89d2\u5f62\u7684\u5fc3 \u00b6 \u7f16\u53f7 \u5fc3\u7684\u540d\u79f0 \u5b9a\u4e49 \\(X_1\\) \u5185\u5fc3 \u4e09\u6761 \u89d2\u5e73\u5206\u7ebf \u7684\u4ea4\u70b9 \\(X_2\\) \u91cd\u5fc3 \u4e09\u6761 \u4e2d\u7ebf \u7684\u4ea4\u70b9 \\(X_3\\) \u5916\u5fc3 \u4e09\u6761 \u4e2d\u5782\u7ebf \u7684\u4ea4\u70b9 \\(X_4\\) \u5782\u5fc3 \u4e09\u6761 \u9ad8\u7ebf \u7684\u4ea4\u70b9 \u4e09\u89d2\u5f62\u91cd\u5fc3 \u00b6 \u5b58\u5728\u6709\u585e\u74e6\u5b9a\u7406\u3001\u585e\u74e6\u5b9a\u7406\u9006\u5b9a\u7406\u3002 \u4e09\u89d2\u5f62\u91cd\u5fc3\u5230\u5176\u5404\u4e2a\u9876\u70b9\u5411\u91cf\u4e4b\u548c\u4e3a\u96f6\u3002 \u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u91cd\u5fc3\u540c\u65f6\u4e5f\u662f\u5176\u4e2d\u70b9\u4e09\u89d2\u5f62\u7684\u91cd\u5fc3\u3002 \u91cd\u5fc3\u5230\u9876\u70b9\u7684\u8ddd\u79bb\u4e0e\u91cd\u5fc3\u5230\u5bf9\u8fb9\u4e2d\u70b9\u7684\u8ddd\u79bb\u4e4b\u6bd4\u4e3a \\(2:1\\) \u3002 \u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c\u91cd\u5fc3\u7684\u5750\u6807\u662f\u9876\u70b9\u5750\u6807\u7684\u7b97\u672f\u5e73\u5747\u3002 \u91cd\u5fc3\u548c\u4e09\u89d2\u5f62\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u7ec4\u6210\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u9762\u79ef\u76f8\u7b49\u3002 \u91cd\u5fc3\u5230\u4e09\u6761\u8fb9\u7684\u8ddd\u79bb\u4e0e\u4e09\u6761\u8fb9\u7684\u957f\u6210\u53cd\u6bd4\u3002\uff08\u4e0a\u4e00\u6761\u7684\u63a8\u8bba\uff09 \u91cd\u5fc3\u5230\u4e09\u8fb9\u8ddd\u79bb\u4e4b\u79ef\u6700\u5927\u3001\u5230\u4e09\u89d2\u5f62\u4e09\u4e2a\u9876\u70b9\u8ddd\u79bb\u7684\u5e73\u65b9\u548c\u6700\u5c0f\u3002 \u74e6\u585e\u5b9a\u7406\uff1a\u4e09\u9876\u70b9\u9009\u4e00\u4e2a\u4f5c\u4e3a\u8d77\u70b9\uff0c\u5b9a\u4e00\u65b9\u5411\uff0c\u7ed5\u4e00\u5708\uff0c\u4e09\u7ec4\u6bd4\u4f8b\u76f8\u4e58\u4e3a\u4e00\u3002 \u6b63\u5f26\u5b9a\u7406 \u00b6 \u56de\u987e\u521d\u4e2d\u51e0\u4f55\uff0c\u4e09\u89d2\u5f62\u9762\u79ef\uff0c \\[ S={1\\over2}ab\\sin C={1\\over2}bc\\sin A={1\\over2}ac\\sin B \\] \u4e0b\u9762\u7684\u8bc1\u660e\u8fc7\u7a0b\u53ea\u8003\u8651\u9510\u89d2\u4e09\u89d2\u5f62\uff0c\u5bf9\u4e8e\u949d\u89d2\u4e09\u89d2\u5f62\uff0c\u7ed3\u8bba\u4e0d\u53d8\u3002 \u505a\u8fc7 \\(\\angle A\\) \u7684\u5782\u7ebf\uff0c\u5219\u8be5\u5782\u7ebf\u957f\u5ea6 \\(h\\) \uff1a \\[ h=b\\sin C=c\\sin B \\] \u5bf9\u6bcf\u4e2a\u89d2\u5e94\u7528\uff0c\u6700\u540e\u53ef\u5f97\uff0c \\[ {a\\over\\sin A}={b\\over\\sin B}={c\\over\\sin C}=k \\] \u505a\u51fa\u8be5\u4e09\u89d2\u5f62\u7684\u5916\u63a5\u5706\uff0c\u8fc7\u5706\u5fc3\u505a \\(BC\\) \u7684\u9ad8\uff0c\u5219\uff0c \\[ a=2R\\sin A,\\,{a\\over\\sin A}=2R \\] \u5373\u503c \\(k\\) \u4e3a\u4e09\u89d2\u5f62\u5916\u63a5\u5706\u76f4\u5f84 \\(2R\\) \u3002 \u5e38\u5e38\u8fd9\u4e48\u5199\uff1a \\[ a=2R\\sin A,\\,b=2R\\sin B,\\,c=2R\\sin C\\\\ \\sin A={a\\over2R},\\,\\sin B={b\\over2R},\\,\\sin C={c\\over2R} \\] \u6b63\u5f26\u5b9a\u7406\u63a8\u8bba\uff1a\u5927\u8fb9\u5bf9\u5927\u89d2\uff0c\u5c0f\u8fb9\u5bf9\u5c0f\u89d2\u3002 \u4e09\u89d2\u5f62\u5916\u63a5\u5706\u534a\u5f84\uff1a \\[ R={abc\\over4S} \\] \u4f59\u5f26\u5b9a\u7406 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\begin{array}{c} \\overrightarrow{AB}=\\overrightarrow{CB}-\\overrightarrow{CA}\\\\[0.5em] |\\overrightarrow{AB}|^2=|\\overrightarrow{CB}|^2+|\\overrightarrow{CA}|^2-2|\\overrightarrow{CB}|\\cdot|\\overrightarrow{CA}|\\cdot\\cos\\theta\\\\[0.5em] c^2=a^2+b^2-2ab\\cos\\theta \\end{array} \\] \u5176\u4e2d \\(\\theta\\) \u4e3a \\(c\\) \u7684\u5bf9\u89d2\uff0c\u5373 \\(\\angle C\\) \uff1b\u7b2c\u4e8c\u6b65\u5c31\u662f\u4e24\u8fb9\u5e73\u65b9\u3002 \u5e38\u5199\u4f5c\uff1a \\[ \\cos A={b^2+c^2-a^2\\over2bc},\\,\\cos B={a^2+c^2-b^2\\over2ac},\\,\\cos C={a^2+b^2-c^2\\over2ab} \\] \u63a8\u8bba\uff1a \\[ \\begin{aligned} a^2+b^2-c^2>0 &\\Longrightarrow \\cos C>0 \\Longrightarrow C\\in(0,\\pi/2)\\\\ a^2+b^2-c^2=0 &\\Longrightarrow \\cos C=0 \\Longrightarrow C=\\pi/2\\\\ a^2+b^2-c^2<0 &\\Longrightarrow \\cos C<0 \\Longrightarrow C\\in(\\pi/2,\\pi) \\end{aligned} \\] \u89e3\u4e09\u89d2\u5f62 \u00b6 \u56de\u5fc6\u521d\u4e2d\u5e73\u51e0\uff0c\u6839\u636e\u5168\u7b49\u4e09\u89d2\u5f62\u7684\u5224\u65ad\uff1a \u5982\u679c\u77e5\u9053 ASA\u3001AAS\u3001SAS\u3001SSS\u3001HL \u5c31\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002 \u603b\u7ed3\u4e00\u4e0b\u5c31\u662f\u4e24\u4e2a\u89d2\u5168\u90fd\u53ef\u4ee5\uff0c\u4e09\u4e2a\u8fb9\u53ef\u4ee5\uff0c\u4e00\u4e2a\u89d2\u4e24\u4e2a\u8fb9\u5c31\u9700\u8981\u662f\u5939\u89d2\u3002 \u5373\u77e5\u9053 \\(aCb\\) \u3001 \\(cBa\\) \u3001 \\(bAc\\) \uff0c\u624d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u4e24\u8fb9\u4e00\u89d2\u7684\u4e09\u89d2\u5f62\u3002 \u81f3\u4e8e SSA\uff0c\u53ea\u6709\u4e00\u4e2a\u89d2\u662f\u76f4\u89d2\u624d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5c31\u662f HL \u4e86\u3002 \u4e09\u89d2\u5f62\u786e\u5b9a\uff0c\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u4ee5\u53ca\u6240\u6709\u89d2\u5ea6\u7684\u5927\u5c0f\u3002 \u6b63\u5f26\u5b9a\u7406\u3001\u4f59\u5f26\u5b9a\u7406\u5c31\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u65b9\u6cd5\uff1a\u53ef\u4ee5\u5229\u7528\u89d2\u5ea6\u548c\u8fb9\u957f\u4e92\u76f8\u8868\u793a\u3002 \u50cf\u8fd9\u6837\uff0c\u786e\u5b9a\u4e09\u89d2\u5f62\u8fb9\u3001\u89d2\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u89e3\u4e09\u89d2\u5f62\u3002 \u5982\u4f55\u9009\u62e9\u6b63\u5f26\u5b9a\u7406\u3001\u4f59\u5f26\u5b9a\u7406\uff1f \u9047\u5230\u6b63\u5f26\u9009\u6b63\u5f26\u5b9a\u7406\uff0c\u9047\u5230\u9f50\u6b21\u5f0f\u8003\u8651\u6b63\u5f26\u5b9a\u7406\u3002 \u9047\u5230\u4f59\u5f26\u9009\u4f59\u5f26\u5b9a\u7406\uff0c\u9047\u5230\u8fb9\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\u8003\u8651\u4f59\u5f26\u5b9a\u7406\u3002 \u539f\u5219\uff1a\u8fb9\u89d2\u7edf\u4e00\u3002 \u4e2d\u7ebf\u957f\u5b9a\u7406 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(BC\\) \u7684\u4e2d\u70b9\u4e3a \\(M\\) \uff0c\u5bf9\u4e8e\u4e2d\u7ebf \\(AM\\) \uff0c\u6709\uff1a \\[ AM^2={1\\over2}b^2+{1\\over2}c^2-{1\\over4}a^2 \\] \u6216\uff0c \\[ AM^2+BM^2={1\\over2}(AC^2+AB^2) \\] \u6216\uff0c \\[ AM={1\\over2}\\sqrt{2b^2+2c^2-a^2} \\] \u8bc1\u660e\uff0c\u57fa\u5e95\u5206\u89e3\uff1a \\[ \\overrightarrow{AM}={1\\over2}\\overrightarrow{AB}+{1\\over2}\\overrightarrow{AC}\\\\[0.5em] \\overrightarrow{BM}={1\\over2}\\overrightarrow{AC}-{1\\over2}\\overrightarrow{AB} \\] \u5219\uff0c \\[ |\\overrightarrow{AM}|^2+|\\overrightarrow{BM}|^2={1\\over2}|\\overrightarrow{AB}|^2+{1\\over2}|\\overrightarrow{AC}|^2 \\] \u6216\u8005\u4e2d\u70b9\u4e24\u4e2a\u5e95\u89d2\u5206\u522b\u5217\u4f59\u5f26\u5b9a\u7406\uff0c\u76f8\u52a0\u5316\u7b80\u3002 \u89d2\u5e73\u5206\u7ebf\u5b9a\u7406 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(\\angle A\\) \u7684\u5e73\u5206\u7ebf \\(AM\\) \uff0c\u6709\uff1a \\[ {BM\\over CM}={AB\\over AC} \\] \u662f\u5206\u89d2\u5b9a\u7406\u7684\u76f4\u63a5\u63a8\u8bba\uff0c\u8bc1\u660e\u89c1\u4e0b\u3002 \u5206\u89d2\u5b9a\u7406 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(BC\\) \u4e0a\u6709\u4e00\u70b9 \\(M\\) \uff0c\u5219\uff1a \\[ {BM\\over CM}={AB\\sin\\angle BAM\\over AC\\sin\\angle CAM} \\] \u8bc1\u660e\uff0c\u5de6\u53f3\u4e24\u8fb9\u7b49\u9762\u79ef\u6cd5\uff1a \\[ {BM\\over CM}={S_{\\triangle ABM}\\over S_{\\triangle ACM}}={AB\\cdot AM\\sin\\angle BAM\\over AC\\cdot AM\\sin\\angle CAM}={AB\\sin\\angle BAM\\over AC\\sin\\angle CAM} \\] \u6216\u6b63\u5f26\u5b9a\u7406\uff1a \\[ {BM\\over\\sin\\angle BAM}={AB\\over\\sin\\angle AMB}\\\\[0.5em] {CM\\over\\sin\\angle CAM}={AC\\over\\sin\\angle AMC} \\] \u4e0a\u4e0b\u505a\u6bd4\u3002Q.E.D. \u6d77\u4f26\u516c\u5f0f \u00b6 \u4efb\u610f\u4e09\u89d2\u5f62\u9762\u79ef\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[ \\begin{aligned} S&=\\sqrt{p(p-a)(p-b)(p-c)}\\\\ p&={a+b+c\\over2} \\end{aligned} \\] \u5176\u4e2d \\(p\\) \u4e3a\u4e09\u89d2\u5f62\u7684\u534a\u5468\u957f\u3002 \u5954\u9a70\u5b9a\u7406 \u00b6 \u5728\u9510\u89d2 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ S_{\\triangle BOC}\\cdot\\overrightarrow{OA}+S_{\\triangle AOC}\\cdot\\overrightarrow{OB}+S_{\\triangle AOB}\\cdot\\overrightarrow{OC}=\\vec0 \\] \u63a8\u8bba\uff1a \u8bbe \\(I\\) \u4e3a\u5185\u5fc3\uff0c\u5219 \\(a\\cdot\\overrightarrow{IA}+b\\cdot\\overrightarrow{IB}+c\\cdot\\overrightarrow{IC}=\\vec0\\) . \u8bbe \\(H\\) \u4e3a\u5782\u5fc3\uff0c\u5219 \\(\\tan A\\cdot\\overrightarrow{HA}+\\tan B\\cdot\\overrightarrow{HB}+\\tan C\\cdot\\overrightarrow{HC}=\\vec0\\) . \u8bbe \\(O\\) \u4e3a\u5916\u5fc3\uff0c\u5219 \\(\\sin2A\\cdot\\overrightarrow{OA}+\\sin2B\\cdot\\overrightarrow{OB}+\\sin2C\\cdot\\overrightarrow{OC}=\\vec0\\) . \u5e03\u96f7\u7279\u65bd\u5948\u5fb7\u516c\u5f0f \u00b6 \u4efb\u610f\u56db\u8fb9\u5f62\u9762\u79ef\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[ \\begin{aligned} S&=\\sqrt{(p-a)(p-b)(p-c)(p-d)-abcd\\cos^2{\\alpha+\\beta\\over2}}\\\\ p&={a+b+c+d\\over2} \\end{aligned} \\] \u5176\u4e2d \\(p\\) \u4e3a\u56db\u8fb9\u5f62\u7684\u534a\u5468\u957f\uff0c \\(\\alpha,\\beta\\) \u4e3a\u5176\u4e2d\u4e8c\u4e2a\u5bf9\u89d2\u3002 \u5e03\u96f7\u7279\u65bd\u5948\u5fb7\u516c\u5f0f\u53ef\u89c6\u4e3a\u5a46\u7f57\u6469\u7b08\u591a\u516c\u5f0f\u4e4b\u63a8\u5e7f\u3002 \u5a46\u7f57\u6469\u7b08\u591a\u516c\u5f0f \u00b6 \u6ce8\u610f\u5230\u5706\u5185\u63a5\u56db\u8fb9\u5f62\u5bf9\u89d2\u4e92\u8865\uff0c\u5176\u534a\u89d2\u4f59\u5f26\u503c\u4e3a\u96f6\uff0c \\(\\cos90^\\circ=0\\) \u5219\u5706\u5185\u63a5\u56db\u8fb9\u5f62\u9762\u79ef\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a \\[ \\begin{aligned} S&=\\sqrt{(p-a)(p-b)(p-c)(p-d)}\\\\ p&={a+b+c+d\\over2} \\end{aligned} \\] \u5176\u4e2d \\(p\\) \u4e3a\u56db\u8fb9\u5f62\u7684\u534a\u5468\u957f\u3002 \u4e00\u4e9b\u7ed3\u8bba \u00b6 \u5728\u4e09\u89d2\u5f62\u4e2d\uff0c \\(a=b\\cos C+c\\cos B\\) \u3002 \u82e5 \\(\\sin^2A+\\sin^2B=\\sin^2C\\) \uff0c\u5219\u8be5\u4e09\u89d2\u5f62\u662f\u4ee5 \\(\\angle C\\) \u4e3a\u76f4\u89d2\u7684 \\(\\mathrm{Rt\\triangle}\\) \u3002 \u89e3\u4e09\u89d2\u5f62\u91cc\u9762\u5e38\u7528\u7684\u5947\u602a\u4e09\u89d2\u51fd\u6570\uff1a \\[ \\sin15^\\circ=\\cos75^\\circ={\\sqrt6-\\sqrt2\\over4}\\\\[0.5em] \\sin75^\\circ=\\cos15^\\circ={\\sqrt6+\\sqrt2\\over4} \\] \u4f8b\u9898 \u00b6 \u4f8b\u9898\u4e00 \u00b6 \\[ 2\\cos^2{B\\over2}+\\sqrt3\\sin B=3 \\] \u6c42 \\(B\\) . \\[ \\cos B=2\\cos^2{B\\over2}-1\\\\ \\cos B+\\sqrt3\\sin B=2\\\\ {\\sqrt3\\over2}\\sin B+{1\\over2}\\cos B=1\\\\ \\sin B\\cos30^\\circ+\\cos B\\sin30^\\circ=1\\\\ \\sin(B+30^\\circ)=1=\\sin90^\\circ\\\\ B=60^\\circ \\] \u4f8b\u9898\u4e8c \u00b6 \\[ (\\sin B-\\sin C)^2=\\sin^2 A-\\sin B\\sin C \\] \u6c42 \\(A\\) . \u82e5 \\(\\sqrt2a + b= 2c\\) \uff0c\u6c42 \\(C\\) . \u89c2\u5bdf\u5230\u662f\u89d2\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u4e14\u90fd\u662f\u6b63\u5f26\uff0c\u8003\u8651\u6b63\u5f26\u5b9a\u7406\uff0c \\[ (\\sin B-\\sin C)^2=\\sin^2 A-\\sin B\\sin C\\\\\\\\ (b-c)^2=a^2-bc\\\\\\\\ b^2+c^2-2bc=a^2-bc\\\\\\\\ a^2=b^2+c^2-bc \\] \u4e8e\u662f\uff0c \\[ \\cos A={b^2+c^2-a^2\\over2bc}={1\\over2}\\\\\\\\ A=60^\\circ \\] \u89c2\u5bdf\u5230 \\(\\sqrt2a + b= 2c\\) \u4e3a\u8fb9\u7684\u4e00\u6b21\u9f50\u6b21\uff0c\u8003\u8651\u7528\u6b63\u5f26\u5b9a\u7406\u3002 \\[ \\sqrt2a+b=2c\\\\\\\\ \\sqrt2\\sin A+\\sin B=2\\sin C \\] \u6839\u636e\u4e0a\u4e00\u95ee\uff0c \\(\\sin A=\\sin60^\\circ=\\sqrt3/2\\) \uff0c \\[ \\sqrt6/2+\\sin B=2\\sin C\\\\\\\\ \\sqrt6/2+\\sin(120-C)=2\\sin C\\\\\\\\ \\sqrt6/2+\\sqrt3/2\\cos C+\\sin C/2=2\\sin C \\] \u7ee7\u7eed\u6574\u7406\uff0c \\[ {\\sqrt6\\over2}+{\\sqrt3\\over2}\\cos C+{1\\over2}\\sin C=2\\sin C\\\\\\\\ {3\\over2}\\sin C-{\\sqrt3\\over2}\\cos C={\\sqrt6\\over2}\\\\\\\\ {\\sqrt3\\over2}\\sin C-{1\\over2}\\cos C={\\sqrt2\\over2}\\\\\\\\ \\sin C\\cos30^\\circ-\\cos C\\sin30^\\circ={\\sqrt2\\over2}\\\\\\\\ \\sin(C-30^\\circ)={\\sqrt2\\over2}=\\sin45^\\circ \\] \u56e0\u4e3a \\(C \\in (0^\\circ,120 ^\\circ)\\) \uff0c \\(C-30^\\circ\\in(-30^\\circ,90^\\circ)\\) \uff0c\u56e0\u6b64\uff0c $ C-30 \\circ=45 \\circ, C=75^\\circ $ \u4f8b\u9898\u4e09 \u00b6 \u5728\u9510\u89d2 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ 2b\\sin A-\\sqrt3a=0 \\] \u6c42 \\(B\\) . \u6c42 \\(\\cos A+\\cos B+\\cos C\\) \u7684\u53d6\u503c\u8303\u56f4. \u4e0d\u8003\u8651 \\(\\sin A\\) \u662f\u8fb9\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u4e8e\u662f\u5e94\u7528\u6b63\u5f26\u5b9a\u7406\uff0c \\[ 2\\sin B\\sin A-\\sqrt2\\sin A=0\\\\\\\\ 2\\sin B=\\sqrt3\\\\ \\sin B=\\sqrt3/2 \\] \u56e0\u4e3a \\(\\angle B\\) \u662f\u9510\u89d2\uff0c \\[ B=60^\\circ \\] \u8bbe\uff0c \\[ \\def\\degree{^\\circ} \\begin{aligned} S&=\\cos A+\\cos B+\\cos C\\\\ &=\\cos A+\\cos C+1/2\\\\ &=\\cos(120\\degree-C)+\\cos C+1/2\\\\ &=-{1\\over2}\\cos C+{\\sqrt3\\over2}\\sin C+\\cos C+{1\\over2}\\\\ &={\\sqrt3\\over2}\\sin C+{1\\over2}\\cos C+{1\\over2}\\\\ &=\\sin C\\cos30\\degree+\\cos C\\sin30\\degree +1/2\\\\ &=\\sin(C+30\\degree)+1/2 \\end{aligned} \\] \u56e0\u4e3a \\(0^\\circ<A,B,C<90^\\circ\\) \uff0c \\[ \\def\\degree{^\\circ} \\begin{cases} 0\\degree<&C&<90\\degree\\\\ 0\\degree<&B&<90\\degree \\end{cases} \\Longleftrightarrow \\begin{cases} 0\\degree<&C&<90\\degree\\\\ 0\\degree<&120-C&<90\\degree \\end{cases} \\] \u5373\uff0c \\(30^\\circ<C<90^\\circ\\) \uff0c \\(60^\\circ<C+30^\\circ<120^\\circ\\) \u3002 \u753b\u51fa\u5355\u4f4d\u5706\uff0c\u6613\u5f97 \\(\\sin(C+30\\degree)\\in(\\sqrt3/2,1]\\) \uff0c\u5373\uff0c \\[ \\cos A+\\cos B+\\cos C\\in\\left({\\sqrt3+1\\over2},{3\\over2}\\right] \\] \u4f8b\u9898\u56db \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(a+b=11\\) \uff0c \\[ \\cos A={1\\over8},\\,\\cos B={9\\over16} \\] \u6c42 \\(a,b\\) \u3002 \u8003\u8651\u4f59\u5f26\u8f6c\u6b63\u5f26\uff0c\u56e0\u4e3a\u662f\u4e09\u89d2\u5f62\u7684\u89d2\uff0c\u56e0\u6b64\u6b63\u5f26\u503c\u975e\u8d1f\uff0c \\[ \\sin A=\\sqrt{1-\\cos^2 A}=\\sqrt{63\\over64}={3\\sqrt7\\over8}\\\\ \\sin B=\\sqrt{1-\\cos^2 B}=\\sqrt{175\\over256}={5\\sqrt7\\over16} \\] \\[ {a\\over b}={\\sin A\\over\\sin B}={6\\over5} \\] \u56e0\u6b64 \\(a=6,\\,b=5\\) \u3002 \u4f8b\u9898\u4e94 \u00b6 \\[ {\\sin A\\over\\sin B-\\sin C}={b+c\\over b-a} \\] \u6c42 \\(\\cos C\\) \u3002 \u8003\u8651 \\(\\cos C\\) \u53ef\u4ee5\u600e\u4e48\u8868\u793a\uff0c\u53ef\u4ee5\u901a\u8fc7 \\(\\sin C\\) \u7528\u6bd5\u8fbe\u54e5\u62c9\u65af\u5b9a\u7406\uff0c\u4e5f\u53ef\u4ee5\u4f59\u5f26\u5b9a\u7406\u3002 \u8003\u8651\u5230\u8fd9\u4e2a\u539f\u5f62\u5f0f\u662f\u4e00\u6b21\u9f50\u6b21\uff0c\u56e0\u6b64\u8003\u8651\u89d2\u5316\u53d8\u3002 \\[ {a\\over b-c}={b+c\\over b-a}\\\\ b^2-c^2=ab-a^2\\\\ c^2=a^2+b^2-ab \\] \u56e0\u6b64\uff0c \\[ \\cos C={a^2+b^2-c^2\\over2bc}={1\\over2} \\] \u4f8b\u9898\u516d \u00b6 \u82e5\uff0c \\[ \\begin{cases} \\sin A=3\\sin B\\\\ c=\\sqrt5\\\\ \\cos C=5/6 \\end{cases} \\] \u6c42 \\(a\\) \u3002 \u5c1d\u8bd5\u8003\u8651\u8fd9\u4e09\u4e2a\u4e1c\u897f\u5404\u81ea\u4ec0\u4e48\u7528\u3002 \u6700\u5bb9\u6613\u53d1\u73b0\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u6700\u7b80\u5355\uff0c\u53ef\u4ee5\u6700\u540e\u5e26\u5165\u7528\u3002 \u56e0\u4e3a \\(\\cos\\) \u5173\u4e8e\u4f59\u5f26\u5b9a\u7406\uff0c\u5173\u4e8e\u8fb9\u6570\u591a\uff0c\u56e0\u6b64\u8003\u8651\u540e\u7528\u3002 \u7b2c\u4e00\u4e2a\u5f0f\u5b50\u7ed3\u6784\u5f88\u597d\uff0c\u662f\u4e00\u6b21\u9f50\u6b21\uff0c\u56e0\u6b64\u5e26\u5165\u7b2c\u4e00\u4e2a\u6b63\u5f26\u5b9a\u7406\u3002 \\[ a=3b \\] \u53c8\u56e0\u4e3a\uff0c \\[ \\cos C={a^2+b^2-c^2\\over2ab} \\] \u5e26\u5165\u5373\u53ef\uff0c\u89e3\u5f97 \\(a=3\\) \u3002 \u4f8b\u9898\u4e03 \u00b6 \u82e5\uff0c \\[ \\begin{cases} b\\sin2A=a\\sin B\\\\ c=2b \\end{cases} \\] \u6c42 \\(a/b\\) \u3002 \u8003\u8651\u5230\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u7684\u5f62\u5f0f\u5f88\u7b80\u5355\uff0c\u56e0\u6b64\u7528\u4e8e\u6d88\u5143\u3002 \u7b2c\u4e00\u4e2a\u5f62\u5f0f\u4e2d\uff0c\u51fa\u73b0\u4e86\u4e8c\u500d\u89d2\uff0c\u662f\u4e0d\u597d\u5904\u7406\u7684\uff0c\u56e0\u6b64\u8003\u8651\u6b63\u5f26\u5b9a\u7406\u3002 \\[ \\sin B\\sin2A=\\sin A\\sin B\\\\ \\sin A=\\sin2A\\\\ \\sin A=2\\sin A\\cos A\\\\ \\cos A=1/2 \\] \u8003\u8651\u5230 \\(a/b\\) \u662f\u4e00\u4e2a\u4e00\u6b21\u5176\u6b21\u7684\u6bd4\u4f8b\u5f0f\uff0c\u56e0\u6b64\u4f59\u5f26\u5b9a\u7406\uff0c \\[ \\cos A={b^2+c^2-a^2\\over2bc} \\] \u5e26\u5165\uff0c\u89e3\u5f97 \\(a^2=3b^2\\) \uff0c\u5373 \\(a/b=\\sqrt3\\) \u3002 \u4f8b\u9898\u516b \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ S=a^2-(b-c)^2 \\] \u6c42 \\(\\sin A\\) \u3002 \u8fd9\u4e2a\u5f0f\u5b50\u6ca1\u6709\u5f88\u597d\u7684\u6027\u8d28\uff0c\u8003\u8651\u5c55\u5f00\uff0c \\[ S=a^2-b^2-c^2+2bc \\] \u6ce8\u610f\u5230\u8fd9\u4e2a\u5f62\u5f0f\uff0c\u800c\u4e14\u8fd8\u662f\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u6839\u636e\u4f59\u5f26\u5b9a\u7406\uff0c \\[ a^2=b^2+c^2-2bc\\cos A \\] \u6709\uff0c \\[ S=2bc(1-\\cos A)={1\\over2}bc\\sin A\\\\ \\sin A=4-4\\cos A \\] \u8054\u7acb\u5f97\u65b9\u7a0b\uff0c \\[ (4-4\\cos A)^2+\\cos^2A=1\\\\ 16(1-\\cos A)^2=(1-\\cos A)(1+\\cos A)\\\\ 16-16\\cos A=1+\\cos A\\\\ \\cos A={15\\over17},\\, \\sin A={8\\over17} \\] \u4f8b\u9898\u4e5d \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\sin A=2\\sin B\\cos C\\\\ a^2=b^2+c^2-bc \\] \u6c42\uff0c \\(\\triangle ABC\\) \u5f62\u72b6\u3002 \u4e24\u4e2a\u5f0f\u5b50\u90fd\u5f88\u5178\u578b\uff0c\u7b2c\u4e8c\u4e2a\u597d\u8bf4\uff0c\u5148\u5904\u7406\uff0c \u8054\u7acb\u4e8c\u5f0f\u53ca\u4f59\u5f26\u5b9a\u7406\uff0c \\[ a^2=b^2+c^2-bc\\\\ a^2=b^2+c^2-2bc\\cos A \\] \u5f97\uff0c \\[ \\cos A={1\\over2},\\,A=60^\\circ \\] \u7b2c\u4e00\u4e2a\u5f0f\u5b50\uff0c\u53ef\u4ee5\u4e0d\u5e26\u5165 \\(A\\) \uff0c\u5c1d\u8bd5\u901a\u8fc7\u4e09\u89d2\u51fd\u6570\u7684\u53d8\u6362\uff0c \\[ \\begin{aligned} \\sin A&=\\sin(\\pi-B-C)=\\sin(B+C)\\\\ &=\\sin B\\cos C+\\cos B\\sin C \\end{aligned} \\] \u8054\u7acb\u4e0b\u5f0f\u53ca\u4e00\u5f0f\uff0c \\[ \\sin B\\cos C+\\cos B\\sin C=2\\sin B\\cos C\\\\ \\sin B\\cos C=\\cos B\\sin C\\\\ \\tan B=\\tan C \\] \u56e0\u4e3a \\(B,C\\in(0,\\pi)\\) \uff0c\u6b63\u5207\u51fd\u6570\u5728\u6b64\u8303\u56f4\u5185\u552f\u4e00\uff0c\u5219 \\[ B=C=A=60^\\circ \\] \u5373 \\(\\triangle ABC\\) \u662f\u6b63\u4e09\u89d2\u5f62\u3002 \u4f8b\u9898\u5341 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\cos(2B+C)+\\cos C>0 \\] \u5224\u65ad\u4e09\u89d2\u5f62\u662f\u9510\u89d2\u3001\u76f4\u89d2\u3001\u949d\u89d2\u4e09\u89d2\u5f62\u3002 \u5bb9\u6613\u53d1\u73b0\uff0c \\(\\cos\\) \u91cc\u9762\u7684\u89d2\u6709\u5f88\u597d\u7684\u6027\u8d28\uff0c\u8003\u8651\u548c\u5dee\u5316\u79ef\uff0c \\[ \\begin{aligned} &\\cos(2B+C)+\\cos C\\\\ =\\;&2\\cos(B+C)\\cos B\\\\ =\\;&-2\\cos A\\cos B>0 \\end{aligned} \\] \u56e0\u6b64\uff0c \\[ \\cos A\\cos B<0 \\] \u5373 \\(A,B\\) \u4e2d\u6709\u4e00\u4e2a\u949d\u89d2\uff0c\u5373 \\(\\triangle ABC\\) \u4e3a\u949d\u89d2\u4e09\u89d2\u5f62\u3002 \u4f8b\u9898\u5341\u4e00 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c\u4e09\u8fb9\u957f\u5206\u522b\u4e3a \\(a,a+2,a+4\\) \uff0c\u6700\u5c0f\u89d2\u4f59\u5f26\u503c\u4e3a \\(13/14\\) \u3002 \u6c42\u8be5\u4e09\u89d2\u5f62\u7684\u9762\u79ef \u56e0\u4e3a\u5927\u8fb9\u5bf9\u5927\u89d2\uff0c\u56e0\u6b64\u6700\u5c0f\u89d2\u662f \\(a\\) \u5bf9\u7684\uff0c \\[ \\cos A={(a+2)^2+(a+4)^2-a^2\\over2(a+2)(a+4)}={13\\over14} \\] \u89e3\u5f97\uff0c \\(a=3\\) \uff0c\u4e8e\u662f\u7528\u6d77\u4f26\u516c\u5f0f\uff0c \\[ p={3+5+7\\over2}={15\\over2} \\] \\[ S=\\sqrt{{15\\over2}\\cdot{9\\over2}\\cdot{5\\over2}\\cdot{1\\over2}}={15\\sqrt3\\over4} \\] \u4f8b\u9898\u5341\u4e8c \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(\\angle A=120^\\circ\\) \uff0c \\(BC=6\\) \u3002 \u6c42\uff1a\u5176\u9762\u79ef\u6700\u5927\u503c\u3002 \u8003\u8651\u9762\u79ef\u53ef\u4ee5\u600e\u4e48\u8868\u793a\u3002 Solution 1: \\[ S={1\\over2}bc\\sin A={\\sqrt3\\over4}bc \\] \u6839\u636e\u4f59\u5f26\u5b9a\u7406\uff0c \\[ 36=a^2=b^2+c^2-2bc\\cos A=b^2+c^2+bc\\ge3bc \\] \u5373\uff0c \\[ bc\\le12,\\,S\\le3\\sqrt3 \\] Solution 2\uff1a \u8003\u8651\u5230\u9876\u89d2\u4e0d\u53d8\uff0c\u5219\u53ef\u4ee5\u56fa\u5b9a\u5e95\u8fb9\uff0c\u4f7f\u9876\u70b9\u79fb\u52a8\u3002 \u6613\u77e5\u5176\u8f68\u8ff9\u4e3a\u4e00\u4e2a\u5706\u5f27\uff0c\u5219\u9762\u79ef\u6700\u5927\u5373\u5e95\u8fb9\u9ad8\u7ebf\u6700\u5927\u3002 \u9ad8\u7ebf\u6700\u5927\u5373\u8be5\u4e09\u89d2\u5f62\u4e3a\u7b49\u8170\u4e09\u89d2\u5f62\uff0c\u505a\u51fa\u9ad8\u7ebf\uff0c \\[ S={1\\over2}ah=3\\sqrt3 \\] \u4f8b\u9898\u5341\u4e09 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c\u82e5 \\[ a-b=c(\\cos B-\\cos A) \\] \u5224\u65ad\u5176\u5f62\u72b6\u3002 \u8003\u8651\u5230\u4f59\u5f26\u5b9a\u7406\u5c55\u5f00\u540e\u662f\u4e09\u6b21\u5f0f\uff0c\u6709\u70b9\u590d\u6742\uff0c\u56e0\u6b64\u6b63\u5f26\u5b9a\u7406\u3002 \\[ \\sin A-\\sin B=\\sin C\\cos B-\\sin C\\cos A \\] \u8003\u8651\u51d1\u9879\uff0c\u53f3\u8fb9\u7684\u4e24\u9879\u5f88\u50cf\u6b63\u5f26\u7684\u548c\u89d2\u516c\u5f0f\uff0c\u4e8e\u662f\uff0c \\[ \\begin{aligned} &\\sin(B+C)-\\sin(A+C)\\\\ =\\;&\\sin B\\cos C+\\sin C\\cos B-\\sin A\\cos C-\\sin C\\cos A\\\\ =\\;&\\sin C\\cos B-\\sin C\\cos A \\end{aligned} \\] \u5316\u7b80\uff0c \\[ (\\sin B-\\sin A)\\cos C=0 \\] \u5373 \\(\\sin A=\\sin B\\) \u6216 \\(\\cos C=0\\) \uff0c \u5373 \\(\\triangle ABC\\) \u4e3a\u7b49\u8170\u4e09\u89d2\u5f62\u6216\u76f4\u89d2\u4e09\u89d2\u5f62\u3002 \u4f8b\u9898\u5341\u56db \u00b6 \u82e5 \\(\\triangle ABC\\) \u4e2d\uff0c \\(\\angle C\\) \u4e3a\u949d\u89d2\uff0c\u4e14\u5176\u9762\u79ef\uff0c \\[ S={\\sqrt3\\over4}(a^2+c^2-b^2) \\] \u6c42 \\(\\angle B\\) \u3002 \u8003\u8651\u5230 \\(a^2+c^2-b^2\\) \u662f\u7ecf\u5178\u6389\u7259\u7684\u5f62\u5f0f\uff0c \\[ \\cos B={a^2+c^2-b^2\\over2ac} \\] \u4e8e\u662f\uff0c \\[ S={\\sqrt3\\over4}\\cdot2ac\\cos B={\\sqrt3\\over2}ac\\cos B \\] \u8003\u8651\u5f88\u7ecf\u5178\u7684\u9762\u79ef\u516c\u5f0f\uff0c \\[ S={1\\over2}ac\\sin B={\\sqrt3\\over2}ac\\cos B\\\\ \\sin B=\\sqrt3\\cos B\\\\ \\tan B=\\sqrt3,\\,B=60^\\circ \\] \u4f8b\u9898\u5341\u4e94 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\sin^2A-\\sin^2B-\\sin^2C=\\sin B\\sin C \\] \u6c42 \\(A\\) . \u82e5 \\(BC=3\\) \uff0c\u6c42\u5176\u5468\u957f\u6700\u5927\u503c\u3002 \u56e0\u4e3a\u662f\u6b63\u5f26\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u8003\u8651\u6b63\u5f26\u5b9a\u7406\uff0c \\[ a^2=b^2+c^2+bc \\] \u4e8e\u662f \\(\\angle A=120^\\circ\\) \u3002 \u8003\u8651\u5468\u957f\u6700\u5927\uff0c\u5373 \\(b+c\\) \u6700\u5927\uff0c \\[ a^2=9=b^2+c^2+bc\\ge3bc\\\\ bc\\le3 \\] \u8003\u8651\u5468\u957f\u5982\u4f55\u5efa\u7acb\u8054\u7cfb \\[ b+c=\\sqrt{b^2+c^2+2bc}=\\sqrt{9+bc}\\le2\\sqrt3 \\] \u5373\u5468\u957f\uff0c \\[ a+b+c\\le2\\sqrt3+3 \\] \u4f8b\u9898\u5341\u516d \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\sin A+2\\sin B\\cos C=0\\\\ c=\\sqrt3b \\] \u6c42 \\(\\tan A\\) \u3002 \u8003\u8651\u5230\u7b2c\u4e8c\u4e2a\u5f88\u9002\u5408\u6d88\u5143 \\(c\\) \uff0c\u4e8e\u662f\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u770b\u6210\u4e00\u6b21\u9f50\u6b21\uff0c \\[ a+2b\\cos C=0\\\\ \\cos C=-{a\\over2b}={a^2+b^2-c^2\\over2bc}={a^2-2b^2\\over2bc} \\] \u56e0\u6b64\uff0c \\[ a^2=b^2\\\\ a=b \\] \u56e0\u4e3a \\(c=\\sqrt3b\\) \uff0c\u8fd9\u662f\u4e00\u4e2a \\(30^\\circ,30^\\circ,120^\\circ\\) \u7684\u7b49\u8170\u4e09\u89d2\u5f62\uff0c \\[ \\tan A=\\tan30^\\circ={\\sqrt3\\over3} \\] \u4f8b\u9898\u5341\u4e03 \u00b6 \u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ a^2+b^2=2022c^2 \\] \u6c42\uff0c \\[ {2\\tan A\\tan B\\over\\tan C(\\tan A+\\tan B)} \\] \u8003\u8651\u5230\u6ca1\u6709\u4ec0\u4e48\u597d\u73a9\u7684\u7ed3\u6784\uff0c\u56e0\u6b64\u5c55\u5f00\u6b63\u5207\u3002 \\[ \\begin{aligned} S&={2\\tan A\\tan B\\over\\tan C(\\tan A+\\tan B)}\\\\ &={2\\sin A\\sin B\\over\\sin C/\\cos C\\cdot(\\sin A\\cos B+\\cos A+\\sin B)}\\\\ &={2\\sin A\\sin B\\cos C\\over\\sin^2C} \\end{aligned} \\] \u8003\u8651\u5230\u4e0a\u4e0b\u6b63\u5f26\u6784\u6210\u4e8c\u6b21\u9f50\u6b21\uff0c\u6b63\u5f26\u5b9a\u7406\uff0c \\[ \\begin{aligned} S&={2\\sin A\\sin B\\cos C\\over\\sin^2C}\\\\ &={2ab\\cos C\\over c^2} \\end{aligned} \\] \u6ce8\u610f\u5230 \\(2ab\\) \u548c \\(\\cos C\\) \u7684\u4f59\u5f26\u5b9a\u7406\u7684\u5206\u6bcd\u7c7b\u4f3c\uff0c \\[ \\cos C={a^2+b^2-c^2\\over2ab} \\] \\[ \\begin{aligned} S&={a^2+b^2-c^2\\over c^2}={a^2+b^2\\over c^2}-1\\\\ &=2022-1=2021 \\end{aligned} \\] \u4f8b\u9898\u5341\u516b \u00b6 \u5728\u9510\u89d2\u4e09\u89d2\u5f62 \\(ABC\\) \u4e2d\uff0c \\(a^2-b^2=bc\\) \u3002 \u6c42\u8bc1\uff1a \\(A=2B\\) \u3002 \u7ecf\u5178\u9898\uff0c\u56e0\u4e3a\u89d2\u4e0d\u597d\u8868\u793a\uff0c\u4e0a\u5f0f\u53c8\u662f\u8fb9\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u8003\u8651\uff0c \\[ \\cos A={b^2+c^2-a^2\\over2bc}={c^2-bc\\over2bc}={c-b\\over2b}\\\\ \\] \\[ \\begin{aligned} \\cos 2B&=2\\cos^2B-1=2\\left({a^2+c^2-b^2\\over2ac}\\right)^2-1\\\\ &=2\\left({c+b\\over2a}\\right)^2-1={2c^2+2b^2+4bc-4a^2\\over4a^2}\\\\ &={2c^2-2b^2\\over4b^2+4bc}={2(c+b)(c-b)\\over4b(b+c)}={c-b\\over2b} \\end{aligned} \\] \u4e8e\u662f\uff0c \\[ (\\cos A=\\cos2B)\\Longrightarrow(A=2B) \\] \u4f8b\u9898\uff1aCF995C \u00b6 \u9898\u76ee\uff1a CF995C Leaving the Bar \u9898\u76ee\u7b80\u8ff0\uff1a\u7ed9\u5b9a \\(n\\) \u4e2a\u5411\u91cf\uff0c\u4f60\u5c06\u4e00\u4e9b\u5411\u91cf\u53d6\u53cd\uff0c\u8bd5\u6c42\u51fa\u4e00\u79cd\u53d6\u53cd\u65b9\u6cd5\uff0c\u4f7f\u5f97\u8fd9 \\(n\\) \u4e2a\u5411\u91cf\u4e4b\u548c\u7684\u6a21\u5c0f\u4e8e \\(1.5\\times10^6\\) \u3002 \u6b63\u89e3\u601d\u8def\uff1a\u8003\u8651\u4efb\u610f\u4e09\u4e2a\u5411\u91cf \\(\\vec v_1,\\vec v_2,\\vec v_3\\) \u53ca\u5176\u53d6\u53cd\u7684\u5411\u91cf \\(-\\vec v_1,-\\vec v_2,-\\vec v_3\\) \u3002\u6b64\u65f6\u4e00\u5171\u6709\u4e86 \\(6\\) \u4e2a\u5411\u91cf\u3002\u6839\u636e\u62bd\u5c49\u539f\u7406\uff0c\u8fd9\u516d\u4e2a\u5411\u91cf\u4e00\u5b9a\u5b58\u5728\u4e24\u4e2a\u5411\u91cf\uff0c\u5176\u5939\u89d2\u5c0f\u4e8e\u7b49\u4e8e \\(60^\\circ\\) \u3002\u6839\u636e\u4f59\u5f26\u5b9a\u7406 \\(a^2=b^2+c^2-2bc\\cos\\theta\\) \u3002\u5f53 \\(\\theta\\le60^\\circ\\) \uff0c \\(2\\cos\\theta\\ge1\\) \uff0c\u5219 \\(2bc\\cos\\theta\\ge bc\\) \u3002\u8bb0 \\(M=\\max\\{b,c\\}\\) \uff0c\u6709 \\(a^2\\le b^2+c^2-ab\\le 2M^2-M^2=M^2\\) \u3002\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u5411\u91cf\u76f8\u52a0\u540e\u5f97\u5230\u7684\u5411\u91cf\u7684\u6a21\u4e00\u5b9a\u4e0d\u8d85\u8fc7\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u6a21\u7684\u8f83\u5927\u503c\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5408\u5e76\u4efb\u610f\u4e09\u4e2a\u5411\u91cf\uff0c\u6700\u7ec8\u5f97\u5230\u4e24\u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(10^6\\) \u7684\u5411\u91cf\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u8fd9\u4e24\u4e2a\u5411\u91cf\u5982\u4f55\u5b9a\u5411\u53bb\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u8fd9\u4e24\u4e2a\u5411\u91cf\u5782\u76f4\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u5408\u5e76\u7684\u7ed3\u679c\u6700\u5927\uff0c\u4e14\u4e00\u5b9a\u4e0d\u8d85\u8fc7 \\(\\sqrt 2\\times10^6<1.5\\times10^6\\) \u3002 \u7136\u800c\u4f5c\u8005\u4e0d\u4f1a\u8fd9\u4e2a\u601d\u8def\u3002\u4e8e\u662f\u91c7\u53d6\u4e86\u4e00\u4e2a\u968f\u673a\u5316\u7684\u65b9\u6cd5\u3002\u8003\u8651\u968f\u673a\u91cd\u6392\u8fd9\u4e9b\u5411\u91cf\u3002\u7136\u540e\u7528\uff08\u5047\u7684\uff09\u8d2a\u5fc3\u601d\u8def\u6765\u5408\u5e76\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5411\u91cf\u53ea\u8003\u8651\u5408\u5e76\u4e0a\u5b83\u7684\u5f53\u524d\u7684\u6700\u4f18\u60c5\u51b5\u3002\u90a3\u4e48\u8fd9\u4e2a\u601d\u8def\u53ef\u80fd\uff08\u5f88\u5bb9\u6613\uff09\u88ab Hack\u3002\u4e8e\u662f\u6211\u4eec\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u77e5\u9053\u627e\u5230\u4e00\u7ec4\u89e3\u5373\u53ef\u3002\u4ee3\u7801\u5982\u4e0b\uff1a #include <bits/stdc++.h> using namespace std; #define range(x) x.begin(), x.end() struct emm { int id, x, y; }; mt19937 rd(time(0) * clock()); int n; vector<emm> a; vector<int> ans; double dis(int x, int y) { return sqrt(1.0 * x * x + 1.0 * y * y); } double solev() { shuffle(range(a), rd); int x = 0, y = 0; for (auto &[id, i, j] : a) { ans[id] = dis(x + i, y + j) < dis(x - i, y - j) ? 1 : -1; x += i * ans[id], y += j * ans[id]; } return dis(x, y); } void print() { for (int i : ans) cout << i << \" \"; cout << endl; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; a.resize(n), ans.resize(n); for (int i = 0; i < n; ++i) cin >> a[i].x >> a[i].y, a[i].id = i; while (1) if (solev() <= 1.5e6) print(), exit(0); return 0; } Reference \u00b6 [1] https://oi-wiki.org/math/linear-algebra/vector/ [2] https://oi-wiki.org/math/linear-algebra/product/","title":"\u5e73\u9762\u5411\u91cf"},{"location":"math/linear-algebra/vector/#_1","text":"","title":"\u5e73\u9762\u5411\u91cf"},{"location":"math/linear-algebra/vector/#_2","text":"\u5e26\u6709\u65b9\u5411\u7684\u7ebf\u6bb5\u79f0\u4e3a\u6709\u5411\u7ebf\u6bb5\u3002\u6709\u5411\u7ebf\u6bb5\u7684\u4e09\u8981\u7d20\u4e3a\uff1a\u8d77\u70b9\u3001\u65b9\u5411\u3001\u957f\u5ea6\u3002 \u6839\u636e\u521d\u7b49\u51e0\u4f55\uff0c\u90a3\u4e48\u53ea\u8981\u77e5\u9053\u8fd9\u4e09\u8981\u7d20\uff0c\u8fd9\u4e2a\u6709\u5411\u7ebf\u6bb5\u5c31\u5df2\u7ecf\u88ab\u786e\u5b9a\u4e86\uff0c\u4e5f\u5c31\u662f\u7ec8\u70b9\u53ef\u77e5\u3002 \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u601d\u8003\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u77e5\u9053\u8d77\u70b9\u3001\u91cd\u70b9\uff0c\u5c31\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u4e2a\u6709\u5411\u7ebf\u6bb5\u3002 \u4e00\u4e2a\u6709\u5411\u7ebf\u6bb5\u7531\u5176\u4e24\u4e2a\u7aef\u70b9\u8868\u793a\uff0c\u8bb0\u4e3a \\(\\overrightarrow{AB}\\) \u6216 \\(\\bm{a}\\) \uff0c\u540c\u65f6\u6211\u4eec\u8bb0\u5176\u957f\u5ea6\uff0c \u79f0\u4e3a\u5411\u91cf\u7684\u6a21 \u3002","title":"\u6709\u5411\u7ebf\u6bb5"},{"location":"math/linear-algebra/vector/#_3","text":"\u5411\u91cf\uff08vector\uff09\u53c8\u79f0\u6b27\u51e0\u91cc\u5f97\u5411\u91cf\uff08Euclidean vector\uff09\u3002 \u76ee\u524d\u6ca1\u6709\u51c6\u786e\u800c\u7edf\u4e00\u7684\u4e2d\u6587\u7ffb\u8bd1\uff0c\u5728\u7269\u7406\u3001\u5de5\u7a0b\u4e2d\u901a\u79f0\u77e2\u91cf\u3002 \u4e00\u822c\u6307\u4e00\u4e2a\u540c\u65f6\u5177\u6709\u5927\u5c0f\u548c\u65b9\u5411\uff0c\u4e14\u6ee1\u8db3\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\u7684\u51e0\u4f55\u5bf9\u8c61\u3002 \u5411\u91cf\u662f\u6570\u5b66\u3001\u7269\u7406\u5b66\u548c\u5de5\u7a0b\u79d1\u5b66\u7b49\u591a\u4e2a\u81ea\u7136\u79d1\u5b66\u4e2d\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u4e0e\u5411\u91cf\u76f8\u5bf9\u7684\u6982\u5ff5\u79f0\u6807\u91cf\u3001\u7eaf\u91cf\u3001\u6570\u91cf\uff0c\u5373\uff1a \u53ea\u6709\u5927\u5c0f\u3001\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u6ca1\u6709\u65b9\u5411\uff08\u7535\u6d41\u662f\u7279\u4f8b\uff09\u3001\u4e0d\u6ee1\u8db3\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\u7684\u91cf\u3002 \u56fa\u5b9a\u5411\u91cf \uff1a\u5c24\u5176\u5728\u7269\u7406\u5b66\u9886\u57df\uff0c\u6709\u4e9b\u5411\u91cf\u4f1a\u4e0e\u8d77\u70b9\u6709\u5173\uff08\u529b\u4e0e\u5176\u7684\u4f5c\u7528\u70b9\u6709\u5173\uff0c\u8d28\u70b9\u8fd0\u52a8\u901f\u5ea6\u4e0e\u8be5\u8d28\u70b9\u7684\u4f4d\u7f6e\u6709\u5173\uff09\uff0c\u56e0\u800c\u5047\u8bbe\u5411\u91cf\u6709\u786e\u5b9a\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u5f53\u8d77\u70b9\u548c\u7ec8\u70b9\u6539\u53d8\u540e\uff0c\u6784\u6210\u7684\u5411\u91cf\u5c31\u4e0d\u518d\u662f\u539f\u6765\u7684\u5411\u91cf\u3002\u8fd9\u6837\u7684\u5411\u91cf\u4e5f\u88ab\u79f0\u4e3a\u56fa\u5b9a\u5411\u91cf\u3002 \u81ea\u7531\u5411\u91cf \uff1a\u5411\u91cf\u7684\u4f4d\u7f6e\u53ef\u81ea\u7531\u79fb\u52a8\u3002\u5728\u53e6\u4e00\u4e9b\u65f6\u5019\uff0c\u7531\u4e8e\u5411\u91cf\u7684\u5171\u6027\u90fd\u5177\u6709\u5927\u5c0f\u548c\u65b9\u5411\uff0c\u4f1a\u8ba4\u4e3a\u5411\u91cf\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5e76\u4e0d\u90a3\u4e48\u91cd\u8981\u3002\u4e24\u4e2a\u8d77\u70b9\u4e0d\u4e00\u6837\u7684\u5411\u91cf\uff0c\u53ea\u8981\u5927\u5c0f\u76f8\u7b49\uff0c\u65b9\u5411\u76f8\u540c\uff0c\u5c31\u53ef\u4ee5\u79f0\u4e3a\u662f\u540c\u4e00\u4e2a\u5411\u91cf\u3002\u8fd9\u6837\u7684\u5411\u91cf\u88ab\u79f0\u4e3a\u81ea\u7531\u5411\u91cf\u3002\u5728\u6570\u5b66\u4e2d\uff0c\u4e00\u822c\u53ea\u7814\u7a76\u81ea\u7531\u5411\u91cf\uff0c\u5e76\u4e14\u6570\u5b66\u4e2d\u6240\u6307\u7684\u5411\u91cf\u5c31\u662f\u6307\u81ea\u7531\u5411\u91cf\u3002\u4e5f\u5c31\u662f\u53ea\u8981\u5927\u5c0f\u4ee5\u53ca\u65b9\u5411\u4e00\u6837\uff0c\u5373\u53ef\u89c6\u4e3a\u540c\u4e00\u5411\u91cf\uff0c\u4e0e\u5411\u91cf\u7684\u8d77\u59cb\u70b9\u5e76\u65e0\u5173\u7cfb\u3002 \u7279\u6b8a\u7684\u5411\u91cf\uff1a\u9047\u5230\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\uff08\u5982\u8868\u793a\u78c1\u573a\u7684\u78c1\u611f\u5e94\u5f3a\u5ea6\uff09\u9700\u8981\u8868\u793a\u4e0e\u8bb0\u8f7d\u7eb8\u9762\u5782\u76f4\u7684\u5411\u91cf\uff0c\u5219\u4f1a\u4f7f\u7528\u5706\u5708\u4e2d\u6253\u53c9\u6216\u6253\u70b9\u7684\u65b9\u5f0f\u6765\u8868\u793a\uff08\u5982\u53f3\u56fe\uff09\u3002\u5706\u5708\u4e2d\u5e26\u70b9\u7684\u8bb0\u53f7\uff08\u2299\uff09\u8868\u793a\u7531\u7eb8\u4e0b\u65b9\u6307\u5411\u7eb8\u4e0a\u65b9\u7684\u5411\u91cf\uff0c\u800c\u5706\u5708\u4e2d\u5e26\u53c9\u7684\u8bb0\u53f7\uff08\u2297\uff09\u5219\u8868\u793a\u7531\u7eb8\u7684\u4e0a\u65b9\u6307\u5411\u7eb8\u4e0b\u65b9\u7684\u5411\u91cf\u3002\u7531\u4e8e\u8fd9\u79cd\u8bb0\u53f7\u4e0d\u8868\u793a\u5411\u91cf\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u5fc5\u987b\u65f6\u9700\u8981\u5728\u65c1\u8fb9\u6216\u5176\u5b83\u5730\u65b9\u53e6\u5916\u6ce8\u660e\u3002 \u4e0b\u6587\u4e3a\u9ad8\u4e2d\u6570\u5b66\u4e2d\u5b9a\u4e49\u7684\u5411\u91cf\u3002 \u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u4e0b\u6587\u7684\u5411\u91cf\u5747\u6307 \u81ea\u7531\u5411\u91cf \uff0c\u5927\u90e8\u5206\u90fd\u662f \u5e73\u9762\u5411\u91cf \u3002 \u65e2\u6709\u5927\u5c0f\u53c8\u6709\u65b9\u5411\u7684\u91cf\u79f0\u4e3a\u5411\u91cf\u3002\u8fd9\u4e2a\u5b9a\u4e49\u5f88\u62bd\u8c61\uff0c\u6211\u4eec\u9010\u4e2a\u5206\u89e3\u3002 \u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u6709\u5411\u7ebf\u6bb5\uff0c\u4f46\u662f\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5927\u90e8\u5206\u65f6\u5019\uff0c\u5411\u91cf\u7684\u4f4d\u7f6e\u5e76\u4e0d\u91cd\u8981\u3002 \u4e8e\u662f\u6211\u4eec\u5c06\u6709\u5411\u7ebf\u6bb5\u7684\u8d77\u70b9\u4e0d\u56fa\u5b9a\uff0c\u5c06\u4e00\u4e2a\u6709\u5411\u7ebf\u6bb5\u62bd\u8c61\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u968f\u610f\u79fb\u52a8\u7684\u91cf\u3002 \u6b64\u65f6\uff0c\u4f60\u4e5f\u8bb8\u53d1\u73b0\u4e86\u3002\u6709\u5411\u7ebf\u6bb5\u5176\u5b9e\u53ef\u4ee5\u518d\u6b21\u8868\u793a\u4e3a\uff0c\u8d77\u70b9\u548c\u4e00\u4e2a\u5411\u91cf\u3002 \u6211\u4eec\u901a\u5e38\u628a\u5411\u91cf\u8868\u793a\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5185\uff0c\u6ca1\u6709\u8bf4\u660e\u7684\u60c5\u51b5\u4e0b\uff0c\u8d77\u70b9\u901a\u5e38\u6807\u5728\u5750\u6807\u8f74\u539f\u70b9\u3002 \u6211\u4eec\u53d6\u8fd9\u4e2a\u5411\u91cf\u5728\u6a2a\u3001\u7eb5\u5750\u6807\u4e0a\u5ef6\u4f38\u7684\u957f\u5ea6\u4f5c\u4e3a\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u5411\u91cf\u8bb0\u4e3a \\((a,b)\\) \u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u51fa\u4e86\u5411\u91cf\u7684\u51e0\u4f55\u610f\u4e49\uff0c\u5373\u5411\u91cf \\((a,b)\\) \u8868\u793a\u5411\u53f3\u8d70 \\(a\\) \u3001\u5411\u4e0a\u8d70 \\(b\\) \u7684\u4f4d\u79fb\u3002 \u5df2\u77e5\u4e24\u70b9 \\(A(a,b),B(c,d)\\) \uff0c\u6613\u8bc1 \\(\\overrightarrow{AB}=(c-a,d-b)\\) \u3002","title":"\u5411\u91cf"},{"location":"math/linear-algebra/vector/#_4","text":"\u5bf9\u4e8e\u4e00\u4e2a\u5411\u91cf \\(\\vec a\\) \uff0c\u6709\u5411\u7ebf\u6bb5 \\(\\vec a\\) \u7684\u957f\u5ea6\u79f0\u4e3a\u5411\u91cf\u7684\u6a21\uff0c\u5373\u4e3a\u8fd9\u4e2a\u5411\u91cf\u7684\u5927\u5c0f\u3002 \u7b26\u53f7\u8868\u793a\u4e3a \\(|\\bm a|\\) \u6216 \\(|\\overrightarrow{AB}|\\) \uff0c\u6839\u636e\u52fe\u80a1\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053 \\(|\\vec a|=|(x,y)|=\\sqrt{x^2+y^2}\\) \u3002","title":"\u5411\u91cf\u7684\u6a21"},{"location":"math/linear-algebra/vector/#_5","text":"\u96f6\u5411\u91cf \uff1a\u6a21\u4e3a \\(0\\) \u7684\u5411\u91cf\uff0c\u96f6\u5411\u91cf\u7684\u65b9\u5411\u4efb\u610f\uff08\u4e0d\u8fc7\u5176\u5b9e\u662f\u65e0\u610f\u4e49\uff09\u3002\u4e00\u822c\u8bb0\u4e3a\uff1a \\(\\vec 0\\) \u3002 \u5355\u4f4d\u5411\u91cf \uff1a\u6a21\u4e3a \\(1\\) \u7684\u5411\u91cf\u79f0\u4e3a\u5355\u4f4d\u5411\u91cf\u3002\u4e00\u822c\u8bb0\u4e3a \\(\\bm e\\) \uff0c\u6700\u5e38\u89c1\u7684\u5355\u4f4d\u5411\u91cf\u5c31\u662f\u57fa\u5411\u91cf\u3002 \u57fa\u5411\u91cf \uff1a \\(\\bm i=(1,0)\\) \u8868\u793a \\(x\\) \u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\uff0c \\(\\bm j=(0,1)\\) \u8868\u793a \\(y\\) \u65b9\u5411\u7684\u5355\u4f4d\u5411\u91cf\u3002 \u5e73\u884c\u5411\u91cf \uff1a\u65b9\u5411\u76f8\u540c\u6216\u76f8\u53cd\u7684\u4e24\u4e2a\u975e\u96f6\u5411\u91cf\uff0c\u89c4\u5b9a\u96f6\u5411\u91cf\u4e0e\u4efb\u4f55\u5411\u91cf\u5e73\u884c\u3002\u8bb0\u4f5c\uff1a \\(\\bm x\\parallel\\bm y\\) \u3002 \u5171\u7ebf\u5411\u91cf \uff1a\u4efb\u4e00\u7ec4\u5e73\u884c\u5411\u91cf\u90fd\u53ef\u4ee5\u5e73\u79fb\u5230\u540c\u4e00\u76f4\u7ebf\u4e0a\uff0c\u6240\u4ee5\u5e73\u884c\u5411\u91cf\u53c8\u53eb\u5171\u7ebf\u5411\u91cf\u3002 \u76f8\u7b49\u5411\u91cf \uff1a\u6a21\u76f8\u7b49\u4e14\u65b9\u5411\u76f8\u540c\u7684\u5411\u91cf\u3002 \u76f8\u53cd\u5411\u91cf \uff1a\u6a21\u76f8\u7b49\u4e14\u65b9\u5411\u76f8\u53cd\u7684\u5411\u91cf\u3002","title":"\u7279\u6b8a\u7684\u5411\u91cf"},{"location":"math/linear-algebra/vector/#_6","text":"","title":"\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97"},{"location":"math/linear-algebra/vector/#_7","text":"\u6211\u4eec\u89c4\u5b9a\u5b9e\u6570 \\(\\lambda\\) \u4e0e\u5411\u91cf \\(\\bm a\\) \u7684\u79ef\u4e3a\u4e00\u4e2a\u5411\u91cf\uff0c\u79f0\u4e3a\u5411\u91cf\u7684\u6570\u4e58\u8fd0\u7b97\uff0c\u8bb0\u4f5c \\(\\lambda\\vec a\\) \u3002 \u6211\u4eec\u5b9a\u4e49 \\(\\lambda\\bm a=\\lambda(x,y)=(\\lambda x,\\lambda y)\\) \u3002\u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u5411\u91cf\u6570\u4e58\u5e38\u7528\u7684\u7ed3\u8bba\uff1a \\(|\\lambda\\bm a|=|\\lambda||\\bm a|\\) \uff1b \u5f53 \\(\\lambda >0\\) \u65f6\uff0c \\(\\lambda\\bm a\\) \u4e0e \\(\\bm a\\) \u540c\u5411\uff1b \u5f53 \\(\\lambda =0\\) \u65f6\uff0c \\(\\lambda \\bm a=\\vec 0\\) \uff1b \u5f53 \\(\\lambda<0\\) \u65f6\uff0c \\(\\lambda \\bm a\\) \u4e0e \\(\\bm a\\) \u65b9\u5411\u76f8\u53cd\u3002 \u6839\u636e\u6570\u4e58\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u5f97\u51fa\u5411\u91cf\u7684\u6570\u4e58\u6ee1\u8db3\u4ea4\u6362\u5f8b\u3001\u7ed3\u5408\u5f8b\u3001\u5206\u914d\u5f8b\u7b49\uff0c\u5373\uff0c \\[ \\lambda(\\mu\\bm a)=(\\lambda\\mu)\\bm a\\\\ \\lambda(\\bm a+\\bm b)=\\lambda\\bm a+\\lambda\\bm b\\\\ (\\lambda+\\mu)\\bm a=\\lambda\\bm a+\\mu\\bm a\\\\ (-\\lambda)\\bm a=-(\\lambda\\bm a)=\\lambda(-\\bm a) \\]","title":"\u5411\u91cf\u6570\u4e58"},{"location":"math/linear-algebra/vector/#_8","text":"\u6ce8\u610f\uff0c\u5411\u91cf\u7684\u6570\u4e58\u672c\u8d28\u4e0a\u4e5f\u5c5e\u4e8e\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\uff0c\u4e0d\u8fc7\u6211\u628a\u4ed6\u4eec\u5206\u5f00\uff0c\u65b9\u4fbf\u7406\u89e3\u3002 \u4e0b\u9762\u8ba8\u8bba\u5411\u91cf\u7684\u52a0\u6cd5\uff0c\u7c7b\u6bd4\u7684\uff0c\u5411\u91cf\u7684\u51cf\u6cd5\u53ef\u4ee5\u4ece\u516c\u5f0f\u5165\u624b\u7406\u89e3\u3002 \u7c7b\u6bd4\u7269\u7406\u4e2d\u7684\u4f4d\u79fb\uff0c\u4ece \\(A\\) \u7ecf \\(B\\) \u5230 \\(C\\) \uff0c\u90a3\u4e48\u7ecf\u8fc7\u7684\u4f4d\u79fb\u7b49\u4ef7\u4e8e\u76f4\u63a5\u4ece \\(A\\) \u5230 \\(C\\) \u3002 \u7b26\u53f7\u8868\u793a\u5373\uff1a \\(\\overrightarrow{AB}+\\overrightarrow{BC}=\\overrightarrow{AC}\\) \uff0c\u5176\u5b9e\u8fd9\u4e2a\u4e5f\u5c31\u662f\u4e09\u89d2\u5f62\u6cd5\u5219\u6240\u8868\u8ff0\u7684\u3002 \u5411\u91cf\u51cf\u6cd5\u7c7b\u4f3c\uff1a \\(\\overrightarrow{OA}-\\overrightarrow{OB}=\\overrightarrow{OA}+\\overrightarrow{BO}=\\overrightarrow{BA}\\) \uff0c\u540e\u9762\u7528\u5230\u4e86\u4ea4\u6362\u5f8b\u3002 \u540c\u65f6\uff0c\u6ce8\u610f\u5230\u529b\u7684\u5408\u6210\u6cd5\u5219\uff08\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\uff09\uff0c\u540c\u6837\u4e5f\u53ef\u4ee5\u770b\u505a\u5411\u91cf\u7684\u76f8\u52a0\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\u5411\u91cf\u76f8\u52a0\u7684\u4e24\u4e2a\u8fd0\u7b97\u6cd5\u5219\uff0c\u5373\u4e09\u89d2\u5f62\u6cd5\u5219\u3001\u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\uff1a \u4e09\u89d2\u5f62\u6cd5\u5219\uff1a\u9996\u5c3e\u987a\u6b21\u76f8\u8fde\uff0c\u548c\u4e3a\u4ece\u7b2c\u4e00\u4e2a\u5411\u91cf\u7684\u8d77\u70b9\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5411\u91cf\u7684\u7ec8\u70b9\uff1b \u5e73\u884c\u56db\u8fb9\u5f62\u6cd5\u5219\uff1a\u5411\u91cf\u5171\u8d77\u70b9\uff0c\u548c\u4e3a\u4ee5\u8fd9\u4e24\u4e2a\u5411\u91cf\u4e3a\u90bb\u8fb9\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u5bf9\u89d2\u7ebf\uff0c \u8d77\u70b9\u4e3a\u4e24\u4e2a\u5411\u91cf\u5171\u6709\u7684\u8d77\u70b9\uff0c\u65b9\u5411\u6cbf\u5e73\u884c\u56db\u8fb9\u5f62\u5bf9\u89d2\u7ebf\u65b9\u5411\u3002 \u8fd9\u6837\uff0c\u5411\u91cf\u7684\u52a0\u6cd5\u5c31\u5177\u6709\u4e86\u51e0\u4f55\u610f\u4e49\u3002\u5e76\u4e14\u5411\u91cf\u7684\u52a0\u6cd5\u6ee1\u8db3\u4ea4\u6362\u5f8b\u4e0e\u7ed3\u5408\u5f8b\u3002 \u7136\u540e\u4ece\u51e0\u4f55\u7684\u89d2\u5ea6\u53ef\u4ee5\u63a8\u51fa\u4e00\u4e9b\u516c\u5f0f\uff0c\u5176\u4e2d\u4e09\u89d2\u5f62\u6cd5\u5219\u7684\u516c\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u4e0b\uff1a \\[ (x_1,y_1)+(x_2,y_2)=(x_1+x_2,y_1+y_2) \\] \u5411\u91cf\u52a0\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\u548c\u4ea4\u6362\u5f8b\uff0c\u753b\u56fe\u7406\u89e3\u5373\u53ef\u3002 \u5411\u91cf\u52a0\u6cd5\u53ef\u4ee5\u5bfc\u51fa\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c \\[ ||\\bm a|-|\\bm b||\\le|\\bm a+\\bm b|\\le|\\bm a|+|\\bm b| \\] \u5f53\u4e14\u4ec5\u5f53\u4e24\u5411\u91cf\u65b9\u5411\u76f8\u540c\uff08\u6ce8\u610f\u4e0d\u662f\u5e73\u884c\uff09\uff0c\u53d6\u7b49\u3002","title":"\u5411\u91cf\u52a0\u6cd5"},{"location":"math/linear-algebra/vector/#_9","text":"","title":"\u5411\u91cf\u7684\u70b9\u79ef"},{"location":"math/linear-algebra/vector/#_10","text":"\u5bf9\u4e8e\u5411\u91cf\u7684\u4e58\u6cd5\uff1a \u7269\u7406 \u6570\u5b66 \u76f4\u8bd1 \u4fd7\u79f0 \u6807\u91cf\u79ef \u6570\u91cf\u79ef \u5185\u79ef \u70b9\u79ef \u77e2\u91cf\u79ef \u5411\u91cf\u79ef \u5916\u79ef \u53c9\u79ef \u7269\u7406\u548c\u6570\u5b66\u4e0a\u7684\u7528\u8bed\u91c7\u7528\u4e86\u610f\u8bd1\u7684\u65b9\u6cd5\uff0c\u5206\u522b\u8868\u793a\u8fd0\u7b97\u7684\u7ed3\u679c\u4e3a\u6807\u91cf\u548c\u77e2\u91cf\u3002 \u5728\u6570\u5b66\u5b66\u79d1\uff0c\u901a\u5e38\u4e5f\u53ef\u4ee5\u7ffb\u8bd1\u6210\u300c\u5185\u79ef\u300d\u548c\u300c\u5916\u79ef\u300d\uff0c\u662f\u4e24\u4e2a\u540d\u8bcd\u7684\u76f4\u8bd1\u3002 \u800c\u300c\u70b9\u79ef\u300d\u548c\u300c\u53c9\u79ef\u300d\u662f\u6839\u636e\u8fd0\u7b97\u7b26\u53f7\u5f97\u6765\u7684\u4fd7\u79f0\uff0c\u8fd9\u79cd\u4fd7\u79f0\u4e5f\u5f88\u5e38\u89c1\u3002","title":"\u58f0\u660e"},{"location":"math/linear-algebra/vector/#_11","text":"\u70b9\u79ef\u7684\u6982\u5ff5\u5bf9\u4e8e\u4efb\u610f\u7ef4\u6570\u7684\u5411\u91cf\u90fd\u9002\u7528 \u3002 \u5df2\u77e5\u4e24\u4e2a\u5411\u91cf \\(\\bm a,\\bm b\\) \uff0c\u5b83\u4eec\u7684\u5939\u89d2\u4e3a \\(\\theta\\) \uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u70b9\u79ef\u4e3a\uff1a \\[ \\bm a \\cdot \\bm b=|\\bm a||\\bm b|\\cos \\theta \\] \u5176\u4e2d\uff0c\u6211\u4eec\u79f0 \\(|\\bm a|\\cos \\theta\\) \u4e3a \\(\\bm a\\) \u5728 \\(\\bm b\\) \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u3002 \u5176\u4e2d\uff0c \\(\\theta\\in[0,\\pi]\\) \uff0c\u4f46\u662f\u76f4\u7ebf\u7684\u5939\u89d2 \\(\\theta\\in[0,\\pi)\\) \uff0c\u56e0\u4e3a\u76f8\u53cd\u5411\u91cf\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002","title":"\u5b9a\u4e49"},{"location":"math/linear-algebra/vector/#_12","text":"\u70b9\u79ef\u7684\u51e0\u4f55\u610f\u4e49\u5373\u4e3a\uff1a\u70b9\u79ef \\(\\bm a \\cdot \\bm b\\) \u7b49\u4e8e \\(\\bm a\\) \u7684\u6a21\u4e0e \\(\\bm b\\) \u5728 \\(\\bm a\\) \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u7684\u4e58\u79ef\u3002 \u53e6\u5916\uff0c\u6211\u4eec\u5b9a\u4e49\u5411\u91cf\u70b9\u79ef\u6570\u503c\u4e0a\u8868\u793a\u4e3a\uff08\u7b80\u8bb0\u4e3a\u5148\u76f8\u4e58\u518d\u76f8\u52a0\uff09\uff1a \\[ (x_1,y_1)\\cdot(x_2,y_2)=x_1x_2+y_1y_2 \\] \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u79cd\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u5e76\u4e0d\u5c5e\u4e8e\u5411\u91cf\u7684\u7ebf\u6027\u8fd0\u7b97\u3002 \u5411\u91cf\u4e0e\u96f6\u5411\u91cf\u70b9\u79ef\uff0c\u7ed3\u679c\u4e3a \\(\\vec0\\) \u3002\u5728\u4e0d\u5f15\u8d77\u6df7\u6dc6\u7684\u60c5\u51b5\u4e0b\uff0c\u70b9\u79ef\u7684\u70b9\u53f7\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\u3002","title":"\u610f\u4e49"},{"location":"math/linear-algebra/vector/#_13","text":"\u5411\u91cf\u70b9\u4e58\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff1a \\[ \\bm a\\cdot\\bm b=\\bm b\\cdot\\bm a=|\\bm a|\\cdot|\\bm b|\\cdot\\cos\\theta \\] \u5411\u91cf\u70b9\u4e58\u5bf9\u6570\u4e58\u6709\u7ed3\u5408\u5f8b\uff1a \\[ (\\lambda\\bm a)\\cdot\\bm b=\\lambda(\\bm a\\cdot\\bm b)=\\bm a\\cdot(\\lambda\\bm b) \\] \u5411\u91cf\u70b9\u4e58\u5bf9\u5411\u91cf\u52a0\u6cd5\u6709\u5206\u914d\u7387\uff1a \\[ (\\bm a+\\bm b)\\cdot\\bm c=\\bm a\\cdot\\bm c+\\bm b\\cdot\\bm c \\] \u4f46\u662f\u5411\u91cf\u70b9\u4e58\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c \\[ (\\bm a\\cdot\\bm b)\\cdot\\bm c\\neq\\bm a\\cdot(\\bm b\\cdot\\bm c) \\] \u6ce8\u610f\u5230\u5411\u91cf\u8fd0\u7b97\u5177\u6709\u5927\u90e8\u5206\u7684\u6570\u5b57\u8fd0\u7b97\u7684\u6027\u8d28\uff08\u9664\u4e86\u9664\u6cd5\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f53\u505a\u5b57\u6bcd\u8ba1\u7b97\u3002 \u53ef\u4ee5\u5f97\u5230\uff0c\u82e5 \\(\\bm b\\neq\\bm c\\) \uff0c \\(\\bm a\\cdot\\bm b=\\bm a\\cdot\\bm c\\) \u7684\u5145\u8981\u6761\u4ef6\u662f \\(\\bm a\\perp(\\bm b-\\bm c)\\) \uff0c \\[ \\bm a\\cdot\\bm b=\\bm a\\cdot\\bm c\\\\ \\bm a\\cdot(\\bm b-\\bm c)=\\vec0 \\] \u5373\uff0c \\[ \\bm a\\perp(\\bm b-\\bm c) \\] \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c \\[ |\\bm a+\\bm b|^2-|\\bm a-\\bm b|^2=4\\bm a\\cdot\\bm b\\\\ \\bm a\\cdot\\bm b={1\\over4}\\left(|\\bm a+\\bm b|^2-|\\bm a-\\bm b|^2\\right) \\] \u5373\u6781\u5316\u6052\u7b49\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u901a\u8fc7\u6c42\u5939\u89d2\u7684\u65b9\u5f0f\u5f97\u51fa\u4e24\u5411\u91cf\u70b9\u79ef\u3002 \u540c\u65f6\uff0c\u5e38\u7528\u7684\uff0c \\[ \\begin{aligned} |\\bm a+\\bm b|&=\\lambda\\\\ (\\bm a+\\bm b)\\cdot(\\bm a+\\bm b)&=\\lambda^2\\\\ |\\bm a|^2+2\\bm a\\cdot\\bm b+|\\bm b|^2&=\\lambda^2 \\end{aligned} \\] \u5373\uff0c \\[ |\\bm a|^2+2\\bm a\\cdot\\bm b+|\\bm b|^2=|\\bm a+\\bm b|^2\\\\ \\bm a\\cdot\\bm b={1\\over2}\\left(|\\bm a+\\bm b|^2-|\\bm a|^2-|\\bm b|^2\\right)\\\\ \\] \u603b\u7ed3\u4e00\u4e0b\uff0c\u4e0a\u9762\u4e24\u4e2a\u5f0f\u5b50\uff0c \\[ \\bm a\\cdot\\bm b={1\\over4}\\left(|\\bm a+\\bm b|^2-|\\bm a-\\bm b|^2\\right)\\\\ \\bm a\\cdot\\bm b={1\\over2}\\left(|\\bm a+\\bm b|^2-|\\bm a|^2-|\\bm b|^2\\right)\\\\ \\] \u518d\u7ed3\u5408\u70b9\u4e58\u7684\u5b9a\u4e49\uff0c \\[ \\bm a\\cdot\\bm b=|\\bm a|\\cdot|\\bm b|\\cdot\\cos\\theta\\\\ \\cos\\theta={\\bm a\\cdot\\bm b\\over|\\bm a|\\cdot|\\bm b|} \\] \u5c31\u53ef\u4ee5\u6c42\u51fa\u5411\u91cf\u5939\u89d2\u3002 \u7279\u6b8a\u7684\uff0c \\[ \\theta=0\\,(\\cos\\theta=1),\\,\\bm a\\cdot\\bm b=|\\bm a|\\cdot|\\bm b|\\\\ \\theta=\\pi\\,(\\cos\\theta=-1),\\,\\bm a\\cdot\\bm b=-|\\bm a|\\cdot|\\bm b|\\\\ \\theta=\\pi/2\\,(\\cos\\theta=0),\\,\\bm a\\cdot\\bm b=0\\\\ \\bm a\\cdot\\bm a=|\\bm a|^2,\\,|\\bm a|=\\sqrt{\\bm a\\cdot\\bm a}\\\\ \\] \u5176\u4e2d\uff0c\u7b2c\u4e09\u6761\u5373\uff0c\u5782\u76f4\u5411\u91cf\u5411\u91cf\u70b9\u79ef\u7b49\u4e8e\u96f6\u3002 \u6839\u636e \\(\\cos 90^\\circ=0\\) \uff0c \\(\\bm a \\perp \\bm b \\iff \\bm a\\cdot \\bm b=0\\) \u3002","title":"\u6027\u8d28"},{"location":"math/linear-algebra/vector/#_14","text":"\\[ |\\bm a\\cdot\\bm b|\\le|\\bm a|\\cdot|\\bm b| \\] \u5f53\u4e14\u4ec5\u5f53\u4e24\u5411\u91cf\u5171\u7ebf\uff0c\u53d6\u7b49\u3002 \u636e\u6b64\uff0c\u53ef\u4ee5\u5224\u65ad\u4e24\u5411\u91cf\u5171\u7ebf\uff1a \u4e24\u4e2a\u975e\u96f6\u5411\u91cf \\(\\bm a\\) \u4e0e \\(\\bm b\\) \u5171\u7ebf\uff0c\u7b49\u4ef7\u4e8e\uff0c\u6709\u552f\u4e00\u5b9e\u6570 \\(\\lambda\\) \uff0c\u4f7f\u5f97 \\(\\bm b=\\lambda \\bm a\\) \u3002 \u7531\u6570\u4e58\u7684\u5b9a\u4e49\u77e5\uff0c\u5bf9\u4e8e\u975e\u96f6\u5411\u91cf \\(\\bm a\\) \uff0c\u5982\u679c\u5b58\u5728\u5b9e\u6570 \\(\\lambda\\) \uff0c\u4f7f\u5f97 \\(\\bm b=\\lambda \\bm a\\) \uff0c\u90a3\u4e48 \\(\\bm a \\parallel \\bm b\\) \u3002 \u6570\u503c\u4e0a\uff0c\u6709\u5224\u522b\u5f0f \\(\\bm a = \\lambda \\bm b \\iff |\\bm a\\cdot \\bm b|=|\\bm a||\\bm b|\\) \u3002","title":"\u67ef\u897f\u4e0d\u7b49\u5f0f\u5411\u91cf\u5f62\u5f0f"},{"location":"math/linear-algebra/vector/#_15","text":"","title":"\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u5e94\u7528"},{"location":"math/linear-algebra/vector/#_16","text":"\u57fa\u5e95 \\(\\bm e_1,\\bm e_2\\) \u4e0d\u5171\u7ebf\uff0c\u5bf9\u4e8e\u5e73\u9762\u5185\u4efb\u4e00\u5411\u91cf \\(\\bm a\\) \uff0c\u5b58\u5728\u552f\u4e00\u5b9e\u6570 \\(x,y\\) \u4f7f\u5f97 \\(\\bm a=x\\bm e_1+y\\bm e_2\\) \u3002 \u5f62\u5f0f\u5316\u7684\uff0c\u5e73\u9762\u5185\u7684\u4efb\u4e00\u5411\u91cf\u90fd\u53ef\u4ee5\u552f\u4e00\u7684\u8868\u793a\u4e3a\u4e24\u4e2a\u4e0d\u5171\u7ebf\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\u3002 \u5b58\u5728\u6027\u7684\u8bc1\u660e\uff1a\u611f\u6027\u7406\u89e3\uff08\u96fe \u552f\u4e00\u6027\u7684\u8bc1\u660e\uff0c\u53cd\u8bc1\uff1a\u5047\u8bbe\u5b58\u5728\u4e24\u7ec4\u5b9e\u6570 \\(\\langle x_1,y_1\\rangle\\) \u3001 \\(\\langle x_2,y_2\\rangle\\) \uff0c \\[ \\bm a=x_1\\bm e_1+y_1\\bm e_2=x_2\\bm e_1+y_2\\bm e_2\\\\ \\bm e_1(x_1-x_2)=\\bm e_2(y_2-y_1) \\] \u56e0\u4e3a \\(x_1\\neq x_2,y_1\\neq y_2\\) \uff0c\u5219 \\(\\bm e_1,\\bm e_2\\) \u5171\u7ebf\uff0c\u4e0e\u6761\u4ef6\u4e0d\u7b26\uff0c\u56e0\u6b64\u5b58\u5728\u552f\u4e00\u6027\u3002 \u8003\u8651\u6784\u9020\u6027\u7684\u8bc1\u660e\uff0c \u82e5\uff0c \\[ \\bm a\\cdot\\bm e_1=a_1,\\,\\bm a\\cdot\\bm e_2=a_2\\\\ \\langle\\bm e_1,\\bm e_2\\rangle=\\theta \\] \u8bbe\uff0c \\(\\bm a=x\\bm e_1+y\\bm e_2\\) \uff0c\u7528 \\(a_1,a_2,\\theta\\) \u8868\u793a \\(\\bm a\\) \u3002 \u8003\u8651\uff0c \\[ \\bm e_1\\bm e_2=\\cos\\theta\\\\ \\bm a\\cdot\\bm e_1=x+y\\bm e_1\\bm e_2=a_1\\\\ \\bm a\\cdot\\bm e_2=y+x\\bm e_1\\bm e_2=a_2 \\] \u5217\u51fa\u65b9\u7a0b\u7ec4\uff0c \\[ \\begin{cases} x+y\\cos\\theta=a_1\\\\ y+x\\cos\\theta=a_2 \\end{cases} \\] \u89e3\u5f97\uff0c \\[ \\left\\{\\begin{aligned} x={a_1-a_2\\cos\\theta\\over\\sin^2\\theta}\\\\ y={a_2-a_1\\cos\\theta\\over\\sin^2\\theta} \\end{aligned}\\right. \\] \u8fd9\u4e2a\u601d\u60f3\u5f88\u91cd\u8981\uff0c\u5e38\u7528\u4e00\u4e2a\u5f88\u5947\u602a\u7684\u5f0f\u5b50\uff0c\u53bb\u70b9\u4e58\u4e24\u4e2a\u4e0d\u5171\u7ebf\u5411\u91cf\u3002","title":"\u5e73\u9762\u5411\u91cf\u57fa\u672c\u5b9a\u7406"},{"location":"math/linear-algebra/vector/#_17","text":"\u8bbe \\(A(x_1,y_1)\\) \u3001 \\(B(x_2,y_2)\\) \u4e3a\u4e00\u5e73\u9762\u5185\u4e24\u70b9\u3002 \u8bbe \\(C(x,y)\\) \u4e3a\u7ebf\u6bb5 \\(AB\\) \u4e2d\u70b9\uff0c\u5219 \\(\\overrightarrow{AC}=\\overrightarrow{CB}\\) \uff1a \\[ x-x_1=x_2-x\\\\ y-y_1=y_2-y \\] \u6700\u7ec8\u89e3\u5f97\uff0c \\[ C\\left({x_1+x_2\\over2},{y_1+y_2\\over2}\\right) \\] \u5373\u4e2d\u70b9\u5750\u6807\u3002","title":"\u7ebf\u6bb5\u4e2d\u70b9"},{"location":"math/linear-algebra/vector/#_18","text":"\u8bbe \\(A(x_1,y_1)\\) \u3001 \\(B(x_2,y_2)\\) \u4e3a\u4e00\u5e73\u9762\u5185\u4e24\u70b9\uff0c\u5219\uff0c \\[ |\\overrightarrow{AB}|=\\sqrt{\\overrightarrow{AB}\\cdot\\overrightarrow{AB}}=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} \\] \u5219\u7ebf\u6bb5 \\(AB\\) \uff0c \\[ |AB|=|\\overrightarrow{AB}|=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} \\] \u5373\u7ebf\u6bb5\u957f\u5ea6\u3002","title":"\u7ebf\u6bb5\u957f\u5ea6"},{"location":"math/linear-algebra/vector/#_19","text":"\u5bf9\u4e8e\u7ebf\u6bb5 \\(AB\\) \u53ca\u4e00\u70b9 \\(Q\\) \uff0c\u82e5\u5b58\u5728\u4e00\u70b9 \\(O\\) \u6ee1\u8db3\uff0c \\[ \\overrightarrow{OQ}=\\lambda\\overrightarrow{OA}+(1-\\lambda)\\overrightarrow{OB} \\] \u5219 \\(Q\\) \u5728\u76f4\u7ebf \\(AB\\) \u4e0a\uff0c\u5373 \\(A,B,Q\\) \u4e09\u70b9\u5171\u7ebf\u3002 \u7c7b\u4f3c\u7684\uff0c\u82e5 \\(C\\) \u662f\u7ebf\u6bb5 \\(AB\\) \u4e2d\u70b9\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u4e00\u70b9 \\(O\\) \uff0c\u6709\uff0c \\[ \\overrightarrow{OC}={1\\over2}\\overrightarrow{OA}+{1\\over2}\\overrightarrow{OB} \\]","title":"\u4e09\u70b9\u5171\u7ebf"},{"location":"math/linear-algebra/vector/#_20","text":"","title":"\u89e3\u4e09\u89d2\u5f62"},{"location":"math/linear-algebra/vector/#_21","text":"\u7f16\u53f7 \u5fc3\u7684\u540d\u79f0 \u5b9a\u4e49 \\(X_1\\) \u5185\u5fc3 \u4e09\u6761 \u89d2\u5e73\u5206\u7ebf \u7684\u4ea4\u70b9 \\(X_2\\) \u91cd\u5fc3 \u4e09\u6761 \u4e2d\u7ebf \u7684\u4ea4\u70b9 \\(X_3\\) \u5916\u5fc3 \u4e09\u6761 \u4e2d\u5782\u7ebf \u7684\u4ea4\u70b9 \\(X_4\\) \u5782\u5fc3 \u4e09\u6761 \u9ad8\u7ebf \u7684\u4ea4\u70b9","title":"\u4e09\u89d2\u5f62\u7684\u5fc3"},{"location":"math/linear-algebra/vector/#_22","text":"\u5b58\u5728\u6709\u585e\u74e6\u5b9a\u7406\u3001\u585e\u74e6\u5b9a\u7406\u9006\u5b9a\u7406\u3002 \u4e09\u89d2\u5f62\u91cd\u5fc3\u5230\u5176\u5404\u4e2a\u9876\u70b9\u5411\u91cf\u4e4b\u548c\u4e3a\u96f6\u3002 \u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u91cd\u5fc3\u540c\u65f6\u4e5f\u662f\u5176\u4e2d\u70b9\u4e09\u89d2\u5f62\u7684\u91cd\u5fc3\u3002 \u91cd\u5fc3\u5230\u9876\u70b9\u7684\u8ddd\u79bb\u4e0e\u91cd\u5fc3\u5230\u5bf9\u8fb9\u4e2d\u70b9\u7684\u8ddd\u79bb\u4e4b\u6bd4\u4e3a \\(2:1\\) \u3002 \u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c\u91cd\u5fc3\u7684\u5750\u6807\u662f\u9876\u70b9\u5750\u6807\u7684\u7b97\u672f\u5e73\u5747\u3002 \u91cd\u5fc3\u548c\u4e09\u89d2\u5f62\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u7ec4\u6210\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u9762\u79ef\u76f8\u7b49\u3002 \u91cd\u5fc3\u5230\u4e09\u6761\u8fb9\u7684\u8ddd\u79bb\u4e0e\u4e09\u6761\u8fb9\u7684\u957f\u6210\u53cd\u6bd4\u3002\uff08\u4e0a\u4e00\u6761\u7684\u63a8\u8bba\uff09 \u91cd\u5fc3\u5230\u4e09\u8fb9\u8ddd\u79bb\u4e4b\u79ef\u6700\u5927\u3001\u5230\u4e09\u89d2\u5f62\u4e09\u4e2a\u9876\u70b9\u8ddd\u79bb\u7684\u5e73\u65b9\u548c\u6700\u5c0f\u3002 \u74e6\u585e\u5b9a\u7406\uff1a\u4e09\u9876\u70b9\u9009\u4e00\u4e2a\u4f5c\u4e3a\u8d77\u70b9\uff0c\u5b9a\u4e00\u65b9\u5411\uff0c\u7ed5\u4e00\u5708\uff0c\u4e09\u7ec4\u6bd4\u4f8b\u76f8\u4e58\u4e3a\u4e00\u3002","title":"\u4e09\u89d2\u5f62\u91cd\u5fc3"},{"location":"math/linear-algebra/vector/#_23","text":"\u56de\u987e\u521d\u4e2d\u51e0\u4f55\uff0c\u4e09\u89d2\u5f62\u9762\u79ef\uff0c \\[ S={1\\over2}ab\\sin C={1\\over2}bc\\sin A={1\\over2}ac\\sin B \\] \u4e0b\u9762\u7684\u8bc1\u660e\u8fc7\u7a0b\u53ea\u8003\u8651\u9510\u89d2\u4e09\u89d2\u5f62\uff0c\u5bf9\u4e8e\u949d\u89d2\u4e09\u89d2\u5f62\uff0c\u7ed3\u8bba\u4e0d\u53d8\u3002 \u505a\u8fc7 \\(\\angle A\\) \u7684\u5782\u7ebf\uff0c\u5219\u8be5\u5782\u7ebf\u957f\u5ea6 \\(h\\) \uff1a \\[ h=b\\sin C=c\\sin B \\] \u5bf9\u6bcf\u4e2a\u89d2\u5e94\u7528\uff0c\u6700\u540e\u53ef\u5f97\uff0c \\[ {a\\over\\sin A}={b\\over\\sin B}={c\\over\\sin C}=k \\] \u505a\u51fa\u8be5\u4e09\u89d2\u5f62\u7684\u5916\u63a5\u5706\uff0c\u8fc7\u5706\u5fc3\u505a \\(BC\\) \u7684\u9ad8\uff0c\u5219\uff0c \\[ a=2R\\sin A,\\,{a\\over\\sin A}=2R \\] \u5373\u503c \\(k\\) \u4e3a\u4e09\u89d2\u5f62\u5916\u63a5\u5706\u76f4\u5f84 \\(2R\\) \u3002 \u5e38\u5e38\u8fd9\u4e48\u5199\uff1a \\[ a=2R\\sin A,\\,b=2R\\sin B,\\,c=2R\\sin C\\\\ \\sin A={a\\over2R},\\,\\sin B={b\\over2R},\\,\\sin C={c\\over2R} \\] \u6b63\u5f26\u5b9a\u7406\u63a8\u8bba\uff1a\u5927\u8fb9\u5bf9\u5927\u89d2\uff0c\u5c0f\u8fb9\u5bf9\u5c0f\u89d2\u3002 \u4e09\u89d2\u5f62\u5916\u63a5\u5706\u534a\u5f84\uff1a \\[ R={abc\\over4S} \\]","title":"\u6b63\u5f26\u5b9a\u7406"},{"location":"math/linear-algebra/vector/#_24","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\begin{array}{c} \\overrightarrow{AB}=\\overrightarrow{CB}-\\overrightarrow{CA}\\\\[0.5em] |\\overrightarrow{AB}|^2=|\\overrightarrow{CB}|^2+|\\overrightarrow{CA}|^2-2|\\overrightarrow{CB}|\\cdot|\\overrightarrow{CA}|\\cdot\\cos\\theta\\\\[0.5em] c^2=a^2+b^2-2ab\\cos\\theta \\end{array} \\] \u5176\u4e2d \\(\\theta\\) \u4e3a \\(c\\) \u7684\u5bf9\u89d2\uff0c\u5373 \\(\\angle C\\) \uff1b\u7b2c\u4e8c\u6b65\u5c31\u662f\u4e24\u8fb9\u5e73\u65b9\u3002 \u5e38\u5199\u4f5c\uff1a \\[ \\cos A={b^2+c^2-a^2\\over2bc},\\,\\cos B={a^2+c^2-b^2\\over2ac},\\,\\cos C={a^2+b^2-c^2\\over2ab} \\] \u63a8\u8bba\uff1a \\[ \\begin{aligned} a^2+b^2-c^2>0 &\\Longrightarrow \\cos C>0 \\Longrightarrow C\\in(0,\\pi/2)\\\\ a^2+b^2-c^2=0 &\\Longrightarrow \\cos C=0 \\Longrightarrow C=\\pi/2\\\\ a^2+b^2-c^2<0 &\\Longrightarrow \\cos C<0 \\Longrightarrow C\\in(\\pi/2,\\pi) \\end{aligned} \\]","title":"\u4f59\u5f26\u5b9a\u7406"},{"location":"math/linear-algebra/vector/#_25","text":"\u56de\u5fc6\u521d\u4e2d\u5e73\u51e0\uff0c\u6839\u636e\u5168\u7b49\u4e09\u89d2\u5f62\u7684\u5224\u65ad\uff1a \u5982\u679c\u77e5\u9053 ASA\u3001AAS\u3001SAS\u3001SSS\u3001HL \u5c31\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002 \u603b\u7ed3\u4e00\u4e0b\u5c31\u662f\u4e24\u4e2a\u89d2\u5168\u90fd\u53ef\u4ee5\uff0c\u4e09\u4e2a\u8fb9\u53ef\u4ee5\uff0c\u4e00\u4e2a\u89d2\u4e24\u4e2a\u8fb9\u5c31\u9700\u8981\u662f\u5939\u89d2\u3002 \u5373\u77e5\u9053 \\(aCb\\) \u3001 \\(cBa\\) \u3001 \\(bAc\\) \uff0c\u624d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u4e24\u8fb9\u4e00\u89d2\u7684\u4e09\u89d2\u5f62\u3002 \u81f3\u4e8e SSA\uff0c\u53ea\u6709\u4e00\u4e2a\u89d2\u662f\u76f4\u89d2\u624d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5c31\u662f HL \u4e86\u3002 \u4e09\u89d2\u5f62\u786e\u5b9a\uff0c\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u4ee5\u53ca\u6240\u6709\u89d2\u5ea6\u7684\u5927\u5c0f\u3002 \u6b63\u5f26\u5b9a\u7406\u3001\u4f59\u5f26\u5b9a\u7406\u5c31\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u65b9\u6cd5\uff1a\u53ef\u4ee5\u5229\u7528\u89d2\u5ea6\u548c\u8fb9\u957f\u4e92\u76f8\u8868\u793a\u3002 \u50cf\u8fd9\u6837\uff0c\u786e\u5b9a\u4e09\u89d2\u5f62\u8fb9\u3001\u89d2\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u89e3\u4e09\u89d2\u5f62\u3002 \u5982\u4f55\u9009\u62e9\u6b63\u5f26\u5b9a\u7406\u3001\u4f59\u5f26\u5b9a\u7406\uff1f \u9047\u5230\u6b63\u5f26\u9009\u6b63\u5f26\u5b9a\u7406\uff0c\u9047\u5230\u9f50\u6b21\u5f0f\u8003\u8651\u6b63\u5f26\u5b9a\u7406\u3002 \u9047\u5230\u4f59\u5f26\u9009\u4f59\u5f26\u5b9a\u7406\uff0c\u9047\u5230\u8fb9\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\u8003\u8651\u4f59\u5f26\u5b9a\u7406\u3002 \u539f\u5219\uff1a\u8fb9\u89d2\u7edf\u4e00\u3002","title":"\u89e3\u4e09\u89d2\u5f62"},{"location":"math/linear-algebra/vector/#_26","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(BC\\) \u7684\u4e2d\u70b9\u4e3a \\(M\\) \uff0c\u5bf9\u4e8e\u4e2d\u7ebf \\(AM\\) \uff0c\u6709\uff1a \\[ AM^2={1\\over2}b^2+{1\\over2}c^2-{1\\over4}a^2 \\] \u6216\uff0c \\[ AM^2+BM^2={1\\over2}(AC^2+AB^2) \\] \u6216\uff0c \\[ AM={1\\over2}\\sqrt{2b^2+2c^2-a^2} \\] \u8bc1\u660e\uff0c\u57fa\u5e95\u5206\u89e3\uff1a \\[ \\overrightarrow{AM}={1\\over2}\\overrightarrow{AB}+{1\\over2}\\overrightarrow{AC}\\\\[0.5em] \\overrightarrow{BM}={1\\over2}\\overrightarrow{AC}-{1\\over2}\\overrightarrow{AB} \\] \u5219\uff0c \\[ |\\overrightarrow{AM}|^2+|\\overrightarrow{BM}|^2={1\\over2}|\\overrightarrow{AB}|^2+{1\\over2}|\\overrightarrow{AC}|^2 \\] \u6216\u8005\u4e2d\u70b9\u4e24\u4e2a\u5e95\u89d2\u5206\u522b\u5217\u4f59\u5f26\u5b9a\u7406\uff0c\u76f8\u52a0\u5316\u7b80\u3002","title":"\u4e2d\u7ebf\u957f\u5b9a\u7406"},{"location":"math/linear-algebra/vector/#_27","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(\\angle A\\) \u7684\u5e73\u5206\u7ebf \\(AM\\) \uff0c\u6709\uff1a \\[ {BM\\over CM}={AB\\over AC} \\] \u662f\u5206\u89d2\u5b9a\u7406\u7684\u76f4\u63a5\u63a8\u8bba\uff0c\u8bc1\u660e\u89c1\u4e0b\u3002","title":"\u89d2\u5e73\u5206\u7ebf\u5b9a\u7406"},{"location":"math/linear-algebra/vector/#_28","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(BC\\) \u4e0a\u6709\u4e00\u70b9 \\(M\\) \uff0c\u5219\uff1a \\[ {BM\\over CM}={AB\\sin\\angle BAM\\over AC\\sin\\angle CAM} \\] \u8bc1\u660e\uff0c\u5de6\u53f3\u4e24\u8fb9\u7b49\u9762\u79ef\u6cd5\uff1a \\[ {BM\\over CM}={S_{\\triangle ABM}\\over S_{\\triangle ACM}}={AB\\cdot AM\\sin\\angle BAM\\over AC\\cdot AM\\sin\\angle CAM}={AB\\sin\\angle BAM\\over AC\\sin\\angle CAM} \\] \u6216\u6b63\u5f26\u5b9a\u7406\uff1a \\[ {BM\\over\\sin\\angle BAM}={AB\\over\\sin\\angle AMB}\\\\[0.5em] {CM\\over\\sin\\angle CAM}={AC\\over\\sin\\angle AMC} \\] \u4e0a\u4e0b\u505a\u6bd4\u3002Q.E.D.","title":"\u5206\u89d2\u5b9a\u7406"},{"location":"math/linear-algebra/vector/#_29","text":"\u4efb\u610f\u4e09\u89d2\u5f62\u9762\u79ef\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[ \\begin{aligned} S&=\\sqrt{p(p-a)(p-b)(p-c)}\\\\ p&={a+b+c\\over2} \\end{aligned} \\] \u5176\u4e2d \\(p\\) \u4e3a\u4e09\u89d2\u5f62\u7684\u534a\u5468\u957f\u3002","title":"\u6d77\u4f26\u516c\u5f0f"},{"location":"math/linear-algebra/vector/#_30","text":"\u5728\u9510\u89d2 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ S_{\\triangle BOC}\\cdot\\overrightarrow{OA}+S_{\\triangle AOC}\\cdot\\overrightarrow{OB}+S_{\\triangle AOB}\\cdot\\overrightarrow{OC}=\\vec0 \\] \u63a8\u8bba\uff1a \u8bbe \\(I\\) \u4e3a\u5185\u5fc3\uff0c\u5219 \\(a\\cdot\\overrightarrow{IA}+b\\cdot\\overrightarrow{IB}+c\\cdot\\overrightarrow{IC}=\\vec0\\) . \u8bbe \\(H\\) \u4e3a\u5782\u5fc3\uff0c\u5219 \\(\\tan A\\cdot\\overrightarrow{HA}+\\tan B\\cdot\\overrightarrow{HB}+\\tan C\\cdot\\overrightarrow{HC}=\\vec0\\) . \u8bbe \\(O\\) \u4e3a\u5916\u5fc3\uff0c\u5219 \\(\\sin2A\\cdot\\overrightarrow{OA}+\\sin2B\\cdot\\overrightarrow{OB}+\\sin2C\\cdot\\overrightarrow{OC}=\\vec0\\) .","title":"\u5954\u9a70\u5b9a\u7406"},{"location":"math/linear-algebra/vector/#_31","text":"\u4efb\u610f\u56db\u8fb9\u5f62\u9762\u79ef\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[ \\begin{aligned} S&=\\sqrt{(p-a)(p-b)(p-c)(p-d)-abcd\\cos^2{\\alpha+\\beta\\over2}}\\\\ p&={a+b+c+d\\over2} \\end{aligned} \\] \u5176\u4e2d \\(p\\) \u4e3a\u56db\u8fb9\u5f62\u7684\u534a\u5468\u957f\uff0c \\(\\alpha,\\beta\\) \u4e3a\u5176\u4e2d\u4e8c\u4e2a\u5bf9\u89d2\u3002 \u5e03\u96f7\u7279\u65bd\u5948\u5fb7\u516c\u5f0f\u53ef\u89c6\u4e3a\u5a46\u7f57\u6469\u7b08\u591a\u516c\u5f0f\u4e4b\u63a8\u5e7f\u3002","title":"\u5e03\u96f7\u7279\u65bd\u5948\u5fb7\u516c\u5f0f"},{"location":"math/linear-algebra/vector/#_32","text":"\u6ce8\u610f\u5230\u5706\u5185\u63a5\u56db\u8fb9\u5f62\u5bf9\u89d2\u4e92\u8865\uff0c\u5176\u534a\u89d2\u4f59\u5f26\u503c\u4e3a\u96f6\uff0c \\(\\cos90^\\circ=0\\) \u5219\u5706\u5185\u63a5\u56db\u8fb9\u5f62\u9762\u79ef\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a \\[ \\begin{aligned} S&=\\sqrt{(p-a)(p-b)(p-c)(p-d)}\\\\ p&={a+b+c+d\\over2} \\end{aligned} \\] \u5176\u4e2d \\(p\\) \u4e3a\u56db\u8fb9\u5f62\u7684\u534a\u5468\u957f\u3002","title":"\u5a46\u7f57\u6469\u7b08\u591a\u516c\u5f0f"},{"location":"math/linear-algebra/vector/#_33","text":"\u5728\u4e09\u89d2\u5f62\u4e2d\uff0c \\(a=b\\cos C+c\\cos B\\) \u3002 \u82e5 \\(\\sin^2A+\\sin^2B=\\sin^2C\\) \uff0c\u5219\u8be5\u4e09\u89d2\u5f62\u662f\u4ee5 \\(\\angle C\\) \u4e3a\u76f4\u89d2\u7684 \\(\\mathrm{Rt\\triangle}\\) \u3002 \u89e3\u4e09\u89d2\u5f62\u91cc\u9762\u5e38\u7528\u7684\u5947\u602a\u4e09\u89d2\u51fd\u6570\uff1a \\[ \\sin15^\\circ=\\cos75^\\circ={\\sqrt6-\\sqrt2\\over4}\\\\[0.5em] \\sin75^\\circ=\\cos15^\\circ={\\sqrt6+\\sqrt2\\over4} \\]","title":"\u4e00\u4e9b\u7ed3\u8bba"},{"location":"math/linear-algebra/vector/#_34","text":"","title":"\u4f8b\u9898"},{"location":"math/linear-algebra/vector/#_35","text":"\\[ 2\\cos^2{B\\over2}+\\sqrt3\\sin B=3 \\] \u6c42 \\(B\\) . \\[ \\cos B=2\\cos^2{B\\over2}-1\\\\ \\cos B+\\sqrt3\\sin B=2\\\\ {\\sqrt3\\over2}\\sin B+{1\\over2}\\cos B=1\\\\ \\sin B\\cos30^\\circ+\\cos B\\sin30^\\circ=1\\\\ \\sin(B+30^\\circ)=1=\\sin90^\\circ\\\\ B=60^\\circ \\]","title":"\u4f8b\u9898\u4e00"},{"location":"math/linear-algebra/vector/#_36","text":"\\[ (\\sin B-\\sin C)^2=\\sin^2 A-\\sin B\\sin C \\] \u6c42 \\(A\\) . \u82e5 \\(\\sqrt2a + b= 2c\\) \uff0c\u6c42 \\(C\\) . \u89c2\u5bdf\u5230\u662f\u89d2\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u4e14\u90fd\u662f\u6b63\u5f26\uff0c\u8003\u8651\u6b63\u5f26\u5b9a\u7406\uff0c \\[ (\\sin B-\\sin C)^2=\\sin^2 A-\\sin B\\sin C\\\\\\\\ (b-c)^2=a^2-bc\\\\\\\\ b^2+c^2-2bc=a^2-bc\\\\\\\\ a^2=b^2+c^2-bc \\] \u4e8e\u662f\uff0c \\[ \\cos A={b^2+c^2-a^2\\over2bc}={1\\over2}\\\\\\\\ A=60^\\circ \\] \u89c2\u5bdf\u5230 \\(\\sqrt2a + b= 2c\\) \u4e3a\u8fb9\u7684\u4e00\u6b21\u9f50\u6b21\uff0c\u8003\u8651\u7528\u6b63\u5f26\u5b9a\u7406\u3002 \\[ \\sqrt2a+b=2c\\\\\\\\ \\sqrt2\\sin A+\\sin B=2\\sin C \\] \u6839\u636e\u4e0a\u4e00\u95ee\uff0c \\(\\sin A=\\sin60^\\circ=\\sqrt3/2\\) \uff0c \\[ \\sqrt6/2+\\sin B=2\\sin C\\\\\\\\ \\sqrt6/2+\\sin(120-C)=2\\sin C\\\\\\\\ \\sqrt6/2+\\sqrt3/2\\cos C+\\sin C/2=2\\sin C \\] \u7ee7\u7eed\u6574\u7406\uff0c \\[ {\\sqrt6\\over2}+{\\sqrt3\\over2}\\cos C+{1\\over2}\\sin C=2\\sin C\\\\\\\\ {3\\over2}\\sin C-{\\sqrt3\\over2}\\cos C={\\sqrt6\\over2}\\\\\\\\ {\\sqrt3\\over2}\\sin C-{1\\over2}\\cos C={\\sqrt2\\over2}\\\\\\\\ \\sin C\\cos30^\\circ-\\cos C\\sin30^\\circ={\\sqrt2\\over2}\\\\\\\\ \\sin(C-30^\\circ)={\\sqrt2\\over2}=\\sin45^\\circ \\] \u56e0\u4e3a \\(C \\in (0^\\circ,120 ^\\circ)\\) \uff0c \\(C-30^\\circ\\in(-30^\\circ,90^\\circ)\\) \uff0c\u56e0\u6b64\uff0c $ C-30 \\circ=45 \\circ, C=75^\\circ $","title":"\u4f8b\u9898\u4e8c"},{"location":"math/linear-algebra/vector/#_37","text":"\u5728\u9510\u89d2 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ 2b\\sin A-\\sqrt3a=0 \\] \u6c42 \\(B\\) . \u6c42 \\(\\cos A+\\cos B+\\cos C\\) \u7684\u53d6\u503c\u8303\u56f4. \u4e0d\u8003\u8651 \\(\\sin A\\) \u662f\u8fb9\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u4e8e\u662f\u5e94\u7528\u6b63\u5f26\u5b9a\u7406\uff0c \\[ 2\\sin B\\sin A-\\sqrt2\\sin A=0\\\\\\\\ 2\\sin B=\\sqrt3\\\\ \\sin B=\\sqrt3/2 \\] \u56e0\u4e3a \\(\\angle B\\) \u662f\u9510\u89d2\uff0c \\[ B=60^\\circ \\] \u8bbe\uff0c \\[ \\def\\degree{^\\circ} \\begin{aligned} S&=\\cos A+\\cos B+\\cos C\\\\ &=\\cos A+\\cos C+1/2\\\\ &=\\cos(120\\degree-C)+\\cos C+1/2\\\\ &=-{1\\over2}\\cos C+{\\sqrt3\\over2}\\sin C+\\cos C+{1\\over2}\\\\ &={\\sqrt3\\over2}\\sin C+{1\\over2}\\cos C+{1\\over2}\\\\ &=\\sin C\\cos30\\degree+\\cos C\\sin30\\degree +1/2\\\\ &=\\sin(C+30\\degree)+1/2 \\end{aligned} \\] \u56e0\u4e3a \\(0^\\circ<A,B,C<90^\\circ\\) \uff0c \\[ \\def\\degree{^\\circ} \\begin{cases} 0\\degree<&C&<90\\degree\\\\ 0\\degree<&B&<90\\degree \\end{cases} \\Longleftrightarrow \\begin{cases} 0\\degree<&C&<90\\degree\\\\ 0\\degree<&120-C&<90\\degree \\end{cases} \\] \u5373\uff0c \\(30^\\circ<C<90^\\circ\\) \uff0c \\(60^\\circ<C+30^\\circ<120^\\circ\\) \u3002 \u753b\u51fa\u5355\u4f4d\u5706\uff0c\u6613\u5f97 \\(\\sin(C+30\\degree)\\in(\\sqrt3/2,1]\\) \uff0c\u5373\uff0c \\[ \\cos A+\\cos B+\\cos C\\in\\left({\\sqrt3+1\\over2},{3\\over2}\\right] \\]","title":"\u4f8b\u9898\u4e09"},{"location":"math/linear-algebra/vector/#_38","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(a+b=11\\) \uff0c \\[ \\cos A={1\\over8},\\,\\cos B={9\\over16} \\] \u6c42 \\(a,b\\) \u3002 \u8003\u8651\u4f59\u5f26\u8f6c\u6b63\u5f26\uff0c\u56e0\u4e3a\u662f\u4e09\u89d2\u5f62\u7684\u89d2\uff0c\u56e0\u6b64\u6b63\u5f26\u503c\u975e\u8d1f\uff0c \\[ \\sin A=\\sqrt{1-\\cos^2 A}=\\sqrt{63\\over64}={3\\sqrt7\\over8}\\\\ \\sin B=\\sqrt{1-\\cos^2 B}=\\sqrt{175\\over256}={5\\sqrt7\\over16} \\] \\[ {a\\over b}={\\sin A\\over\\sin B}={6\\over5} \\] \u56e0\u6b64 \\(a=6,\\,b=5\\) \u3002","title":"\u4f8b\u9898\u56db"},{"location":"math/linear-algebra/vector/#_39","text":"\\[ {\\sin A\\over\\sin B-\\sin C}={b+c\\over b-a} \\] \u6c42 \\(\\cos C\\) \u3002 \u8003\u8651 \\(\\cos C\\) \u53ef\u4ee5\u600e\u4e48\u8868\u793a\uff0c\u53ef\u4ee5\u901a\u8fc7 \\(\\sin C\\) \u7528\u6bd5\u8fbe\u54e5\u62c9\u65af\u5b9a\u7406\uff0c\u4e5f\u53ef\u4ee5\u4f59\u5f26\u5b9a\u7406\u3002 \u8003\u8651\u5230\u8fd9\u4e2a\u539f\u5f62\u5f0f\u662f\u4e00\u6b21\u9f50\u6b21\uff0c\u56e0\u6b64\u8003\u8651\u89d2\u5316\u53d8\u3002 \\[ {a\\over b-c}={b+c\\over b-a}\\\\ b^2-c^2=ab-a^2\\\\ c^2=a^2+b^2-ab \\] \u56e0\u6b64\uff0c \\[ \\cos C={a^2+b^2-c^2\\over2bc}={1\\over2} \\]","title":"\u4f8b\u9898\u4e94"},{"location":"math/linear-algebra/vector/#_40","text":"\u82e5\uff0c \\[ \\begin{cases} \\sin A=3\\sin B\\\\ c=\\sqrt5\\\\ \\cos C=5/6 \\end{cases} \\] \u6c42 \\(a\\) \u3002 \u5c1d\u8bd5\u8003\u8651\u8fd9\u4e09\u4e2a\u4e1c\u897f\u5404\u81ea\u4ec0\u4e48\u7528\u3002 \u6700\u5bb9\u6613\u53d1\u73b0\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u6700\u7b80\u5355\uff0c\u53ef\u4ee5\u6700\u540e\u5e26\u5165\u7528\u3002 \u56e0\u4e3a \\(\\cos\\) \u5173\u4e8e\u4f59\u5f26\u5b9a\u7406\uff0c\u5173\u4e8e\u8fb9\u6570\u591a\uff0c\u56e0\u6b64\u8003\u8651\u540e\u7528\u3002 \u7b2c\u4e00\u4e2a\u5f0f\u5b50\u7ed3\u6784\u5f88\u597d\uff0c\u662f\u4e00\u6b21\u9f50\u6b21\uff0c\u56e0\u6b64\u5e26\u5165\u7b2c\u4e00\u4e2a\u6b63\u5f26\u5b9a\u7406\u3002 \\[ a=3b \\] \u53c8\u56e0\u4e3a\uff0c \\[ \\cos C={a^2+b^2-c^2\\over2ab} \\] \u5e26\u5165\u5373\u53ef\uff0c\u89e3\u5f97 \\(a=3\\) \u3002","title":"\u4f8b\u9898\u516d"},{"location":"math/linear-algebra/vector/#_41","text":"\u82e5\uff0c \\[ \\begin{cases} b\\sin2A=a\\sin B\\\\ c=2b \\end{cases} \\] \u6c42 \\(a/b\\) \u3002 \u8003\u8651\u5230\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u7684\u5f62\u5f0f\u5f88\u7b80\u5355\uff0c\u56e0\u6b64\u7528\u4e8e\u6d88\u5143\u3002 \u7b2c\u4e00\u4e2a\u5f62\u5f0f\u4e2d\uff0c\u51fa\u73b0\u4e86\u4e8c\u500d\u89d2\uff0c\u662f\u4e0d\u597d\u5904\u7406\u7684\uff0c\u56e0\u6b64\u8003\u8651\u6b63\u5f26\u5b9a\u7406\u3002 \\[ \\sin B\\sin2A=\\sin A\\sin B\\\\ \\sin A=\\sin2A\\\\ \\sin A=2\\sin A\\cos A\\\\ \\cos A=1/2 \\] \u8003\u8651\u5230 \\(a/b\\) \u662f\u4e00\u4e2a\u4e00\u6b21\u5176\u6b21\u7684\u6bd4\u4f8b\u5f0f\uff0c\u56e0\u6b64\u4f59\u5f26\u5b9a\u7406\uff0c \\[ \\cos A={b^2+c^2-a^2\\over2bc} \\] \u5e26\u5165\uff0c\u89e3\u5f97 \\(a^2=3b^2\\) \uff0c\u5373 \\(a/b=\\sqrt3\\) \u3002","title":"\u4f8b\u9898\u4e03"},{"location":"math/linear-algebra/vector/#_42","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ S=a^2-(b-c)^2 \\] \u6c42 \\(\\sin A\\) \u3002 \u8fd9\u4e2a\u5f0f\u5b50\u6ca1\u6709\u5f88\u597d\u7684\u6027\u8d28\uff0c\u8003\u8651\u5c55\u5f00\uff0c \\[ S=a^2-b^2-c^2+2bc \\] \u6ce8\u610f\u5230\u8fd9\u4e2a\u5f62\u5f0f\uff0c\u800c\u4e14\u8fd8\u662f\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u6839\u636e\u4f59\u5f26\u5b9a\u7406\uff0c \\[ a^2=b^2+c^2-2bc\\cos A \\] \u6709\uff0c \\[ S=2bc(1-\\cos A)={1\\over2}bc\\sin A\\\\ \\sin A=4-4\\cos A \\] \u8054\u7acb\u5f97\u65b9\u7a0b\uff0c \\[ (4-4\\cos A)^2+\\cos^2A=1\\\\ 16(1-\\cos A)^2=(1-\\cos A)(1+\\cos A)\\\\ 16-16\\cos A=1+\\cos A\\\\ \\cos A={15\\over17},\\, \\sin A={8\\over17} \\]","title":"\u4f8b\u9898\u516b"},{"location":"math/linear-algebra/vector/#_43","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\sin A=2\\sin B\\cos C\\\\ a^2=b^2+c^2-bc \\] \u6c42\uff0c \\(\\triangle ABC\\) \u5f62\u72b6\u3002 \u4e24\u4e2a\u5f0f\u5b50\u90fd\u5f88\u5178\u578b\uff0c\u7b2c\u4e8c\u4e2a\u597d\u8bf4\uff0c\u5148\u5904\u7406\uff0c \u8054\u7acb\u4e8c\u5f0f\u53ca\u4f59\u5f26\u5b9a\u7406\uff0c \\[ a^2=b^2+c^2-bc\\\\ a^2=b^2+c^2-2bc\\cos A \\] \u5f97\uff0c \\[ \\cos A={1\\over2},\\,A=60^\\circ \\] \u7b2c\u4e00\u4e2a\u5f0f\u5b50\uff0c\u53ef\u4ee5\u4e0d\u5e26\u5165 \\(A\\) \uff0c\u5c1d\u8bd5\u901a\u8fc7\u4e09\u89d2\u51fd\u6570\u7684\u53d8\u6362\uff0c \\[ \\begin{aligned} \\sin A&=\\sin(\\pi-B-C)=\\sin(B+C)\\\\ &=\\sin B\\cos C+\\cos B\\sin C \\end{aligned} \\] \u8054\u7acb\u4e0b\u5f0f\u53ca\u4e00\u5f0f\uff0c \\[ \\sin B\\cos C+\\cos B\\sin C=2\\sin B\\cos C\\\\ \\sin B\\cos C=\\cos B\\sin C\\\\ \\tan B=\\tan C \\] \u56e0\u4e3a \\(B,C\\in(0,\\pi)\\) \uff0c\u6b63\u5207\u51fd\u6570\u5728\u6b64\u8303\u56f4\u5185\u552f\u4e00\uff0c\u5219 \\[ B=C=A=60^\\circ \\] \u5373 \\(\\triangle ABC\\) \u662f\u6b63\u4e09\u89d2\u5f62\u3002","title":"\u4f8b\u9898\u4e5d"},{"location":"math/linear-algebra/vector/#_44","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\cos(2B+C)+\\cos C>0 \\] \u5224\u65ad\u4e09\u89d2\u5f62\u662f\u9510\u89d2\u3001\u76f4\u89d2\u3001\u949d\u89d2\u4e09\u89d2\u5f62\u3002 \u5bb9\u6613\u53d1\u73b0\uff0c \\(\\cos\\) \u91cc\u9762\u7684\u89d2\u6709\u5f88\u597d\u7684\u6027\u8d28\uff0c\u8003\u8651\u548c\u5dee\u5316\u79ef\uff0c \\[ \\begin{aligned} &\\cos(2B+C)+\\cos C\\\\ =\\;&2\\cos(B+C)\\cos B\\\\ =\\;&-2\\cos A\\cos B>0 \\end{aligned} \\] \u56e0\u6b64\uff0c \\[ \\cos A\\cos B<0 \\] \u5373 \\(A,B\\) \u4e2d\u6709\u4e00\u4e2a\u949d\u89d2\uff0c\u5373 \\(\\triangle ABC\\) \u4e3a\u949d\u89d2\u4e09\u89d2\u5f62\u3002","title":"\u4f8b\u9898\u5341"},{"location":"math/linear-algebra/vector/#_45","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c\u4e09\u8fb9\u957f\u5206\u522b\u4e3a \\(a,a+2,a+4\\) \uff0c\u6700\u5c0f\u89d2\u4f59\u5f26\u503c\u4e3a \\(13/14\\) \u3002 \u6c42\u8be5\u4e09\u89d2\u5f62\u7684\u9762\u79ef \u56e0\u4e3a\u5927\u8fb9\u5bf9\u5927\u89d2\uff0c\u56e0\u6b64\u6700\u5c0f\u89d2\u662f \\(a\\) \u5bf9\u7684\uff0c \\[ \\cos A={(a+2)^2+(a+4)^2-a^2\\over2(a+2)(a+4)}={13\\over14} \\] \u89e3\u5f97\uff0c \\(a=3\\) \uff0c\u4e8e\u662f\u7528\u6d77\u4f26\u516c\u5f0f\uff0c \\[ p={3+5+7\\over2}={15\\over2} \\] \\[ S=\\sqrt{{15\\over2}\\cdot{9\\over2}\\cdot{5\\over2}\\cdot{1\\over2}}={15\\sqrt3\\over4} \\]","title":"\u4f8b\u9898\u5341\u4e00"},{"location":"math/linear-algebra/vector/#_46","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\(\\angle A=120^\\circ\\) \uff0c \\(BC=6\\) \u3002 \u6c42\uff1a\u5176\u9762\u79ef\u6700\u5927\u503c\u3002 \u8003\u8651\u9762\u79ef\u53ef\u4ee5\u600e\u4e48\u8868\u793a\u3002 Solution 1: \\[ S={1\\over2}bc\\sin A={\\sqrt3\\over4}bc \\] \u6839\u636e\u4f59\u5f26\u5b9a\u7406\uff0c \\[ 36=a^2=b^2+c^2-2bc\\cos A=b^2+c^2+bc\\ge3bc \\] \u5373\uff0c \\[ bc\\le12,\\,S\\le3\\sqrt3 \\] Solution 2\uff1a \u8003\u8651\u5230\u9876\u89d2\u4e0d\u53d8\uff0c\u5219\u53ef\u4ee5\u56fa\u5b9a\u5e95\u8fb9\uff0c\u4f7f\u9876\u70b9\u79fb\u52a8\u3002 \u6613\u77e5\u5176\u8f68\u8ff9\u4e3a\u4e00\u4e2a\u5706\u5f27\uff0c\u5219\u9762\u79ef\u6700\u5927\u5373\u5e95\u8fb9\u9ad8\u7ebf\u6700\u5927\u3002 \u9ad8\u7ebf\u6700\u5927\u5373\u8be5\u4e09\u89d2\u5f62\u4e3a\u7b49\u8170\u4e09\u89d2\u5f62\uff0c\u505a\u51fa\u9ad8\u7ebf\uff0c \\[ S={1\\over2}ah=3\\sqrt3 \\]","title":"\u4f8b\u9898\u5341\u4e8c"},{"location":"math/linear-algebra/vector/#_47","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c\u82e5 \\[ a-b=c(\\cos B-\\cos A) \\] \u5224\u65ad\u5176\u5f62\u72b6\u3002 \u8003\u8651\u5230\u4f59\u5f26\u5b9a\u7406\u5c55\u5f00\u540e\u662f\u4e09\u6b21\u5f0f\uff0c\u6709\u70b9\u590d\u6742\uff0c\u56e0\u6b64\u6b63\u5f26\u5b9a\u7406\u3002 \\[ \\sin A-\\sin B=\\sin C\\cos B-\\sin C\\cos A \\] \u8003\u8651\u51d1\u9879\uff0c\u53f3\u8fb9\u7684\u4e24\u9879\u5f88\u50cf\u6b63\u5f26\u7684\u548c\u89d2\u516c\u5f0f\uff0c\u4e8e\u662f\uff0c \\[ \\begin{aligned} &\\sin(B+C)-\\sin(A+C)\\\\ =\\;&\\sin B\\cos C+\\sin C\\cos B-\\sin A\\cos C-\\sin C\\cos A\\\\ =\\;&\\sin C\\cos B-\\sin C\\cos A \\end{aligned} \\] \u5316\u7b80\uff0c \\[ (\\sin B-\\sin A)\\cos C=0 \\] \u5373 \\(\\sin A=\\sin B\\) \u6216 \\(\\cos C=0\\) \uff0c \u5373 \\(\\triangle ABC\\) \u4e3a\u7b49\u8170\u4e09\u89d2\u5f62\u6216\u76f4\u89d2\u4e09\u89d2\u5f62\u3002","title":"\u4f8b\u9898\u5341\u4e09"},{"location":"math/linear-algebra/vector/#_48","text":"\u82e5 \\(\\triangle ABC\\) \u4e2d\uff0c \\(\\angle C\\) \u4e3a\u949d\u89d2\uff0c\u4e14\u5176\u9762\u79ef\uff0c \\[ S={\\sqrt3\\over4}(a^2+c^2-b^2) \\] \u6c42 \\(\\angle B\\) \u3002 \u8003\u8651\u5230 \\(a^2+c^2-b^2\\) \u662f\u7ecf\u5178\u6389\u7259\u7684\u5f62\u5f0f\uff0c \\[ \\cos B={a^2+c^2-b^2\\over2ac} \\] \u4e8e\u662f\uff0c \\[ S={\\sqrt3\\over4}\\cdot2ac\\cos B={\\sqrt3\\over2}ac\\cos B \\] \u8003\u8651\u5f88\u7ecf\u5178\u7684\u9762\u79ef\u516c\u5f0f\uff0c \\[ S={1\\over2}ac\\sin B={\\sqrt3\\over2}ac\\cos B\\\\ \\sin B=\\sqrt3\\cos B\\\\ \\tan B=\\sqrt3,\\,B=60^\\circ \\]","title":"\u4f8b\u9898\u5341\u56db"},{"location":"math/linear-algebra/vector/#_49","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\sin^2A-\\sin^2B-\\sin^2C=\\sin B\\sin C \\] \u6c42 \\(A\\) . \u82e5 \\(BC=3\\) \uff0c\u6c42\u5176\u5468\u957f\u6700\u5927\u503c\u3002 \u56e0\u4e3a\u662f\u6b63\u5f26\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u8003\u8651\u6b63\u5f26\u5b9a\u7406\uff0c \\[ a^2=b^2+c^2+bc \\] \u4e8e\u662f \\(\\angle A=120^\\circ\\) \u3002 \u8003\u8651\u5468\u957f\u6700\u5927\uff0c\u5373 \\(b+c\\) \u6700\u5927\uff0c \\[ a^2=9=b^2+c^2+bc\\ge3bc\\\\ bc\\le3 \\] \u8003\u8651\u5468\u957f\u5982\u4f55\u5efa\u7acb\u8054\u7cfb \\[ b+c=\\sqrt{b^2+c^2+2bc}=\\sqrt{9+bc}\\le2\\sqrt3 \\] \u5373\u5468\u957f\uff0c \\[ a+b+c\\le2\\sqrt3+3 \\]","title":"\u4f8b\u9898\u5341\u4e94"},{"location":"math/linear-algebra/vector/#_50","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ \\sin A+2\\sin B\\cos C=0\\\\ c=\\sqrt3b \\] \u6c42 \\(\\tan A\\) \u3002 \u8003\u8651\u5230\u7b2c\u4e8c\u4e2a\u5f88\u9002\u5408\u6d88\u5143 \\(c\\) \uff0c\u4e8e\u662f\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u770b\u6210\u4e00\u6b21\u9f50\u6b21\uff0c \\[ a+2b\\cos C=0\\\\ \\cos C=-{a\\over2b}={a^2+b^2-c^2\\over2bc}={a^2-2b^2\\over2bc} \\] \u56e0\u6b64\uff0c \\[ a^2=b^2\\\\ a=b \\] \u56e0\u4e3a \\(c=\\sqrt3b\\) \uff0c\u8fd9\u662f\u4e00\u4e2a \\(30^\\circ,30^\\circ,120^\\circ\\) \u7684\u7b49\u8170\u4e09\u89d2\u5f62\uff0c \\[ \\tan A=\\tan30^\\circ={\\sqrt3\\over3} \\]","title":"\u4f8b\u9898\u5341\u516d"},{"location":"math/linear-algebra/vector/#_51","text":"\u5728 \\(\\triangle ABC\\) \u4e2d\uff0c \\[ a^2+b^2=2022c^2 \\] \u6c42\uff0c \\[ {2\\tan A\\tan B\\over\\tan C(\\tan A+\\tan B)} \\] \u8003\u8651\u5230\u6ca1\u6709\u4ec0\u4e48\u597d\u73a9\u7684\u7ed3\u6784\uff0c\u56e0\u6b64\u5c55\u5f00\u6b63\u5207\u3002 \\[ \\begin{aligned} S&={2\\tan A\\tan B\\over\\tan C(\\tan A+\\tan B)}\\\\ &={2\\sin A\\sin B\\over\\sin C/\\cos C\\cdot(\\sin A\\cos B+\\cos A+\\sin B)}\\\\ &={2\\sin A\\sin B\\cos C\\over\\sin^2C} \\end{aligned} \\] \u8003\u8651\u5230\u4e0a\u4e0b\u6b63\u5f26\u6784\u6210\u4e8c\u6b21\u9f50\u6b21\uff0c\u6b63\u5f26\u5b9a\u7406\uff0c \\[ \\begin{aligned} S&={2\\sin A\\sin B\\cos C\\over\\sin^2C}\\\\ &={2ab\\cos C\\over c^2} \\end{aligned} \\] \u6ce8\u610f\u5230 \\(2ab\\) \u548c \\(\\cos C\\) \u7684\u4f59\u5f26\u5b9a\u7406\u7684\u5206\u6bcd\u7c7b\u4f3c\uff0c \\[ \\cos C={a^2+b^2-c^2\\over2ab} \\] \\[ \\begin{aligned} S&={a^2+b^2-c^2\\over c^2}={a^2+b^2\\over c^2}-1\\\\ &=2022-1=2021 \\end{aligned} \\]","title":"\u4f8b\u9898\u5341\u4e03"},{"location":"math/linear-algebra/vector/#_52","text":"\u5728\u9510\u89d2\u4e09\u89d2\u5f62 \\(ABC\\) \u4e2d\uff0c \\(a^2-b^2=bc\\) \u3002 \u6c42\u8bc1\uff1a \\(A=2B\\) \u3002 \u7ecf\u5178\u9898\uff0c\u56e0\u4e3a\u89d2\u4e0d\u597d\u8868\u793a\uff0c\u4e0a\u5f0f\u53c8\u662f\u8fb9\u7684\u4e8c\u6b21\u9f50\u6b21\u5f0f\uff0c\u8003\u8651\uff0c \\[ \\cos A={b^2+c^2-a^2\\over2bc}={c^2-bc\\over2bc}={c-b\\over2b}\\\\ \\] \\[ \\begin{aligned} \\cos 2B&=2\\cos^2B-1=2\\left({a^2+c^2-b^2\\over2ac}\\right)^2-1\\\\ &=2\\left({c+b\\over2a}\\right)^2-1={2c^2+2b^2+4bc-4a^2\\over4a^2}\\\\ &={2c^2-2b^2\\over4b^2+4bc}={2(c+b)(c-b)\\over4b(b+c)}={c-b\\over2b} \\end{aligned} \\] \u4e8e\u662f\uff0c \\[ (\\cos A=\\cos2B)\\Longrightarrow(A=2B) \\]","title":"\u4f8b\u9898\u5341\u516b"},{"location":"math/linear-algebra/vector/#cf995c","text":"\u9898\u76ee\uff1a CF995C Leaving the Bar \u9898\u76ee\u7b80\u8ff0\uff1a\u7ed9\u5b9a \\(n\\) \u4e2a\u5411\u91cf\uff0c\u4f60\u5c06\u4e00\u4e9b\u5411\u91cf\u53d6\u53cd\uff0c\u8bd5\u6c42\u51fa\u4e00\u79cd\u53d6\u53cd\u65b9\u6cd5\uff0c\u4f7f\u5f97\u8fd9 \\(n\\) \u4e2a\u5411\u91cf\u4e4b\u548c\u7684\u6a21\u5c0f\u4e8e \\(1.5\\times10^6\\) \u3002 \u6b63\u89e3\u601d\u8def\uff1a\u8003\u8651\u4efb\u610f\u4e09\u4e2a\u5411\u91cf \\(\\vec v_1,\\vec v_2,\\vec v_3\\) \u53ca\u5176\u53d6\u53cd\u7684\u5411\u91cf \\(-\\vec v_1,-\\vec v_2,-\\vec v_3\\) \u3002\u6b64\u65f6\u4e00\u5171\u6709\u4e86 \\(6\\) \u4e2a\u5411\u91cf\u3002\u6839\u636e\u62bd\u5c49\u539f\u7406\uff0c\u8fd9\u516d\u4e2a\u5411\u91cf\u4e00\u5b9a\u5b58\u5728\u4e24\u4e2a\u5411\u91cf\uff0c\u5176\u5939\u89d2\u5c0f\u4e8e\u7b49\u4e8e \\(60^\\circ\\) \u3002\u6839\u636e\u4f59\u5f26\u5b9a\u7406 \\(a^2=b^2+c^2-2bc\\cos\\theta\\) \u3002\u5f53 \\(\\theta\\le60^\\circ\\) \uff0c \\(2\\cos\\theta\\ge1\\) \uff0c\u5219 \\(2bc\\cos\\theta\\ge bc\\) \u3002\u8bb0 \\(M=\\max\\{b,c\\}\\) \uff0c\u6709 \\(a^2\\le b^2+c^2-ab\\le 2M^2-M^2=M^2\\) \u3002\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u5411\u91cf\u76f8\u52a0\u540e\u5f97\u5230\u7684\u5411\u91cf\u7684\u6a21\u4e00\u5b9a\u4e0d\u8d85\u8fc7\u8fd9\u4e24\u4e2a\u5411\u91cf\u7684\u6a21\u7684\u8f83\u5927\u503c\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5408\u5e76\u4efb\u610f\u4e09\u4e2a\u5411\u91cf\uff0c\u6700\u7ec8\u5f97\u5230\u4e24\u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(10^6\\) \u7684\u5411\u91cf\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u8fd9\u4e24\u4e2a\u5411\u91cf\u5982\u4f55\u5b9a\u5411\u53bb\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u8fd9\u4e24\u4e2a\u5411\u91cf\u5782\u76f4\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u5408\u5e76\u7684\u7ed3\u679c\u6700\u5927\uff0c\u4e14\u4e00\u5b9a\u4e0d\u8d85\u8fc7 \\(\\sqrt 2\\times10^6<1.5\\times10^6\\) \u3002 \u7136\u800c\u4f5c\u8005\u4e0d\u4f1a\u8fd9\u4e2a\u601d\u8def\u3002\u4e8e\u662f\u91c7\u53d6\u4e86\u4e00\u4e2a\u968f\u673a\u5316\u7684\u65b9\u6cd5\u3002\u8003\u8651\u968f\u673a\u91cd\u6392\u8fd9\u4e9b\u5411\u91cf\u3002\u7136\u540e\u7528\uff08\u5047\u7684\uff09\u8d2a\u5fc3\u601d\u8def\u6765\u5408\u5e76\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5411\u91cf\u53ea\u8003\u8651\u5408\u5e76\u4e0a\u5b83\u7684\u5f53\u524d\u7684\u6700\u4f18\u60c5\u51b5\u3002\u90a3\u4e48\u8fd9\u4e2a\u601d\u8def\u53ef\u80fd\uff08\u5f88\u5bb9\u6613\uff09\u88ab Hack\u3002\u4e8e\u662f\u6211\u4eec\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u77e5\u9053\u627e\u5230\u4e00\u7ec4\u89e3\u5373\u53ef\u3002\u4ee3\u7801\u5982\u4e0b\uff1a #include <bits/stdc++.h> using namespace std; #define range(x) x.begin(), x.end() struct emm { int id, x, y; }; mt19937 rd(time(0) * clock()); int n; vector<emm> a; vector<int> ans; double dis(int x, int y) { return sqrt(1.0 * x * x + 1.0 * y * y); } double solev() { shuffle(range(a), rd); int x = 0, y = 0; for (auto &[id, i, j] : a) { ans[id] = dis(x + i, y + j) < dis(x - i, y - j) ? 1 : -1; x += i * ans[id], y += j * ans[id]; } return dis(x, y); } void print() { for (int i : ans) cout << i << \" \"; cout << endl; } signed main() { ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr); cin >> n; a.resize(n), ans.resize(n); for (int i = 0; i < n; ++i) cin >> a[i].x >> a[i].y, a[i].id = i; while (1) if (solev() <= 1.5e6) print(), exit(0); return 0; }","title":"\u4f8b\u9898\uff1aCF995C"},{"location":"math/linear-algebra/vector/#reference","text":"[1] https://oi-wiki.org/math/linear-algebra/vector/ [2] https://oi-wiki.org/math/linear-algebra/product/","title":"Reference"},{"location":"math/number-theory/","text":"\u521d\u7b49\u6570\u8bba \u00b6 \u521d\u7b49\u6570\u8bba\u662f\u7814\u7a76\u6570\u7684\u89c4\u5f8b\uff0c\u7279\u522b\u662f\u6574\u6570\u6027\u8d28\u7684\u6570\u5b66\u5206\u652f\u3002\u5b83\u662f\u6570\u8bba\u7684\u4e00\u4e2a\u6700\u53e4\u8001\u7684\u5206\u652f\u3002 \u5b83\u4ee5\u7b97\u672f\u65b9\u6cd5\u4e3a\u4e3b\u8981\u7814\u7a76\u65b9\u6cd5\uff0c\u4e3b\u8981\u5185\u5bb9\u6709\u6574\u6570\u7684\u6574\u9664\u7406\u8bba\u3001\u540c\u4f59\u7406\u8bba\u3001\u8fde\u5206\u6570\u7406\u8bba\u548c\u67d0\u4e9b\u7279\u6b8a\u4e0d\u5b9a\u65b9\u7a0b\u3002 \u5b9a\u4e49 \u00b6 \u4e00\u4e9b\u4e0d\u503c\u5f97\u5355\u72ec\u5f00\u6587\u7ae0\u7684\u5185\u5bb9\u3002 \u6574\u9664 \u00b6 \u5bf9\u4e8e\u6574\u6570 \\(a,b\\) \\((b\\neq0)\\) \uff0c\u5982\u679c\u5b58\u5728\u6574\u6570 \\(c\\) \uff0c\u4f7f\u5f97 \\(a=bc\\) \uff0c \u5219\u79f0 \\(b\\) \u6574\u9664 \\(a\\) \uff0c\u8bb0\u4f5c \\(b \\mid a\\) \uff1b\u5426\u5219\u79f0 \\(b\\) \u4e0d\u6574\u9664 \\(a\\) \uff0c\u8bb0\u4f5c \\(b \\nmid a\\) \u3002 \u6027\u8d28 \uff1a \\[ \\def\\arraystretch{1.1} \\begin{array}{rlrl} 1.&a\\mid b&\\Longrightarrow&\\pm a \\mid \\pm b\\\\ 2.&a \\mid b,\\ b\\mid c&\\Longrightarrow&a \\mid c\\\\ 3.&\\forall i:b\\mid a_i&\\Longrightarrow&b\\mid\\Sigma\\ a_ik_i\\\\ 4.&b\\mid a&\\Longrightarrow&bc\\mid ac\\ (c\\in\\mathbb Z,c\\neq0)\\\\ 5.&b\\mid a\\ (a\\neq0)&\\Longrightarrow&|b|\\le|a|\\\\ 5.&b\\mid a,\\ |a|<|b|&\\Longrightarrow&a=0\\\\ \\end{array} \\] \u5b8c\u5168\u5269\u4f59\u7cfb \u00b6 \u82e5 \\(a_1,a_2,\\dots,a_m\\) \u5bf9\u6a21 \\(m\\) \u4e24\u4e24\u4e0d\u540c\u4f59\uff0c\u5219\u8fd9 \\(m\\) \u4e2a\u6570\u6784\u6210\u6a21 \\(m\\) \u7684\u4e00\u4e2a\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u7279\u6b8a\u7684\uff0c\u4efb\u610f\u8fde\u7eed\u7684 \\(m\\) \u4e2a\u6574\u6570\u90fd\u6784\u6210\u6a21 \\(m\\) \u7684\u4e00\u4e2a\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u4f8b\u9898 \u00b6 \u6570\u7ade\u5411\uff0c\u5efa\u8bae\u5148\u5b66\u5b8c\u6574\u7ae0\u3002 \u4f8b\u9898\u4e00 \u00b6 \u7ed9\u5b9a\u6a21 \\(m\\) \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb \\(x_1,\\dots,x_m\\) \uff0c\u82e5 \\(a \\perp m\\) \uff0c\u8bf7\u8bc1\u660e \\(ax_1,\\dots,ax_m\\) \u4e5f\u662f\u6a21 \\(m\\) \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u53cd\u8bc1 \uff1a\u5047\u8bbe \\(ax_1,\\dots,ax_m\\) \u4e0d\u662f\u6a21 \\(m\\) \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u5219\u4e00\u5b9a\u5b58\u5728 \\(i\\neq j\\) \u4f7f\u5f97 \\(ax_i\\equiv ax_j\\pmod m\\) \u3002 \u56e0\u4e3a \\(a \\perp m\\) \uff0c\u56e0\u6b64\u6709 \\(x_i\\equiv x_j\\pmod m\\) \u3002 \u4e0e \\(x_1,\\dots,x_m\\) \u4e3a\u6a21 \\(m\\) \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u4e0d\u7b26\u3002 \u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u6545 \\(ax_1,\\dots,ax_m\\) \u662f\u6a21 \\(m\\) \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u4f8b\u9898\u4e8c \u00b6 \u8bbe \\(n\\) \u662f\u6574\u6570\uff0c\u8bf7\u8bc1\u660e\uff1a \\(120 \\mid n(n^2-1)(n^2-5n+26)\\) \u3002 \u5b9a\u7406 \uff1a\u8fde\u7eed \\(n\\) \u4e2a\u6574\u6570\u7684\u4e58\u79ef\u4e00\u5b9a\u88ab \\(n!\\) \u6574\u9664\u3002 \u5bf9\u4e8e\u8fd9 \\(n\\) \u4e2a\u6570\u90fd\u662f\u6b63\u6574\u6570\u7684\uff1a \\[ \\begin{array}{l} (a+1)(a+2)\\dots(a+n)=\\frac{(a+n)!}{a!}=n!\\frac{(a+n)!}{n!a!}=n!\\binom{a+n}{a} \\end{array} \\] \u800c\u5982\u679c\u8fd9 \\(n\\) \u4e2a\u6570\u5b58\u5728\u4e0d\u662f\u6b63\u6574\u6570\u7684\uff0c\u90a3\u4e48\u4e00\u5b9a\u8de8\u8fc7\u4e86 \\(0\\) \uff0c\u4e58\u79ef\u4e3a \\(0\\) \uff0c\u6574\u9664\u662f\u663e\u7136\u7684\u3002 \u8bc1\u660e \uff1a \\[ \\def\\arraystretch{1.1} \\begin{array}{ll} &n(n^2-1)(n^2-5n+26)\\\\ =&n(n+1)(n-1)[(n-2)(n-3)+20]\\\\ =&(n-3)(n-2)(n-1)n(n+1)+20(n-1)n(n+1) \\end{array} \\] \u56e0\u4e3a\uff1a \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} 120&\\mid& (n-3)(n-2)(n-1)n(n+1)\\\\ 6&\\mid& (n-1)n(n+1)\\\\ 120&\\mid& 20(n-1)n(n+1) \\end{array} \\] \u56e0\u6b64 \\(120\\mid(n-3)(n-2)(n-1)n(n+1)+20(n-1)n(n+1)\\) \u3002 \u5373 \\(120 \\mid n(n^2-1)(n^2-5n+26)\\) \u3002 \u4f8b\u9898\u4e09 \u00b6 \u8bbe \\(n\\) \u662f\u6b63\u6574\u6570\uff0c\u4e14 \\(2n+1\\) \u4e0e \\(3n+1\\) \u90fd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002\u8bf7\u8bc1\u660e\uff1a \\(40 \\mid n\\) \u3002 \u6027\u8d28\uff11 \uff1a\u5947\u6570\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u6a21 \\(8\\) \u540c\u4f59\u4e8e \\(1\\) \u3002 \\[(2k+1)^2\\equiv4k(k+1)+1\\equiv1\\pmod8\\] \u6027\u8d28\uff12 \uff1a\u4efb\u4f55\u4e00\u4e2a\u6570\u7684\u5e73\u65b9\u6a21 \\(5\\) \u540c\u4f59\u4e8e \\(0,\\pm1\\) \u3002 \\[ \\def\\arraystretch{1.1} \\begin{array}{lcll} t&\\equiv&0,\\pm1,\\pm2&\\pmod5\\\\ t^2&\\equiv&0,\\pm1&\\pmod5 \\end{array} \\] \u8bc1\u660e \uff1a \u56e0\u4e3a \\(2n+1\\) \u662f\u5947\u6570\u4e14\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcll} 2n+1&\\equiv&1&\\pmod8\\\\ n&\\equiv&0&\\pmod4 \\end{array} \\] \u6240\u4ee5\uff0c \\(n\\) \u662f\u5076\u6570\uff0c \\(3n+1\\) \u662f\u5947\u6570\u4e14\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcll} 3n+1&\\equiv&1&\\pmod8\\\\ n&\\equiv&0&\\pmod8 \\end{array} \\] \u4e14 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcll} 2n+1&\\equiv&0,\\pm1&\\pmod5\\\\ 3n+1&\\equiv&0,\\pm1&\\pmod5 \\end{array} \\] \u5219\u6709 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcll} (2n+1)+(3n+1)&\\equiv&2&\\pmod5\\\\ 2n+1&\\equiv&1&\\pmod5\\\\ 3n+1&\\equiv&1&\\pmod5\\\\ n&\\equiv&0&\\pmod5 \\end{array} \\] \u56e0\u6b64 \\(n\\equiv0\\pmod{40}\\) \uff0c\u5373 \\(40 \\mid n\\) \u3002 \u4f8b\u9898\u56db \u00b6 \u6c42 \\(10^{10} \\bmod 7\\) \u3002 \\[ \\def\\arraystretch{1.1} \\begin{array}{ll} &10^{10} \\bmod 7\\\\ =&(10 \\bmod 7)^{10\\bmod 6}\\bmod 7\\\\ =&3^4\\bmod7\\\\ =&81\\bmod7\\\\ =&4 \\end{array} \\] \u5373 \\(10^{10}\\bmod7=4\\) \u3002 \u4f8b\u9898\u4e94 \u00b6 \u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6b63\u6574\u6570\u89e3\uff1a \\((a,b)+[a,b]+a+b=ab\\) \u3002 \u8bbe \\(d=(a,b)\\) \uff0c\u5219\u8bb0 \\(a=a_0d\\) \uff0c \\(b=b_0d\\) \uff08 \\(a_0\\perp b_0\\) \uff09\u3002 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} (a,b)+[a,b]+a+b&=&ab\\\\ d+a_0b_0d+a_0d+b_0d&=&a_0b_0d^2\\\\ a_0b_0+a_0+b_0+1&=&a_0b_0d \\end{array} \\] \u56e0\u4e3a \\(a_0b_0\\ge a_0b_0,a_0,b_0\\ge1\\) \uff0c\u6240\u4ee5 \\(0<d\\le4\\) \u3002 \u5f53 \\(d=1\\) \u65f6\uff0c \\(a_0+b_0+1=0\\) \uff0c\u65e0\u89e3\u3002 \u5f53 \\(d=2\\) \u65f6\uff0c \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} a_0b_0+a_0+b_0+1&=&2a_0b_0\\\\ a_0b_0-a_0-b_0&=&1\\\\ a_0(b_0-1)-(b_0-1)&=&2\\\\ (a_0-1)(b_0-1)&=&2\\\\ \\end{array} \\] \\(a_0-1=1\\) \uff0c \\(b_0-1=2\\) \uff1b \\(a_0=2\\) \uff0c \\(b_2=3\\) \uff1b \\(a=4\\) \uff0c \\(b=6\\) \u3002 \\(a_0-1=2\\) \uff0c \\(b_0-1=1\\) \uff1b \\(a_0=3\\) \uff0c \\(b_2=2\\) \uff1b \\(a=6\\) \uff0c \\(b=4\\) \u3002 \u5f53 \\(d=3\\) \u65f6\uff0c \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} a_0b_0+a_0+b_0+1&=&3a_0b_0\\\\ 2a_0b_0-a_0-b_0&=&1\\\\ 4a_0b_0-2a_0-2b_0&=&2\\\\ 2a_0(2b_0-1)-(2b_0-1)&=&3\\\\ (2a_0-1)(2b_0-1)&=&3\\\\ \\end{array} \\] \\(2a_0-1=1\\) \uff0c \\(2b_0-1=3\\) \uff1b \\(a_0=1\\) \uff0c \\(b_2=2\\) \uff1b \\(a=3\\) \uff0c \\(b=6\\) \u3002 \\(2a_0-1=3\\) \uff0c \\(2b_0-1=1\\) \uff1b \\(a_0=2\\) \uff0c \\(b_2=1\\) \uff1b \\(a=6\\) \uff0c \\(b=3\\) \u3002 \u5f53 \\(d=4\\) \u65f6\uff0c \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} a_0b_0+a_0+b_0+1&=&4a_0b_0\\\\ 3a_0b_0-a_0-b_0&=&1\\\\ 9a_0b_0-3a_0-3b_0&=&3\\\\ 3a_0(3b_0-1)-(3b_0-1)&=&4\\\\ (3a_0-1)(3b_0-1)&=&4\\\\ \\end{array} \\] \\(3a_0-1=2\\) \uff0c \\(3b_0-1=2\\) \uff1b \\(a_0=b_0=1\\) \uff1b \\(a=b=4\\) \u3002 \\(2a_0-1=1\\) \uff0c \\(2b_0-1=4\\) \uff1b\u4e0d\u5b58\u5728\u6574\u6570\u89e3\u3002 \\(2a_0-1=4\\) \uff0c \\(2b_0-1=1\\) \uff1b\u4e0d\u5b58\u5728\u6574\u6570\u89e3\u3002 \u56e0\u6b64\uff0c\u53ef\u884c\u89e3\u6709\uff1a \\[ (a,b)=(4,6),(6,4),(3,6),(6,3),(4,4) \\]","title":"\u521d\u7b49\u6570\u8bba"},{"location":"math/number-theory/#_1","text":"\u521d\u7b49\u6570\u8bba\u662f\u7814\u7a76\u6570\u7684\u89c4\u5f8b\uff0c\u7279\u522b\u662f\u6574\u6570\u6027\u8d28\u7684\u6570\u5b66\u5206\u652f\u3002\u5b83\u662f\u6570\u8bba\u7684\u4e00\u4e2a\u6700\u53e4\u8001\u7684\u5206\u652f\u3002 \u5b83\u4ee5\u7b97\u672f\u65b9\u6cd5\u4e3a\u4e3b\u8981\u7814\u7a76\u65b9\u6cd5\uff0c\u4e3b\u8981\u5185\u5bb9\u6709\u6574\u6570\u7684\u6574\u9664\u7406\u8bba\u3001\u540c\u4f59\u7406\u8bba\u3001\u8fde\u5206\u6570\u7406\u8bba\u548c\u67d0\u4e9b\u7279\u6b8a\u4e0d\u5b9a\u65b9\u7a0b\u3002","title":"\u521d\u7b49\u6570\u8bba"},{"location":"math/number-theory/#_2","text":"\u4e00\u4e9b\u4e0d\u503c\u5f97\u5355\u72ec\u5f00\u6587\u7ae0\u7684\u5185\u5bb9\u3002","title":"\u5b9a\u4e49"},{"location":"math/number-theory/#_3","text":"\u5bf9\u4e8e\u6574\u6570 \\(a,b\\) \\((b\\neq0)\\) \uff0c\u5982\u679c\u5b58\u5728\u6574\u6570 \\(c\\) \uff0c\u4f7f\u5f97 \\(a=bc\\) \uff0c \u5219\u79f0 \\(b\\) \u6574\u9664 \\(a\\) \uff0c\u8bb0\u4f5c \\(b \\mid a\\) \uff1b\u5426\u5219\u79f0 \\(b\\) \u4e0d\u6574\u9664 \\(a\\) \uff0c\u8bb0\u4f5c \\(b \\nmid a\\) \u3002 \u6027\u8d28 \uff1a \\[ \\def\\arraystretch{1.1} \\begin{array}{rlrl} 1.&a\\mid b&\\Longrightarrow&\\pm a \\mid \\pm b\\\\ 2.&a \\mid b,\\ b\\mid c&\\Longrightarrow&a \\mid c\\\\ 3.&\\forall i:b\\mid a_i&\\Longrightarrow&b\\mid\\Sigma\\ a_ik_i\\\\ 4.&b\\mid a&\\Longrightarrow&bc\\mid ac\\ (c\\in\\mathbb Z,c\\neq0)\\\\ 5.&b\\mid a\\ (a\\neq0)&\\Longrightarrow&|b|\\le|a|\\\\ 5.&b\\mid a,\\ |a|<|b|&\\Longrightarrow&a=0\\\\ \\end{array} \\]","title":"\u6574\u9664"},{"location":"math/number-theory/#_4","text":"\u82e5 \\(a_1,a_2,\\dots,a_m\\) \u5bf9\u6a21 \\(m\\) \u4e24\u4e24\u4e0d\u540c\u4f59\uff0c\u5219\u8fd9 \\(m\\) \u4e2a\u6570\u6784\u6210\u6a21 \\(m\\) \u7684\u4e00\u4e2a\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u7279\u6b8a\u7684\uff0c\u4efb\u610f\u8fde\u7eed\u7684 \\(m\\) \u4e2a\u6574\u6570\u90fd\u6784\u6210\u6a21 \\(m\\) \u7684\u4e00\u4e2a\u5b8c\u5168\u5269\u4f59\u7cfb\u3002","title":"\u5b8c\u5168\u5269\u4f59\u7cfb"},{"location":"math/number-theory/#_5","text":"\u6570\u7ade\u5411\uff0c\u5efa\u8bae\u5148\u5b66\u5b8c\u6574\u7ae0\u3002","title":"\u4f8b\u9898"},{"location":"math/number-theory/#_6","text":"\u7ed9\u5b9a\u6a21 \\(m\\) \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb \\(x_1,\\dots,x_m\\) \uff0c\u82e5 \\(a \\perp m\\) \uff0c\u8bf7\u8bc1\u660e \\(ax_1,\\dots,ax_m\\) \u4e5f\u662f\u6a21 \\(m\\) \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u53cd\u8bc1 \uff1a\u5047\u8bbe \\(ax_1,\\dots,ax_m\\) \u4e0d\u662f\u6a21 \\(m\\) \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u5219\u4e00\u5b9a\u5b58\u5728 \\(i\\neq j\\) \u4f7f\u5f97 \\(ax_i\\equiv ax_j\\pmod m\\) \u3002 \u56e0\u4e3a \\(a \\perp m\\) \uff0c\u56e0\u6b64\u6709 \\(x_i\\equiv x_j\\pmod m\\) \u3002 \u4e0e \\(x_1,\\dots,x_m\\) \u4e3a\u6a21 \\(m\\) \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u4e0d\u7b26\u3002 \u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u6545 \\(ax_1,\\dots,ax_m\\) \u662f\u6a21 \\(m\\) \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u3002","title":"\u4f8b\u9898\u4e00"},{"location":"math/number-theory/#_7","text":"\u8bbe \\(n\\) \u662f\u6574\u6570\uff0c\u8bf7\u8bc1\u660e\uff1a \\(120 \\mid n(n^2-1)(n^2-5n+26)\\) \u3002 \u5b9a\u7406 \uff1a\u8fde\u7eed \\(n\\) \u4e2a\u6574\u6570\u7684\u4e58\u79ef\u4e00\u5b9a\u88ab \\(n!\\) \u6574\u9664\u3002 \u5bf9\u4e8e\u8fd9 \\(n\\) \u4e2a\u6570\u90fd\u662f\u6b63\u6574\u6570\u7684\uff1a \\[ \\begin{array}{l} (a+1)(a+2)\\dots(a+n)=\\frac{(a+n)!}{a!}=n!\\frac{(a+n)!}{n!a!}=n!\\binom{a+n}{a} \\end{array} \\] \u800c\u5982\u679c\u8fd9 \\(n\\) \u4e2a\u6570\u5b58\u5728\u4e0d\u662f\u6b63\u6574\u6570\u7684\uff0c\u90a3\u4e48\u4e00\u5b9a\u8de8\u8fc7\u4e86 \\(0\\) \uff0c\u4e58\u79ef\u4e3a \\(0\\) \uff0c\u6574\u9664\u662f\u663e\u7136\u7684\u3002 \u8bc1\u660e \uff1a \\[ \\def\\arraystretch{1.1} \\begin{array}{ll} &n(n^2-1)(n^2-5n+26)\\\\ =&n(n+1)(n-1)[(n-2)(n-3)+20]\\\\ =&(n-3)(n-2)(n-1)n(n+1)+20(n-1)n(n+1) \\end{array} \\] \u56e0\u4e3a\uff1a \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} 120&\\mid& (n-3)(n-2)(n-1)n(n+1)\\\\ 6&\\mid& (n-1)n(n+1)\\\\ 120&\\mid& 20(n-1)n(n+1) \\end{array} \\] \u56e0\u6b64 \\(120\\mid(n-3)(n-2)(n-1)n(n+1)+20(n-1)n(n+1)\\) \u3002 \u5373 \\(120 \\mid n(n^2-1)(n^2-5n+26)\\) \u3002","title":"\u4f8b\u9898\u4e8c"},{"location":"math/number-theory/#_8","text":"\u8bbe \\(n\\) \u662f\u6b63\u6574\u6570\uff0c\u4e14 \\(2n+1\\) \u4e0e \\(3n+1\\) \u90fd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002\u8bf7\u8bc1\u660e\uff1a \\(40 \\mid n\\) \u3002 \u6027\u8d28\uff11 \uff1a\u5947\u6570\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u6a21 \\(8\\) \u540c\u4f59\u4e8e \\(1\\) \u3002 \\[(2k+1)^2\\equiv4k(k+1)+1\\equiv1\\pmod8\\] \u6027\u8d28\uff12 \uff1a\u4efb\u4f55\u4e00\u4e2a\u6570\u7684\u5e73\u65b9\u6a21 \\(5\\) \u540c\u4f59\u4e8e \\(0,\\pm1\\) \u3002 \\[ \\def\\arraystretch{1.1} \\begin{array}{lcll} t&\\equiv&0,\\pm1,\\pm2&\\pmod5\\\\ t^2&\\equiv&0,\\pm1&\\pmod5 \\end{array} \\] \u8bc1\u660e \uff1a \u56e0\u4e3a \\(2n+1\\) \u662f\u5947\u6570\u4e14\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcll} 2n+1&\\equiv&1&\\pmod8\\\\ n&\\equiv&0&\\pmod4 \\end{array} \\] \u6240\u4ee5\uff0c \\(n\\) \u662f\u5076\u6570\uff0c \\(3n+1\\) \u662f\u5947\u6570\u4e14\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcll} 3n+1&\\equiv&1&\\pmod8\\\\ n&\\equiv&0&\\pmod8 \\end{array} \\] \u4e14 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcll} 2n+1&\\equiv&0,\\pm1&\\pmod5\\\\ 3n+1&\\equiv&0,\\pm1&\\pmod5 \\end{array} \\] \u5219\u6709 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcll} (2n+1)+(3n+1)&\\equiv&2&\\pmod5\\\\ 2n+1&\\equiv&1&\\pmod5\\\\ 3n+1&\\equiv&1&\\pmod5\\\\ n&\\equiv&0&\\pmod5 \\end{array} \\] \u56e0\u6b64 \\(n\\equiv0\\pmod{40}\\) \uff0c\u5373 \\(40 \\mid n\\) \u3002","title":"\u4f8b\u9898\u4e09"},{"location":"math/number-theory/#_9","text":"\u6c42 \\(10^{10} \\bmod 7\\) \u3002 \\[ \\def\\arraystretch{1.1} \\begin{array}{ll} &10^{10} \\bmod 7\\\\ =&(10 \\bmod 7)^{10\\bmod 6}\\bmod 7\\\\ =&3^4\\bmod7\\\\ =&81\\bmod7\\\\ =&4 \\end{array} \\] \u5373 \\(10^{10}\\bmod7=4\\) \u3002","title":"\u4f8b\u9898\u56db"},{"location":"math/number-theory/#_10","text":"\u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6b63\u6574\u6570\u89e3\uff1a \\((a,b)+[a,b]+a+b=ab\\) \u3002 \u8bbe \\(d=(a,b)\\) \uff0c\u5219\u8bb0 \\(a=a_0d\\) \uff0c \\(b=b_0d\\) \uff08 \\(a_0\\perp b_0\\) \uff09\u3002 \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} (a,b)+[a,b]+a+b&=&ab\\\\ d+a_0b_0d+a_0d+b_0d&=&a_0b_0d^2\\\\ a_0b_0+a_0+b_0+1&=&a_0b_0d \\end{array} \\] \u56e0\u4e3a \\(a_0b_0\\ge a_0b_0,a_0,b_0\\ge1\\) \uff0c\u6240\u4ee5 \\(0<d\\le4\\) \u3002 \u5f53 \\(d=1\\) \u65f6\uff0c \\(a_0+b_0+1=0\\) \uff0c\u65e0\u89e3\u3002 \u5f53 \\(d=2\\) \u65f6\uff0c \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} a_0b_0+a_0+b_0+1&=&2a_0b_0\\\\ a_0b_0-a_0-b_0&=&1\\\\ a_0(b_0-1)-(b_0-1)&=&2\\\\ (a_0-1)(b_0-1)&=&2\\\\ \\end{array} \\] \\(a_0-1=1\\) \uff0c \\(b_0-1=2\\) \uff1b \\(a_0=2\\) \uff0c \\(b_2=3\\) \uff1b \\(a=4\\) \uff0c \\(b=6\\) \u3002 \\(a_0-1=2\\) \uff0c \\(b_0-1=1\\) \uff1b \\(a_0=3\\) \uff0c \\(b_2=2\\) \uff1b \\(a=6\\) \uff0c \\(b=4\\) \u3002 \u5f53 \\(d=3\\) \u65f6\uff0c \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} a_0b_0+a_0+b_0+1&=&3a_0b_0\\\\ 2a_0b_0-a_0-b_0&=&1\\\\ 4a_0b_0-2a_0-2b_0&=&2\\\\ 2a_0(2b_0-1)-(2b_0-1)&=&3\\\\ (2a_0-1)(2b_0-1)&=&3\\\\ \\end{array} \\] \\(2a_0-1=1\\) \uff0c \\(2b_0-1=3\\) \uff1b \\(a_0=1\\) \uff0c \\(b_2=2\\) \uff1b \\(a=3\\) \uff0c \\(b=6\\) \u3002 \\(2a_0-1=3\\) \uff0c \\(2b_0-1=1\\) \uff1b \\(a_0=2\\) \uff0c \\(b_2=1\\) \uff1b \\(a=6\\) \uff0c \\(b=3\\) \u3002 \u5f53 \\(d=4\\) \u65f6\uff0c \\[ \\def\\arraystretch{1.1} \\begin{array}{rcl} a_0b_0+a_0+b_0+1&=&4a_0b_0\\\\ 3a_0b_0-a_0-b_0&=&1\\\\ 9a_0b_0-3a_0-3b_0&=&3\\\\ 3a_0(3b_0-1)-(3b_0-1)&=&4\\\\ (3a_0-1)(3b_0-1)&=&4\\\\ \\end{array} \\] \\(3a_0-1=2\\) \uff0c \\(3b_0-1=2\\) \uff1b \\(a_0=b_0=1\\) \uff1b \\(a=b=4\\) \u3002 \\(2a_0-1=1\\) \uff0c \\(2b_0-1=4\\) \uff1b\u4e0d\u5b58\u5728\u6574\u6570\u89e3\u3002 \\(2a_0-1=4\\) \uff0c \\(2b_0-1=1\\) \uff1b\u4e0d\u5b58\u5728\u6574\u6570\u89e3\u3002 \u56e0\u6b64\uff0c\u53ef\u884c\u89e3\u6709\uff1a \\[ (a,b)=(4,6),(6,4),(3,6),(6,3),(4,4) \\]","title":"\u4f8b\u9898\u4e94"},{"location":"math/number-theory/bsgs/","text":"BSGS \u7b97\u6cd5 \u00b6 \u57fa\u7840 BSGS \u7b97\u6cd5 \u00b6 \u5373 Baby-Step Giant-Step \u7b97\u6cd5\u3002 \u8fc7\u7a0b \u00b6 \u6c42\u89e3\u6ee1\u8db3\uff0c \\[ a^x\\equiv b\\pmod p \\] \u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\uff1b\u5176\u4e2d \\(a,b,m\\in\\mathbb Z^+\\) \uff0c \\(a\\perp p\\) \u3002 \u6027\u8d28 \uff1a\u4e00\u5b9a\u6709 \\(b\\le\\varphi(p)\\) \uff08\u53d6\u7b49\u662f\u6c42\u89e3\u6700\u5c0f\u6b63\u6574\u6570\u89e3\uff09\u3002 \u8bc1\u660e \u6211\u4eec\u77e5\u9053\uff0c \\[ x=q\\times\\varphi(p)+r,0\\le r\\le\\varphi(p) \\] \u90a3\u4e48\uff0c \\[ a^x=a^{q\\times\\varphi(p)+r}\\equiv a^r\\pmod p \\] \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c \\(x\\) \u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48 \\(r\\) \u4e5f\u6ee1\u8db3\u6761\u4ef6\u3002 \u6216\u8005\u79f0\u4e3a \\(a^x\\) \u7684\u5faa\u73af\u8282\u4e3a \\(\\varphi(p)\\) \uff0c\u56e0\u6b64\u8fd9\u4e2a \\(r\\le\\varphi(p)\\) \u7684\u663e\u7136\u7684\u3002 \u8003\u8651\u5206\u5757\uff0c\u8bb0\uff0c \\[ m=\\lceil\\sqrt p\\rceil \\] \u8bbe\uff0c \\[ x=Am-B \\] \u5176\u4e2d \\(A\\in[1,m]\\) \uff0c \\(B\\in[0,m-1]\\) \uff08\u8fd9\u662f\u663e\u7136\u7684\uff09\u3002 \u5e26\u5165\u539f\u5f0f 1 \uff0c \\[ \\begin{aligned} a^{Am-B}&\\equiv b\\pmod p\\\\ a^{Am}&\\equiv ba^B\\pmod p \\end{aligned} \\] \u6211\u4eec\u8981\u6c42\u89e3\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u7684 \\(A,B\\) \u5e76\u6700\u5c0f\u5316 \\(Am-B\\) \u3002 \u5bb9\u6613\u77e5\u9053\u6211\u4eec\u8981\u6700\u5c0f\u5316 \\(A\\) \u3001\u6700\u5927\u5316 \\(B\\) \u3002 Baby-Step\uff1a\u6211\u4eec\u679a\u4e3e \\(B\\) \uff0c\u5c06\u53f3\u4fa7\u7684\u503c\u7528 map \u8bb0\u5f55\u4e0b\u6765\u6700\u5927\u7684 \\(B\\) \u3002 Giant-Step\uff1a\u6211\u4eec\u679a\u4e3e \\(A\\) \uff0c\u8ba1\u7b97\u5de6\u4fa7\uff0c\u5bfb\u627e map \u4e2d\u662f\u5426\u6709\u4e0e\u4e4b\u76f8\u5bf9\u7684\u503c\u3002 \u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f \\(\\mathcal O(\\sqrt p)\\) \u7684\uff08\u4f7f\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0 map \u7684\u64cd\u4f5c\uff09\u3002 \u5b9e\u73b0 \u00b6 \u6ce8\u610f\u5230\u5982\u679c \\(p\\) \u672c\u8eab\u662f int64 \u7ea7\u522b\u7684\uff0c \u90a3\u4e48\u4e24\u4e2a \\(p\\) \u7ea7\u522b\u7684\u6570\u76f8\u4e58\u4f1a\u7206\u6389\uff0c\u56e0\u6b64\u7528 int128 \u5373\u53ef\u3002 using ll = long long; ll qpow(ll a, ll b, ll p) { ll r = 1; for (; b; b >>= 1) { if (b & 1) r = (__int128)r * a % p; a = (__int128)a * a % p; } return r % p; } ll bsgs(ll a, ll b, ll p) { a %= p; b %= p; if (b == 1) return 0; ll m = ceil(sqrtl(p)), r; unordered_map<ll, int> bucket; r = b; for (int B = 0; B < m; ++B) { bucket[r] = B; r = (__int128)r * a % p; } ll am = qpow(a, m, p); r = 1; for (int A = 1; A <= m; ++A) { r = (__int128)r * am % p; if (bucket.count(r)) return A * m - bucket[r]; } return -1; } \u5176\u5b9e\u590d\u6742\u5ea6\u74f6\u9888\u4e0d\u5728\u6c42 \\(a^m\\bmod p\\) \uff0c\u4f46\u662f\u5feb\u901f\u5e42\u5199\u4e60\u60ef\u4e86\u4e5f\u6ca1\u95ee\u9898\u3002 \u6b64\u5904\u4e58\u53d1\u9700\u8981 \\(a^B\\perp p\\) \uff0c\u4e5f\u5c31\u662f \\(a\\perp p\\) \uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 BSGS \u7b97\u6cd5\u9700\u8981 \\(a,p\\) \u4e92\u8d28\u3002 \u21a9","title":"BSGS \u7b97\u6cd5"},{"location":"math/number-theory/bsgs/#bsgs","text":"","title":"BSGS \u7b97\u6cd5"},{"location":"math/number-theory/bsgs/#bsgs_1","text":"\u5373 Baby-Step Giant-Step \u7b97\u6cd5\u3002","title":"\u57fa\u7840 BSGS \u7b97\u6cd5"},{"location":"math/number-theory/bsgs/#_1","text":"\u6c42\u89e3\u6ee1\u8db3\uff0c \\[ a^x\\equiv b\\pmod p \\] \u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\uff1b\u5176\u4e2d \\(a,b,m\\in\\mathbb Z^+\\) \uff0c \\(a\\perp p\\) \u3002 \u6027\u8d28 \uff1a\u4e00\u5b9a\u6709 \\(b\\le\\varphi(p)\\) \uff08\u53d6\u7b49\u662f\u6c42\u89e3\u6700\u5c0f\u6b63\u6574\u6570\u89e3\uff09\u3002 \u8bc1\u660e \u6211\u4eec\u77e5\u9053\uff0c \\[ x=q\\times\\varphi(p)+r,0\\le r\\le\\varphi(p) \\] \u90a3\u4e48\uff0c \\[ a^x=a^{q\\times\\varphi(p)+r}\\equiv a^r\\pmod p \\] \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c \\(x\\) \u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48 \\(r\\) \u4e5f\u6ee1\u8db3\u6761\u4ef6\u3002 \u6216\u8005\u79f0\u4e3a \\(a^x\\) \u7684\u5faa\u73af\u8282\u4e3a \\(\\varphi(p)\\) \uff0c\u56e0\u6b64\u8fd9\u4e2a \\(r\\le\\varphi(p)\\) \u7684\u663e\u7136\u7684\u3002 \u8003\u8651\u5206\u5757\uff0c\u8bb0\uff0c \\[ m=\\lceil\\sqrt p\\rceil \\] \u8bbe\uff0c \\[ x=Am-B \\] \u5176\u4e2d \\(A\\in[1,m]\\) \uff0c \\(B\\in[0,m-1]\\) \uff08\u8fd9\u662f\u663e\u7136\u7684\uff09\u3002 \u5e26\u5165\u539f\u5f0f 1 \uff0c \\[ \\begin{aligned} a^{Am-B}&\\equiv b\\pmod p\\\\ a^{Am}&\\equiv ba^B\\pmod p \\end{aligned} \\] \u6211\u4eec\u8981\u6c42\u89e3\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u7684 \\(A,B\\) \u5e76\u6700\u5c0f\u5316 \\(Am-B\\) \u3002 \u5bb9\u6613\u77e5\u9053\u6211\u4eec\u8981\u6700\u5c0f\u5316 \\(A\\) \u3001\u6700\u5927\u5316 \\(B\\) \u3002 Baby-Step\uff1a\u6211\u4eec\u679a\u4e3e \\(B\\) \uff0c\u5c06\u53f3\u4fa7\u7684\u503c\u7528 map \u8bb0\u5f55\u4e0b\u6765\u6700\u5927\u7684 \\(B\\) \u3002 Giant-Step\uff1a\u6211\u4eec\u679a\u4e3e \\(A\\) \uff0c\u8ba1\u7b97\u5de6\u4fa7\uff0c\u5bfb\u627e map \u4e2d\u662f\u5426\u6709\u4e0e\u4e4b\u76f8\u5bf9\u7684\u503c\u3002 \u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f \\(\\mathcal O(\\sqrt p)\\) \u7684\uff08\u4f7f\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0 map \u7684\u64cd\u4f5c\uff09\u3002","title":"\u8fc7\u7a0b"},{"location":"math/number-theory/bsgs/#_2","text":"\u6ce8\u610f\u5230\u5982\u679c \\(p\\) \u672c\u8eab\u662f int64 \u7ea7\u522b\u7684\uff0c \u90a3\u4e48\u4e24\u4e2a \\(p\\) \u7ea7\u522b\u7684\u6570\u76f8\u4e58\u4f1a\u7206\u6389\uff0c\u56e0\u6b64\u7528 int128 \u5373\u53ef\u3002 using ll = long long; ll qpow(ll a, ll b, ll p) { ll r = 1; for (; b; b >>= 1) { if (b & 1) r = (__int128)r * a % p; a = (__int128)a * a % p; } return r % p; } ll bsgs(ll a, ll b, ll p) { a %= p; b %= p; if (b == 1) return 0; ll m = ceil(sqrtl(p)), r; unordered_map<ll, int> bucket; r = b; for (int B = 0; B < m; ++B) { bucket[r] = B; r = (__int128)r * a % p; } ll am = qpow(a, m, p); r = 1; for (int A = 1; A <= m; ++A) { r = (__int128)r * am % p; if (bucket.count(r)) return A * m - bucket[r]; } return -1; } \u5176\u5b9e\u590d\u6742\u5ea6\u74f6\u9888\u4e0d\u5728\u6c42 \\(a^m\\bmod p\\) \uff0c\u4f46\u662f\u5feb\u901f\u5e42\u5199\u4e60\u60ef\u4e86\u4e5f\u6ca1\u95ee\u9898\u3002 \u6b64\u5904\u4e58\u53d1\u9700\u8981 \\(a^B\\perp p\\) \uff0c\u4e5f\u5c31\u662f \\(a\\perp p\\) \uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 BSGS \u7b97\u6cd5\u9700\u8981 \\(a,p\\) \u4e92\u8d28\u3002 \u21a9","title":"\u5b9e\u73b0"},{"location":"math/number-theory/crt/","text":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u7406\u8bba \u00b6 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff08Chinese Remainder Theorem\uff0cCRT\uff09 \u6c42\u89e3\u5982\u4e0b\u5f62\u5f0f\u7684\u4e00\u5143\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\uff08\u5176\u4e2d \\(m\\) \u4e24\u4e24\u4e92\u8d28\uff09\uff1a \\(\\left\\{\\begin{matrix} x \\equiv a_1 \\pmod {m_1} \\\\ x \\equiv a_2 \\pmod {m_2} \\\\ \\dots \\\\ x \\equiv a_k \\pmod {m_k} \\end{matrix}\\right.\\) \u8fc7\u7a0b \u00b6 \u8ba1\u7b97\u6240\u6709\u6a21\u6570\u7684\u79ef \\(M = \\prod m_i\\) \uff1b \u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u65b9\u7a0b\uff1a \u8ba1\u7b97\uff1a \\(M_i = \\dfrac{M}{m_i}\\) \uff1b \u8ba1\u7b97\uff1a \\(v_i = {M_i}^{-1} \\pmod{m_i}\\) \uff08 \u4e58\u6cd5\u9006\u5143 \uff09\uff1b \u8ba1\u7b97\uff1a \\(c_i = M_iv_i\\) \u3002 \u65b9\u7a0b\u7ec4\u5728 \\(0 \\sim M - 1\\) \u8303\u56f4\u5185\u7684\u552f\u4e00\u89e3\u4e3a\uff1a \\(x = \\sum\\limits_{i = 1}^k a_ic_i \\pmod M\\) \u3002 \u8bc1\u660e \u00b6 \u8bc1\u660e\u5bf9\u4e8e\u4efb\u610f \\(i \\in [1, k]\\) \uff0c\u6709 \\(x\\equiv a_i \\pmod {m_i}\\) \u3002 \u5f53 \\(i\\neq j\\) \u65f6\uff0c \\(M_j\\) \u4e2d\u4e58\u8fdb\u53bb\u4e86 \\(m_i\\) \uff0c\u6240\u4ee5\u6709 \\(M_j \\equiv 0 \\pmod {m_i}\\) \uff0c \u6240\u4ee5 \\(c_j \\equiv M_j \\equiv 0 \\pmod {m_i}\\) \u3002 \u53c8\u6709 \\(c_i \\equiv M_i \\cdot {M_i}^{-1} \\pmod{m_i} \\equiv 1 \\pmod {m_i}\\) \uff0c\u6240\u4ee5\u6211\u4eec\u6709\uff1a \\[ \\begin{array}{rll} x &\\equiv \\sum\\limits_{j=1}^k a_jc_j &\\pmod {m_i} \\\\ &\\equiv a_ic_i &\\pmod {m_i} \\\\ &\\equiv a_i &\\pmod {m_i} \\end{array} \\] \u5373\u8bc1\u660e\u4e86\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002 \u6027\u8d28 \u00b6 \u7cfb\u6570\u5217\u8868 \\(\\{a_i\\}\\) \u4e0e\u89e3 \\(x\\) \u4e4b\u95f4\u662f\u4e00\u4e00\u6620\u5c04\u5173\u7cfb\uff0c\u65b9\u7a0b\u7ec4\u603b\u662f\u6709\u552f\u4e00\u89e3\u3002 \u8bc1\u660e\u89c1\uff1a https://oi-wiki.org/math/number-theory/crt/ \u8bbe\u6a21 \\(M\\) \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u7279\u89e3\u662f \\(x_0\\) \uff0c\u5219\u901a\u89e3\u4e3a\uff1a \\(x = x_0 + kM\\) \uff0c\u5176\u4e2d \\(k \\in \\mathbb N\\) . \u5b9e\u73b0 \u00b6 \u4ee3\u7801 \u00b6 \u9898\u76ee\uff1a P1495 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 const int N = 10; ll exgcd(ll a, ll b, ll &x, ll &y, ll d = 0) { if (b == 0) x = 1, y = 0, d = a; else d = exgcd(b, a % b, y, x), y -= a / b * x; return d; } ll inv(ll a, const ll m, ll x = 0, ll y = 0) { exgcd(a, m, x, y); return (x % m + m) % m; } int a[N], m[N]; int main() { int n = rr; ll mul = 1; for (int i = 1; i <= n; ++i) m[i] = rr, a[i] = rr, mul *= m[i]; ll x = 0; for (int i = 1; i <= n; ++i) { ll t = mul / m[i], c = inv(t, m[i]); x = (x + a[i] * t % mul * c % mul) % mul; } printf(\"%lld\\n\", x); return 0; } \u5e94\u7528 \u00b6 CRT \u5408\u5e76 \u00b6 \u82e5\u8981\u6c42\u4e00\u4e2a\u5927\u6570 \\(r \\bmod m\\) \u7684\u7ed3\u679c \\(x\\) \uff0c\u5373\u6c42\u89e3\u5173\u4e8e \\(x\\) \u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \\(x \\equiv r \\pmod m\\) \uff1b \u5219\u53ef\u4ee5\u5c06\u6a21\u6570\u5206\u89e3\u4e3a \\(m = \\sum\\limits_{i = 1}^k p_i\\) \uff08\u5373\u8d28\u56e0\u6570\u5206\u89e3\uff0c \\(p\\) \u4e24\u4e24\u4e92\u8d28\uff09\uff1b \u7136\u540e\u53bb\u6c42\u89e3 \\(x\\) \u5728\u6a21\u5404\u4e2a \\(p_i\\) \u610f\u4e49\u4e0b\u7684\u7ed3\u679c\uff0c\u6700\u540e\u7528 CRT \u5408\u5e76\uff1b\u5219\u6c42\u51fa\u6765\u7684\u7b54\u6848\u4e00\u5b9a\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u5373\u5c06 \\(x \\equiv r \\pmod m\\) \u8f6c\u6362\u4e3a\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\uff1a \\[ \\left\\{\\begin{array}{c} x \\equiv r \\pmod {m_1} \\\\ x \\equiv r \\pmod {m_2} \\\\ \\dots \\\\ x \\equiv r \\pmod {m_k} \\end{array}\\right. \\] \u4f8b\u9898\uff1a P2480 \u53e4\u4ee3\u732a\u6587 \u3002 \u9898\u9762\u7565... \u6c42 \\(\\dbinom{n}{m} \\bmod 999911658\\) \uff0c\u5373\u6c42 \\(x \\equiv \\dbinom{n}{m} \\pmod{999911658}\\) . \u6839\u636e\u4e0a\u65b9\u7684\u63cf\u8ff0\uff0c\u56e0\u4e3a \\(999911658 = 2 \\times 3 \\times 4679 \\times 35617\\) \uff0c\u539f\u65b9\u7a0b\u8f6c\u5316\u4e3a\uff1a \\[\\left\\{\\begin{align} x &\\equiv \\dbinom{n}{m} \\pmod {2} \\\\ x &\\equiv \\dbinom{n}{m} \\pmod {3} \\\\ x &\\equiv \\dbinom{n}{m} \\pmod {4679} \\\\ x &\\equiv \\dbinom{n}{m} \\pmod {35617} \\end{align}\\right.\\] \u4f7f\u7528 CRT \u5408\u5e76\u5373\u53ef. \u70b9\u51fb\u67e5\u770b\u6838\u5fc3\u4ee3\u7801 // ... const int N = 35620; const ll MOD1 = 999911659; const ll MOD2 = 999911658; const ll m[4] = {2, 3, 4679, 35617}; const ll r[4] = {499955829, 333303886, 289138806, 877424796}; // \u5373 c[i] // ... int main() { int n = rr, g = rr; if (g % MOD1 == 0) printf(\"0\\n\"), exit(0); // \u5206\u89e3\u8d28\u56e0\u6570\u81f3 dv \u6570\u7ec4... ll x = 0; for (int i = 0; i < 4; ++i) { MOD = m[i]; // \u9884\u5904\u7406\u6a21 MOD \u610f\u4e49\u4e0b\u7684\u9006\u5143... for (int j : dv) x = (x + lucas(n, j) * r[i] % MOD2) % MOD2; } ll r = qpow(g, x, MOD1); printf(\"%lld\\n\", r); return 0; } Reference \u00b6 [1] https://oi-wiki.org/math/number-theory/crt/ [2] https://www.bilibili.com/video/BV1AN4y1N7Su/ [3] https://numbermatics.com/n/999911658/","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"math/number-theory/crt/#_1","text":"","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"math/number-theory/crt/#_2","text":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff08Chinese Remainder Theorem\uff0cCRT\uff09 \u6c42\u89e3\u5982\u4e0b\u5f62\u5f0f\u7684\u4e00\u5143\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\uff08\u5176\u4e2d \\(m\\) \u4e24\u4e24\u4e92\u8d28\uff09\uff1a \\(\\left\\{\\begin{matrix} x \\equiv a_1 \\pmod {m_1} \\\\ x \\equiv a_2 \\pmod {m_2} \\\\ \\dots \\\\ x \\equiv a_k \\pmod {m_k} \\end{matrix}\\right.\\)","title":"\u7406\u8bba"},{"location":"math/number-theory/crt/#_3","text":"\u8ba1\u7b97\u6240\u6709\u6a21\u6570\u7684\u79ef \\(M = \\prod m_i\\) \uff1b \u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u65b9\u7a0b\uff1a \u8ba1\u7b97\uff1a \\(M_i = \\dfrac{M}{m_i}\\) \uff1b \u8ba1\u7b97\uff1a \\(v_i = {M_i}^{-1} \\pmod{m_i}\\) \uff08 \u4e58\u6cd5\u9006\u5143 \uff09\uff1b \u8ba1\u7b97\uff1a \\(c_i = M_iv_i\\) \u3002 \u65b9\u7a0b\u7ec4\u5728 \\(0 \\sim M - 1\\) \u8303\u56f4\u5185\u7684\u552f\u4e00\u89e3\u4e3a\uff1a \\(x = \\sum\\limits_{i = 1}^k a_ic_i \\pmod M\\) \u3002","title":"\u8fc7\u7a0b"},{"location":"math/number-theory/crt/#_4","text":"\u8bc1\u660e\u5bf9\u4e8e\u4efb\u610f \\(i \\in [1, k]\\) \uff0c\u6709 \\(x\\equiv a_i \\pmod {m_i}\\) \u3002 \u5f53 \\(i\\neq j\\) \u65f6\uff0c \\(M_j\\) \u4e2d\u4e58\u8fdb\u53bb\u4e86 \\(m_i\\) \uff0c\u6240\u4ee5\u6709 \\(M_j \\equiv 0 \\pmod {m_i}\\) \uff0c \u6240\u4ee5 \\(c_j \\equiv M_j \\equiv 0 \\pmod {m_i}\\) \u3002 \u53c8\u6709 \\(c_i \\equiv M_i \\cdot {M_i}^{-1} \\pmod{m_i} \\equiv 1 \\pmod {m_i}\\) \uff0c\u6240\u4ee5\u6211\u4eec\u6709\uff1a \\[ \\begin{array}{rll} x &\\equiv \\sum\\limits_{j=1}^k a_jc_j &\\pmod {m_i} \\\\ &\\equiv a_ic_i &\\pmod {m_i} \\\\ &\\equiv a_i &\\pmod {m_i} \\end{array} \\] \u5373\u8bc1\u660e\u4e86\u89e3\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002","title":"\u8bc1\u660e"},{"location":"math/number-theory/crt/#_5","text":"\u7cfb\u6570\u5217\u8868 \\(\\{a_i\\}\\) \u4e0e\u89e3 \\(x\\) \u4e4b\u95f4\u662f\u4e00\u4e00\u6620\u5c04\u5173\u7cfb\uff0c\u65b9\u7a0b\u7ec4\u603b\u662f\u6709\u552f\u4e00\u89e3\u3002 \u8bc1\u660e\u89c1\uff1a https://oi-wiki.org/math/number-theory/crt/ \u8bbe\u6a21 \\(M\\) \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u7279\u89e3\u662f \\(x_0\\) \uff0c\u5219\u901a\u89e3\u4e3a\uff1a \\(x = x_0 + kM\\) \uff0c\u5176\u4e2d \\(k \\in \\mathbb N\\) .","title":"\u6027\u8d28"},{"location":"math/number-theory/crt/#_6","text":"","title":"\u5b9e\u73b0"},{"location":"math/number-theory/crt/#_7","text":"\u9898\u76ee\uff1a P1495 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 const int N = 10; ll exgcd(ll a, ll b, ll &x, ll &y, ll d = 0) { if (b == 0) x = 1, y = 0, d = a; else d = exgcd(b, a % b, y, x), y -= a / b * x; return d; } ll inv(ll a, const ll m, ll x = 0, ll y = 0) { exgcd(a, m, x, y); return (x % m + m) % m; } int a[N], m[N]; int main() { int n = rr; ll mul = 1; for (int i = 1; i <= n; ++i) m[i] = rr, a[i] = rr, mul *= m[i]; ll x = 0; for (int i = 1; i <= n; ++i) { ll t = mul / m[i], c = inv(t, m[i]); x = (x + a[i] * t % mul * c % mul) % mul; } printf(\"%lld\\n\", x); return 0; }","title":"\u4ee3\u7801"},{"location":"math/number-theory/crt/#_8","text":"","title":"\u5e94\u7528"},{"location":"math/number-theory/crt/#crt","text":"\u82e5\u8981\u6c42\u4e00\u4e2a\u5927\u6570 \\(r \\bmod m\\) \u7684\u7ed3\u679c \\(x\\) \uff0c\u5373\u6c42\u89e3\u5173\u4e8e \\(x\\) \u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \\(x \\equiv r \\pmod m\\) \uff1b \u5219\u53ef\u4ee5\u5c06\u6a21\u6570\u5206\u89e3\u4e3a \\(m = \\sum\\limits_{i = 1}^k p_i\\) \uff08\u5373\u8d28\u56e0\u6570\u5206\u89e3\uff0c \\(p\\) \u4e24\u4e24\u4e92\u8d28\uff09\uff1b \u7136\u540e\u53bb\u6c42\u89e3 \\(x\\) \u5728\u6a21\u5404\u4e2a \\(p_i\\) \u610f\u4e49\u4e0b\u7684\u7ed3\u679c\uff0c\u6700\u540e\u7528 CRT \u5408\u5e76\uff1b\u5219\u6c42\u51fa\u6765\u7684\u7b54\u6848\u4e00\u5b9a\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u5373\u5c06 \\(x \\equiv r \\pmod m\\) \u8f6c\u6362\u4e3a\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\uff1a \\[ \\left\\{\\begin{array}{c} x \\equiv r \\pmod {m_1} \\\\ x \\equiv r \\pmod {m_2} \\\\ \\dots \\\\ x \\equiv r \\pmod {m_k} \\end{array}\\right. \\] \u4f8b\u9898\uff1a P2480 \u53e4\u4ee3\u732a\u6587 \u3002 \u9898\u9762\u7565... \u6c42 \\(\\dbinom{n}{m} \\bmod 999911658\\) \uff0c\u5373\u6c42 \\(x \\equiv \\dbinom{n}{m} \\pmod{999911658}\\) . \u6839\u636e\u4e0a\u65b9\u7684\u63cf\u8ff0\uff0c\u56e0\u4e3a \\(999911658 = 2 \\times 3 \\times 4679 \\times 35617\\) \uff0c\u539f\u65b9\u7a0b\u8f6c\u5316\u4e3a\uff1a \\[\\left\\{\\begin{align} x &\\equiv \\dbinom{n}{m} \\pmod {2} \\\\ x &\\equiv \\dbinom{n}{m} \\pmod {3} \\\\ x &\\equiv \\dbinom{n}{m} \\pmod {4679} \\\\ x &\\equiv \\dbinom{n}{m} \\pmod {35617} \\end{align}\\right.\\] \u4f7f\u7528 CRT \u5408\u5e76\u5373\u53ef. \u70b9\u51fb\u67e5\u770b\u6838\u5fc3\u4ee3\u7801 // ... const int N = 35620; const ll MOD1 = 999911659; const ll MOD2 = 999911658; const ll m[4] = {2, 3, 4679, 35617}; const ll r[4] = {499955829, 333303886, 289138806, 877424796}; // \u5373 c[i] // ... int main() { int n = rr, g = rr; if (g % MOD1 == 0) printf(\"0\\n\"), exit(0); // \u5206\u89e3\u8d28\u56e0\u6570\u81f3 dv \u6570\u7ec4... ll x = 0; for (int i = 0; i < 4; ++i) { MOD = m[i]; // \u9884\u5904\u7406\u6a21 MOD \u610f\u4e49\u4e0b\u7684\u9006\u5143... for (int j : dv) x = (x + lucas(n, j) * r[i] % MOD2) % MOD2; } ll r = qpow(g, x, MOD1); printf(\"%lld\\n\", r); return 0; }","title":"CRT \u5408\u5e76"},{"location":"math/number-theory/crt/#reference","text":"[1] https://oi-wiki.org/math/number-theory/crt/ [2] https://www.bilibili.com/video/BV1AN4y1N7Su/ [3] https://numbermatics.com/n/999911658/","title":"Reference"},{"location":"math/number-theory/decomposition/","text":"\u6570\u8bba\u5206\u5757 \u00b6 \u6570\u8bba\u5206\u5757\u53ef\u4ee5\u5feb\u901f\u7684\u6c42\u89e3\u5f62\u5982\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{i=1}^nf(i)g\\left(\\floor{n\\over i}\\right) \\] \u7684\u6c42\u548c\u5f0f\u3002 \u4e0d\u8003\u8651 \\(f,g\\) \u7684\u590d\u6742\u5ea6\uff0c\u6570\u8bba\u5206\u5757\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal O(\\sqrt n)\\) \u7684\u3002 \u5176\u601d\u60f3\u662f\u5c06\u51fd\u6570\u5206\u6bb5\uff08\u5206\u5757\uff09\uff0c\u56e0\u6b64\u53eb\u505a\u6570\u8bba\u5206\u5757\u3002 \u6027\u8d28\u548c\u7ed3\u8bba \u00b6 \u4e0b\u53d6\u6574\u7684\u6027\u8d28 \u00b6 \u5bb9\u6613\u53d1\u73b0\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\floor{n\\over i} \\] \u4e0b\u6587\u6240\u8bf4\u4e2a\u6570\u5747\u4e3a\u89c4\u6a21\uff0c\u8868\u793a\u5927\u6982\u3002 \u5728 \\(i\\in[1,\\sqrt n)\\) \u7684\u65f6\u5019\uff0c\u4e00\u5171\u53ea\u6709 \\(\\sqrt n\\) \u4e2a\u5f0f\u5b50\u3002 \u5728 \\(i\\in[\\sqrt n,n]\\) \u7684\u65f6\u5019\uff0c\u4e00\u5171\u53ea\u6709 \\(\\sqrt n\\) \u79cd\u4e0d\u540c\u7684\u7ed3\u679c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6b64\u5206\u5757\uff0c\u4f7f\u603b\u590d\u6742\u5ea6\u964d\u4e3a \\(\\mathcal O(\\sqrt n)\\) \u3002 \u6570\u8bba\u5206\u5757\u7684\u7ed3\u8bba \u00b6 \u5bf9\u4e8e\u5e38\u719f \\(n\\) \uff0c\u4f7f\u5f97 \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\floor{n\\over i}=\\floor{n\\over j} \\] \u6210\u7acb\u7684\u6700\u5927 \\(i\\le j\\le n\\) \u7684 \\(j\\) \u4e3a\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\floor{n\\over\\floor{n/i}} \\] \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5de6\u7aef\u70b9\uff0c\u63a8\u65ad\u51fa\u53f3\u7aef\u70b9\uff0c\u8fdb\u800c\u63a8\u65ad\u51fa\u4e0b\u4e00\u4e2a\u5757\u7684\u5de6\u7aef\u70b9\u3002 \u8fd9\u5c31\u662f\u6570\u8bba\u5206\u5757\u7684\u672c\u8d28\u3002 \u8bc1\u660e\u4e0d\u4f1a\u3002 \u8fc7\u7a0b \u00b6 \u8003\u8651\u6700\u7b80\u5355\u7684\u5f62\u5f0f\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{i=1}^nf(i)\\floor{n\\over i} \\] \u663e\u7136\u6211\u4eec\u8981\u5904\u7406 \\(f\\) \u7684\u524d\u7f00\u548c\uff0c\u8bb0\u4e3a \\(s\\) \u3002 \u7531\u4e8e\u540e\u9762\u7684\u4e1c\u897f\u662f\u5757\u72b6\u5206\u5e03\u7684\uff0c\u56e0\u6b64\u6570\u8bba\u5206\u5757\u3002 \u6bcf\u6b21\u4ee5\u4e00\u5757\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} [l,r]=\\left[l,\\floor{n\\over\\floor{n/i}}\\right] \\] \u968f\u540e\u5bf9\u4e8e\u4e0b\u4e00\u5757\uff0c\u66f4\u65b0\u533a\u95f4\u5de6\u7aef\u70b9\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} l\\gets r+1=\\floor{n\\over\\floor{n/i}}+1 \\] \u53c2\u8003\u4ee3\u7801\uff0c int solev(int n) { int l = 1, r, ans = 0; while (l <= n) { r = n / (n / l); ans += (n / l) * (s(r) - s(l - 1)); // ans += (n / l) * calc(l, r); l = r + 1; } return ans; } \u4f8b\u9898 \u00b6 \u4f8b\u9898\u4e00\uff1aP3935 Calculating \u00b6 \u7b2c\u4e00\u6b65\u63a8\u5f0f\u5b50\uff0c\u9898\u4e2d\u7ed9\u51fa\u51fd\u6570 \\(f(x)\\) \u8868\u793a \\(x\\) \u7684\u56e0\u6570\u4e2a\u6570\uff0c\u56e0\u6b64\u7b54\u6848\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{x=l}^r\\sum_{i=1}^x\\floor{x\\over i} \\] \u5de6\u4fa7\u7528\u5dee\u5206\uff0c\u56e0\u6b64\u8981\u6c42\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} f(x)=\\sum_{i=1}^x\\floor{x\\over i} \\] \u5373\u6807\u51c6\u5f62\u5f0f\u7684\u6570\u8bba\u5206\u5757\uff0c\u4ee3\u7801\uff0c ll solev(ll n) { ll l = 1, r, ans = 0; while (l <= n) { r = n / (n / l); ans = (ans + (n / l) * (r - l + 1) % mod) % mod; l = r + 1; } return ans; } \u4f8b\u9898\u4e8c\uff1aP2424 \u7ea6\u6570\u548c \u00b6 \u5df2\u7ecf\u7ed9\u51fa\u4e86\u5f0f\u5b50\uff0c\u6574\u7406\uff0c\u5373 \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{x=l}^r\\sum_{i=1}^xi\\floor{x\\over i} \\] \u5de6\u4fa7\u7528\u5dee\u5206\uff0c\u56e0\u6b64\u8981\u6c42\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{i=1}^xi\\floor{x\\over i} \\] \u5373\u6807\u51c6\u5f62\u5f0f\u7684\u6570\u8bba\u5206\u5757\uff0c\u4ee3\u7801\uff0c ll calc(int l, int r) { return ((ll)l + r) * (r - l + 1) / 2; } ll solev(int x) { int l = 1, r; ll ans = 0; while (l <= x) { r = x / (x / l); ans += calc(l, r) * (x / l); l = r + 1; } return ans; } \u4f8b\u9898\u4e09\uff1aP2261 [CQOI2007] \u4f59\u6570\u6c42\u548c \u00b6 \u6709\u70b9\u6280\u5de7\uff0c\u56e0\u4e3a\u5bb9\u6613\u53d1\u73b0\u679a\u4e3e\u4e0a\u754c\u548c\u88ab\u9664\u6570\u4e0d\u7edf\u4e00\u3002 \u56de\u5f52\u6570\u8bba\u5206\u5757\u7684\u672c\u8d28\uff0c\u5bb9\u6613\u53d1\u73b0\u5176\u5b9e\u53ea\u9700\u8981\u77e5\u9053\u5757\u7684\u5de6\u53f3\u7aef\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e8e\u662f\u4e5f\u5bb9\u6613\u5f97\u51fa\uff0c\u6211\u4eec\u5bf9\u53f3\u7aef\u70b9\u53d6 \\(n\\) \u7684 \\(\\min\\) \uff0c\u6ce8\u610f\u9664\u6570\u4e0d\u4e3a\u96f6\u5373\u53ef\u3002 \u4ee3\u7801\uff0c ll calc(int l, int r) { return ((ll)l + r) * (r - l + 1) / 2; } ll solev(int n, int x) { int l = 1, r; ll ans = 0; while (l <= n) { r = n; if (x / l) r = min(r, x / (x / l)); ans += calc(l, r) * (x / l); l = r + 1; } return ans; } \u4f8b\u9898\u56db\uff1a [ARC068E] Snuke Line \u00b6 \u591a\u7ef4\u6570\u8bba\u5206\u5757\u3002 \u5bb9\u6613\u53d1\u73b0\uff0c\u4e00\u4e2a\u6b65\u957f \\(d\\) \u5728\u67d0\u4e2a\u989c\u8272\u7684\u533a\u95f4 \\([l,r]\\) \u6709\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u6b63\u6574\u6570 \\(x\\) \uff0c\u4f7f\u5f97\uff0c \\[ l\\le dx\\le r \\] \\[ \\left\\lceil{l\\over d}\\right\\rceil\\le x\\le\\left\\lfloor{r\\over d}\\right\\rfloor \\] \u6839\u636e\u53d6\u6574\u7684\u6027\u8d28\uff0c \\[ \\left\\lfloor{l-1\\over d}\\right\\rfloor<x\\le\\left\\lfloor{r\\over d}\\right\\rfloor \\] \\[ \\left\\lfloor{l-1\\over d}\\right\\rfloor<\\left\\lfloor{r\\over d}\\right\\rfloor \\] \u6211\u4eec\u6ce8\u610f\u5230 \\(d\\) \u662f\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e \\(l,r\\) \u7528\u6570\u8bba\u5206\u5757\u6c42\u51fa\u6709\u8d21\u732e\u7684 \\(d\\) \u7684\u53d6\u503c\u8303\u56f4\u3002 \u5dee\u5206\u4e00\u4e0b\u5373\u53ef\uff0c\u540c\u65f6\u6ce8\u610f\u5230\u6570\u8bba\u5206\u5757\u6c42\u4e0d\u5230 \\([l,r]\\) \u533a\u95f4\u672c\u8eab\u7684\u7b54\u6848\uff0c\u6211\u4eec\u624b\u52a8\u52a0\u4e0a\u5373\u53ef\u3002 constexpr int N = 1e5 + 10; int sum[N]; void Main() { int n, m; cin >> n >> m; for (int i = 1; i <= n; ++i) { int x, y; cin >> x >> y; --x; int l = 1, r; while (l <= x) { r = min(x / (x / l), y / (y / l)); if (x / l < y / l) ++sum[l], --sum[r + 1]; l = r + 1; } ++sum[x + 1], --sum[y + 1]; } int ans = 0; for (int i = 1; i <= m; ++i) { ans += sum[i]; cout << ans << endl; } }","title":"\u6570\u8bba\u5206\u5757"},{"location":"math/number-theory/decomposition/#_1","text":"\u6570\u8bba\u5206\u5757\u53ef\u4ee5\u5feb\u901f\u7684\u6c42\u89e3\u5f62\u5982\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{i=1}^nf(i)g\\left(\\floor{n\\over i}\\right) \\] \u7684\u6c42\u548c\u5f0f\u3002 \u4e0d\u8003\u8651 \\(f,g\\) \u7684\u590d\u6742\u5ea6\uff0c\u6570\u8bba\u5206\u5757\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal O(\\sqrt n)\\) \u7684\u3002 \u5176\u601d\u60f3\u662f\u5c06\u51fd\u6570\u5206\u6bb5\uff08\u5206\u5757\uff09\uff0c\u56e0\u6b64\u53eb\u505a\u6570\u8bba\u5206\u5757\u3002","title":"\u6570\u8bba\u5206\u5757"},{"location":"math/number-theory/decomposition/#_2","text":"","title":"\u6027\u8d28\u548c\u7ed3\u8bba"},{"location":"math/number-theory/decomposition/#_3","text":"\u5bb9\u6613\u53d1\u73b0\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\floor{n\\over i} \\] \u4e0b\u6587\u6240\u8bf4\u4e2a\u6570\u5747\u4e3a\u89c4\u6a21\uff0c\u8868\u793a\u5927\u6982\u3002 \u5728 \\(i\\in[1,\\sqrt n)\\) \u7684\u65f6\u5019\uff0c\u4e00\u5171\u53ea\u6709 \\(\\sqrt n\\) \u4e2a\u5f0f\u5b50\u3002 \u5728 \\(i\\in[\\sqrt n,n]\\) \u7684\u65f6\u5019\uff0c\u4e00\u5171\u53ea\u6709 \\(\\sqrt n\\) \u79cd\u4e0d\u540c\u7684\u7ed3\u679c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6b64\u5206\u5757\uff0c\u4f7f\u603b\u590d\u6742\u5ea6\u964d\u4e3a \\(\\mathcal O(\\sqrt n)\\) \u3002","title":"\u4e0b\u53d6\u6574\u7684\u6027\u8d28"},{"location":"math/number-theory/decomposition/#_4","text":"\u5bf9\u4e8e\u5e38\u719f \\(n\\) \uff0c\u4f7f\u5f97 \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\floor{n\\over i}=\\floor{n\\over j} \\] \u6210\u7acb\u7684\u6700\u5927 \\(i\\le j\\le n\\) \u7684 \\(j\\) \u4e3a\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\floor{n\\over\\floor{n/i}} \\] \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5de6\u7aef\u70b9\uff0c\u63a8\u65ad\u51fa\u53f3\u7aef\u70b9\uff0c\u8fdb\u800c\u63a8\u65ad\u51fa\u4e0b\u4e00\u4e2a\u5757\u7684\u5de6\u7aef\u70b9\u3002 \u8fd9\u5c31\u662f\u6570\u8bba\u5206\u5757\u7684\u672c\u8d28\u3002 \u8bc1\u660e\u4e0d\u4f1a\u3002","title":"\u6570\u8bba\u5206\u5757\u7684\u7ed3\u8bba"},{"location":"math/number-theory/decomposition/#_5","text":"\u8003\u8651\u6700\u7b80\u5355\u7684\u5f62\u5f0f\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{i=1}^nf(i)\\floor{n\\over i} \\] \u663e\u7136\u6211\u4eec\u8981\u5904\u7406 \\(f\\) \u7684\u524d\u7f00\u548c\uff0c\u8bb0\u4e3a \\(s\\) \u3002 \u7531\u4e8e\u540e\u9762\u7684\u4e1c\u897f\u662f\u5757\u72b6\u5206\u5e03\u7684\uff0c\u56e0\u6b64\u6570\u8bba\u5206\u5757\u3002 \u6bcf\u6b21\u4ee5\u4e00\u5757\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} [l,r]=\\left[l,\\floor{n\\over\\floor{n/i}}\\right] \\] \u968f\u540e\u5bf9\u4e8e\u4e0b\u4e00\u5757\uff0c\u66f4\u65b0\u533a\u95f4\u5de6\u7aef\u70b9\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} l\\gets r+1=\\floor{n\\over\\floor{n/i}}+1 \\] \u53c2\u8003\u4ee3\u7801\uff0c int solev(int n) { int l = 1, r, ans = 0; while (l <= n) { r = n / (n / l); ans += (n / l) * (s(r) - s(l - 1)); // ans += (n / l) * calc(l, r); l = r + 1; } return ans; }","title":"\u8fc7\u7a0b"},{"location":"math/number-theory/decomposition/#_6","text":"","title":"\u4f8b\u9898"},{"location":"math/number-theory/decomposition/#p3935-calculating","text":"\u7b2c\u4e00\u6b65\u63a8\u5f0f\u5b50\uff0c\u9898\u4e2d\u7ed9\u51fa\u51fd\u6570 \\(f(x)\\) \u8868\u793a \\(x\\) \u7684\u56e0\u6570\u4e2a\u6570\uff0c\u56e0\u6b64\u7b54\u6848\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{x=l}^r\\sum_{i=1}^x\\floor{x\\over i} \\] \u5de6\u4fa7\u7528\u5dee\u5206\uff0c\u56e0\u6b64\u8981\u6c42\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} f(x)=\\sum_{i=1}^x\\floor{x\\over i} \\] \u5373\u6807\u51c6\u5f62\u5f0f\u7684\u6570\u8bba\u5206\u5757\uff0c\u4ee3\u7801\uff0c ll solev(ll n) { ll l = 1, r, ans = 0; while (l <= n) { r = n / (n / l); ans = (ans + (n / l) * (r - l + 1) % mod) % mod; l = r + 1; } return ans; }","title":"\u4f8b\u9898\u4e00\uff1aP3935 Calculating"},{"location":"math/number-theory/decomposition/#p2424","text":"\u5df2\u7ecf\u7ed9\u51fa\u4e86\u5f0f\u5b50\uff0c\u6574\u7406\uff0c\u5373 \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{x=l}^r\\sum_{i=1}^xi\\floor{x\\over i} \\] \u5de6\u4fa7\u7528\u5dee\u5206\uff0c\u56e0\u6b64\u8981\u6c42\uff0c \\[ \\def\\floor#1{\\left\\lfloor{#1}\\right\\rfloor} \\sum_{i=1}^xi\\floor{x\\over i} \\] \u5373\u6807\u51c6\u5f62\u5f0f\u7684\u6570\u8bba\u5206\u5757\uff0c\u4ee3\u7801\uff0c ll calc(int l, int r) { return ((ll)l + r) * (r - l + 1) / 2; } ll solev(int x) { int l = 1, r; ll ans = 0; while (l <= x) { r = x / (x / l); ans += calc(l, r) * (x / l); l = r + 1; } return ans; }","title":"\u4f8b\u9898\u4e8c\uff1aP2424 \u7ea6\u6570\u548c"},{"location":"math/number-theory/decomposition/#p2261-cqoi2007","text":"\u6709\u70b9\u6280\u5de7\uff0c\u56e0\u4e3a\u5bb9\u6613\u53d1\u73b0\u679a\u4e3e\u4e0a\u754c\u548c\u88ab\u9664\u6570\u4e0d\u7edf\u4e00\u3002 \u56de\u5f52\u6570\u8bba\u5206\u5757\u7684\u672c\u8d28\uff0c\u5bb9\u6613\u53d1\u73b0\u5176\u5b9e\u53ea\u9700\u8981\u77e5\u9053\u5757\u7684\u5de6\u53f3\u7aef\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e8e\u662f\u4e5f\u5bb9\u6613\u5f97\u51fa\uff0c\u6211\u4eec\u5bf9\u53f3\u7aef\u70b9\u53d6 \\(n\\) \u7684 \\(\\min\\) \uff0c\u6ce8\u610f\u9664\u6570\u4e0d\u4e3a\u96f6\u5373\u53ef\u3002 \u4ee3\u7801\uff0c ll calc(int l, int r) { return ((ll)l + r) * (r - l + 1) / 2; } ll solev(int n, int x) { int l = 1, r; ll ans = 0; while (l <= n) { r = n; if (x / l) r = min(r, x / (x / l)); ans += calc(l, r) * (x / l); l = r + 1; } return ans; }","title":"\u4f8b\u9898\u4e09\uff1aP2261 [CQOI2007] \u4f59\u6570\u6c42\u548c"},{"location":"math/number-theory/decomposition/#arc068e-snuke-line","text":"\u591a\u7ef4\u6570\u8bba\u5206\u5757\u3002 \u5bb9\u6613\u53d1\u73b0\uff0c\u4e00\u4e2a\u6b65\u957f \\(d\\) \u5728\u67d0\u4e2a\u989c\u8272\u7684\u533a\u95f4 \\([l,r]\\) \u6709\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u6b63\u6574\u6570 \\(x\\) \uff0c\u4f7f\u5f97\uff0c \\[ l\\le dx\\le r \\] \\[ \\left\\lceil{l\\over d}\\right\\rceil\\le x\\le\\left\\lfloor{r\\over d}\\right\\rfloor \\] \u6839\u636e\u53d6\u6574\u7684\u6027\u8d28\uff0c \\[ \\left\\lfloor{l-1\\over d}\\right\\rfloor<x\\le\\left\\lfloor{r\\over d}\\right\\rfloor \\] \\[ \\left\\lfloor{l-1\\over d}\\right\\rfloor<\\left\\lfloor{r\\over d}\\right\\rfloor \\] \u6211\u4eec\u6ce8\u610f\u5230 \\(d\\) \u662f\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e \\(l,r\\) \u7528\u6570\u8bba\u5206\u5757\u6c42\u51fa\u6709\u8d21\u732e\u7684 \\(d\\) \u7684\u53d6\u503c\u8303\u56f4\u3002 \u5dee\u5206\u4e00\u4e0b\u5373\u53ef\uff0c\u540c\u65f6\u6ce8\u610f\u5230\u6570\u8bba\u5206\u5757\u6c42\u4e0d\u5230 \\([l,r]\\) \u533a\u95f4\u672c\u8eab\u7684\u7b54\u6848\uff0c\u6211\u4eec\u624b\u52a8\u52a0\u4e0a\u5373\u53ef\u3002 constexpr int N = 1e5 + 10; int sum[N]; void Main() { int n, m; cin >> n >> m; for (int i = 1; i <= n; ++i) { int x, y; cin >> x >> y; --x; int l = 1, r; while (l <= x) { r = min(x / (x / l), y / (y / l)); if (x / l < y / l) ++sum[l], --sum[r + 1]; l = r + 1; } ++sum[x + 1], --sum[y + 1]; } int ans = 0; for (int i = 1; i <= m; ++i) { ans += sum[i]; cout << ans << endl; } }","title":"\u4f8b\u9898\u56db\uff1a[ARC068E] Snuke Line"},{"location":"math/number-theory/euler/","text":"\u6b27\u62c9\u5b9a\u7406\u548c\u8d39\u9a6c\u5c0f\u5b9a\u7406 \u00b6 \u6b27\u62c9\u51fd\u6570 \u00b6 \u5b9a\u4e49 \u00b6 \u6b27\u62c9\u51fd\u6570\uff08Euler's totient function\uff09\uff0c\u8bb0\u4e3a \\(\\varphi(n)\\) \uff0c\u8868\u793a \\(1 \\sim n\\) \u4e2d\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u3002 \u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\(\\varphi(n) = \\sum\\limits_{i = 1}^n [\\gcd(i, n) = 1]\\) . \u4f8b\u5982\uff1a \\(\\varphi(1) = 1\\) \uff0c\u5373 \\(\\gcd(1, 1) = 1\\) \uff1b \\(\\varphi(2) = 1\\) \uff0c\u5373 \\(\\gcd(1, 2) = 1\\) \uff1b \\(\\varphi(3) = 2\\) \uff0c\u5373 \\(\\gcd(1, 3) = 1\\) \uff0c \\(\\gcd(2, 3) = 1\\) \uff1b \\(\\dots\\) \u6027\u8d28 \u00b6 \u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\uff1b\u5373\u5982\u679c \\(\\gcd(a, b) = 1\\) \uff0c\u90a3\u4e48 \\(\\varphi(a \\times b) = \\varphi(a) \\times \\varphi(b)\\) \u3002 \u7531\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u8bbe \\(\\displaystyle n = \\prod\\limits_{i=1}^{s}p_i^{k_i}\\) \uff0c\u5176\u4e2d \\(p_i\\) \u662f\u8d28\u6570\uff0c\u6709 \\(\\displaystyle \\varphi(n) = n \\times \\prod\\limits_{i = 1}^s{\\frac{p_i - 1}{p_i}}\\) \u3002 \u5f53 \\(n\\) \u662f\u8d28\u6570\u7684\u65f6\u5019\uff0c\u663e\u7136\u6709 \\(\\varphi(n) = n - 1\\) \uff08\u5b9a\u4e49\uff09\u3002 \u5b9e\u73b0 \u00b6 \u6839\u636e\u6027\u8d28 \\(2\\) \u53ef\u4ee5\u5199\u51fa\uff1a int euler_phi(int n) { int ans = n; for (int i = 2; i * i <= n; i++) { if (n % i == 0) { ans = ans / i * (i - 1); while (n % i == 0) n /= i; } } return n > 1 ? ans / n * (n - 1) : ans; } \u7ebf\u6027\u7b5b\u6c42\u6b27\u62c9\u51fd\u6570 \u00b6 \u6ce8\u610f\u5230\u5728\u7ebf\u6027\u7b5b\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5408\u6570\u90fd\u662f\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u7b5b\u6389\u3002 \u6bd4\u5982\u8bbe \\(p_1\\) \u662f \\(n\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c \\(k = n / p_1\\) \uff0c\u5373 \\(kp_1 = n\\) \uff1b \u90a3\u4e48\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\u4e2d \\(n\\) \u901a\u8fc7 \\(k \\times p_1\\) \u7b5b\u6389\u3002 \u89c2\u5bdf\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u4e24\u4e2a\u90e8\u5206\uff0c\u4e0b\u9762\u5bf9 \\(k \\bmod p_1\\) \u5206\u60c5\u51b5\u8ba8\u8bba\uff1a \u5982\u679c \\(k \\bmod p_1 = 0\\) \uff0c\u90a3\u4e48 \\(k\\) \u5305\u542b\u4e86 \\(n\\) \u7684\u6240\u6709\u8d28\u56e0\u5b50\uff1b\u6709\uff1a \\[ \\begin{aligned} \\varphi(n) & = n \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times k \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times \\varphi(k) \\end{aligned} \\] \u5982\u679c \\(k \\bmod p_1 \\neq 0\\) \uff0c\u8fd9\u65f6 \\(k\\) \u548c \\(p_1\\) \u662f\u4e92\u8d28\u7684\uff0c\u6839\u636e\u6b27\u62c9\u51fd\u6570\u6027\u8d28\uff1b\u6709\uff1a \\[ \\begin{aligned} \\varphi(n) & = \\varphi(p_1) \\times \\varphi(k) \\\\\\\\ & = (p_1 - 1) \\times \\varphi(k) \\end{aligned} \\] int primes[N], cnt; bool is[N]; int phi[N]; int get_phi(int n) { phi[1] = 1; for (int i = 2; i <= n; ++i) { if (!is[i]) primes[++cnt] = i, phi[i] = i - 1; for (int j = 0; primes[j] <= n / i; ++j) { is[primes[j] * i] = 1; if (i % primes[j]) phi[primes[j] * i] = phi[i] * (primes[j] - 1); else { phi[primes[j] * i] = phi[i] * primes[j]; break; } } } } \u6b27\u62c9\u5b9a\u7406 \u00b6 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u524d\u7f6e\u77e5\u8bc6\uff11\uff1a\u5b8c\u5168\u5269\u4f59\u7cfb \u00b6 \u5b8c\u5168\u5269\u4f59\u7cfb\uff08\u6700\u5c0f\u975e\u8d1f\u5b8c\u5168\u5269\u4f59\u7cfb\uff09\uff0c\u5b9a\u4e49\u4e3a\uff1a \\(\\mathbb Z_m = \\{0, 1, \\dots, m - 1\\}\\) . \u5177\u4f53\u7684\u5b9a\u4e49\u4e3a \u6574\u6570\u96c6 \\(S = \\{r_1, r_2, \\dots, r_s\\}\\) \uff0c\u6ee1\u8db3\uff1a \u4efb\u610f\u4e0d\u540c\u5143\u7d20 \\(r_i \\not \\equiv r_j \\pmod m\\) . \u4efb\u610f \\(a \\in \\mathbb Z\\) \uff0c\u5b58\u5728 \\(r_i \\equiv a \\pmod m\\) . \u4e5f\u5c31\u662f\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u5305\u542b \\(0 \\sim m - 1\\) \u5185\u7684\u6240\u6709\u6574\u6570\uff0c\u957f\u5ea6\u4e3a \\(m\\) \u3002 \u524d\u7f6e\u77e5\u8bc6\uff12\uff1a\u7b80\u5316\u5269\u4f59\u7cfb \u00b6 \u7b80\u5316\u5269\u4f59\u7cfb\uff0c\u5b9a\u4e49\u4e3a\uff1a \\(\\Phi_m = \\{r \\in \\mathbb Z_m : r \\perp m\\}\\) . \u5177\u4f53\u7684\u5b9a\u4e49\u4e3a \u6574\u6570\u96c6 \\(S = \\{r_1, r_2, \\dots, r_s\\}\\) \uff0c\u6ee1\u8db3\uff1a \u4efb\u610f \\(r_i \\perp m\\) . \u4efb\u610f\u4e0d\u540c\u5143\u7d20 \\(r_i \\not \\equiv r_j \\pmod m\\) . \u4efb\u610f \\(a \\perp m\\) \uff0c\u5b58\u5728 \\(r \\equiv a \\pmod m\\) . \u4e5f\u5c31\u662f\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u7684\u7b80\u5316\u5269\u4f59\u7cfb\u5305\u542b \\(0 \\sim m - 1\\) \u5185\u6240\u6709\u4e0e \\(m\\) \u4e92\u8d28\u7684\u6574\u6570\uff0c\u957f\u5ea6\u4e3a \\(\\varphi(m)\\) \u3002 \u524d\u7f6e\u77e5\u8bc6\uff13\uff1a\u6b27\u62c9\u5b9a\u7406\u7684\u5f15\u7406 \u00b6 \u82e5 \\(a \\perp m\\) \uff0c\u4e14\u6709 \\(S = \\{r_1, r_2, \\dots, r_s\\}\\) \u4e3a\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\uff0c \u5219 \\(S' = \\{ar_1, ar_2, \\dots, ar_s\\}\\) \u4e5f\u662f\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\u3002 \u8bc1\u660e\uff1a \u5bf9\u4e8e\u4efb\u610f \\(r_i\\) \uff1a\u7531 \\(a \\perp m\\) \u3001 \\(r_i \\perp m\\) \uff0c\u5f97 \\(ar_i \\perp m\\) \uff08\u4e92\u8d28\u6027\u8d28\uff09. \u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u5143\u7d20\uff1a\u7531 \\(r_i \\not \\equiv r_j \\pmod m\\) \u3001 \\(a \\perp m\\) \uff0c\u5f97 \\(ar_i \\not \\equiv ar_j \\pmod m\\) . \u7531 \\(|S'| = |S|\\) \u53ca \\((2)\\) \u5f97\uff1a\u4efb\u610f \\(r_i\\) \u4e00\u5b9a\u6709\u4e0e\u5176\u5bf9\u5e94\u7684 \\(ar_j\\) \uff1b \u56e0\u4e3a\u5bf9\u4e8e\u4efb\u610f \\(t \\perp m\\) \uff0c\u5b58\u5728 \\(r_i \\equiv t \\pmod m\\) \uff0c\u4e5f\u4e00\u5b9a\u5b58\u5728 \\(ar_j \\equiv t \\pmod m\\) . \u6ee1\u8db3\u7b80\u5316\u5269\u4f59\u7cfb\u7684\u5b9a\u4e49\uff0c\u56e0\u6b64 \\(S'\\) \u662f\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\u3002 \u5b9a\u4e49 \u00b6 \u82e5 \\(\\gcd(a, m) = 1\\) \uff0c\u5219 \\(a^{\\varphi(m)} \\equiv 1 \\pmod{m}\\) \u3002 \u8bc1\u660e \u00b6 \u8bbe \\(S = \\{ r_1, r_2, \\cdots, r_{\\varphi(m)} \\}\\) \u4e3a\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u7684\u7b80\u5316\u5269\u4f59\u7cfb\uff0c \u5219 \\(S' = \\{ ar_1, ar_2, \\cdots, ar_{\\varphi(m)} \\}\\) \u4e5f\u4e3a\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u7684\u7b80\u5316\u5269\u4f59\u7cfb. \u56e0\u4e3a \\(a \\perp m\\) \uff0c\u6240\u4ee5 \\(r_1r_2 \\dots r_{\\varphi(m)} \\equiv ar_1ar_2 \\dots ar_{\\varphi(m)} \\pmod m\\) \uff0c \u5373 \\(r_1r_2 \\dots r_{\\varphi(m)} \\equiv a^{\\varphi(m)} r_1r_2 \\dots r_{\\varphi(m)} \\pmod m\\) . \u56e0\u4e3a \\(r_1r_2 \\dots r_{\\varphi(m)} \\perp m\\) \uff08\u4e92\u8d28\u6027\u8d28\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u7ea6\u53bb\uff1b \u5373 \\(a^{\\varphi(m)} \\equiv 1 \\pmod m\\) . \u5e94\u7528 \u00b6 \u6307\u6570\u53d6\u6a21 \u00b6 \\(a^k \\equiv a^{k \\bmod \\varphi(p)} \\pmod p\\) \u8bc1\u660e\uff1a \\[ \\begin{align} a^{u + v\\varphi(p)} &\\equiv a^ua^{v\\varphi(p)} &\\pmod p \\\\ &\\equiv a^u(a^{\\varphi(p)})^v &\\pmod p \\\\ &\\equiv a^u(1)^v &\\pmod p \\\\ &\\equiv a^u &\\pmod p \\end{align} \\] \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u00b6 \u82e5 \\(p\\) \u4e3a\u7d20\u6570\uff0c\u7531\u4e8e \\(\\varphi(p) = p - 1\\) \uff0c\u4ee3\u5165\u6b27\u62c9\u5b9a\u7406\u53ef\u7acb\u5373\u5f97\u5230\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a \u82e5 \\(p\\) \u4e3a\u7d20\u6570\uff0c \\(\\gcd(a, p) = 1\\) \uff0c\u5219 \\(a^{p - 1} \\equiv 1 \\pmod{p}\\) \u3002 \u4e5f\u53ef\u4ee5\u5bf9\u8d39\u9a6c\u5c0f\u5b9a\u7406\u8fdb\u884c\u62d3\u5c55\uff1a\u82e5 \\(p\\) \u662f\u7d20\u6570\uff0c\u5219 \\(a^p\\equiv a\\pmod p\\) \u3002 Reference \u00b6 [1] https://oi-wiki.org/math/number-theory/euler/ [2] https://oi-wiki.org/math/number-theory/sieve/ [3] https://oi-wiki.org/math/number-theory/fermat/ [4] https://zhuanlan.zhihu.com/p/581822244 [5] https://zhuanlan.zhihu.com/p/536214853 [6] https://zhuanlan.zhihu.com/p/577742188 [7] https://blog.csdn.net/weixin_43145361/article/details/107083879 [8] https://baike.baidu.com/item/\u7b80\u5316\u5269\u4f59\u7cfb/3712809","title":"\u6b27\u62c9\u5b9a\u7406\u548c\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"math/number-theory/euler/#_1","text":"","title":"\u6b27\u62c9\u5b9a\u7406\u548c\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"math/number-theory/euler/#_2","text":"","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"math/number-theory/euler/#_3","text":"\u6b27\u62c9\u51fd\u6570\uff08Euler's totient function\uff09\uff0c\u8bb0\u4e3a \\(\\varphi(n)\\) \uff0c\u8868\u793a \\(1 \\sim n\\) \u4e2d\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u3002 \u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\(\\varphi(n) = \\sum\\limits_{i = 1}^n [\\gcd(i, n) = 1]\\) . \u4f8b\u5982\uff1a \\(\\varphi(1) = 1\\) \uff0c\u5373 \\(\\gcd(1, 1) = 1\\) \uff1b \\(\\varphi(2) = 1\\) \uff0c\u5373 \\(\\gcd(1, 2) = 1\\) \uff1b \\(\\varphi(3) = 2\\) \uff0c\u5373 \\(\\gcd(1, 3) = 1\\) \uff0c \\(\\gcd(2, 3) = 1\\) \uff1b \\(\\dots\\)","title":"\u5b9a\u4e49"},{"location":"math/number-theory/euler/#_4","text":"\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\uff1b\u5373\u5982\u679c \\(\\gcd(a, b) = 1\\) \uff0c\u90a3\u4e48 \\(\\varphi(a \\times b) = \\varphi(a) \\times \\varphi(b)\\) \u3002 \u7531\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u8bbe \\(\\displaystyle n = \\prod\\limits_{i=1}^{s}p_i^{k_i}\\) \uff0c\u5176\u4e2d \\(p_i\\) \u662f\u8d28\u6570\uff0c\u6709 \\(\\displaystyle \\varphi(n) = n \\times \\prod\\limits_{i = 1}^s{\\frac{p_i - 1}{p_i}}\\) \u3002 \u5f53 \\(n\\) \u662f\u8d28\u6570\u7684\u65f6\u5019\uff0c\u663e\u7136\u6709 \\(\\varphi(n) = n - 1\\) \uff08\u5b9a\u4e49\uff09\u3002","title":"\u6027\u8d28"},{"location":"math/number-theory/euler/#_5","text":"\u6839\u636e\u6027\u8d28 \\(2\\) \u53ef\u4ee5\u5199\u51fa\uff1a int euler_phi(int n) { int ans = n; for (int i = 2; i * i <= n; i++) { if (n % i == 0) { ans = ans / i * (i - 1); while (n % i == 0) n /= i; } } return n > 1 ? ans / n * (n - 1) : ans; }","title":"\u5b9e\u73b0"},{"location":"math/number-theory/euler/#_6","text":"\u6ce8\u610f\u5230\u5728\u7ebf\u6027\u7b5b\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5408\u6570\u90fd\u662f\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u7b5b\u6389\u3002 \u6bd4\u5982\u8bbe \\(p_1\\) \u662f \\(n\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c \\(k = n / p_1\\) \uff0c\u5373 \\(kp_1 = n\\) \uff1b \u90a3\u4e48\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\u4e2d \\(n\\) \u901a\u8fc7 \\(k \\times p_1\\) \u7b5b\u6389\u3002 \u89c2\u5bdf\u7ebf\u6027\u7b5b\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u4e24\u4e2a\u90e8\u5206\uff0c\u4e0b\u9762\u5bf9 \\(k \\bmod p_1\\) \u5206\u60c5\u51b5\u8ba8\u8bba\uff1a \u5982\u679c \\(k \\bmod p_1 = 0\\) \uff0c\u90a3\u4e48 \\(k\\) \u5305\u542b\u4e86 \\(n\\) \u7684\u6240\u6709\u8d28\u56e0\u5b50\uff1b\u6709\uff1a \\[ \\begin{aligned} \\varphi(n) & = n \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times k \\times \\prod_{i = 1}^s{\\frac{p_i - 1}{p_i}} \\\\\\\\ & = p_1 \\times \\varphi(k) \\end{aligned} \\] \u5982\u679c \\(k \\bmod p_1 \\neq 0\\) \uff0c\u8fd9\u65f6 \\(k\\) \u548c \\(p_1\\) \u662f\u4e92\u8d28\u7684\uff0c\u6839\u636e\u6b27\u62c9\u51fd\u6570\u6027\u8d28\uff1b\u6709\uff1a \\[ \\begin{aligned} \\varphi(n) & = \\varphi(p_1) \\times \\varphi(k) \\\\\\\\ & = (p_1 - 1) \\times \\varphi(k) \\end{aligned} \\] int primes[N], cnt; bool is[N]; int phi[N]; int get_phi(int n) { phi[1] = 1; for (int i = 2; i <= n; ++i) { if (!is[i]) primes[++cnt] = i, phi[i] = i - 1; for (int j = 0; primes[j] <= n / i; ++j) { is[primes[j] * i] = 1; if (i % primes[j]) phi[primes[j] * i] = phi[i] * (primes[j] - 1); else { phi[primes[j] * i] = phi[i] * primes[j]; break; } } } }","title":"\u7ebf\u6027\u7b5b\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"math/number-theory/euler/#_7","text":"","title":"\u6b27\u62c9\u5b9a\u7406"},{"location":"math/number-theory/euler/#_8","text":"","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"math/number-theory/euler/#1","text":"\u5b8c\u5168\u5269\u4f59\u7cfb\uff08\u6700\u5c0f\u975e\u8d1f\u5b8c\u5168\u5269\u4f59\u7cfb\uff09\uff0c\u5b9a\u4e49\u4e3a\uff1a \\(\\mathbb Z_m = \\{0, 1, \\dots, m - 1\\}\\) . \u5177\u4f53\u7684\u5b9a\u4e49\u4e3a \u6574\u6570\u96c6 \\(S = \\{r_1, r_2, \\dots, r_s\\}\\) \uff0c\u6ee1\u8db3\uff1a \u4efb\u610f\u4e0d\u540c\u5143\u7d20 \\(r_i \\not \\equiv r_j \\pmod m\\) . \u4efb\u610f \\(a \\in \\mathbb Z\\) \uff0c\u5b58\u5728 \\(r_i \\equiv a \\pmod m\\) . \u4e5f\u5c31\u662f\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u5305\u542b \\(0 \\sim m - 1\\) \u5185\u7684\u6240\u6709\u6574\u6570\uff0c\u957f\u5ea6\u4e3a \\(m\\) \u3002","title":"\u524d\u7f6e\u77e5\u8bc6\uff11\uff1a\u5b8c\u5168\u5269\u4f59\u7cfb"},{"location":"math/number-theory/euler/#2","text":"\u7b80\u5316\u5269\u4f59\u7cfb\uff0c\u5b9a\u4e49\u4e3a\uff1a \\(\\Phi_m = \\{r \\in \\mathbb Z_m : r \\perp m\\}\\) . \u5177\u4f53\u7684\u5b9a\u4e49\u4e3a \u6574\u6570\u96c6 \\(S = \\{r_1, r_2, \\dots, r_s\\}\\) \uff0c\u6ee1\u8db3\uff1a \u4efb\u610f \\(r_i \\perp m\\) . \u4efb\u610f\u4e0d\u540c\u5143\u7d20 \\(r_i \\not \\equiv r_j \\pmod m\\) . \u4efb\u610f \\(a \\perp m\\) \uff0c\u5b58\u5728 \\(r \\equiv a \\pmod m\\) . \u4e5f\u5c31\u662f\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u7684\u7b80\u5316\u5269\u4f59\u7cfb\u5305\u542b \\(0 \\sim m - 1\\) \u5185\u6240\u6709\u4e0e \\(m\\) \u4e92\u8d28\u7684\u6574\u6570\uff0c\u957f\u5ea6\u4e3a \\(\\varphi(m)\\) \u3002","title":"\u524d\u7f6e\u77e5\u8bc6\uff12\uff1a\u7b80\u5316\u5269\u4f59\u7cfb"},{"location":"math/number-theory/euler/#3","text":"\u82e5 \\(a \\perp m\\) \uff0c\u4e14\u6709 \\(S = \\{r_1, r_2, \\dots, r_s\\}\\) \u4e3a\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\uff0c \u5219 \\(S' = \\{ar_1, ar_2, \\dots, ar_s\\}\\) \u4e5f\u662f\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\u3002 \u8bc1\u660e\uff1a \u5bf9\u4e8e\u4efb\u610f \\(r_i\\) \uff1a\u7531 \\(a \\perp m\\) \u3001 \\(r_i \\perp m\\) \uff0c\u5f97 \\(ar_i \\perp m\\) \uff08\u4e92\u8d28\u6027\u8d28\uff09. \u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u5143\u7d20\uff1a\u7531 \\(r_i \\not \\equiv r_j \\pmod m\\) \u3001 \\(a \\perp m\\) \uff0c\u5f97 \\(ar_i \\not \\equiv ar_j \\pmod m\\) . \u7531 \\(|S'| = |S|\\) \u53ca \\((2)\\) \u5f97\uff1a\u4efb\u610f \\(r_i\\) \u4e00\u5b9a\u6709\u4e0e\u5176\u5bf9\u5e94\u7684 \\(ar_j\\) \uff1b \u56e0\u4e3a\u5bf9\u4e8e\u4efb\u610f \\(t \\perp m\\) \uff0c\u5b58\u5728 \\(r_i \\equiv t \\pmod m\\) \uff0c\u4e5f\u4e00\u5b9a\u5b58\u5728 \\(ar_j \\equiv t \\pmod m\\) . \u6ee1\u8db3\u7b80\u5316\u5269\u4f59\u7cfb\u7684\u5b9a\u4e49\uff0c\u56e0\u6b64 \\(S'\\) \u662f\u4e00\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\u3002","title":"\u524d\u7f6e\u77e5\u8bc6\uff13\uff1a\u6b27\u62c9\u5b9a\u7406\u7684\u5f15\u7406"},{"location":"math/number-theory/euler/#_9","text":"\u82e5 \\(\\gcd(a, m) = 1\\) \uff0c\u5219 \\(a^{\\varphi(m)} \\equiv 1 \\pmod{m}\\) \u3002","title":"\u5b9a\u4e49"},{"location":"math/number-theory/euler/#_10","text":"\u8bbe \\(S = \\{ r_1, r_2, \\cdots, r_{\\varphi(m)} \\}\\) \u4e3a\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u7684\u7b80\u5316\u5269\u4f59\u7cfb\uff0c \u5219 \\(S' = \\{ ar_1, ar_2, \\cdots, ar_{\\varphi(m)} \\}\\) \u4e5f\u4e3a\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u7684\u7b80\u5316\u5269\u4f59\u7cfb. \u56e0\u4e3a \\(a \\perp m\\) \uff0c\u6240\u4ee5 \\(r_1r_2 \\dots r_{\\varphi(m)} \\equiv ar_1ar_2 \\dots ar_{\\varphi(m)} \\pmod m\\) \uff0c \u5373 \\(r_1r_2 \\dots r_{\\varphi(m)} \\equiv a^{\\varphi(m)} r_1r_2 \\dots r_{\\varphi(m)} \\pmod m\\) . \u56e0\u4e3a \\(r_1r_2 \\dots r_{\\varphi(m)} \\perp m\\) \uff08\u4e92\u8d28\u6027\u8d28\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u7ea6\u53bb\uff1b \u5373 \\(a^{\\varphi(m)} \\equiv 1 \\pmod m\\) .","title":"\u8bc1\u660e"},{"location":"math/number-theory/euler/#_11","text":"","title":"\u5e94\u7528"},{"location":"math/number-theory/euler/#_12","text":"\\(a^k \\equiv a^{k \\bmod \\varphi(p)} \\pmod p\\) \u8bc1\u660e\uff1a \\[ \\begin{align} a^{u + v\\varphi(p)} &\\equiv a^ua^{v\\varphi(p)} &\\pmod p \\\\ &\\equiv a^u(a^{\\varphi(p)})^v &\\pmod p \\\\ &\\equiv a^u(1)^v &\\pmod p \\\\ &\\equiv a^u &\\pmod p \\end{align} \\]","title":"\u6307\u6570\u53d6\u6a21"},{"location":"math/number-theory/euler/#_13","text":"\u82e5 \\(p\\) \u4e3a\u7d20\u6570\uff0c\u7531\u4e8e \\(\\varphi(p) = p - 1\\) \uff0c\u4ee3\u5165\u6b27\u62c9\u5b9a\u7406\u53ef\u7acb\u5373\u5f97\u5230\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a \u82e5 \\(p\\) \u4e3a\u7d20\u6570\uff0c \\(\\gcd(a, p) = 1\\) \uff0c\u5219 \\(a^{p - 1} \\equiv 1 \\pmod{p}\\) \u3002 \u4e5f\u53ef\u4ee5\u5bf9\u8d39\u9a6c\u5c0f\u5b9a\u7406\u8fdb\u884c\u62d3\u5c55\uff1a\u82e5 \\(p\\) \u662f\u7d20\u6570\uff0c\u5219 \\(a^p\\equiv a\\pmod p\\) \u3002","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"math/number-theory/euler/#reference","text":"[1] https://oi-wiki.org/math/number-theory/euler/ [2] https://oi-wiki.org/math/number-theory/sieve/ [3] https://oi-wiki.org/math/number-theory/fermat/ [4] https://zhuanlan.zhihu.com/p/581822244 [5] https://zhuanlan.zhihu.com/p/536214853 [6] https://zhuanlan.zhihu.com/p/577742188 [7] https://blog.csdn.net/weixin_43145361/article/details/107083879 [8] https://baike.baidu.com/item/\u7b80\u5316\u5269\u4f59\u7cfb/3712809","title":"Reference"},{"location":"math/number-theory/excrt/","text":"\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u7406\u8bba \u00b6 \u6c42\u89e3\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4 \\[ \\left\\{\\begin{matrix} x \\equiv a_1 \\pmod {m_1} \\\\ x \\equiv a_2 \\pmod {m_2} \\\\ \\dots \\\\ x \\equiv a_k \\pmod {m_k} \\end{matrix}\\right. \\] \u4f46\u662f\u6a21\u6570 \\(m_i\\) \u4e0d\u4e00\u5b9a\u4e24\u4e24\u4e92\u8d28\u3002 \u6b64\u65f6\u56e0\u4e3a \\(m_i\\) \u4e0d\u4e00\u5b9a\u4e0e \\(m_j\\) \u4e92\u8d28\uff0c\u6545\u4e0d\u4e00\u5b9a\u5b58\u5728\u4e58\u6cd5\u9006\u5143\uff0c\u5373\u65e0\u6cd5\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u3002 \u505a\u6cd5 \u00b6 \u516c\u5f0f\u53d8\u5f62 \u00b6 \u5148\u8003\u8651\u524d\u4e24\u4e2a\u65b9\u7a0b\uff1a \\(x\\equiv a_1 \\pmod {m_1}\\) \u3001 \\(x\\equiv a_2 \\pmod {m_2}\\) . \u5c06\u5b83\u4eec\u8f6c\u5316\u4e3a\u4e0d\u5b9a\u65b9\u7a0b\uff1a \\(x=m_1p+a_1=m_2q+a_2\\) \uff0c \\(p, q \\in \\mathbb Z\\) . \u5219\u6709 \\(m_1p-m_2q=a_2-a_1\\) . \u89e3\u7684\u60c5\u51b5 \u00b6 \u7531 \u88f4\u8700\u5b9a\u7406 \uff1a \u5f53 \\(\\gcd(m_1,m_2) \\nmid a_2-a_1\\) \u65f6\uff0c\u65e0\u89e3\uff1b \u5f53 \\(\\gcd(m_1,m_2) \\mid a_2-a_1\\) \u65f6\uff0c\u6709\u89e3\u3002 \u6c42\u89e3\u4e0d\u5b9a\u65b9\u7a0b \u00b6 \u73b0\u5728\u8003\u8651\u5982\u4f55\u4f7f\u7528 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u6c42\u51fa\u4e00\u7ec4\u53ef\u884c\u89e3\uff1a \u8003\u8651\u65b9\u7a0b\uff1a \\(m_1p-m_2q=a_2-a_1\\) . \u56e0\u4e3a \\(\\gcd(m_1,m_2) \\mid a_2-a_1\\) \uff0c\u6240\u4ee5\u65b9\u7a0b\u4e24\u8fb9\u53ef\u4ee5\u540c\u65f6\u9664\u53bb \\(\\gcd(m_1,m_2)\\) \uff0c\u540c\u65f6\u8bbe\uff1a \\[ \\left \\{ \\begin{array}{rl} k_1 &= \\dfrac{m_1}{\\gcd(m_1,m_2)} \\\\\\\\ k_2 &= \\dfrac{m_2}{\\gcd(m_1,m_2)} \\\\\\\\ z &= \\dfrac{a_2-a_1}{\\gcd(m_1,m_2)} \\end{array} \\right. \\] \u5f97 \\(k_1p - k_2q = z\\) \uff0c\u4e14 \\(k_1 \\perp k_2\\) \uff1b\u6240\u4ee5\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u51fa\uff1a \u65b9\u7a0b \\(k_1s + k_2t = 1\\) \u7684\u4e00\u7ec4\u89e3 \\((s, t)\\) \uff1b\u56e0\u6b64\u6709\uff1a \\[ \\left\\{\\begin{array}{l} p = zs \\\\ q = -zt \\\\ \\end{array}\\right. \\] \u56de\u770b\u521a\u5f00\u59cb\u7684\u65b9\u7a0b \\(x\\equiv a_1 \\pmod {m_1}\\) \uff0c\u5373\u53ef\u5f97\u51fa\u4e00\u4e2a\u7279\u89e3\uff1a \\[ \\begin{array}{rl} x_0 & = m_1p+a_1 \\\\\\\\ &= m_1 \\cdot zs + a_1 \\\\\\\\ & = \\dfrac{m_1s\\times(a_2-a_1)}{\\gcd(m_1,m_2)} + a_1 \\end{array} \\] \u624b\u6a21\u4e00\u4e0b\u53ef\u77e5\u65b0\u7684\u65b9\u7a0b\u662f\u6a21 \\(\\operatorname{lcm}(m_1, m_2)\\) \u610f\u4e49\u4e0b\u7684\u3002 \u7136\u540e\u518d\u8003\u8651\u5c06\u7279\u89e3\u8f6c\u4e3a\u901a\u89e3\uff0c\u8fd9\u4e00\u70b9\u5f88\u7b80\u5355\uff0c\u5728\u6b64\u5f15\u7528 rxz \u7684\u4e00\u53e5\u8bdd\uff1a\u4ece\u7ebf\u6027\u4ee3\u6570\u7684\u89d2\u5ea6\u8bb2\uff0c\u8fd9\u4e2a\u901a\u89e3\u7684\u6784\u9020\u65b9\u5f0f\u662f\u5341\u5206\u5e73\u51e1\u7684\u3002\u5bf9 \\(\\operatorname{lcm}(m_1, m_2)\\) \u53d6\u6a21\u7684\u7ed3\u679c\uff0c\u5c06\u6574\u4e2a\u6574\u6570\u96c6\u5212\u5206\u6210\u4e86 \\(\\operatorname{lcm}(m_1, m_2)\\) \u4e2a\u7b49\u4ef7\u7c7b\uff0c\u54ea\u4e2a\u7b49\u4ef7\u7c7b\u91cc\u9762\u6709\u7279\u89e3\uff0c\u90a3\u6574\u4e2a\u7b49\u4ef7\u7c7b\u80af\u5b9a\u5168\u90fd\u662f\u89e3\u3002 \u4e5f\u5c31\u662f\u901a\u89e3 \\(x' = x_0 + k\\times\\operatorname{lcm}(m_1, m_2)\\) \uff0c\u5176\u4e2d \\(k \\in \\mathbb Z\\) . \u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u51fa\u5408\u5e76\u540e\u7684\u65b9\u7a0b\uff1a \\(x \\equiv x' \\pmod{\\operatorname{lcm}(m_1, m_2)}\\) . \u5982\u679c\u4f60\u6ca1\u770b\u61c2\uff0c\u53ef\u4ee5\u518d\u770b\u770b rxz \u7684 https://www.luogu.com.cn/article/lr8vtpzl \u4ee3\u7801\uff08\u6b64\u5904\u7684\u4e58\u6cd5\u6bd4\u8f83\u5bb9\u6613\u6ea2\u51fa\uff0c\u4e00\u822c\u5f00\u5927\u4e00\u70b9\uff0c long long \u4e0d\u884c\u5c31 int128 \uff09\uff1a void merge(ll &a1, ll &m1, ll a2, ll m2) { ll g = gcd(m1, m2), m = m1 / g * m2; ll p, q; exgcd(m1 / g, m2 / g, p, q); p = p * m1 % m; p = p * ((a2 - a1) / g) % m; a1 = (a1 + p + m) % m; m1 = m; } \u4f8b\u9898 \u00b6 \u9898\u76ee\uff1a P4777 \u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u8fd9\u9053\u9898\u5f88\u5751\uff0c\u6570\u5f88\u5927\uff0c\u6211\u5f00\u5230\u4e86 int128 ... typedef __int128_t vl; const int N = 1e5 + 10; ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; } ll exgcd(ll a, ll b, vl &x, vl &y) { if (b == 0) { x = 1, y = 0; return a; } ll d = exgcd(b, a % b, y, x); y -= a / b * x; return d; } void merge(ll &a1, ll &m1, ll a2, ll m2) { ll g = gcd(m1, m2), m = m1 / g * m2; vl p, q; exgcd(m1 / g, m2 / g, p, q); p = p * m1 % m; p = p * ((a2 - a1) / g) % m; a1 = (a1 + p + m) % m; m1 = m; } int main() { int n = rr; ll mm = rr, aa = rr; for (int i = 1; i < n; ++i) { ll m = rr, a = rr; merge(aa, mm, a, m); } printf(\"%lld\\n\", aa % mm); return 0; } Reference \u00b6 [1] https://www.bilibili.com/video/BV1Ut4y1F7HG/ [2] https://www.luogu.com.cn/blog/blue/kuo-zhan-zhong-guo-sheng-yu-ding-li","title":"\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"math/number-theory/excrt/#_1","text":"","title":"\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"math/number-theory/excrt/#_2","text":"\u6c42\u89e3\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4 \\[ \\left\\{\\begin{matrix} x \\equiv a_1 \\pmod {m_1} \\\\ x \\equiv a_2 \\pmod {m_2} \\\\ \\dots \\\\ x \\equiv a_k \\pmod {m_k} \\end{matrix}\\right. \\] \u4f46\u662f\u6a21\u6570 \\(m_i\\) \u4e0d\u4e00\u5b9a\u4e24\u4e24\u4e92\u8d28\u3002 \u6b64\u65f6\u56e0\u4e3a \\(m_i\\) \u4e0d\u4e00\u5b9a\u4e0e \\(m_j\\) \u4e92\u8d28\uff0c\u6545\u4e0d\u4e00\u5b9a\u5b58\u5728\u4e58\u6cd5\u9006\u5143\uff0c\u5373\u65e0\u6cd5\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u3002","title":"\u7406\u8bba"},{"location":"math/number-theory/excrt/#_3","text":"","title":"\u505a\u6cd5"},{"location":"math/number-theory/excrt/#_4","text":"\u5148\u8003\u8651\u524d\u4e24\u4e2a\u65b9\u7a0b\uff1a \\(x\\equiv a_1 \\pmod {m_1}\\) \u3001 \\(x\\equiv a_2 \\pmod {m_2}\\) . \u5c06\u5b83\u4eec\u8f6c\u5316\u4e3a\u4e0d\u5b9a\u65b9\u7a0b\uff1a \\(x=m_1p+a_1=m_2q+a_2\\) \uff0c \\(p, q \\in \\mathbb Z\\) . \u5219\u6709 \\(m_1p-m_2q=a_2-a_1\\) .","title":"\u516c\u5f0f\u53d8\u5f62"},{"location":"math/number-theory/excrt/#_5","text":"\u7531 \u88f4\u8700\u5b9a\u7406 \uff1a \u5f53 \\(\\gcd(m_1,m_2) \\nmid a_2-a_1\\) \u65f6\uff0c\u65e0\u89e3\uff1b \u5f53 \\(\\gcd(m_1,m_2) \\mid a_2-a_1\\) \u65f6\uff0c\u6709\u89e3\u3002","title":"\u89e3\u7684\u60c5\u51b5"},{"location":"math/number-theory/excrt/#_6","text":"\u73b0\u5728\u8003\u8651\u5982\u4f55\u4f7f\u7528 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u6c42\u51fa\u4e00\u7ec4\u53ef\u884c\u89e3\uff1a \u8003\u8651\u65b9\u7a0b\uff1a \\(m_1p-m_2q=a_2-a_1\\) . \u56e0\u4e3a \\(\\gcd(m_1,m_2) \\mid a_2-a_1\\) \uff0c\u6240\u4ee5\u65b9\u7a0b\u4e24\u8fb9\u53ef\u4ee5\u540c\u65f6\u9664\u53bb \\(\\gcd(m_1,m_2)\\) \uff0c\u540c\u65f6\u8bbe\uff1a \\[ \\left \\{ \\begin{array}{rl} k_1 &= \\dfrac{m_1}{\\gcd(m_1,m_2)} \\\\\\\\ k_2 &= \\dfrac{m_2}{\\gcd(m_1,m_2)} \\\\\\\\ z &= \\dfrac{a_2-a_1}{\\gcd(m_1,m_2)} \\end{array} \\right. \\] \u5f97 \\(k_1p - k_2q = z\\) \uff0c\u4e14 \\(k_1 \\perp k_2\\) \uff1b\u6240\u4ee5\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u51fa\uff1a \u65b9\u7a0b \\(k_1s + k_2t = 1\\) \u7684\u4e00\u7ec4\u89e3 \\((s, t)\\) \uff1b\u56e0\u6b64\u6709\uff1a \\[ \\left\\{\\begin{array}{l} p = zs \\\\ q = -zt \\\\ \\end{array}\\right. \\] \u56de\u770b\u521a\u5f00\u59cb\u7684\u65b9\u7a0b \\(x\\equiv a_1 \\pmod {m_1}\\) \uff0c\u5373\u53ef\u5f97\u51fa\u4e00\u4e2a\u7279\u89e3\uff1a \\[ \\begin{array}{rl} x_0 & = m_1p+a_1 \\\\\\\\ &= m_1 \\cdot zs + a_1 \\\\\\\\ & = \\dfrac{m_1s\\times(a_2-a_1)}{\\gcd(m_1,m_2)} + a_1 \\end{array} \\] \u624b\u6a21\u4e00\u4e0b\u53ef\u77e5\u65b0\u7684\u65b9\u7a0b\u662f\u6a21 \\(\\operatorname{lcm}(m_1, m_2)\\) \u610f\u4e49\u4e0b\u7684\u3002 \u7136\u540e\u518d\u8003\u8651\u5c06\u7279\u89e3\u8f6c\u4e3a\u901a\u89e3\uff0c\u8fd9\u4e00\u70b9\u5f88\u7b80\u5355\uff0c\u5728\u6b64\u5f15\u7528 rxz \u7684\u4e00\u53e5\u8bdd\uff1a\u4ece\u7ebf\u6027\u4ee3\u6570\u7684\u89d2\u5ea6\u8bb2\uff0c\u8fd9\u4e2a\u901a\u89e3\u7684\u6784\u9020\u65b9\u5f0f\u662f\u5341\u5206\u5e73\u51e1\u7684\u3002\u5bf9 \\(\\operatorname{lcm}(m_1, m_2)\\) \u53d6\u6a21\u7684\u7ed3\u679c\uff0c\u5c06\u6574\u4e2a\u6574\u6570\u96c6\u5212\u5206\u6210\u4e86 \\(\\operatorname{lcm}(m_1, m_2)\\) \u4e2a\u7b49\u4ef7\u7c7b\uff0c\u54ea\u4e2a\u7b49\u4ef7\u7c7b\u91cc\u9762\u6709\u7279\u89e3\uff0c\u90a3\u6574\u4e2a\u7b49\u4ef7\u7c7b\u80af\u5b9a\u5168\u90fd\u662f\u89e3\u3002 \u4e5f\u5c31\u662f\u901a\u89e3 \\(x' = x_0 + k\\times\\operatorname{lcm}(m_1, m_2)\\) \uff0c\u5176\u4e2d \\(k \\in \\mathbb Z\\) . \u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u51fa\u5408\u5e76\u540e\u7684\u65b9\u7a0b\uff1a \\(x \\equiv x' \\pmod{\\operatorname{lcm}(m_1, m_2)}\\) . \u5982\u679c\u4f60\u6ca1\u770b\u61c2\uff0c\u53ef\u4ee5\u518d\u770b\u770b rxz \u7684 https://www.luogu.com.cn/article/lr8vtpzl \u4ee3\u7801\uff08\u6b64\u5904\u7684\u4e58\u6cd5\u6bd4\u8f83\u5bb9\u6613\u6ea2\u51fa\uff0c\u4e00\u822c\u5f00\u5927\u4e00\u70b9\uff0c long long \u4e0d\u884c\u5c31 int128 \uff09\uff1a void merge(ll &a1, ll &m1, ll a2, ll m2) { ll g = gcd(m1, m2), m = m1 / g * m2; ll p, q; exgcd(m1 / g, m2 / g, p, q); p = p * m1 % m; p = p * ((a2 - a1) / g) % m; a1 = (a1 + p + m) % m; m1 = m; }","title":"\u6c42\u89e3\u4e0d\u5b9a\u65b9\u7a0b"},{"location":"math/number-theory/excrt/#_7","text":"\u9898\u76ee\uff1a P4777 \u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u8fd9\u9053\u9898\u5f88\u5751\uff0c\u6570\u5f88\u5927\uff0c\u6211\u5f00\u5230\u4e86 int128 ... typedef __int128_t vl; const int N = 1e5 + 10; ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; } ll exgcd(ll a, ll b, vl &x, vl &y) { if (b == 0) { x = 1, y = 0; return a; } ll d = exgcd(b, a % b, y, x); y -= a / b * x; return d; } void merge(ll &a1, ll &m1, ll a2, ll m2) { ll g = gcd(m1, m2), m = m1 / g * m2; vl p, q; exgcd(m1 / g, m2 / g, p, q); p = p * m1 % m; p = p * ((a2 - a1) / g) % m; a1 = (a1 + p + m) % m; m1 = m; } int main() { int n = rr; ll mm = rr, aa = rr; for (int i = 1; i < n; ++i) { ll m = rr, a = rr; merge(aa, mm, a, m); } printf(\"%lld\\n\", aa % mm); return 0; }","title":"\u4f8b\u9898"},{"location":"math/number-theory/excrt/#reference","text":"[1] https://www.bilibili.com/video/BV1Ut4y1F7HG/ [2] https://www.luogu.com.cn/blog/blue/kuo-zhan-zhong-guo-sheng-yu-ding-li","title":"Reference"},{"location":"math/number-theory/exgcd/","text":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u00b6 \u88f4\u8700\u5b9a\u7406 \u00b6 \u5b9a\u4e49 \u00b6 \u82e5 \\(a\\) \u3001 \\(b\\) \u662f\u4e0d\u5168\u4e3a\u96f6\u7684\u6574\u6570\uff0c\u5219\u5b58\u5728\u6574\u6570 \\(x\\) \u3001 \\(y\\) \uff0c\u4f7f\u5f97 \\(ax + by = \\gcd(a, b)\\) \u3002 \u63a8\u5e7f \u00b6 \u82e5 \\(A[1 \\sim n]\\) \u662f\u975e\u96f6\u6574\u6570\u5e8f\u5217\uff0c\u5219\u6574\u6570\u5e8f\u5217 \\(X[1 \\sim n]\\) \u4e00\u5b9a\u6ee1\u8db3\uff1a \\[ \\sum_{i = 1}^n A_iX_i = k \\times \\gcd(A_1, A_2, \\dots, A_n) \\] \uff0c\u5176\u4e2d \\(k\\) \u4e3a\u6b63\u6574\u6570\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u00b6 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08Extended Euclidean algorithm\uff0cEXGCD\uff09\uff0c\u5e38\u7528\u4e8e\u6c42 \\(ax + by = \\gcd(a, b)\\) \u7684\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u7b97\u6cd5\u601d\u8def \u00b6 \u5bf9\u4e8e \\(ax + by = \\gcd(a, b)\\) \uff0c\u8003\u8651\u4e0e\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u76f8\u4f3c\u7684\u601d\u8def\uff1a \u7ed3\u8bba\uff1a \u6c42\u4e00\u7ec4\u89e3 \\(x'\\) \u3001 \\(y'\\) \uff0c\u4f7f\u5f97 \\(bx' + (a \\bmod b)y' = \\gcd(b, a \\bmod b)\\) \uff08\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\uff09 \\(\\gcd(a, b) = \\gcd(b, a \\bmod b)\\) \\(bx' + (a \\bmod b)y' = \\gcd(a, b)\\) \uff08\u6a21\u8fd0\u7b97\u7684\u5b9a\u4e49\uff09 \\(a \\bmod b = a - \\lfloor \\dfrac{a}{b} \\rfloor \\times b\\) \\(bx' + (a - \\lfloor \\dfrac{a}{b} \\rfloor \\times b)y' = \\gcd(a, b)\\) \u6574\u7406\uff0c\u5f97 \\(ay' + b(x' - \\lfloor \\dfrac{a}{b} \\rfloor \\times y') = \\gcd(a, b)\\) \u6211\u4eec\u8981\u6c42\u4e00\u7ec4\u89e3\uff0c\u4f7f\u5f97 \\(ax + by = \\gcd(a, b)\\) \u56e0\u6b64\u6709\u4e00\u7ec4\u89e3\u4e3a \\(\\left\\{\\begin{array}{l} x = y' \\\\ y = x' - \\lfloor \\dfrac{a}{b} \\rfloor \\times y'\\end{array}\\right.\\) . \u5176\u8fb9\u754c\u503c\u4e3a \\(b = 0\\) \uff0c\u8fd9\u65f6\u6709 \\(ax = \\gcd(a, 0) = a\\) \uff0c\u65e2\u6709 \\(x = 1\\) \uff1b \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u53d6 \\(y = 0\\) \u3002 \u5373\uff1a\u82e5 \\(b = 0\\) \uff0c\u5219\u53d6 \\(\\left\\{\\begin{array}{l} x = 1 \\\\ y = 0\\end{array}\\right.\\) . \u4ee3\u7801 \u00b6 \u6765\u81ea OI-Wiki\uff1a int Exgcd(int a, int b, int &x, int &y) { if (!b) { x = 1; y = 0; return a; } int d = Exgcd(b, a % b, x, y); int t = x; x = y; y = t - (a / b) * y; return d; } \u7b80\u5316\u540e\u53ef\u4ee5\u5199\u4f5c\uff1a int Exgcd(int a, int b, int &x, int &y) { if (!b) { x = 1, y = 0; return a; } int d = Exgcd(b, a % b, y, x); y -= a / b * x; return d; } \u7279\u89e3\u5230\u901a\u89e3 \u00b6 \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6c42\u51fa\u4e86\u4e00\u7ec4\u7279\u89e3 \\(x_0\\) \u3001 \\(y_0\\) \uff0c\u4f7f\u5f97 \\(ax_0 + by_0 = \\gcd(a, b)\\) \u3002 \u63a5\u4e0b\u6765\uff1a \\[ \\begin{array}{rl} ax_0 + by_0 &= \\gcd(a, b) \\\\ (ax_0 + H) + (by_0 - H) &= \\gcd(a, b) \\\\ a(x_0 + H / a) + b(y_0 - H / b) &= \\gcd(a, b) \\end{array} \\] \u53ef\u4ee5\u770b\u51fa \\(H\\) \u5373\u662f \\(a\\) \u7684\u500d\u6570\uff0c\u53c8\u662f \\(b\\) \u7684\u500d\u6570\uff0c \u6240\u4ee5 \\(H = k \\times \\operatorname{lcm}(a, b)\\) \uff0c\u5176\u4e2d \\(k\\) \u53ef\u4ee5\u662f\u4efb\u610f\u6574\u6570\u3002 \u5373\uff1a \\[ \\left\\{\\begin{array}{l} x = x_0 + k \\times \\dfrac{\\operatorname{lcm}(a, b)}{a} \\\\ y = y_0 + k \\times \\dfrac{\\operatorname{lcm}(a, b)}{b}\\end{array}\\right. \\] \u5176\u4e2d \\(k \\in \\mathbb{Z}\\) \u3002 Reference \u00b6 [1] https://oi-wiki.org/math/number-theory/bezouts/ [2] https://oi-wiki.org/math/number-theory/gcd/","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"math/number-theory/exgcd/#_1","text":"","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"math/number-theory/exgcd/#_2","text":"","title":"\u88f4\u8700\u5b9a\u7406"},{"location":"math/number-theory/exgcd/#_3","text":"\u82e5 \\(a\\) \u3001 \\(b\\) \u662f\u4e0d\u5168\u4e3a\u96f6\u7684\u6574\u6570\uff0c\u5219\u5b58\u5728\u6574\u6570 \\(x\\) \u3001 \\(y\\) \uff0c\u4f7f\u5f97 \\(ax + by = \\gcd(a, b)\\) \u3002","title":"\u5b9a\u4e49"},{"location":"math/number-theory/exgcd/#_4","text":"\u82e5 \\(A[1 \\sim n]\\) \u662f\u975e\u96f6\u6574\u6570\u5e8f\u5217\uff0c\u5219\u6574\u6570\u5e8f\u5217 \\(X[1 \\sim n]\\) \u4e00\u5b9a\u6ee1\u8db3\uff1a \\[ \\sum_{i = 1}^n A_iX_i = k \\times \\gcd(A_1, A_2, \\dots, A_n) \\] \uff0c\u5176\u4e2d \\(k\\) \u4e3a\u6b63\u6574\u6570\u3002","title":"\u63a8\u5e7f"},{"location":"math/number-theory/exgcd/#_5","text":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08Extended Euclidean algorithm\uff0cEXGCD\uff09\uff0c\u5e38\u7528\u4e8e\u6c42 \\(ax + by = \\gcd(a, b)\\) \u7684\u4e00\u7ec4\u53ef\u884c\u89e3\u3002","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"math/number-theory/exgcd/#_6","text":"\u5bf9\u4e8e \\(ax + by = \\gcd(a, b)\\) \uff0c\u8003\u8651\u4e0e\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u76f8\u4f3c\u7684\u601d\u8def\uff1a \u7ed3\u8bba\uff1a \u6c42\u4e00\u7ec4\u89e3 \\(x'\\) \u3001 \\(y'\\) \uff0c\u4f7f\u5f97 \\(bx' + (a \\bmod b)y' = \\gcd(b, a \\bmod b)\\) \uff08\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\uff09 \\(\\gcd(a, b) = \\gcd(b, a \\bmod b)\\) \\(bx' + (a \\bmod b)y' = \\gcd(a, b)\\) \uff08\u6a21\u8fd0\u7b97\u7684\u5b9a\u4e49\uff09 \\(a \\bmod b = a - \\lfloor \\dfrac{a}{b} \\rfloor \\times b\\) \\(bx' + (a - \\lfloor \\dfrac{a}{b} \\rfloor \\times b)y' = \\gcd(a, b)\\) \u6574\u7406\uff0c\u5f97 \\(ay' + b(x' - \\lfloor \\dfrac{a}{b} \\rfloor \\times y') = \\gcd(a, b)\\) \u6211\u4eec\u8981\u6c42\u4e00\u7ec4\u89e3\uff0c\u4f7f\u5f97 \\(ax + by = \\gcd(a, b)\\) \u56e0\u6b64\u6709\u4e00\u7ec4\u89e3\u4e3a \\(\\left\\{\\begin{array}{l} x = y' \\\\ y = x' - \\lfloor \\dfrac{a}{b} \\rfloor \\times y'\\end{array}\\right.\\) . \u5176\u8fb9\u754c\u503c\u4e3a \\(b = 0\\) \uff0c\u8fd9\u65f6\u6709 \\(ax = \\gcd(a, 0) = a\\) \uff0c\u65e2\u6709 \\(x = 1\\) \uff1b \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u53d6 \\(y = 0\\) \u3002 \u5373\uff1a\u82e5 \\(b = 0\\) \uff0c\u5219\u53d6 \\(\\left\\{\\begin{array}{l} x = 1 \\\\ y = 0\\end{array}\\right.\\) .","title":"\u7b97\u6cd5\u601d\u8def"},{"location":"math/number-theory/exgcd/#_7","text":"\u6765\u81ea OI-Wiki\uff1a int Exgcd(int a, int b, int &x, int &y) { if (!b) { x = 1; y = 0; return a; } int d = Exgcd(b, a % b, x, y); int t = x; x = y; y = t - (a / b) * y; return d; } \u7b80\u5316\u540e\u53ef\u4ee5\u5199\u4f5c\uff1a int Exgcd(int a, int b, int &x, int &y) { if (!b) { x = 1, y = 0; return a; } int d = Exgcd(b, a % b, y, x); y -= a / b * x; return d; }","title":"\u4ee3\u7801"},{"location":"math/number-theory/exgcd/#_8","text":"\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6c42\u51fa\u4e86\u4e00\u7ec4\u7279\u89e3 \\(x_0\\) \u3001 \\(y_0\\) \uff0c\u4f7f\u5f97 \\(ax_0 + by_0 = \\gcd(a, b)\\) \u3002 \u63a5\u4e0b\u6765\uff1a \\[ \\begin{array}{rl} ax_0 + by_0 &= \\gcd(a, b) \\\\ (ax_0 + H) + (by_0 - H) &= \\gcd(a, b) \\\\ a(x_0 + H / a) + b(y_0 - H / b) &= \\gcd(a, b) \\end{array} \\] \u53ef\u4ee5\u770b\u51fa \\(H\\) \u5373\u662f \\(a\\) \u7684\u500d\u6570\uff0c\u53c8\u662f \\(b\\) \u7684\u500d\u6570\uff0c \u6240\u4ee5 \\(H = k \\times \\operatorname{lcm}(a, b)\\) \uff0c\u5176\u4e2d \\(k\\) \u53ef\u4ee5\u662f\u4efb\u610f\u6574\u6570\u3002 \u5373\uff1a \\[ \\left\\{\\begin{array}{l} x = x_0 + k \\times \\dfrac{\\operatorname{lcm}(a, b)}{a} \\\\ y = y_0 + k \\times \\dfrac{\\operatorname{lcm}(a, b)}{b}\\end{array}\\right. \\] \u5176\u4e2d \\(k \\in \\mathbb{Z}\\) \u3002","title":"\u7279\u89e3\u5230\u901a\u89e3"},{"location":"math/number-theory/exgcd/#reference","text":"[1] https://oi-wiki.org/math/number-theory/bezouts/ [2] https://oi-wiki.org/math/number-theory/gcd/","title":"Reference"},{"location":"math/number-theory/gcd/","text":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u00b6 \u5b9a\u4e49 \u00b6 \u6700\u5927\u516c\u7ea6\u6570 \u00b6 \u6700\u5927\u516c\u7ea6\u6570\u5373\u4e3a Greatest Common Divisor\uff0c\u5e38\u7f29\u5199\u4e3a gcd\u3002 \u4e00\u7ec4\u6574\u6570\u7684\u516c\u7ea6\u6570\uff0c\u662f\u6307\u540c\u65f6\u662f\u8fd9\u7ec4\u6570\u4e2d\u6bcf\u4e00\u4e2a\u6570\u7684\u7ea6\u6570\u7684\u6570\u3002 \\(\\pm 1\\) \u662f\u4efb\u610f\u4e00\u7ec4\u6574\u6570\u7684\u516c\u7ea6\u6570\uff1b \u4e00\u7ec4\u6574\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\uff0c\u662f\u6307\u6240\u6709\u516c\u7ea6\u6570\u91cc\u9762\u6700\u5927\u7684\u4e00\u4e2a\u3002 \u7279\u6b8a\u7684\uff0c\u6211\u4eec\u5b9a\u4e49 \\(\\gcd(a, 0) = a\\) \u3002 \u6700\u5c0f\u516c\u500d\u6570 \u00b6 \u6700\u5c0f\u516c\u500d\u6570\u5373\u4e3a Least Common Multiple\uff0c\u5e38\u7f29\u5199\u4e3a lcm\u3002 \u4e00\u7ec4\u6574\u6570\u7684\u516c\u500d\u6570\uff0c\u662f\u6307\u540c\u65f6\u662f\u8fd9\u7ec4\u6570\u4e2d\u6bcf\u4e00\u4e2a\u6570\u7684\u500d\u6570\u7684\u6570\u3002 \\(0\\) \u662f\u4efb\u610f\u4e00\u7ec4\u6574\u6570\u7684\u516c\u500d\u6570\uff1b \u4e00\u7ec4\u6574\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\uff08Least Common Multiple, LCM\uff09\uff0c\u662f\u6307\u6240\u6709\u6b63\u7684\u516c\u500d\u6570\u91cc\u9762\uff0c\u6700\u5c0f\u7684\u4e00\u4e2a\u6570\u3002 \u4e92\u8d28 \u00b6 \u5982\u679c\u4e24\u4e2a\u6570 \\(a\\) \u548c \\(b\\) \u6ee1\u8db3 \\(\\gcd(a, b) = 1\\) \uff0c\u6211\u4eec\u79f0 \\(a\\) \u548c \\(b\\) \u4e92\u8d28\uff0c\u8bb0\u4f5c \\(a\\perp b\\) \u3002 \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u00b6 \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08Euclidean algorithm\uff09\uff0c\u662f\u6c42\u89e3\u4e24\u4e2a\u6570\u6700\u5927\u516c\u7ea6\u6570\u7684\u6700\u5e38\u7528\u7684\u7b97\u6cd5\u3002 \u7b97\u6cd5\u601d\u60f3 \u00b6 \\(\\gcd(a, b) = \\gcd(b, a \\bmod b)\\) \u5177\u4f53\u8bc1\u660e\u89c1\uff1a OI-Wiki \u3002 \u4ee3\u7801 \u00b6 int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); } \u56e0\u6b64\u4e5f\u6709\u9012\u5f52\u5199\u6cd5\uff1a int gcd(int a, int b) { int tmp; while (b != 0) tmp = a, a = b, b = tmp % b; return a; } \u5bf9\u4e8e C++14\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u4e2d\u7684 __gcd(a,b) \u51fd\u6570\u6765\u6c42\u6700\u5927\u516c\u7ea6\u6570\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5728\u8f93\u5165\u4e3a\u4e24\u4e2a\u957f\u4e3a \\(n\\) \u7684\u4e8c\u8fdb\u5236\u6574\u6570\u65f6\uff0c\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \uff1b \u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u9ed8\u8ba4 \\(a, b\\) \u540c\u9636\u7684\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log\\max(a, b))\\) \u3002 \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7684\u6700\u52a3\u65f6\u95f4\u590d\u6742\u5ea6\u60c5\u51b5\u662f \\(\\gcd(\\operatorname{Fib}_{n + 1}, \\operatorname{Fib}_n)\\) \uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \uff1b \u4f46\u662f\uff0c\u6709 \\(\\gcd(\\operatorname{Fib}_{n + 1}, \\operatorname{Fib}_n) = \\operatorname{Fib}_{\\gcd(n + 1, n)}\\) \u3002 \u66f4\u76f8\u51cf\u635f\u672f \u00b6 \u66f4\u76f8\u51cf\u635f\u672f\u7684\u6027\u8d28\u4e00\u822c\u7528\u4e8e\u63a8\u5bfc\u5173\u4e8e \\(\\gcd\\) \u7684\u6027\u8d28\uff0c\u672c\u8eab\u901f\u5ea6\u4e0d\u5feb\u3002 \u4f46\u662f\u57fa\u4e8e\u66f4\u76f8\u51cf\u635f\u672f\u7684 Stein \u7b97\u6cd5 / Binary GCD \u7684\u901f\u5ea6\u53cd\u800c\u6bd4\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u5feb\u4e86\u3002 \u57fa\u7840\u5f62\u5f0f \u00b6 \u6709\u6027\u8d28\uff0c \\[ \\gcd(a,b)=\\gcd(a-b,b),a\\ge b \\] \u6216\u8005\uff0c \\[ \\gcd(a,b)=\\gcd(|a-b|,\\min\\{a,b\\}) \\] \u6839\u636e\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u6c42\u89e3\uff0c\u4f46\u662f\u4f1a\u88ab\u5361\uff08\u4f8b\u5982 \\(a\\gg b\\) \uff09\u3002 Stein \u7b97\u6cd5 / Binary GCD \u00b6 \u8fd9\u4e24\u4e2a\u662f\u4e00\u4e2a\u4e1c\u897f\uff0c\u8be6\u89c1 Algorithmica / HPC \u3002 \u6211\u4eec\u76f4\u63a5\u8ba8\u8bba \\(a,b\\) \u5173\u4e8e \\(2\\) \u7684\u540c\u4f59\u7c7b\u3002 \u5982\u679c \\(2\\mid a,2\\mid b\\) \uff0c\u90a3\u4e48 \\(\\gcd(a,b)=2\\gcd(a/2,b/2)\\) \uff0c\u8fd9\u662f\u663e\u7136\u7684\u3002 \u5426\u5219\uff0c\u82e5\u5176\u4e2d\u4e00\u4e2a\u4e0d\u5b58\u5728 \\(2\\) \u7684\u56e0\u5b50\uff08\u94a6\u5b9a\u4e3a \\(b\\) \uff09\uff0c\u56e0\u6b64 \\(\\gcd(a,b)=\\gcd(a/2,b)\\) \u3002 \u5426\u5219\uff0c\u8fdb\u884c\u66f4\u76f8\u51cf\u635f\u672f\u4e00\u6b21\uff0c\u90a3\u4e48 \\(a-b\\equiv0\\pmod2\\) \u53c8\u662f\u663e\u7136\u7684\u3002 \u56e0\u4e3a\u6bcf\u4e00\u6b21\u4e00\u5b9a\u4f1a\u51cf\u534a\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u662f\u4e25\u683c\u7684 \\(\\mathcal O(\\log n)\\) \u3002 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u5e38\u6570\u4f18\u5316\uff1a\u6ce8\u610f\u5230\u9664\u4ee5\u4e8c\u662f\u53ef\u4ee5\u4e00\u6b21\u6027\u9664\u5b8c\u7684\u3002 \u4f7f\u7528 \\(\\text{\\_\\_builtin\\_ctz}\\) \u8ba1\u7b97\u4e8c\u8fdb\u5236\u8868\u793a\u672b\u5c3e \\(0\\) \u7684\u4e2a\u6570\uff0c\u7136\u540e\u9664\u6389\u5373\u53ef\u3002 #define ctz(x) __builtin_ctz(x) int gcd(int a, int b) { if (!a | !b) return a + b; int az = ctz(a); int bz = ctz(b); int z = min(az, bz); a >>= az; b >>= bz; while (a != b) { int diff = b - a; az = ctz(diff); b = min(a, b); a = abs(diff) >> az; } return a << z; } \u6700\u5c0f\u516c\u500d\u6570 \u00b6 \u8ba1\u7b97 \u00b6 \\(\\gcd(a, b) \\times \\operatorname{lcm}(a, b) = a \\times b\\) \u3002 \u8981\u6c42\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\uff0c\u5148\u6c42\u51fa\u6700\u5927\u516c\u7ea6\u6570\u5373\u53ef\u3002 \u8bc1\u660e \u00b6 \u8bbe \\(a = p_1^{k_{a_1}}p_2^{k_{a_2}} \\dots p_s^{k_{a_s}}\\) \uff0c \\(b = p_1^{k_{b_1}}p_2^{k_{b_2}} \\dots p_s^{k_{b_s}}\\) \u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e \\(a\\) \u548c \\(b\\) \u7684\u60c5\u51b5\uff0c\u4e8c\u8005\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8e \\(p_1^{\\min(k_{a_1}, k_{b_1})}p_2^{\\min(k_{a_2}, k_{b_2})} \\dots p_s^{\\min(k_{a_s}, k_{b_s})}\\) \u3002 \u6700\u5c0f\u516c\u500d\u6570\u7b49\u4e8e \\(p_1^{\\max(k_{a_1}, k_{b_1})}p_2^{\\max(k_{a_2}, k_{b_2})} \\dots p_s^{\\max(k_{a_s}, k_{b_s})}\\) \u3002 \u7531\u4e8e \\(k_a + k_b = \\max(k_a, k_b) + \\min(k_a, k_b)\\) \uff0c \u6240\u4ee5\u5f97\u5230\u7ed3\u8bba\u662f \\(\\gcd(a, b) \\times \\operatorname{lcm}(a, b) = a \\times b\\) \u3002","title":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"math/number-theory/gcd/#_1","text":"","title":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"math/number-theory/gcd/#_2","text":"","title":"\u5b9a\u4e49"},{"location":"math/number-theory/gcd/#_3","text":"\u6700\u5927\u516c\u7ea6\u6570\u5373\u4e3a Greatest Common Divisor\uff0c\u5e38\u7f29\u5199\u4e3a gcd\u3002 \u4e00\u7ec4\u6574\u6570\u7684\u516c\u7ea6\u6570\uff0c\u662f\u6307\u540c\u65f6\u662f\u8fd9\u7ec4\u6570\u4e2d\u6bcf\u4e00\u4e2a\u6570\u7684\u7ea6\u6570\u7684\u6570\u3002 \\(\\pm 1\\) \u662f\u4efb\u610f\u4e00\u7ec4\u6574\u6570\u7684\u516c\u7ea6\u6570\uff1b \u4e00\u7ec4\u6574\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\uff0c\u662f\u6307\u6240\u6709\u516c\u7ea6\u6570\u91cc\u9762\u6700\u5927\u7684\u4e00\u4e2a\u3002 \u7279\u6b8a\u7684\uff0c\u6211\u4eec\u5b9a\u4e49 \\(\\gcd(a, 0) = a\\) \u3002","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"math/number-theory/gcd/#_4","text":"\u6700\u5c0f\u516c\u500d\u6570\u5373\u4e3a Least Common Multiple\uff0c\u5e38\u7f29\u5199\u4e3a lcm\u3002 \u4e00\u7ec4\u6574\u6570\u7684\u516c\u500d\u6570\uff0c\u662f\u6307\u540c\u65f6\u662f\u8fd9\u7ec4\u6570\u4e2d\u6bcf\u4e00\u4e2a\u6570\u7684\u500d\u6570\u7684\u6570\u3002 \\(0\\) \u662f\u4efb\u610f\u4e00\u7ec4\u6574\u6570\u7684\u516c\u500d\u6570\uff1b \u4e00\u7ec4\u6574\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\uff08Least Common Multiple, LCM\uff09\uff0c\u662f\u6307\u6240\u6709\u6b63\u7684\u516c\u500d\u6570\u91cc\u9762\uff0c\u6700\u5c0f\u7684\u4e00\u4e2a\u6570\u3002","title":"\u6700\u5c0f\u516c\u500d\u6570"},{"location":"math/number-theory/gcd/#_5","text":"\u5982\u679c\u4e24\u4e2a\u6570 \\(a\\) \u548c \\(b\\) \u6ee1\u8db3 \\(\\gcd(a, b) = 1\\) \uff0c\u6211\u4eec\u79f0 \\(a\\) \u548c \\(b\\) \u4e92\u8d28\uff0c\u8bb0\u4f5c \\(a\\perp b\\) \u3002","title":"\u4e92\u8d28"},{"location":"math/number-theory/gcd/#_6","text":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08Euclidean algorithm\uff09\uff0c\u662f\u6c42\u89e3\u4e24\u4e2a\u6570\u6700\u5927\u516c\u7ea6\u6570\u7684\u6700\u5e38\u7528\u7684\u7b97\u6cd5\u3002","title":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"math/number-theory/gcd/#_7","text":"\\(\\gcd(a, b) = \\gcd(b, a \\bmod b)\\) \u5177\u4f53\u8bc1\u660e\u89c1\uff1a OI-Wiki \u3002","title":"\u7b97\u6cd5\u601d\u60f3"},{"location":"math/number-theory/gcd/#_8","text":"int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); } \u56e0\u6b64\u4e5f\u6709\u9012\u5f52\u5199\u6cd5\uff1a int gcd(int a, int b) { int tmp; while (b != 0) tmp = a, a = b, b = tmp % b; return a; } \u5bf9\u4e8e C++14\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u4e2d\u7684 __gcd(a,b) \u51fd\u6570\u6765\u6c42\u6700\u5927\u516c\u7ea6\u6570\u3002","title":"\u4ee3\u7801"},{"location":"math/number-theory/gcd/#_9","text":"\u5728\u8f93\u5165\u4e3a\u4e24\u4e2a\u957f\u4e3a \\(n\\) \u7684\u4e8c\u8fdb\u5236\u6574\u6570\u65f6\uff0c\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \uff1b \u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u9ed8\u8ba4 \\(a, b\\) \u540c\u9636\u7684\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\log\\max(a, b))\\) \u3002 \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7684\u6700\u52a3\u65f6\u95f4\u590d\u6742\u5ea6\u60c5\u51b5\u662f \\(\\gcd(\\operatorname{Fib}_{n + 1}, \\operatorname{Fib}_n)\\) \uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \uff1b \u4f46\u662f\uff0c\u6709 \\(\\gcd(\\operatorname{Fib}_{n + 1}, \\operatorname{Fib}_n) = \\operatorname{Fib}_{\\gcd(n + 1, n)}\\) \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"math/number-theory/gcd/#_10","text":"\u66f4\u76f8\u51cf\u635f\u672f\u7684\u6027\u8d28\u4e00\u822c\u7528\u4e8e\u63a8\u5bfc\u5173\u4e8e \\(\\gcd\\) \u7684\u6027\u8d28\uff0c\u672c\u8eab\u901f\u5ea6\u4e0d\u5feb\u3002 \u4f46\u662f\u57fa\u4e8e\u66f4\u76f8\u51cf\u635f\u672f\u7684 Stein \u7b97\u6cd5 / Binary GCD \u7684\u901f\u5ea6\u53cd\u800c\u6bd4\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u5feb\u4e86\u3002","title":"\u66f4\u76f8\u51cf\u635f\u672f"},{"location":"math/number-theory/gcd/#_11","text":"\u6709\u6027\u8d28\uff0c \\[ \\gcd(a,b)=\\gcd(a-b,b),a\\ge b \\] \u6216\u8005\uff0c \\[ \\gcd(a,b)=\\gcd(|a-b|,\\min\\{a,b\\}) \\] \u6839\u636e\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u6c42\u89e3\uff0c\u4f46\u662f\u4f1a\u88ab\u5361\uff08\u4f8b\u5982 \\(a\\gg b\\) \uff09\u3002","title":"\u57fa\u7840\u5f62\u5f0f"},{"location":"math/number-theory/gcd/#stein-binary-gcd","text":"\u8fd9\u4e24\u4e2a\u662f\u4e00\u4e2a\u4e1c\u897f\uff0c\u8be6\u89c1 Algorithmica / HPC \u3002 \u6211\u4eec\u76f4\u63a5\u8ba8\u8bba \\(a,b\\) \u5173\u4e8e \\(2\\) \u7684\u540c\u4f59\u7c7b\u3002 \u5982\u679c \\(2\\mid a,2\\mid b\\) \uff0c\u90a3\u4e48 \\(\\gcd(a,b)=2\\gcd(a/2,b/2)\\) \uff0c\u8fd9\u662f\u663e\u7136\u7684\u3002 \u5426\u5219\uff0c\u82e5\u5176\u4e2d\u4e00\u4e2a\u4e0d\u5b58\u5728 \\(2\\) \u7684\u56e0\u5b50\uff08\u94a6\u5b9a\u4e3a \\(b\\) \uff09\uff0c\u56e0\u6b64 \\(\\gcd(a,b)=\\gcd(a/2,b)\\) \u3002 \u5426\u5219\uff0c\u8fdb\u884c\u66f4\u76f8\u51cf\u635f\u672f\u4e00\u6b21\uff0c\u90a3\u4e48 \\(a-b\\equiv0\\pmod2\\) \u53c8\u662f\u663e\u7136\u7684\u3002 \u56e0\u4e3a\u6bcf\u4e00\u6b21\u4e00\u5b9a\u4f1a\u51cf\u534a\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u662f\u4e25\u683c\u7684 \\(\\mathcal O(\\log n)\\) \u3002 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u5e38\u6570\u4f18\u5316\uff1a\u6ce8\u610f\u5230\u9664\u4ee5\u4e8c\u662f\u53ef\u4ee5\u4e00\u6b21\u6027\u9664\u5b8c\u7684\u3002 \u4f7f\u7528 \\(\\text{\\_\\_builtin\\_ctz}\\) \u8ba1\u7b97\u4e8c\u8fdb\u5236\u8868\u793a\u672b\u5c3e \\(0\\) \u7684\u4e2a\u6570\uff0c\u7136\u540e\u9664\u6389\u5373\u53ef\u3002 #define ctz(x) __builtin_ctz(x) int gcd(int a, int b) { if (!a | !b) return a + b; int az = ctz(a); int bz = ctz(b); int z = min(az, bz); a >>= az; b >>= bz; while (a != b) { int diff = b - a; az = ctz(diff); b = min(a, b); a = abs(diff) >> az; } return a << z; }","title":"Stein \u7b97\u6cd5 / Binary GCD"},{"location":"math/number-theory/gcd/#_12","text":"","title":"\u6700\u5c0f\u516c\u500d\u6570"},{"location":"math/number-theory/gcd/#_13","text":"\\(\\gcd(a, b) \\times \\operatorname{lcm}(a, b) = a \\times b\\) \u3002 \u8981\u6c42\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u516c\u500d\u6570\uff0c\u5148\u6c42\u51fa\u6700\u5927\u516c\u7ea6\u6570\u5373\u53ef\u3002","title":"\u8ba1\u7b97"},{"location":"math/number-theory/gcd/#_14","text":"\u8bbe \\(a = p_1^{k_{a_1}}p_2^{k_{a_2}} \\dots p_s^{k_{a_s}}\\) \uff0c \\(b = p_1^{k_{b_1}}p_2^{k_{b_2}} \\dots p_s^{k_{b_s}}\\) \u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e \\(a\\) \u548c \\(b\\) \u7684\u60c5\u51b5\uff0c\u4e8c\u8005\u7684\u6700\u5927\u516c\u7ea6\u6570\u7b49\u4e8e \\(p_1^{\\min(k_{a_1}, k_{b_1})}p_2^{\\min(k_{a_2}, k_{b_2})} \\dots p_s^{\\min(k_{a_s}, k_{b_s})}\\) \u3002 \u6700\u5c0f\u516c\u500d\u6570\u7b49\u4e8e \\(p_1^{\\max(k_{a_1}, k_{b_1})}p_2^{\\max(k_{a_2}, k_{b_2})} \\dots p_s^{\\max(k_{a_s}, k_{b_s})}\\) \u3002 \u7531\u4e8e \\(k_a + k_b = \\max(k_a, k_b) + \\min(k_a, k_b)\\) \uff0c \u6240\u4ee5\u5f97\u5230\u7ed3\u8bba\u662f \\(\\gcd(a, b) \\times \\operatorname{lcm}(a, b) = a \\times b\\) \u3002","title":"\u8bc1\u660e"},{"location":"math/number-theory/inverse/","text":"\u4e58\u6cd5\u9006\u5143 \u00b6 \u5b9a\u4e49 \u00b6 \u6709\u7406\u6570\u53d6\u6a21 \u00b6 \u52a0\u51cf\u6cd5\uff1a \\((a \\pm b) \\bmod p = (a \\bmod p \\pm b \\bmod p) \\bmod p\\) . \u4e58\u6cd5\uff1a \\((a \\times b) \\bmod p = (a \\bmod p \\times b \\bmod p) \\bmod p\\) . \u90a3\u9664\u6cd5\u5462\uff1f\u4e3e\u4f8b\u53ef\u77e5 \\(\\dfrac{a}{b} \\bmod p\\) \u4e0d\u4e00\u5b9a\u7b49\u4e8e \\(\\dfrac{a \\bmod p}{b \\bmod p}\\) . \u5982 \\(\\dfrac{10}{2} \\bmod 3 = 5 \\bmod 3 = 2\\) \uff0c\u800c \\(\\dfrac{10 \\bmod 3}{2 \\bmod 3} = \\dfrac{1}{2}\\) . \u6a21\u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143 \u00b6 \u82e5 \\(\\dfrac{a}{b} \\bmod p = (a \\times x) \\bmod p\\) \uff0c \u5219\u79f0 \\(x\\) \u4e3a \\(b\\) \u7684\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\uff08\u6216 \\(x\\) \u4e3a \\(b \\bmod p\\) \u7684\u9006\u5143\uff09\uff0c\u8bb0\u4f5c \\(x = b^{-1}\\) . \u6839\u636e \\(\\dfrac{a}{b} \\bmod p = (a \\times x) \\bmod p\\) \u53ef\u4ee5\u5199\u51fa\u540c\u4f59\u65b9\u7a0b\uff1a \\(\\dfrac{a}{b} \\equiv a \\times x \\pmod{p}\\) \u4e24\u8fb9\u540c\u65f6\u4e58\u4ee5 \\(\\dfrac{b}{a}\\) \u53ef\u4ee5\u5f97\u5230\uff1a \\(bx \\equiv 1 \\pmod{p}\\) \uff1b\u6216\u8005\u53ef\u4ee5\u7406\u89e3\u4e3a \\(x\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7b49\u4ef7\u4e8e \\(\\dfrac{1}{b}\\) \u3002 \u8f6c\u5316\u4e00\u4e0b\u5c31\u662f \\(xb + kp = 1\\) \uff0c\u800c \\(xb + kp = \\gcd(b, p)\\) \uff0c \u56e0\u6b64\u9006\u5143\u5e76\u4e0d\u662f\u666e\u904d\u5b58\u5728\u7684\uff0c\u6761\u4ef6\u662f \\(\\gcd(b, p) = 1\\) \uff0c\u4e5f\u5c31\u662f \\(b\\) \u4e0e \\(p\\) \u4e92\u8d28\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u9006\u5143 \u00b6 \u4e0a\u9762\u5df2\u7ecf\u5f97\u5230\u4e86 \\(bx \\equiv 1 \\pmod{p}\\) \u53ca \\(xb + kp = 1\\) \uff0c\u800c\u8fd9\u5c31\u662f\u4e0a\u9762\u8bb2\u5230\u7684\u7279\u6b8a\u5316\u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u9006\u5143\u3002 \u8be6\u89c1\u4e0a\u9762\uff1a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u3002 \u5feb\u901f\u5e42\u6c42\u9006\u5143 \u00b6 \u524d\u7f6e\u77e5\u8bc6\uff1a\u5feb\u901f\u5e42\u3001\u8d39\u9a6c\u5c0f\u5b9a\u7406 \u82e5 \\(p\\) \u4e3a\u7d20\u6570\uff0c \\(\\gcd(a, p) = 1\\) \uff0c\u5219 \\(a^{p - 1} \\equiv 1 \\pmod{p}\\) \u3002 \u8bc1\u660e\u89c1\uff1a https://oi-wiki.org/math/number-theory/fermat/ \u4ec5\u5f53 \\(p\\) \u662f\u8d28\u6570\u65f6\uff0c\u5373 \\(\\gcd(b, p) = 1\\) \u65f6\uff0c\u4e5f\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u6c42\u9006\u5143\uff1a \u4e0a\u9762\u5df2\u5f97 \\(bx \\equiv 1 \\pmod{p}\\) \uff0c \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c \\(b^{p - 1} \\equiv 1 \\pmod p\\) \uff0c \u53ef\u4ee5\u8f6c\u5316\u4e3a \\(b \\times b^{p - 2} \\equiv 1 \\pmod p\\) \uff0c \u800c\u6211\u4eec\u8981\u6c42\u7684\u662f \\(bx \\equiv 1 \\pmod p\\) \u3002 \u56e0\u6b64\u53ef\u5f97 \\(x = b^{p - 2}\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 // s1: exgcd int inv1(int a, const int p) { int x, y; exgcd(a, p, x, y); return (x % p + p) % p; } // s2: pow int inv2(int a, const int p) { return quick_pow(a, p - 2, p); } \u7ebf\u6027\u6c42\u9006\u5143 \u00b6 \u7ebf\u6027\u6c42\u4efb\u610f \\(n\\) \u4e2a\u6570\u7684\u9006\u5143 \u00b6 \u7ed9\u5b9a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(a\\) \uff08 \\(1 \\le a_i < p\\) \uff09\uff0c\u6c42\u5e8f\u5217\u6bcf\u4e2a\u6570\u7684\u9006\u5143\u3002 \\(a_i\\) \uff0c\u8868\u793a\u539f\u5e8f\u5217\uff0c\u5373\u7ed9\u5b9a\u7684\u5e8f\u5217\uff1b \\(\\displaystyle s_i = \\prod_{i = 1}^n a_i\\) \uff0c\u8868\u793a\u539f\u5e8f\u5217\u7684\u524d\u7f00\u79ef\u3002 \\(inv_i = {a_i}^{-1}\\) \uff0c\u8868\u793a\u539f\u5e8f\u5217\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u5373\u5f85\u6c42\u7684\u5e8f\u5217\uff1b \\(\\displaystyle sv_i = {s_i}^{-1} = \\prod_{i = 1}^n sv_i\\) \uff0c\u8868\u793a\u539f\u5e8f\u5217\u524d\u7f00\u79ef\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u6839\u636e\u9006\u5143\u6027\u8d28\u4e5f\u7b49\u4e8e\u539f\u5e8f\u5217\u4e58\u6cd5\u9006\u5143\u7684\u524d\u7f00\u79ef\u3002 \u8ba1\u7b97\u7ed9\u5b9a\u5e8f\u5217 \\(a_i\\) \u7684\u524d\u7f00\u79ef\uff0c\u8bb0\u4e3a \\(s_i\\) \uff1b \u4f7f\u7528\u5feb\u901f\u5e42\u6216\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\u8ba1\u7b97 \\(s_n\\) \u7684\u9006\u5143\uff0c\u8bb0\u4e3a \\(sv_n\\) \uff1b \u56e0\u4e3a \\(sv_n\\) \u662f \\(n\\) \u4e2a\u6570\u7684\u79ef\u7684\u9006\u5143\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u628a\u5b83\u4e58\u4e0a \\(a_n\\) \u65f6\uff0c\u5c31\u4f1a\u548c \\(a_n\\) \u7684\u9006\u5143\u62b5\u6d88\uff1b\u8fd9\u6837\u5c31\u5f97\u5230\u4e86 \\(a_1\\) \u5230 \\(a_{n - 1}\\) \u7684\u79ef\u9006\u5143\uff0c\u8bb0\u4e3a \\(sv_{n - 1}\\) \uff1b \u540c\u7406\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8ba1\u7b97\u51fa\u6240\u6709\u7684 \\(sv_i\\) \uff0c\u4e8e\u662f \\({a_i}^{-1}\\) \u5c31\u53ef\u4ee5\u7528 \\(s_{i - 1} \\times sv_i\\) \u6c42\u5f97\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u5728 \\(O(n + \\log p)\\) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u4e86 \\(n\\) \u4e2a\u6570\u7684\u9006\u5143\u3002 // \u8ba1\u7b97\u524d\u7f00\u79ef s[0] = 1; for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * a[i] % p; // \u8ba1\u7b97\u5168\u90e8\u4e58\u6cd5\u9006\u5143\u7684\u524d\u7f00\u79ef sv[n] = quick_pow(s[n], p - 2, p); // \u9012\u63a8\u524d\u7f00\u79ef\u3001\u6c42\u5e8f\u5217\u7684\u4e58\u6cd5\u9006\u5143 for (int i = n; i >= 1; --i) sv[i - 1] = sv[i] * a[i] % p; for (int i = 1; i <= n; ++i) inv[i] = sv[i] * s[i - 1] % p; \u6765\u81ea OI-Wiki \u7684\u4ee3\u7801 s[0] = 1; for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * a[i] % p; sv[n] = qpow(s[n], p - 2); // \u5f53\u7136\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528 exgcd \u6765\u6c42\u9006\u5143,\u89c6\u4e2a\u4eba\u559c\u597d\u800c\u5b9a. for (int i = n; i >= 1; --i) sv[i - 1] = sv[i] * a[i] % p; for (int i = 1; i <= n; ++i) inv[i] = sv[i] * s[i - 1] % p; \u7279\u5316\uff1a\u7ebf\u6027\u6c42 \\(1\\sim n\\) \u7684\u9006\u5143 \u00b6 \u5373\u539f\u5e8f\u5217 \\(a_i = i\\) \uff0c\u6b64\u65f6\u6709\u66f4\u52a0\u5feb\u901f\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u8bb2\uff08\u89c1 OI-Wiki \u5185\uff09\u3002 \u6211\u4eec\u5728\u6b64\u5c31\u7b80\u5316\u539f\u7a0b\u5e8f\u3002 s[0] = 1; for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * i % p; sv[n] = quick_pow(s[n], p - 2, p); for (int i = n; i >= 1; --i) sv[i - 1] = sv[i] * i % p; for (int i = 1; i <= n; ++i) inv[i] = sv[i] * s[i - 1] % p; \u4f8b\u9898 \u00b6 \u5feb\u901f\u5e42\u6c42\u9006\u5143 \u00b6 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u9898\u76ee\uff1a P2613 \u6709\u7406\u6570\u53d6\u4f59 \u3002 const ll MOD = 19260817; ll qpow(ll a, ll b, const ll p, ll res = 1) { for (; b; b >>= 1) b & 1 ? res = res * a % p, a = a *a % p : a = a * a % p; return res; } int main() { ll a = read(), b = read(); if (b == 0) printf(\"Angry!\\n\"), exit(0); ll res = a * qpow(b, MOD - 2, MOD) % MOD; printf(\"%lld\\n\", res); return 0; } \u7ebf\u6027\u6c42 \\(1\\sim n\\) \u7684\u9006\u5143 \u00b6 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u9898\u76ee\uff1a P3811 \u6a21\u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143 \u3002 typedef long long ll; const int N = 3e6 + 10; ll s[N], sv[N]; ll qpow(ll a, ll b, const ll p, ll r = 1) { for (; b; b >>= 1) b & 1 ? r = r * a % p, a = a * a % p : a = a * a % p; return r; } int main() { const int n = rr; const ll p = rr; s[0] = 1; for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * i % p; sv[n] = qpow(s[n], p - 2, p); for (int i = n; i; --i) sv[i - 1] = sv[i] * i % p; for (int i = 1; i <= n; ++i) printf(\"%lld\\n\", sv[i] * s[i - 1] % p); return 0; } \u7ebf\u6027\u6c42 \\(n\\) \u6570\u7684\u9006\u5143 \u00b6 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u9898\u76ee\uff1a P5431 \u6a21\u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143 2 \u3002 \u6c42\uff1a \\(\\sum\\limits_{i = 1}^n \\frac{k^i}{a_i}\\) . typedef long long ll; const int N = 5e6 + 10; ll a[N]; ll s[N], sv[N]; ll qpow(ll a, ll b, const ll p, ll r = 1) { for (; b; b >>= 1) b & 1 ? r = r * a % p, a = a *a % p : a = a * a % p; return r; } int main() { const int n = rr; const ll p = rr, k = rr; s[0] = 1; for (int i = 1; i <= n; ++i) a[i] = rr, s[i] = s[i - 1] * a[i] % p; sv[n] = qpow(s[n], p - 2, p); for (int i = n; i; --i) sv[i - 1] = sv[i] * a[i] % p; ll res = 0, kt = k; for (int i = 1; i <= n; ++i) res = (res + kt * (sv[i] * s[i - 1] % p) % p) % p, kt = kt * k % p; printf(\"%lld\\n\", res); return 0; } Reference \u00b6 [1] https://oi-wiki.org/math/number-theory/fermat/ [2] https://oi-wiki.org/math/number-theory/inverse/ [3] https://oi-wiki.org/math/number-theory/linear-equation/","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"math/number-theory/inverse/#_1","text":"","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"math/number-theory/inverse/#_2","text":"","title":"\u5b9a\u4e49"},{"location":"math/number-theory/inverse/#_3","text":"\u52a0\u51cf\u6cd5\uff1a \\((a \\pm b) \\bmod p = (a \\bmod p \\pm b \\bmod p) \\bmod p\\) . \u4e58\u6cd5\uff1a \\((a \\times b) \\bmod p = (a \\bmod p \\times b \\bmod p) \\bmod p\\) . \u90a3\u9664\u6cd5\u5462\uff1f\u4e3e\u4f8b\u53ef\u77e5 \\(\\dfrac{a}{b} \\bmod p\\) \u4e0d\u4e00\u5b9a\u7b49\u4e8e \\(\\dfrac{a \\bmod p}{b \\bmod p}\\) . \u5982 \\(\\dfrac{10}{2} \\bmod 3 = 5 \\bmod 3 = 2\\) \uff0c\u800c \\(\\dfrac{10 \\bmod 3}{2 \\bmod 3} = \\dfrac{1}{2}\\) .","title":"\u6709\u7406\u6570\u53d6\u6a21"},{"location":"math/number-theory/inverse/#_4","text":"\u82e5 \\(\\dfrac{a}{b} \\bmod p = (a \\times x) \\bmod p\\) \uff0c \u5219\u79f0 \\(x\\) \u4e3a \\(b\\) \u7684\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\uff08\u6216 \\(x\\) \u4e3a \\(b \\bmod p\\) \u7684\u9006\u5143\uff09\uff0c\u8bb0\u4f5c \\(x = b^{-1}\\) . \u6839\u636e \\(\\dfrac{a}{b} \\bmod p = (a \\times x) \\bmod p\\) \u53ef\u4ee5\u5199\u51fa\u540c\u4f59\u65b9\u7a0b\uff1a \\(\\dfrac{a}{b} \\equiv a \\times x \\pmod{p}\\) \u4e24\u8fb9\u540c\u65f6\u4e58\u4ee5 \\(\\dfrac{b}{a}\\) \u53ef\u4ee5\u5f97\u5230\uff1a \\(bx \\equiv 1 \\pmod{p}\\) \uff1b\u6216\u8005\u53ef\u4ee5\u7406\u89e3\u4e3a \\(x\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7b49\u4ef7\u4e8e \\(\\dfrac{1}{b}\\) \u3002 \u8f6c\u5316\u4e00\u4e0b\u5c31\u662f \\(xb + kp = 1\\) \uff0c\u800c \\(xb + kp = \\gcd(b, p)\\) \uff0c \u56e0\u6b64\u9006\u5143\u5e76\u4e0d\u662f\u666e\u904d\u5b58\u5728\u7684\uff0c\u6761\u4ef6\u662f \\(\\gcd(b, p) = 1\\) \uff0c\u4e5f\u5c31\u662f \\(b\\) \u4e0e \\(p\\) \u4e92\u8d28\u3002","title":"\u6a21\u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143"},{"location":"math/number-theory/inverse/#_5","text":"\u4e0a\u9762\u5df2\u7ecf\u5f97\u5230\u4e86 \\(bx \\equiv 1 \\pmod{p}\\) \u53ca \\(xb + kp = 1\\) \uff0c\u800c\u8fd9\u5c31\u662f\u4e0a\u9762\u8bb2\u5230\u7684\u7279\u6b8a\u5316\u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u9006\u5143\u3002 \u8be6\u89c1\u4e0a\u9762\uff1a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u3002","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u9006\u5143"},{"location":"math/number-theory/inverse/#_6","text":"\u524d\u7f6e\u77e5\u8bc6\uff1a\u5feb\u901f\u5e42\u3001\u8d39\u9a6c\u5c0f\u5b9a\u7406 \u82e5 \\(p\\) \u4e3a\u7d20\u6570\uff0c \\(\\gcd(a, p) = 1\\) \uff0c\u5219 \\(a^{p - 1} \\equiv 1 \\pmod{p}\\) \u3002 \u8bc1\u660e\u89c1\uff1a https://oi-wiki.org/math/number-theory/fermat/ \u4ec5\u5f53 \\(p\\) \u662f\u8d28\u6570\u65f6\uff0c\u5373 \\(\\gcd(b, p) = 1\\) \u65f6\uff0c\u4e5f\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u6c42\u9006\u5143\uff1a \u4e0a\u9762\u5df2\u5f97 \\(bx \\equiv 1 \\pmod{p}\\) \uff0c \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c \\(b^{p - 1} \\equiv 1 \\pmod p\\) \uff0c \u53ef\u4ee5\u8f6c\u5316\u4e3a \\(b \\times b^{p - 2} \\equiv 1 \\pmod p\\) \uff0c \u800c\u6211\u4eec\u8981\u6c42\u7684\u662f \\(bx \\equiv 1 \\pmod p\\) \u3002 \u56e0\u6b64\u53ef\u5f97 \\(x = b^{p - 2}\\) \u3002","title":"\u5feb\u901f\u5e42\u6c42\u9006\u5143"},{"location":"math/number-theory/inverse/#_7","text":"// s1: exgcd int inv1(int a, const int p) { int x, y; exgcd(a, p, x, y); return (x % p + p) % p; } // s2: pow int inv2(int a, const int p) { return quick_pow(a, p - 2, p); }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"math/number-theory/inverse/#_8","text":"","title":"\u7ebf\u6027\u6c42\u9006\u5143"},{"location":"math/number-theory/inverse/#n","text":"\u7ed9\u5b9a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(a\\) \uff08 \\(1 \\le a_i < p\\) \uff09\uff0c\u6c42\u5e8f\u5217\u6bcf\u4e2a\u6570\u7684\u9006\u5143\u3002 \\(a_i\\) \uff0c\u8868\u793a\u539f\u5e8f\u5217\uff0c\u5373\u7ed9\u5b9a\u7684\u5e8f\u5217\uff1b \\(\\displaystyle s_i = \\prod_{i = 1}^n a_i\\) \uff0c\u8868\u793a\u539f\u5e8f\u5217\u7684\u524d\u7f00\u79ef\u3002 \\(inv_i = {a_i}^{-1}\\) \uff0c\u8868\u793a\u539f\u5e8f\u5217\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u5373\u5f85\u6c42\u7684\u5e8f\u5217\uff1b \\(\\displaystyle sv_i = {s_i}^{-1} = \\prod_{i = 1}^n sv_i\\) \uff0c\u8868\u793a\u539f\u5e8f\u5217\u524d\u7f00\u79ef\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u6839\u636e\u9006\u5143\u6027\u8d28\u4e5f\u7b49\u4e8e\u539f\u5e8f\u5217\u4e58\u6cd5\u9006\u5143\u7684\u524d\u7f00\u79ef\u3002 \u8ba1\u7b97\u7ed9\u5b9a\u5e8f\u5217 \\(a_i\\) \u7684\u524d\u7f00\u79ef\uff0c\u8bb0\u4e3a \\(s_i\\) \uff1b \u4f7f\u7528\u5feb\u901f\u5e42\u6216\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6cd5\u8ba1\u7b97 \\(s_n\\) \u7684\u9006\u5143\uff0c\u8bb0\u4e3a \\(sv_n\\) \uff1b \u56e0\u4e3a \\(sv_n\\) \u662f \\(n\\) \u4e2a\u6570\u7684\u79ef\u7684\u9006\u5143\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u628a\u5b83\u4e58\u4e0a \\(a_n\\) \u65f6\uff0c\u5c31\u4f1a\u548c \\(a_n\\) \u7684\u9006\u5143\u62b5\u6d88\uff1b\u8fd9\u6837\u5c31\u5f97\u5230\u4e86 \\(a_1\\) \u5230 \\(a_{n - 1}\\) \u7684\u79ef\u9006\u5143\uff0c\u8bb0\u4e3a \\(sv_{n - 1}\\) \uff1b \u540c\u7406\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8ba1\u7b97\u51fa\u6240\u6709\u7684 \\(sv_i\\) \uff0c\u4e8e\u662f \\({a_i}^{-1}\\) \u5c31\u53ef\u4ee5\u7528 \\(s_{i - 1} \\times sv_i\\) \u6c42\u5f97\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u5728 \\(O(n + \\log p)\\) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u4e86 \\(n\\) \u4e2a\u6570\u7684\u9006\u5143\u3002 // \u8ba1\u7b97\u524d\u7f00\u79ef s[0] = 1; for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * a[i] % p; // \u8ba1\u7b97\u5168\u90e8\u4e58\u6cd5\u9006\u5143\u7684\u524d\u7f00\u79ef sv[n] = quick_pow(s[n], p - 2, p); // \u9012\u63a8\u524d\u7f00\u79ef\u3001\u6c42\u5e8f\u5217\u7684\u4e58\u6cd5\u9006\u5143 for (int i = n; i >= 1; --i) sv[i - 1] = sv[i] * a[i] % p; for (int i = 1; i <= n; ++i) inv[i] = sv[i] * s[i - 1] % p; \u6765\u81ea OI-Wiki \u7684\u4ee3\u7801 s[0] = 1; for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * a[i] % p; sv[n] = qpow(s[n], p - 2); // \u5f53\u7136\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528 exgcd \u6765\u6c42\u9006\u5143,\u89c6\u4e2a\u4eba\u559c\u597d\u800c\u5b9a. for (int i = n; i >= 1; --i) sv[i - 1] = sv[i] * a[i] % p; for (int i = 1; i <= n; ++i) inv[i] = sv[i] * s[i - 1] % p;","title":"\u7ebf\u6027\u6c42\u4efb\u610f \\(n\\) \u4e2a\u6570\u7684\u9006\u5143"},{"location":"math/number-theory/inverse/#1sim-n","text":"\u5373\u539f\u5e8f\u5217 \\(a_i = i\\) \uff0c\u6b64\u65f6\u6709\u66f4\u52a0\u5feb\u901f\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u8bb2\uff08\u89c1 OI-Wiki \u5185\uff09\u3002 \u6211\u4eec\u5728\u6b64\u5c31\u7b80\u5316\u539f\u7a0b\u5e8f\u3002 s[0] = 1; for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * i % p; sv[n] = quick_pow(s[n], p - 2, p); for (int i = n; i >= 1; --i) sv[i - 1] = sv[i] * i % p; for (int i = 1; i <= n; ++i) inv[i] = sv[i] * s[i - 1] % p;","title":"\u7279\u5316\uff1a\u7ebf\u6027\u6c42 \\(1\\sim n\\) \u7684\u9006\u5143"},{"location":"math/number-theory/inverse/#_9","text":"","title":"\u4f8b\u9898"},{"location":"math/number-theory/inverse/#_10","text":"\u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u9898\u76ee\uff1a P2613 \u6709\u7406\u6570\u53d6\u4f59 \u3002 const ll MOD = 19260817; ll qpow(ll a, ll b, const ll p, ll res = 1) { for (; b; b >>= 1) b & 1 ? res = res * a % p, a = a *a % p : a = a * a % p; return res; } int main() { ll a = read(), b = read(); if (b == 0) printf(\"Angry!\\n\"), exit(0); ll res = a * qpow(b, MOD - 2, MOD) % MOD; printf(\"%lld\\n\", res); return 0; }","title":"\u5feb\u901f\u5e42\u6c42\u9006\u5143"},{"location":"math/number-theory/inverse/#1sim-n_1","text":"\u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u9898\u76ee\uff1a P3811 \u6a21\u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143 \u3002 typedef long long ll; const int N = 3e6 + 10; ll s[N], sv[N]; ll qpow(ll a, ll b, const ll p, ll r = 1) { for (; b; b >>= 1) b & 1 ? r = r * a % p, a = a * a % p : a = a * a % p; return r; } int main() { const int n = rr; const ll p = rr; s[0] = 1; for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * i % p; sv[n] = qpow(s[n], p - 2, p); for (int i = n; i; --i) sv[i - 1] = sv[i] * i % p; for (int i = 1; i <= n; ++i) printf(\"%lld\\n\", sv[i] * s[i - 1] % p); return 0; }","title":"\u7ebf\u6027\u6c42 \\(1\\sim n\\) \u7684\u9006\u5143"},{"location":"math/number-theory/inverse/#n_1","text":"\u70b9\u51fb\u67e5\u770b\u4ee3\u7801 \u9898\u76ee\uff1a P5431 \u6a21\u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143 2 \u3002 \u6c42\uff1a \\(\\sum\\limits_{i = 1}^n \\frac{k^i}{a_i}\\) . typedef long long ll; const int N = 5e6 + 10; ll a[N]; ll s[N], sv[N]; ll qpow(ll a, ll b, const ll p, ll r = 1) { for (; b; b >>= 1) b & 1 ? r = r * a % p, a = a *a % p : a = a * a % p; return r; } int main() { const int n = rr; const ll p = rr, k = rr; s[0] = 1; for (int i = 1; i <= n; ++i) a[i] = rr, s[i] = s[i - 1] * a[i] % p; sv[n] = qpow(s[n], p - 2, p); for (int i = n; i; --i) sv[i - 1] = sv[i] * a[i] % p; ll res = 0, kt = k; for (int i = 1; i <= n; ++i) res = (res + kt * (sv[i] * s[i - 1] % p) % p) % p, kt = kt * k % p; printf(\"%lld\\n\", res); return 0; }","title":"\u7ebf\u6027\u6c42 \\(n\\) \u6570\u7684\u9006\u5143"},{"location":"math/number-theory/inverse/#reference","text":"[1] https://oi-wiki.org/math/number-theory/fermat/ [2] https://oi-wiki.org/math/number-theory/inverse/ [3] https://oi-wiki.org/math/number-theory/linear-equation/","title":"Reference"},{"location":"math/number-theory/linear-equation/","text":"\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u00b6 \u540c\u4f59 \u00b6 \u5b9a\u4e49 \u00b6 \u82e5 \\(a \\bmod m = b \\bmod m\\) \uff0c\u5219\u79f0 \\(a\\) \u4e0e \\(b\\) \u5173\u4e8e\u6a21 \\(m\\) \u540c\u4f59\uff0c\u8bb0\u4e3a \\(a \\equiv b \\pmod m\\) . \u6216\u8005\u7528\u5e26\u4f59\u9664\u6cd5\u7684\u5f62\u5f0f\uff0c \u7ed9\u5b9a\u6b63\u6574\u6570 \\(m\\) \u79f0\u4e3a\u6a21\uff0c \\(a,b\\) \u4e3a\u4efb\u610f\u4e24\u4e2a\u6574\u6570\uff0c\u6ee1\u8db3\uff1a \\[ \\def\\arraystretch{1.1} \\begin{array}{ll} a=q_1m+r_1,&0\\le r_1<m\\\\ b=q_2m+r_2,&0\\le r_2<m\\\\ \\end{array} \\] \u5219\u79f0 \\(a,b\\) \u5bf9 \\(m\\) \u540c\u4f59\u3002 \u540c\u4f59\u7684\u6027\u8d28 \u00b6 \u53cd\u8eab\u6027\uff1a \\(a \\equiv a \\pmod m\\) \uff1b \u5bf9\u79f0\u6027\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \uff0c\u5219 \\(b \\equiv a \\pmod m\\) \uff1b \u4f20\u9012\u6027\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \u3001 \\(b \\equiv c \\pmod m\\) \uff0c\u5219 \\(a \\equiv c \\pmod m\\) \uff1b \u540c\u4f59\u5f0f\u76f8\u52a0\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \u3001 \\(c \\equiv d \\pmod m\\) \uff0c\u5219 \\(a \\pm c \\equiv b \\pm d \\pmod m\\) \uff1b \u540c\u4f59\u5f0f\u76f8\u4e58\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \u3001 \\(c \\equiv d \\pmod m\\) \uff0c\u5219 \\(a \\times c \\equiv b \\times d \\pmod m\\) \uff1b \u4e58\u65b9\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \uff0c\u5219 \\(a^k \\equiv b^k \\pmod m\\) \uff1b \u9664\u6cd5\uff11\uff1a\u82e5 \\(ka \\equiv kb \\pmod{km}\\) \uff0c\u5219 \\(a \\equiv b \\pmod m\\) \uff1b \u9664\u6cd5\uff12\uff1a\u82e5 \\(ka \\equiv kb \\pmod m\\) \uff0c\u5219 \\(a \\equiv b \\pmod{m / \\gcd(k, m)}\\) \uff1b \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u00b6 \u5f62\u5f0f \u00b6 \u5173\u4e8e \\(x\\) \u7684\u65b9\u7a0b\uff0c\u5f62\u5982 \\(ax \\equiv n \\pmod b\\) \uff0c\u5219\u79f0\u4e4b\u4e3a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff08Linear Congruence Equation\uff09\u3002 \u4e00\u822c\u8981\u6c42\u6c42\u51fa\u7279\u89e3\uff0c\u6216 \\(x \\in [0, b - 1]\\) \u7684\u901a\u89e3\u3002 \u6c42\u89e3\u65b9\u6cd5 \u00b6 \u65b9\u7a0b \\(ax \\equiv n \\pmod b\\) \u53ef\u4ee5\u7406\u89e3\u4e3a \\(ax + by = n\\) \uff0c\u5176\u4e2d \\(y\\) \u4e3a\u4e00\u4e2a\u6574\u6570\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a \u56e0\u4e3a \\(ax + by = n\\) \uff0c \u6240\u4ee5 \\((ax + by) \\bmod b = n \\bmod b\\) \uff0c \u5373 \\(ax \\bmod b + by \\bmod b = n \\bmod b\\) \uff0c \u56e0\u4e3a \\(by \\bmod b = 0\\) \uff0c \u6240\u4ee5 \\(ax \\bmod b = n \\bmod b\\) \uff0c \u8f6c\u6362\u4e3a\u540c\u4f59\u65b9\u7a0b\u7684\u5f62\u5f0f\u5c31\u662f \\(ax \\equiv n \\pmod b\\) . \u56e0\u6b64\u539f\u65b9\u7a0b\u8f6c\u5316\u4e3a \\(ax + by = n\\) \uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7684\u4e8b\u60c5\u4e86\uff1b \u89e3\u7684\u5224\u65ad \u00b6 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u53ea\u80fd\u6c42\u89e3 \\(ax + by = \\gcd(a, b)\\) \u7684\u60c5\u51b5\uff0c \u6240\u4ee5\u53ea\u6709\u5f53 \\(n = k \\times \\gcd(a, b)\\) \uff0c \\(k \\in \\mathbb{Z}^+\\) \uff0c\u624d\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u89e3\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a \u53ef\u4ee5\u6c42\u51fa\u4e00\u7ec4 \\(x_0\\) \u3001 \\(y_0\\) \uff0c\u4f7f\u5f97 \\(ax_0 + by_0 = \\gcd(a, b)\\) \uff0c \u7b49\u5f0f\u4e24\u8fb9\u540c\u65f6\u4e58\u4ee5 \\(k\\) \uff0c\u4fbf\u5f97\u5230\uff1a \\(akx_0 + bky_0 = k \\times \\gcd(a, b)\\) \uff0c \u56e0\u6b64\u53ef\u5f97\u5230 \\(\\left\\{\\begin{matrix} x = kx_0 \\\\ y = ky_0\\end{matrix}\\right.\\) \uff0c \u6b64\u65f6\u4fbf\u6709 \\(ax + by = n\\) . \u7279\u89e3\u5230\u901a\u89e3 \u00b6 \u4e0b\u9762\u5047\u8bbe\u6709\u89e3\uff1a \u6211\u4eec\u5df2\u7ecf\u5c06 \\(ax \\equiv n \\pmod b\\) \u8f6c\u5316\u4e3a \\(ax + by = n\\) \uff0c\u5e76\u901a\u8fc7\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u89e3\u51fa\u6765\u4e00\u4e2a\u901a\u89e3 \\(x_0\\) . \u8bbe \\(t = \\dfrac{\\operatorname{lcm}(a, b)}{a}\\) \uff0c\u5219\u6709\u901a\u89e3 \\(x = x_0 + kt\\) \uff0c\u5176\u4e2d \\(k \\in \\mathbb{Z}\\) \u3002 \u7279\u6b8a\u5316\u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u00b6 \u8003\u8651\u65b9\u7a0b \\(ax \\equiv 1 \\pmod b\\) \uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7684 \\(n = 1\\) \u3002 \u6b64\u65f6\u5b58\u5728\u89e3\u7684\u6761\u4ef6\u4e3a \\(k \\times \\gcd(a, b) = n = 1\\) \uff0c\u4e5f\u5c31\u662f \\(k = 1\\) \u65f6\u7684\u60c5\u51b5\uff1a \\(\\gcd(a, b) = 1\\) \uff0c\u5373 \\(a\\) \u4e0e \\(b\\) \u4e92\u8d28\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u89e3 \\(ax + by = 1\\) \u4e86\u3002 \u6240\u4ee5\u6b64\u65f6\u7684\u901a\u89e3\u516c\u5f0f\u4e5f\u53ef\u4ee5\u5316\u7b80\u4e3a \\(x = x_0 + kb\\) \uff1a \u8bc1\u660e\uff1a \\(t = \\dfrac{\\operatorname{lcm}(a, b)}{a}\\) \uff0c\u800c \\(\\operatorname{lcm}(a, b) = ab\\) \uff0c\u6240\u4ee5\u5c31\u6709 \\(t = b\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 // ax = 1 (mod b) int lieu1(int a, int b) { int x, y; int d = exgcd(a, b, x, y); if (d != 1) return -1; return (x % b + b) % b; } // ax = n (mod b) int lieu(int a, int b, int n) { int x, y; int d = exgcd(a, b, x, y); if (n % d != 0) return -1; int t = b / d; return (x % t + t) % t; } Reference \u00b6 [1] https://oi-wiki.org/math/number-theory/linear-equation/","title":"\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b"},{"location":"math/number-theory/linear-equation/#_1","text":"","title":"\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b"},{"location":"math/number-theory/linear-equation/#_2","text":"","title":"\u540c\u4f59"},{"location":"math/number-theory/linear-equation/#_3","text":"\u82e5 \\(a \\bmod m = b \\bmod m\\) \uff0c\u5219\u79f0 \\(a\\) \u4e0e \\(b\\) \u5173\u4e8e\u6a21 \\(m\\) \u540c\u4f59\uff0c\u8bb0\u4e3a \\(a \\equiv b \\pmod m\\) . \u6216\u8005\u7528\u5e26\u4f59\u9664\u6cd5\u7684\u5f62\u5f0f\uff0c \u7ed9\u5b9a\u6b63\u6574\u6570 \\(m\\) \u79f0\u4e3a\u6a21\uff0c \\(a,b\\) \u4e3a\u4efb\u610f\u4e24\u4e2a\u6574\u6570\uff0c\u6ee1\u8db3\uff1a \\[ \\def\\arraystretch{1.1} \\begin{array}{ll} a=q_1m+r_1,&0\\le r_1<m\\\\ b=q_2m+r_2,&0\\le r_2<m\\\\ \\end{array} \\] \u5219\u79f0 \\(a,b\\) \u5bf9 \\(m\\) \u540c\u4f59\u3002","title":"\u5b9a\u4e49"},{"location":"math/number-theory/linear-equation/#_4","text":"\u53cd\u8eab\u6027\uff1a \\(a \\equiv a \\pmod m\\) \uff1b \u5bf9\u79f0\u6027\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \uff0c\u5219 \\(b \\equiv a \\pmod m\\) \uff1b \u4f20\u9012\u6027\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \u3001 \\(b \\equiv c \\pmod m\\) \uff0c\u5219 \\(a \\equiv c \\pmod m\\) \uff1b \u540c\u4f59\u5f0f\u76f8\u52a0\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \u3001 \\(c \\equiv d \\pmod m\\) \uff0c\u5219 \\(a \\pm c \\equiv b \\pm d \\pmod m\\) \uff1b \u540c\u4f59\u5f0f\u76f8\u4e58\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \u3001 \\(c \\equiv d \\pmod m\\) \uff0c\u5219 \\(a \\times c \\equiv b \\times d \\pmod m\\) \uff1b \u4e58\u65b9\uff1a\u82e5 \\(a \\equiv b \\pmod m\\) \uff0c\u5219 \\(a^k \\equiv b^k \\pmod m\\) \uff1b \u9664\u6cd5\uff11\uff1a\u82e5 \\(ka \\equiv kb \\pmod{km}\\) \uff0c\u5219 \\(a \\equiv b \\pmod m\\) \uff1b \u9664\u6cd5\uff12\uff1a\u82e5 \\(ka \\equiv kb \\pmod m\\) \uff0c\u5219 \\(a \\equiv b \\pmod{m / \\gcd(k, m)}\\) \uff1b","title":"\u540c\u4f59\u7684\u6027\u8d28"},{"location":"math/number-theory/linear-equation/#_5","text":"","title":"\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b"},{"location":"math/number-theory/linear-equation/#_6","text":"\u5173\u4e8e \\(x\\) \u7684\u65b9\u7a0b\uff0c\u5f62\u5982 \\(ax \\equiv n \\pmod b\\) \uff0c\u5219\u79f0\u4e4b\u4e3a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff08Linear Congruence Equation\uff09\u3002 \u4e00\u822c\u8981\u6c42\u6c42\u51fa\u7279\u89e3\uff0c\u6216 \\(x \\in [0, b - 1]\\) \u7684\u901a\u89e3\u3002","title":"\u5f62\u5f0f"},{"location":"math/number-theory/linear-equation/#_7","text":"\u65b9\u7a0b \\(ax \\equiv n \\pmod b\\) \u53ef\u4ee5\u7406\u89e3\u4e3a \\(ax + by = n\\) \uff0c\u5176\u4e2d \\(y\\) \u4e3a\u4e00\u4e2a\u6574\u6570\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a \u56e0\u4e3a \\(ax + by = n\\) \uff0c \u6240\u4ee5 \\((ax + by) \\bmod b = n \\bmod b\\) \uff0c \u5373 \\(ax \\bmod b + by \\bmod b = n \\bmod b\\) \uff0c \u56e0\u4e3a \\(by \\bmod b = 0\\) \uff0c \u6240\u4ee5 \\(ax \\bmod b = n \\bmod b\\) \uff0c \u8f6c\u6362\u4e3a\u540c\u4f59\u65b9\u7a0b\u7684\u5f62\u5f0f\u5c31\u662f \\(ax \\equiv n \\pmod b\\) . \u56e0\u6b64\u539f\u65b9\u7a0b\u8f6c\u5316\u4e3a \\(ax + by = n\\) \uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7684\u4e8b\u60c5\u4e86\uff1b","title":"\u6c42\u89e3\u65b9\u6cd5"},{"location":"math/number-theory/linear-equation/#_8","text":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u53ea\u80fd\u6c42\u89e3 \\(ax + by = \\gcd(a, b)\\) \u7684\u60c5\u51b5\uff0c \u6240\u4ee5\u53ea\u6709\u5f53 \\(n = k \\times \\gcd(a, b)\\) \uff0c \\(k \\in \\mathbb{Z}^+\\) \uff0c\u624d\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u89e3\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a \u53ef\u4ee5\u6c42\u51fa\u4e00\u7ec4 \\(x_0\\) \u3001 \\(y_0\\) \uff0c\u4f7f\u5f97 \\(ax_0 + by_0 = \\gcd(a, b)\\) \uff0c \u7b49\u5f0f\u4e24\u8fb9\u540c\u65f6\u4e58\u4ee5 \\(k\\) \uff0c\u4fbf\u5f97\u5230\uff1a \\(akx_0 + bky_0 = k \\times \\gcd(a, b)\\) \uff0c \u56e0\u6b64\u53ef\u5f97\u5230 \\(\\left\\{\\begin{matrix} x = kx_0 \\\\ y = ky_0\\end{matrix}\\right.\\) \uff0c \u6b64\u65f6\u4fbf\u6709 \\(ax + by = n\\) .","title":"\u89e3\u7684\u5224\u65ad"},{"location":"math/number-theory/linear-equation/#_9","text":"\u4e0b\u9762\u5047\u8bbe\u6709\u89e3\uff1a \u6211\u4eec\u5df2\u7ecf\u5c06 \\(ax \\equiv n \\pmod b\\) \u8f6c\u5316\u4e3a \\(ax + by = n\\) \uff0c\u5e76\u901a\u8fc7\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u89e3\u51fa\u6765\u4e00\u4e2a\u901a\u89e3 \\(x_0\\) . \u8bbe \\(t = \\dfrac{\\operatorname{lcm}(a, b)}{a}\\) \uff0c\u5219\u6709\u901a\u89e3 \\(x = x_0 + kt\\) \uff0c\u5176\u4e2d \\(k \\in \\mathbb{Z}\\) \u3002","title":"\u7279\u89e3\u5230\u901a\u89e3"},{"location":"math/number-theory/linear-equation/#_10","text":"\u8003\u8651\u65b9\u7a0b \\(ax \\equiv 1 \\pmod b\\) \uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7684 \\(n = 1\\) \u3002 \u6b64\u65f6\u5b58\u5728\u89e3\u7684\u6761\u4ef6\u4e3a \\(k \\times \\gcd(a, b) = n = 1\\) \uff0c\u4e5f\u5c31\u662f \\(k = 1\\) \u65f6\u7684\u60c5\u51b5\uff1a \\(\\gcd(a, b) = 1\\) \uff0c\u5373 \\(a\\) \u4e0e \\(b\\) \u4e92\u8d28\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u89e3 \\(ax + by = 1\\) \u4e86\u3002 \u6240\u4ee5\u6b64\u65f6\u7684\u901a\u89e3\u516c\u5f0f\u4e5f\u53ef\u4ee5\u5316\u7b80\u4e3a \\(x = x_0 + kb\\) \uff1a \u8bc1\u660e\uff1a \\(t = \\dfrac{\\operatorname{lcm}(a, b)}{a}\\) \uff0c\u800c \\(\\operatorname{lcm}(a, b) = ab\\) \uff0c\u6240\u4ee5\u5c31\u6709 \\(t = b\\) \u3002","title":"\u7279\u6b8a\u5316\u7684\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b"},{"location":"math/number-theory/linear-equation/#_11","text":"// ax = 1 (mod b) int lieu1(int a, int b) { int x, y; int d = exgcd(a, b, x, y); if (d != 1) return -1; return (x % b + b) % b; } // ax = n (mod b) int lieu(int a, int b, int n) { int x, y; int d = exgcd(a, b, x, y); if (n % d != 0) return -1; int t = b / d; return (x % t + t) % t; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"math/number-theory/linear-equation/#reference","text":"[1] https://oi-wiki.org/math/number-theory/linear-equation/","title":"Reference"},{"location":"math/number-theory/prime/","text":"\u7d20\u6570 \u00b6 \u5b9a\u4e49 \u00b6 \u5c0f\u5b66\u6570\u5b66\u3002 \u7d20\u6570\u5b9a\u4e49\u4e3a\u9664\u4e86 \\(1\\) \u548c\u5b83\u672c\u8eab\u5916\u6ca1\u6709\u6b63\u56e0\u5b50\u7684\u6570\uff0c\u53cd\u4e4b\u4e3a\u5408\u6570\u3002 \u4e00\u822c\u4e0d\u8ba8\u8bba\u5c0f\u4e8e \\(2\\) \u7684\u6570\uff0c\u7279\u6b8a\u5b9a\u4e49 \\(1\\) \u65e2\u4e0d\u662f\u7d20\u6570\u4e5f\u4e0d\u662f\u5408\u6570\u3002 \u62d3\u5c55\uff1a \u53cd\u7d20\u6570\uff1a\u5bf9\u4e8e\u53cd\u7d20\u6570 \\(n\\) \uff0c\u4efb\u4f55\u5c0f\u4e8e \\(n\\) \u7684\u6b63\u6570\u7684\u7ea6\u6570\u4e2a\u6570\u90fd\u5c0f\u4e8e \\(n\\) \u7684\u7ea6\u6570\u4e2a\u6570\u3002 Emirp\uff08\u4e5f\u8bd1\u4e3a\u53cd\u7d20\u6570\uff09\uff1a\u9010\u4f4d\u53cd\u8f6c\u540e\u662f\u4e0d\u540c\u7d20\u6570\u7684\u7d20\u6570\uff08\u5982 \\(149\\) \u548c \\(941\\) \uff0c\u4f46 \\(101\\) \u4e0d\u662f\uff09\u3002 \u6709\u8da3\u7684\u4e1c\u897f \u00b6 \u7d20\u6570\u8ba1\u6570\u51fd\u6570 \u00b6 \u7d20\u6570\u8ba1\u6570\u51fd\u6570\uff1a\u8868\u793a\u5c0f\u4e8e\u6216\u7b49\u4e8e\u67d0\u4e2a\u5b9e\u6570 \\(x\\) \u7684\u7d20\u6570\u7684\u4e2a\u6570\u7684\u51fd\u6570\uff0c\u8bb0\u4e3a \\(\\pi(x)\\) \u3002\u5373\uff0c \\[ \\pi(x)=\\sum_{i=1}^n[i\\in\\mathbb P] \\] \u540c\u65f6\uff0c\u7528 \\(\\pi(x;N,r)\\) \u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u8d28\u6570\u4e2d\uff0c\u6a21 \\(N\\) \u540c\u4f59\u4e8e \\(r\\) \u7684\u8d28\u6570\u4e2a\u6570\u3002\u5373\uff0c \\[ \\pi(x;N,r)=\\sum_{i=1}^n[i\\in\\mathbb P][i\\equiv r\\,(N)] \\] \u5176\u4e2d\uff0c \\(\\mathbb P\\) \u8868\u793a\u8d28\u6570\u96c6\u5408\uff0c\u6b64\u5904\u7701\u7565 \\(\\bmod\\) \u7b26\u53f7\uff0c\u6ce8\u610f\u662f\u8868\u793a\u540c\u4f59\u3002 \u7d20\u6570\u5b9a\u7406 \u00b6 \u7d20\u6570\u5b9a\u7406\uff0c\u63cf\u8ff0\u4e86\u7d20\u6570\u5728\u81ea\u7136\u6570\u4e2d\u5206\u5e03\u7684\u6e10\u8fdb\u60c5\u51b5\u3002 \u5b83\u7ed9\u51fa\u968f\u7740\u6570\u5b57\u7684\u589e\u5927\uff0c\u7d20\u6570\u7684\u5bc6\u5ea6\u9010\u6e10\u964d\u4f4e\u7684\u76f4\u89c9\u7684\u5f62\u5f0f\u5316\u63cf\u8ff0\u3002 \u4e00\u822c\u63cf\u8ff0\uff1a \\[ \\pi(x)\\sim{x\\over\\ln x} \\] \u6216\u8005\uff0c \\[ \\lim_{x\\to\\infty}\\left({\\pi(x)\\over x/\\ln x}\\right)=1 \\] \u72c4\u5229\u514b\u96f7\u5b9a\u7406 \u00b6 \u72c4\u5229\u514b\u96f7\u5b9a\u7406\uff0c\u662f\u5173\u4e8e\u8d28\u6570\u5728\u540c\u4f59\u7c7b\u4e2d\u5206\u5e03\u7684\u5b9a\u7406\u3002 \u5176\u7b80\u5316\u5f62\u5f0f\u4e3a\uff08\u8fd9\u662f 3b1b \u7684\u5f62\u5f0f\u5316\u7248\u672c\uff09\uff1a \\[ \\lim_{x\\to\\infty}\\left({\\text{\\# of primes $p$ where $p\\le x$ and $p\\equiv r\\pmod N$}\\over\\text{\\# of primes $p$ where $p\\le x$}}\\right)={1\\over\\varphi(p)} \\\\[0.5em] \\text{$N$ is any number, $r$ is coprime to $N$} \\] \u8fd9\u4e2a\u73a9\u610f\u6ca1\u5fc5\u8981\u7ffb\u8bd1\u4e86\uff0c\u6bd5\u7adf\u770b\u7b26\u53f7\u4e5f\u80fd\u770b\u61c2\u3002 \u5f62\u5f0f\u5316\u7684\u7248\u672c\uff1a \\[ \\lim_{x\\to\\infty}\\left({\\pi(x;N,r)\\over\\pi(x)}\\right)={1\\over\\varphi(p)} \\\\[0.5em] \\text{$N$ is any number, $r$ is coprime to $N$} \\] \u5176\u4e2d\uff0c \\(\\varphi\\) \u4e3a\u6b27\u62c9\u51fd\u6570\u3002 \u4f2f\u7279\u5170-\u5207\u6bd4\u96ea\u592b\u5b9a\u7406 \u00b6 \u5b83\u6307\u51fa\uff0c\u5bf9\u4e8e\u6574\u6570 \\(n>3\\) \uff0c\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u8d28\u6570 \\(p\\) \u6ee1\u8db3 \\(n<p<2n-2\\) \u3002 \u4e00\u4e2a\u7ecf\u5178\u7684\u5f31\u5316\u7248\u672c\u662f\uff0c\u5728 \\([n,2n]\\) \u4e4b\u95f4\u4e00\u5b9a\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u8d28\u6570\uff0c\u8bc1\u660e\u7565\u3002 \u7d20\u6570\u5224\u65ad \u00b6 \u8bd5\u9664\u6cd5\uff1a\u627e \\(n\\) \u53ef\u80fd\u5b58\u5728\u7684\u56e0\u5b50 \\(k\\) \uff0c\u5224\u65ad \\(k \\mid n\\) \u3002 \u7d20\u6027\u6d4b\u8bd5\uff1a\u5728\u4e0d\u7528\u5206\u89e3\u56e0\u6570\u7684\u65b9\u5f0f\uff0c\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\u3002 \u7d20\u6027\u6d4b\u8bd5\u5206\u4e3a\u4e24\u79cd\uff1a \u786e\u5b9a\u6027\u6d4b\u8bd5\uff1a\uff08\u7edd\u5bf9\u6b63\u786e\u7684\uff09\u786e\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\u3002 \u6982\u7387\u6027\u6d4b\u8bd5\uff1a\u5177\u6709\u8f83\u9ad8\u6b63\u786e\u7387\uff0c\u4f46\u662f\u4e0d\u5b8c\u5168\u4fdd\u8bc1\u51c6\u786e\u3002 \u8bd5\u9664\u6cd5 \u00b6 \u66b4\u529b \u00b6 \u6211\u4eec\u6839\u636e\u5b9a\u4e49\uff0c\u679a\u4e3e \\([2,n-1]\\) \u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u5224\u65ad\u662f\u5426\u6574\u9664\uff0c bool isPrime(int n) { if (n <= 1) return false; for (int i = 2; i < n; ++i) if (n % i == 0) return false; return true; } \u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f \\(\\mathcal O(n^2)\\) \u7684\u3002 \u4f18\u5316 \u00b6 \u6ce8\u610f\u5230\u5982\u679c \\(x\\) \u662f \\(n\\) \u7684\u56e0\u6570\uff0c\u90a3\u4e48 \\(n/x\\) \u4e5f\u662f\u3002 \u6211\u4eec\u94a6\u5b9a\uff0c \\[ \\begin{aligned} x&\\le\\frac{n}{x}\\\\ x^2&\\le n\\\\ x&\\le\\sqrt{n} \\end{aligned} \\] \u4e5f\u5c31\u662f\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e \\([2,\\lfloor\\sqrt n\\rfloor]\\) \u5373\u53ef\u3002 bool isPrime(int n) { if (n <= 1) return false; for (int i = 2; 1ll * i * i <= n; ++i) if (n % i == 0) return false; return true; } \u5e38\u6570\u4f18\u5316 \u00b6 \u6ce8\u610f\u5230\u4e00\u4e2a \\(>3\\) \u7684\u8d28\u6570\uff0c\u6a21 \\(6\\) \u53ea\u53ef\u80fd\u7b49\u4e8e \\(1,5\\) \u3002 \u800c\u6b64\u65f6\u6211\u4eec\u4e5f\u53ea\u9700\u8981\u5224\u65ad\u6a21 \\(5+6k,7+6k,k\\in\\mathbb N\\) \u5373\u53ef\u3002 bool isPrime(int n) { if (n <= 1) return false; if (n <= 3) return true; if (n % 6 != 1 && n % 6 != 5) return false; for (int i = 5; 1ll * i * i <= n; i += 6) if (n % i == 0 || n % (i + 2) == 0) return false; return true; } \u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f \\(\\mathcal O(\\sqrt n)\\) \u7684\uff0c\u4f46\u662f\u5e26 \\(1/3\\) \u7684\u5e38\u6570\u3002 Fermat \u7d20\u6027\u68c0\u9a8c \u00b6 \u6211\u4eec\u77e5\u9053\u6709\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a \\(a^{p-1} \\equiv 1 \\pmod p\\) \uff08 \\(p \\in \\mathbb P,a \\perp p\\) \uff09\u3002 \u636e\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\u8d39\u9a6c\u5c0f\u5b9a\u7406\u7684\u9006\u5426\u547d\u9898\uff1a \u82e5\u6709 \\(a \\perp p\\) \u4e14 \\(a^{p - 1} \\not\\equiv 1 \\pmod p\\) \uff0c\u5219 \\(p\\) \u4e00\u5b9a\u4e0d\u662f\u7d20\u6570\u3002 Fermat \u7d20\u6027\u6d4b\u8bd5\u7684\u6b63\u786e\u6027 \u9006\u5426\u547d\u9898\u4e0d\u610f\u5473\u7740\u9006\u547d\u9898\u6210\u7acb\uff0c\u56e0\u6b64\uff0c\u6ee1\u8db3\u4e0a\u4e00\u547d\u9898\u7684\uff0c\u4e0d\u4e00\u5b9a\u5b8c\u5168\u662f\u7d20\u6570\u3002 \u6b64\u7c7b\u6ee1\u8db3\u8d39\u9a6c\u5c0f\u5b9a\u7406\u9006\u5426\u547d\u9898\uff0c\u4f46\u4e0d\u662f\u7d20\u6570\u7684\u6570\uff0c\u79f0\u4e3a Carmichael \u6570\u3002 \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\uff08\u5e76\u4e0d\u6b63\u786e\u7684\uff09\u8d39\u9a6c\u5c0f\u5b9a\u7406\u9006\u5b9a\u7406\uff0c\u5224\u5b9a\u4e00\u4e2a\u7d20\u6570\u3002 \u5177\u4f53\u7684\uff0c\u6211\u4eec\u4e00\u822c\u4ece \\([2,n-1]\\) \u4e2d\u6311\u9009\u57fa \\(a\\) \u5224\u65ad \\(a^{n-1}\\equiv\\pmod n\\) \u662f\u5426\u6210\u7acb\u3002 \u5047\u8bbe\u6211\u4eec\u9009\u62e9 \\(k\\) \u4e2a\u6570\uff0c\u90a3\u4e48\u4f7f\u7528\u5feb\u901f\u5e42\u5b9e\u73b0\uff0c \u4e0d\u8003\u8651\u9ad8\u7cbe\u5ea6\u7684\u590d\u6742\u5ea6\uff0cFermat \u7d20\u6027\u6d4b\u8bd5\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n\\log n)\\) \u7684\u3002 Miller-Rabin \u7d20\u6027\u68c0\u9a8c \u00b6 Miller\u2013Rabin \u7d20\u6027\u6d4b\u8bd5\u662f\u6839\u636e\u8d39\u9a6c\u6d4b\u8bd5\u548c\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u4f18\u5316\u5f97\u5230\u7684\u3002 \u5176\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(k \\log n)\\) \uff0c\u8868\u793a\u5bf9 \\(n\\) \u8fdb\u884c \\(k\\) \u6b21\u6d4b\u8bd5\u3002 \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406 \u00b6 \u5982\u679c \\(p\\) \u662f\u5947\u7d20\u6570\uff08\u53ea\u6709\u7d20\u6570 \\(2\\) \u4e0d\u662f\u5947\u7d20\u6570\uff09\uff0c\u5219: \\[ x^2 \\equiv 1 \\pmod p \\] \u7684\u89e3\u4e3a \\[ x \\equiv \\pm1 \\pmod p \\] \u8bc1\u660e \u5e73\u65b9\u5dee\u516c\u5f0f\u5c55\u5f00\u5373\u53ef\uff1a \\[ \\begin{array}{rcl} x^2 &\\equiv& 1 \\pmod p\\\\ x^2-1 &\\equiv& 0 \\pmod p\\\\ (x+1)(x-1) &\\equiv& 0 \\pmod p \\quad\\square \\end{array} \\] \u8fc7\u7a0b \u00b6 \u5047\u8bbe \\(n\\) \u662f\u5947\u7d20\u6570\uff08\u7279\u5224 \\(2\\) \u5373\u53ef\uff09\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 \\(n-1\\) \u662f\u5076\u6570\uff0c\u5373\uff0c \\[ n-1=2^sd,\\text{with $d$ odd.} \\] \u7531\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c \\[ \\begin{aligned} a^{n-1}&\\equiv1\\pmod n\\\\ a^{2^sd}-1&\\equiv0\\pmod n\\\\ (a^{2^{s-1}d}-1)(a^{2^{s-1}d}+1)&\\equiv0\\pmod n\\\\ (a^{2^{s-2}d}-1)(a^{2^{s-2}d}+1)(a^{2^{s-1}d}+1)&\\equiv0\\pmod n\\\\ \\dots\\\\ (a^d-1)(a^d+1)\\dots(a^{2^{s-2}d}+1)(a^{2^{s-1}d}+1)&\\equiv0\\pmod n \\end{aligned} \\] \u4e5f\u5c31\u662f\u8bf4\u82e5 \\(n\\) \u901a\u8fc7\u4e86\u8be5\u6b21\u6d4b\u8bd5\uff0c\u6709\uff0c \\[ \\begin{aligned} a^d&\\equiv1\\pmod n\\\\ a^{2^rd}&\\equiv-1\\pmod n,r\\in[0,s-1] \\end{aligned} \\] \u6ee1\u8db3\u5176\u4e00\u3002 \u6211\u4eec\u7ed3\u5408\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u76f8\u5f53\u4e8e\uff0c\u5bf9 \\[ a^{n-1}\\equiv a^{2^sd}\\equiv1\\pmod n \\] \u4e0d\u65ad\u5f00\u6839\uff0c\u5982\u679c \\(n\\) \u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u662f \\(\\pm1\\) \uff0c \u5982\u679c\u5f00\u5230\u4e86 \\(-1\\) \u90a3\u4e48\u610f\u5473\u7740\u6ee1\u8db3\u4e0b\u5f0f\uff0c\u901a\u8fc7\u6d4b\u8bd5\u3002 \u5982\u679c\u6700\u540e\u5f00\u5230\u4e86 \\(1\\) \u90a3\u4e48\u610f\u5473\u7740\u6ee1\u8db3\u4e0a\u5f0f\uff0c\u901a\u8fc7\u6d4b\u8bd5\u3002 \u5426\u5219\u4e0d\u901a\u8fc7\u6d4b\u8bd5\uff0c \\(n\\) \u4e00\u5b9a\u4e0d\u662f\u7d20\u6570\u3002 \u6211\u4eec\u79f0\u4f7f \\(n\\) \u4e0d\u901a\u8fc7\u6d4b\u8bd5\u7684 \\(a\\) \u4e3a\u8bc1\u660e \\(n\\) \u662f\u5408\u6570\u7684\u51ed\u8bc1\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u79cd\u51ed\u8bc1\uff0c\u90a3\u4e48\u79f0\u8fd9\u4e9b \\(a\\) \u53ef\u80fd\u4e3a\u8bc1\u660e \\(n\\) \u662f\u7d20\u6570\u7684\u5f3a\u4f2a\u8bc1\u3002 \u6bcf\u4e2a\u5947\u5408\u6570\u7684\u51ed\u8bc1\u53ef\u80fd\u5f88\u591a\uff0c\u4f46\u662f\u8981\u627e\u5230\u8fd9\u4e9b\u4e8b\u5f88\u56f0\u96be\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u4e00\u822c\u968f\u673a\u9009\u62e9\u82e5\u5e72\u4e2a\u6570\u5b57 \\(a\\in[2,n-1]\\) \u8fdb\u884c\u6d4b\u8bd5\uff0c\u6b63\u786e\u6027\u6bd4\u8f83\u9ad8\u3002 \u76f8\u5bf9\u786e\u5b9a\u6027\u7684\u505a\u6cd5 \u8be6\u89c1\uff1a https://miller-rabin.appspot.com/ \u3002 \u5bf9\u4e8e \\(32\\) \u4f4d\u6574\u5f62\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6d4b\u8bd5 \\(2,3,5,7\\) \u8fd9\u56db\u4e2a\u5e95\u6570\u5373\u53ef\u3002 \u5bf9\u4e8e \\(64\\) \u4f4d\u6574\u5f62\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6d4b\u8bd5\u524d \\(12\\) \u4e2a\u7d20\u6570 \\(2,3,5,7,11,13,17,19,23,29,31,37\\) \u5373\u53ef\u3002 \u8fd9\u4e9b\u662f\u7ecf\u8fc7\u9a8c\u8bc1\u7684\uff0c\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 using u64 = uint64_t; using u128 = __uint128_t; u64 Pow(u64 a, u64 b, u64 p) { u64 r = 1; for (; b; b >>= 1) { if (b & 1) r = (u128)r * a % p; a = (u128)a * a % p; } return r; } bool Miller_Rabin(u64 a, u64 n, u64 d, int r) { u64 k = Pow(a, d, n); if (k == 1) return true; for (int i = 0; i < r; ++i) { if (k == n - 1) return true; k = (u128)k * k % n; } return false; } vector<int> pri{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37}; bool isPrime(u64 n) { if (n < 3 || n % 2 == 0) return n == 2; int r = __builtin_ctzll(n - 1); u64 d = (n - 1) >> r; for (int i : pri) { if (n == i) return true; if (!Miller_Rabin(i, n, d, r)) return false; } return true; } Reference \u00b6 [1] https://oi-wiki.org/math/number-theory/prime/ [2] https://www.luogu.com.cn/blog/wangrx/miller-rabin","title":"\u7d20\u6570"},{"location":"math/number-theory/prime/#_1","text":"","title":"\u7d20\u6570"},{"location":"math/number-theory/prime/#_2","text":"\u5c0f\u5b66\u6570\u5b66\u3002 \u7d20\u6570\u5b9a\u4e49\u4e3a\u9664\u4e86 \\(1\\) \u548c\u5b83\u672c\u8eab\u5916\u6ca1\u6709\u6b63\u56e0\u5b50\u7684\u6570\uff0c\u53cd\u4e4b\u4e3a\u5408\u6570\u3002 \u4e00\u822c\u4e0d\u8ba8\u8bba\u5c0f\u4e8e \\(2\\) \u7684\u6570\uff0c\u7279\u6b8a\u5b9a\u4e49 \\(1\\) \u65e2\u4e0d\u662f\u7d20\u6570\u4e5f\u4e0d\u662f\u5408\u6570\u3002 \u62d3\u5c55\uff1a \u53cd\u7d20\u6570\uff1a\u5bf9\u4e8e\u53cd\u7d20\u6570 \\(n\\) \uff0c\u4efb\u4f55\u5c0f\u4e8e \\(n\\) \u7684\u6b63\u6570\u7684\u7ea6\u6570\u4e2a\u6570\u90fd\u5c0f\u4e8e \\(n\\) \u7684\u7ea6\u6570\u4e2a\u6570\u3002 Emirp\uff08\u4e5f\u8bd1\u4e3a\u53cd\u7d20\u6570\uff09\uff1a\u9010\u4f4d\u53cd\u8f6c\u540e\u662f\u4e0d\u540c\u7d20\u6570\u7684\u7d20\u6570\uff08\u5982 \\(149\\) \u548c \\(941\\) \uff0c\u4f46 \\(101\\) \u4e0d\u662f\uff09\u3002","title":"\u5b9a\u4e49"},{"location":"math/number-theory/prime/#_3","text":"","title":"\u6709\u8da3\u7684\u4e1c\u897f"},{"location":"math/number-theory/prime/#_4","text":"\u7d20\u6570\u8ba1\u6570\u51fd\u6570\uff1a\u8868\u793a\u5c0f\u4e8e\u6216\u7b49\u4e8e\u67d0\u4e2a\u5b9e\u6570 \\(x\\) \u7684\u7d20\u6570\u7684\u4e2a\u6570\u7684\u51fd\u6570\uff0c\u8bb0\u4e3a \\(\\pi(x)\\) \u3002\u5373\uff0c \\[ \\pi(x)=\\sum_{i=1}^n[i\\in\\mathbb P] \\] \u540c\u65f6\uff0c\u7528 \\(\\pi(x;N,r)\\) \u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u8d28\u6570\u4e2d\uff0c\u6a21 \\(N\\) \u540c\u4f59\u4e8e \\(r\\) \u7684\u8d28\u6570\u4e2a\u6570\u3002\u5373\uff0c \\[ \\pi(x;N,r)=\\sum_{i=1}^n[i\\in\\mathbb P][i\\equiv r\\,(N)] \\] \u5176\u4e2d\uff0c \\(\\mathbb P\\) \u8868\u793a\u8d28\u6570\u96c6\u5408\uff0c\u6b64\u5904\u7701\u7565 \\(\\bmod\\) \u7b26\u53f7\uff0c\u6ce8\u610f\u662f\u8868\u793a\u540c\u4f59\u3002","title":"\u7d20\u6570\u8ba1\u6570\u51fd\u6570"},{"location":"math/number-theory/prime/#_5","text":"\u7d20\u6570\u5b9a\u7406\uff0c\u63cf\u8ff0\u4e86\u7d20\u6570\u5728\u81ea\u7136\u6570\u4e2d\u5206\u5e03\u7684\u6e10\u8fdb\u60c5\u51b5\u3002 \u5b83\u7ed9\u51fa\u968f\u7740\u6570\u5b57\u7684\u589e\u5927\uff0c\u7d20\u6570\u7684\u5bc6\u5ea6\u9010\u6e10\u964d\u4f4e\u7684\u76f4\u89c9\u7684\u5f62\u5f0f\u5316\u63cf\u8ff0\u3002 \u4e00\u822c\u63cf\u8ff0\uff1a \\[ \\pi(x)\\sim{x\\over\\ln x} \\] \u6216\u8005\uff0c \\[ \\lim_{x\\to\\infty}\\left({\\pi(x)\\over x/\\ln x}\\right)=1 \\]","title":"\u7d20\u6570\u5b9a\u7406"},{"location":"math/number-theory/prime/#_6","text":"\u72c4\u5229\u514b\u96f7\u5b9a\u7406\uff0c\u662f\u5173\u4e8e\u8d28\u6570\u5728\u540c\u4f59\u7c7b\u4e2d\u5206\u5e03\u7684\u5b9a\u7406\u3002 \u5176\u7b80\u5316\u5f62\u5f0f\u4e3a\uff08\u8fd9\u662f 3b1b \u7684\u5f62\u5f0f\u5316\u7248\u672c\uff09\uff1a \\[ \\lim_{x\\to\\infty}\\left({\\text{\\# of primes $p$ where $p\\le x$ and $p\\equiv r\\pmod N$}\\over\\text{\\# of primes $p$ where $p\\le x$}}\\right)={1\\over\\varphi(p)} \\\\[0.5em] \\text{$N$ is any number, $r$ is coprime to $N$} \\] \u8fd9\u4e2a\u73a9\u610f\u6ca1\u5fc5\u8981\u7ffb\u8bd1\u4e86\uff0c\u6bd5\u7adf\u770b\u7b26\u53f7\u4e5f\u80fd\u770b\u61c2\u3002 \u5f62\u5f0f\u5316\u7684\u7248\u672c\uff1a \\[ \\lim_{x\\to\\infty}\\left({\\pi(x;N,r)\\over\\pi(x)}\\right)={1\\over\\varphi(p)} \\\\[0.5em] \\text{$N$ is any number, $r$ is coprime to $N$} \\] \u5176\u4e2d\uff0c \\(\\varphi\\) \u4e3a\u6b27\u62c9\u51fd\u6570\u3002","title":"\u72c4\u5229\u514b\u96f7\u5b9a\u7406"},{"location":"math/number-theory/prime/#-","text":"\u5b83\u6307\u51fa\uff0c\u5bf9\u4e8e\u6574\u6570 \\(n>3\\) \uff0c\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u8d28\u6570 \\(p\\) \u6ee1\u8db3 \\(n<p<2n-2\\) \u3002 \u4e00\u4e2a\u7ecf\u5178\u7684\u5f31\u5316\u7248\u672c\u662f\uff0c\u5728 \\([n,2n]\\) \u4e4b\u95f4\u4e00\u5b9a\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u8d28\u6570\uff0c\u8bc1\u660e\u7565\u3002","title":"\u4f2f\u7279\u5170-\u5207\u6bd4\u96ea\u592b\u5b9a\u7406"},{"location":"math/number-theory/prime/#_7","text":"\u8bd5\u9664\u6cd5\uff1a\u627e \\(n\\) \u53ef\u80fd\u5b58\u5728\u7684\u56e0\u5b50 \\(k\\) \uff0c\u5224\u65ad \\(k \\mid n\\) \u3002 \u7d20\u6027\u6d4b\u8bd5\uff1a\u5728\u4e0d\u7528\u5206\u89e3\u56e0\u6570\u7684\u65b9\u5f0f\uff0c\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\u3002 \u7d20\u6027\u6d4b\u8bd5\u5206\u4e3a\u4e24\u79cd\uff1a \u786e\u5b9a\u6027\u6d4b\u8bd5\uff1a\uff08\u7edd\u5bf9\u6b63\u786e\u7684\uff09\u786e\u5b9a\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\u3002 \u6982\u7387\u6027\u6d4b\u8bd5\uff1a\u5177\u6709\u8f83\u9ad8\u6b63\u786e\u7387\uff0c\u4f46\u662f\u4e0d\u5b8c\u5168\u4fdd\u8bc1\u51c6\u786e\u3002","title":"\u7d20\u6570\u5224\u65ad"},{"location":"math/number-theory/prime/#_8","text":"","title":"\u8bd5\u9664\u6cd5"},{"location":"math/number-theory/prime/#_9","text":"\u6211\u4eec\u6839\u636e\u5b9a\u4e49\uff0c\u679a\u4e3e \\([2,n-1]\\) \u7684\u6bcf\u4e00\u4e2a\u6570\uff0c\u5224\u65ad\u662f\u5426\u6574\u9664\uff0c bool isPrime(int n) { if (n <= 1) return false; for (int i = 2; i < n; ++i) if (n % i == 0) return false; return true; } \u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f \\(\\mathcal O(n^2)\\) \u7684\u3002","title":"\u66b4\u529b"},{"location":"math/number-theory/prime/#_10","text":"\u6ce8\u610f\u5230\u5982\u679c \\(x\\) \u662f \\(n\\) \u7684\u56e0\u6570\uff0c\u90a3\u4e48 \\(n/x\\) \u4e5f\u662f\u3002 \u6211\u4eec\u94a6\u5b9a\uff0c \\[ \\begin{aligned} x&\\le\\frac{n}{x}\\\\ x^2&\\le n\\\\ x&\\le\\sqrt{n} \\end{aligned} \\] \u4e5f\u5c31\u662f\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e \\([2,\\lfloor\\sqrt n\\rfloor]\\) \u5373\u53ef\u3002 bool isPrime(int n) { if (n <= 1) return false; for (int i = 2; 1ll * i * i <= n; ++i) if (n % i == 0) return false; return true; }","title":"\u4f18\u5316"},{"location":"math/number-theory/prime/#_11","text":"\u6ce8\u610f\u5230\u4e00\u4e2a \\(>3\\) \u7684\u8d28\u6570\uff0c\u6a21 \\(6\\) \u53ea\u53ef\u80fd\u7b49\u4e8e \\(1,5\\) \u3002 \u800c\u6b64\u65f6\u6211\u4eec\u4e5f\u53ea\u9700\u8981\u5224\u65ad\u6a21 \\(5+6k,7+6k,k\\in\\mathbb N\\) \u5373\u53ef\u3002 bool isPrime(int n) { if (n <= 1) return false; if (n <= 3) return true; if (n % 6 != 1 && n % 6 != 5) return false; for (int i = 5; 1ll * i * i <= n; i += 6) if (n % i == 0 || n % (i + 2) == 0) return false; return true; } \u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f \\(\\mathcal O(\\sqrt n)\\) \u7684\uff0c\u4f46\u662f\u5e26 \\(1/3\\) \u7684\u5e38\u6570\u3002","title":"\u5e38\u6570\u4f18\u5316"},{"location":"math/number-theory/prime/#fermat","text":"\u6211\u4eec\u77e5\u9053\u6709\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a \\(a^{p-1} \\equiv 1 \\pmod p\\) \uff08 \\(p \\in \\mathbb P,a \\perp p\\) \uff09\u3002 \u636e\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\u8d39\u9a6c\u5c0f\u5b9a\u7406\u7684\u9006\u5426\u547d\u9898\uff1a \u82e5\u6709 \\(a \\perp p\\) \u4e14 \\(a^{p - 1} \\not\\equiv 1 \\pmod p\\) \uff0c\u5219 \\(p\\) \u4e00\u5b9a\u4e0d\u662f\u7d20\u6570\u3002 Fermat \u7d20\u6027\u6d4b\u8bd5\u7684\u6b63\u786e\u6027 \u9006\u5426\u547d\u9898\u4e0d\u610f\u5473\u7740\u9006\u547d\u9898\u6210\u7acb\uff0c\u56e0\u6b64\uff0c\u6ee1\u8db3\u4e0a\u4e00\u547d\u9898\u7684\uff0c\u4e0d\u4e00\u5b9a\u5b8c\u5168\u662f\u7d20\u6570\u3002 \u6b64\u7c7b\u6ee1\u8db3\u8d39\u9a6c\u5c0f\u5b9a\u7406\u9006\u5426\u547d\u9898\uff0c\u4f46\u4e0d\u662f\u7d20\u6570\u7684\u6570\uff0c\u79f0\u4e3a Carmichael \u6570\u3002 \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\uff08\u5e76\u4e0d\u6b63\u786e\u7684\uff09\u8d39\u9a6c\u5c0f\u5b9a\u7406\u9006\u5b9a\u7406\uff0c\u5224\u5b9a\u4e00\u4e2a\u7d20\u6570\u3002 \u5177\u4f53\u7684\uff0c\u6211\u4eec\u4e00\u822c\u4ece \\([2,n-1]\\) \u4e2d\u6311\u9009\u57fa \\(a\\) \u5224\u65ad \\(a^{n-1}\\equiv\\pmod n\\) \u662f\u5426\u6210\u7acb\u3002 \u5047\u8bbe\u6211\u4eec\u9009\u62e9 \\(k\\) \u4e2a\u6570\uff0c\u90a3\u4e48\u4f7f\u7528\u5feb\u901f\u5e42\u5b9e\u73b0\uff0c \u4e0d\u8003\u8651\u9ad8\u7cbe\u5ea6\u7684\u590d\u6742\u5ea6\uff0cFermat \u7d20\u6027\u6d4b\u8bd5\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n\\log n)\\) \u7684\u3002","title":"Fermat \u7d20\u6027\u68c0\u9a8c"},{"location":"math/number-theory/prime/#miller-rabin","text":"Miller\u2013Rabin \u7d20\u6027\u6d4b\u8bd5\u662f\u6839\u636e\u8d39\u9a6c\u6d4b\u8bd5\u548c\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u4f18\u5316\u5f97\u5230\u7684\u3002 \u5176\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(k \\log n)\\) \uff0c\u8868\u793a\u5bf9 \\(n\\) \u8fdb\u884c \\(k\\) \u6b21\u6d4b\u8bd5\u3002","title":"Miller-Rabin \u7d20\u6027\u68c0\u9a8c"},{"location":"math/number-theory/prime/#_12","text":"\u5982\u679c \\(p\\) \u662f\u5947\u7d20\u6570\uff08\u53ea\u6709\u7d20\u6570 \\(2\\) \u4e0d\u662f\u5947\u7d20\u6570\uff09\uff0c\u5219: \\[ x^2 \\equiv 1 \\pmod p \\] \u7684\u89e3\u4e3a \\[ x \\equiv \\pm1 \\pmod p \\] \u8bc1\u660e \u5e73\u65b9\u5dee\u516c\u5f0f\u5c55\u5f00\u5373\u53ef\uff1a \\[ \\begin{array}{rcl} x^2 &\\equiv& 1 \\pmod p\\\\ x^2-1 &\\equiv& 0 \\pmod p\\\\ (x+1)(x-1) &\\equiv& 0 \\pmod p \\quad\\square \\end{array} \\]","title":"\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406"},{"location":"math/number-theory/prime/#_13","text":"\u5047\u8bbe \\(n\\) \u662f\u5947\u7d20\u6570\uff08\u7279\u5224 \\(2\\) \u5373\u53ef\uff09\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 \\(n-1\\) \u662f\u5076\u6570\uff0c\u5373\uff0c \\[ n-1=2^sd,\\text{with $d$ odd.} \\] \u7531\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c \\[ \\begin{aligned} a^{n-1}&\\equiv1\\pmod n\\\\ a^{2^sd}-1&\\equiv0\\pmod n\\\\ (a^{2^{s-1}d}-1)(a^{2^{s-1}d}+1)&\\equiv0\\pmod n\\\\ (a^{2^{s-2}d}-1)(a^{2^{s-2}d}+1)(a^{2^{s-1}d}+1)&\\equiv0\\pmod n\\\\ \\dots\\\\ (a^d-1)(a^d+1)\\dots(a^{2^{s-2}d}+1)(a^{2^{s-1}d}+1)&\\equiv0\\pmod n \\end{aligned} \\] \u4e5f\u5c31\u662f\u8bf4\u82e5 \\(n\\) \u901a\u8fc7\u4e86\u8be5\u6b21\u6d4b\u8bd5\uff0c\u6709\uff0c \\[ \\begin{aligned} a^d&\\equiv1\\pmod n\\\\ a^{2^rd}&\\equiv-1\\pmod n,r\\in[0,s-1] \\end{aligned} \\] \u6ee1\u8db3\u5176\u4e00\u3002 \u6211\u4eec\u7ed3\u5408\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u76f8\u5f53\u4e8e\uff0c\u5bf9 \\[ a^{n-1}\\equiv a^{2^sd}\\equiv1\\pmod n \\] \u4e0d\u65ad\u5f00\u6839\uff0c\u5982\u679c \\(n\\) \u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u662f \\(\\pm1\\) \uff0c \u5982\u679c\u5f00\u5230\u4e86 \\(-1\\) \u90a3\u4e48\u610f\u5473\u7740\u6ee1\u8db3\u4e0b\u5f0f\uff0c\u901a\u8fc7\u6d4b\u8bd5\u3002 \u5982\u679c\u6700\u540e\u5f00\u5230\u4e86 \\(1\\) \u90a3\u4e48\u610f\u5473\u7740\u6ee1\u8db3\u4e0a\u5f0f\uff0c\u901a\u8fc7\u6d4b\u8bd5\u3002 \u5426\u5219\u4e0d\u901a\u8fc7\u6d4b\u8bd5\uff0c \\(n\\) \u4e00\u5b9a\u4e0d\u662f\u7d20\u6570\u3002 \u6211\u4eec\u79f0\u4f7f \\(n\\) \u4e0d\u901a\u8fc7\u6d4b\u8bd5\u7684 \\(a\\) \u4e3a\u8bc1\u660e \\(n\\) \u662f\u5408\u6570\u7684\u51ed\u8bc1\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u79cd\u51ed\u8bc1\uff0c\u90a3\u4e48\u79f0\u8fd9\u4e9b \\(a\\) \u53ef\u80fd\u4e3a\u8bc1\u660e \\(n\\) \u662f\u7d20\u6570\u7684\u5f3a\u4f2a\u8bc1\u3002 \u6bcf\u4e2a\u5947\u5408\u6570\u7684\u51ed\u8bc1\u53ef\u80fd\u5f88\u591a\uff0c\u4f46\u662f\u8981\u627e\u5230\u8fd9\u4e9b\u4e8b\u5f88\u56f0\u96be\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u4e00\u822c\u968f\u673a\u9009\u62e9\u82e5\u5e72\u4e2a\u6570\u5b57 \\(a\\in[2,n-1]\\) \u8fdb\u884c\u6d4b\u8bd5\uff0c\u6b63\u786e\u6027\u6bd4\u8f83\u9ad8\u3002 \u76f8\u5bf9\u786e\u5b9a\u6027\u7684\u505a\u6cd5 \u8be6\u89c1\uff1a https://miller-rabin.appspot.com/ \u3002 \u5bf9\u4e8e \\(32\\) \u4f4d\u6574\u5f62\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6d4b\u8bd5 \\(2,3,5,7\\) \u8fd9\u56db\u4e2a\u5e95\u6570\u5373\u53ef\u3002 \u5bf9\u4e8e \\(64\\) \u4f4d\u6574\u5f62\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6d4b\u8bd5\u524d \\(12\\) \u4e2a\u7d20\u6570 \\(2,3,5,7,11,13,17,19,23,29,31,37\\) \u5373\u53ef\u3002 \u8fd9\u4e9b\u662f\u7ecf\u8fc7\u9a8c\u8bc1\u7684\uff0c\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u3002 \u70b9\u51fb\u67e5\u770b\u4ee3\u7801 using u64 = uint64_t; using u128 = __uint128_t; u64 Pow(u64 a, u64 b, u64 p) { u64 r = 1; for (; b; b >>= 1) { if (b & 1) r = (u128)r * a % p; a = (u128)a * a % p; } return r; } bool Miller_Rabin(u64 a, u64 n, u64 d, int r) { u64 k = Pow(a, d, n); if (k == 1) return true; for (int i = 0; i < r; ++i) { if (k == n - 1) return true; k = (u128)k * k % n; } return false; } vector<int> pri{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37}; bool isPrime(u64 n) { if (n < 3 || n % 2 == 0) return n == 2; int r = __builtin_ctzll(n - 1); u64 d = (n - 1) >> r; for (int i : pri) { if (n == i) return true; if (!Miller_Rabin(i, n, d, r)) return false; } return true; }","title":"\u8fc7\u7a0b"},{"location":"math/number-theory/prime/#reference","text":"[1] https://oi-wiki.org/math/number-theory/prime/ [2] https://www.luogu.com.cn/blog/wangrx/miller-rabin","title":"Reference"},{"location":"math/number-theory/qpow/","text":"\u5feb\u901f\u5e42 \u00b6 \u57fa\u7840\u5feb\u901f\u5e42 \u00b6 template<typename T> struct quick_pow { static constexpr T pow(T a, T b, T m) { T r = 1; for (a %= m; b--;) r = r * a % m; return r; } static constexpr T qpow(T a, T b, T m) { T r = 1; for (a %= m; b; b >>= 1) { if (b & 1) r = r * a % m; a = a * a % m; } return r % m; } static constexpr T spow(T a, const string& b, T m) { T res = a, ans = 1; for (auto it = b.rbegin(); it != b.rend(); ++it) { int x = *it - '0'; ans = ans * qpow(res, x, m) % m; res = qpow(res, 10, m); } return ans; } }; \u7ed3\u5408\u6570\u8bba\u77e5\u8bc6 \u00b6 \u5495\u5495\u5495","title":"\u5feb\u901f\u5e42"},{"location":"math/number-theory/qpow/#_1","text":"","title":"\u5feb\u901f\u5e42"},{"location":"math/number-theory/qpow/#_2","text":"template<typename T> struct quick_pow { static constexpr T pow(T a, T b, T m) { T r = 1; for (a %= m; b--;) r = r * a % m; return r; } static constexpr T qpow(T a, T b, T m) { T r = 1; for (a %= m; b; b >>= 1) { if (b & 1) r = r * a % m; a = a * a % m; } return r % m; } static constexpr T spow(T a, const string& b, T m) { T res = a, ans = 1; for (auto it = b.rbegin(); it != b.rend(); ++it) { int x = *it - '0'; ans = ans * qpow(res, x, m) % m; res = qpow(res, 10, m); } return ans; } };","title":"\u57fa\u7840\u5feb\u901f\u5e42"},{"location":"math/number-theory/qpow/#_3","text":"\u5495\u5495\u5495","title":"\u7ed3\u5408\u6570\u8bba\u77e5\u8bc6"}]}